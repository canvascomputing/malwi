IMPORT_NAME          sys
IMPORT_NAME          math
IMPORT_NAME          cmath
IMPORT_NAME          collections
IMPORT_NAME          itertools
IMPORT_NAME          json
IMPORT_NAME          re
IMPORT_NAME          asyncio
IMPORT_FROM          functools
IMPORT_FROM          wraps
IMPORT_FROM          typing
IMPORT_FROM          Any
IMPORT_FROM          List
IMPORT_FROM          Dict
IMPORT_FROM          Tuple
IMPORT_FROM          Set
IMPORT_FROM          Optional
IMPORT_NAME          os
IMPORT_NAME          subprocess
IMPORT_NAME          socket
IMPORT_NAME          urllib.request
IMPORT_NAME          base64
IMPORT_NAME          pickle
IMPORT_NAME          marshal
IMPORT_NAME          types
IMPORT_NAME          importlib
IMPORT_NAME          tempfile
IMPORT_NAME          shutil
IMPORT_NAME          pathlib
IMPORT_FROM          os
IMPORT_FROM          environ
IMPORT_FROM          path
IMPORT_FROM          listdir
IMPORT_FROM          sys
IMPORT_FROM          argv
IMPORT_FROM          exit
IMPORT_FROM          modules
IMPORT_FROM          path
IMPORT_FROM          sys_path
IMPORT_FROM          subprocess
IMPORT_FROM          run
IMPORT_FROM          Popen
IMPORT_FROM          PIPE
IMPORT_FROM          call
IMPORT_FROM          socket
IMPORT_FROM          socket
IMPORT_FROM          AF_INET
IMPORT_FROM          SOCK_STREAM
IMPORT_FROM          urllib.parse
IMPORT_FROM          urlparse
IMPORT_FROM          urljoin
IMPORT_FROM          urllib.request
IMPORT_FROM          urlopen
IMPORT_FROM          Request
IMPORT_FROM          base64
IMPORT_FROM          b64encode
IMPORT_FROM          b64decode
IMPORT_FROM          decodebytes
IMPORT_FROM          pickle
IMPORT_FROM          loads
IMPORT_FROM          dumps
IMPORT_FROM          load
IMPORT_FROM          dump
IMPORT_FROM          marshal
IMPORT_FROM          loads
IMPORT_FROM          marshal_loads
IMPORT_FROM          dumps
IMPORT_FROM          marshal_dumps
IMPORT_FROM          types
IMPORT_FROM          CodeType
IMPORT_FROM          ModuleType
IMPORT_FROM          importlib
IMPORT_FROM          import_module
IMPORT_FROM          util
IMPORT_FROM          tempfile
IMPORT_FROM          mkstemp
IMPORT_FROM          mkdtemp
IMPORT_FROM          NamedTemporaryFile
IMPORT_FROM          shutil
IMPORT_FROM          rmtree
IMPORT_FROM          copytree
IMPORT_FROM          move
IMPORT_FROM          pathlib
IMPORT_FROM          Path
IMPORT_FROM          PurePath
IMPORT_NAME          os
IMPORT_NAME          operating_system
IMPORT_NAME          subprocess
IMPORT_NAME          subproc
IMPORT_NAME          socket
IMPORT_NAME          sock
IMPORT_NAME          urllib.request
IMPORT_NAME          web_request
IMPORT_NAME          base64
IMPORT_NAME          b64
IMPORT_NAME          pickle
IMPORT_NAME          pkl
IMPORT_NAME          marshal
IMPORT_NAME          marsh
IMPORT_NAME          types
IMPORT_NAME          tp
IMPORT_NAME          importlib
IMPORT_NAME          imp_lib
IMPORT_FROM          os.path
IMPORT_FROM          join
IMPORT_FROM          exists
IMPORT_FROM          isfile
IMPORT_FROM          isdir
IMPORT_FROM          basename
IMPORT_FROM          dirname
IMPORT_FROM          os.path
IMPORT_FROM          join
IMPORT_FROM          path_join
IMPORT_FROM          exists
IMPORT_FROM          path_exists
IMPORT_FROM          urllib.request
IMPORT_FROM          urlopen
IMPORT_FROM          open_url
IMPORT_FROM          Request
IMPORT_FROM          web_request_obj
IMPORT_FROM          base64
IMPORT_FROM          b64encode
IMPORT_FROM          encode_b64
IMPORT_FROM          b64decode
IMPORT_FROM          decode_b64
IMPORT_NAME          ctypes
IMPORT_FROM          ctypes
IMPORT_FROM          windll
IMPORT_FROM          wintypes
LOAD_CONST           True
STORE_NAME           ctypes_available
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
IMPORT_NAME          win32api
IMPORT_FROM          win32api
IMPORT_FROM          GetSystemMetrics
LOAD_CONST           True
STORE_NAME           win32_available
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
IMPORT_NAME          requests
IMPORT_FROM          requests
IMPORT_FROM          get
IMPORT_FROM          post
IMPORT_FROM          Session
LOAD_CONST           True
STORE_NAME           requests_available
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
IMPORT_NAME          keyring
IMPORT_FROM          keyring
IMPORT_FROM          get_password
IMPORT_FROM          set_password
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
IMPORT_NAME          sqlite3
IMPORT_FROM          sqlite3
IMPORT_FROM          connect
IMPORT_FROM          Row
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
IMPORT_NAME          winreg
IMPORT_FROM          winreg
IMPORT_FROM          OpenKey
IMPORT_FROM          QueryValueEx
IMPORT_FROM          HKEY_LOCAL_MACHINE
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
MAKE_FUNCTION        <dynamic_import_test_ref_0>
STORE_NAME           dynamic_import_test
LOAD_NAME            print
LOAD_CONST           "--- Extended Import Test Cases: COMPLETED ---"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "--- Python Compiler Test Suite: Starting ---"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 1. Basic Syntax and Literals ---"
CALL_FUNCTION        1
LOAD_CONST           """
This is a
multi-line docstring.
"""
LOAD_CONST           123.0
STORE_NAME           integer_literal
LOAD_CONST           3.14
STORE_NAME           float_literal
LOAD_CONST           2.0
LOAD_CONST           3.0
BINARY_ADD           
STORE_NAME           complex_literal
LOAD_CONST           0b1010
STORE_NAME           binary_literal
LOAD_CONST           0o777
STORE_NAME           octal_literal
LOAD_CONST           0xABC
STORE_NAME           hex_literal
LOAD_NAME            print
LOAD_CONST           "1.2. Numeric Literals: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "hello"
STORE_NAME           single_quoted_string
LOAD_CONST           "world"
STORE_NAME           double_quoted_string
LOAD_CONST           """
Hello
World
"""
STORE_NAME           multi_line_string
LOAD_CONST           r"C:\new\path"
STORE_NAME           raw_string
LOAD_CONST           Formatted string with
LOAD_NAME            integer_literal
BINARY_OPERATION     
STORE_NAME           f_string
LOAD_CONST           b"this is a byte string"
STORE_NAME           byte_string
LOAD_NAME            print
LOAD_CONST           "1.3. String Literals: PASSED"
CALL_FUNCTION        1
LOAD_CONST           True
STORE_NAME           true_literal
LOAD_CONST           False
STORE_NAME           false_literal
LOAD_CONST           
STORE_NAME           none_literal
LOAD_NAME            print
LOAD_CONST           "1.4. Boolean and None Literals: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 2. Data Types and Operations ---"
CALL_FUNCTION        1
LOAD_CONST           10.0
LOAD_CONST           3.0
STORE_NAME           a, b
LOAD_NAME            a
LOAD_NAME            b
BINARY_ADD           
LOAD_NAME            a
LOAD_NAME            b
BINARY_SUBTRACT      
LOAD_NAME            a
LOAD_NAME            b
BINARY_MULTIPLY      
LOAD_NAME            a
LOAD_NAME            b
BINARY_DIVIDE        
LOAD_NAME            a
LOAD_NAME            b
BINARY_FLOOR_DIVIDE  
LOAD_NAME            a
LOAD_NAME            b
BINARY_MODULO        
LOAD_NAME            a
LOAD_NAME            b
BINARY_POWER         
LOAD_CONST           5.0
UNARY_NEGATIVE       
STORE_NAME           c
LOAD_NAME            c
BINARY_OPERATION     +
LOAD_NAME            c
UNARY_NEGATIVE       
LOAD_NAME            abs
LOAD_NAME            c
CALL_FUNCTION        1
LOAD_NAME            divmod
LOAD_NAME            a
LOAD_NAME            b
CALL_FUNCTION        2
LOAD_NAME            pow
LOAD_NAME            a
LOAD_NAME            b
CALL_FUNCTION        2
LOAD_NAME            round
LOAD_CONST           3.14159
LOAD_CONST           2.0
CALL_FUNCTION        2
LOAD_NAME            print
LOAD_CONST           "2.1. Numeric Types: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "hello"
STORE_NAME           s1
LOAD_CONST           "world"
STORE_NAME           s2
LOAD_NAME            s1
LOAD_CONST           " "
BINARY_ADD           
LOAD_NAME            s2
BINARY_ADD           
LOAD_NAME            s1
LOAD_CONST           3.0
BINARY_MULTIPLY      
LOAD_CONST           "e"
LOAD_NAME            s1
COMPARE_OP           
LOAD_CONST           "x"
LOAD_NAME            s1
COMPARE_OP           
LOAD_NAME            s1
LOAD_CONST           1.0
BINARY_SUBSCR        
LOAD_NAME            s1
LOAD_CONST           1.0
UNARY_NEGATIVE       
BINARY_SUBSCR        
LOAD_NAME            s1
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
LOAD_NAME            len
LOAD_NAME            s1
CALL_FUNCTION        1
LOAD_CONST           "Hello"
LOAD_ATTR            lower
CALL_FUNCTION        0
LOAD_CONST           "world"
LOAD_ATTR            upper
CALL_FUNCTION        0
LOAD_CONST           "  spaced  "
LOAD_ATTR            strip
CALL_FUNCTION        0
LOAD_CONST           "comma,separated"
LOAD_ATTR            split
LOAD_CONST           ","
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "2.2. String Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           "two"
LOAD_CONST           3.0
BUILD_LIST           3
STORE_NAME           my_list
LOAD_NAME            len
LOAD_NAME            my_list
CALL_FUNCTION        1
LOAD_NAME            my_list
LOAD_ATTR            append
LOAD_CONST           4.0
CALL_FUNCTION        1
LOAD_NAME            my_list
LOAD_ATTR            pop
CALL_FUNCTION        0
LOAD_CONST           "one"
LOAD_NAME            my_list
LOAD_CONST           0.0
STORE_SUBSCR         
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_LIST           2
LOAD_CONST           4.0
BUILD_LIST           3
STORE_NAME           nested_list
LOAD_NAME            nested_list
LOAD_CONST           1.0
BINARY_SUBSCR        
LOAD_CONST           1.0
BINARY_SUBSCR        
BUILD_LIST           0
LOAD_NAME            range
LOAD_CONST           5.0
CALL_FUNCTION        1
GET_ITER             
FOR_ITER             12
STORE_NAME           x
LOAD_NAME            x
LOAD_NAME            x
BINARY_MULTIPLY      
BINARY_OPERATION     
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           list_comp
LOAD_NAME            print
LOAD_CONST           "2.3. List Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           "two"
LOAD_CONST           3.0
BUILD_TUPLE          3
STORE_NAME           my_tuple
LOAD_NAME            len
LOAD_NAME            my_tuple
CALL_FUNCTION        1
LOAD_NAME            my_tuple
LOAD_CONST           1.0
BINARY_SUBSCR        
LOAD_CONST           "new"
LOAD_NAME            my_tuple
LOAD_CONST           1.0
STORE_SUBSCR         
LOAD_NAME            print
LOAD_CONST           "2.4. Tuple Immutability: FAILED"
CALL_FUNCTION        1
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
LOAD_NAME            my_tuple
STORE_NAME           a, b, c
LOAD_NAME            print
LOAD_CONST           "2.4. Tuple Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "one"
LOAD_CONST           1.0
LOAD_CONST           "two"
LOAD_CONST           2.0
BUILD_MAP            2
STORE_NAME           my_dict
LOAD_NAME            my_dict
LOAD_CONST           "one"
BINARY_SUBSCR        
LOAD_CONST           3.0
LOAD_NAME            my_dict
LOAD_CONST           "three"
STORE_SUBSCR         
LOAD_CONST           "three"
LOAD_NAME            my_dict
COMPARE_OP           
LOAD_NAME            list
LOAD_NAME            my_dict
LOAD_ATTR            keys
CALL_FUNCTION        0
CALL_FUNCTION        1
LOAD_NAME            list
LOAD_NAME            my_dict
LOAD_ATTR            values
CALL_FUNCTION        0
CALL_FUNCTION        1
LOAD_NAME            my_dict
LOAD_CONST           "two"
BINARY_SUBSCR        
BINARY_OPERATION     
LOAD_CONST           "two"
LOAD_NAME            my_dict
COMPARE_OP           
BUILD_MAP            0
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
GET_ITER             
FOR_ITER             13
STORE_NAME           x
LOAD_NAME            x
LOAD_NAME            x
LOAD_NAME            x
BINARY_MULTIPLY      
BINARY_OPERATION     
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           dict_comp
LOAD_NAME            print
LOAD_CONST           "2.5. Dictionary Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_SET            4
STORE_NAME           my_set
LOAD_NAME            my_set
LOAD_ATTR            add
LOAD_CONST           4.0
CALL_FUNCTION        1
LOAD_CONST           4.0
LOAD_NAME            my_set
COMPARE_OP           
LOAD_NAME            my_set
LOAD_ATTR            remove
LOAD_CONST           2.0
CALL_FUNCTION        1
LOAD_CONST           2.0
LOAD_NAME            my_set
COMPARE_OP           
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_SET            3
STORE_NAME           set1
LOAD_CONST           3.0
LOAD_CONST           4.0
LOAD_CONST           5.0
BUILD_SET            3
STORE_NAME           set2
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_OR            
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_AND           
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_SUBTRACT      
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_XOR           
BUILD_SET            0
LOAD_CONST           "abracadabra"
GET_ITER             
FOR_ITER             12
STORE_NAME           x
LOAD_NAME            x
LOAD_CONST           "abc"
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            x
BINARY_OPERATION     
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           set_comp
LOAD_NAME            print
LOAD_CONST           "2.6. Set Type: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 3. Control Flow ---"
CALL_FUNCTION        1
LOAD_CONST           10.0
STORE_NAME           x
LOAD_NAME            x
LOAD_CONST           5.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_CONST           "greater"
STORE_NAME           result
JUMP_FORWARD         <JUMP_TARGET>
LOAD_NAME            x
LOAD_CONST           5.0
COMPARE_OP           
LOAD_CONST           "equal"
STORE_NAME           result
LOAD_NAME            print
LOAD_CONST           "3.1. if/elif/else: PASSED"
CALL_FUNCTION        1
LOAD_CONST           0.0
STORE_NAME           total
LOAD_NAME            range
LOAD_CONST           5.0
CALL_FUNCTION        1
LOAD_NAME            total
LOAD_NAME            i
BINARY_OPERATION     
STORE_NAME           total
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_LIST           3
LOAD_NAME            i
LOAD_CONST           4.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_CONST           5.0
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           0.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            count
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           count
LOAD_CONST           3.0
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           0.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            count
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           1.0
UNARY_NEGATIVE       
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_CONST           False
STORE_NAME           found_even
LOAD_NAME            range
LOAD_CONST           10.0
CALL_FUNCTION        1
LOAD_NAME            i
LOAD_CONST           2.0
BINARY_MODULO        
LOAD_CONST           0.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_NAME            i
LOAD_CONST           5.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_NAME            i
LOAD_CONST           4.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_CONST           True
STORE_NAME           found_even
LOAD_NAME            print
LOAD_CONST           "3.6. break and continue: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           0.0
BINARY_DIVIDE        
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
MAKE_CLASS           <MyContext_ref_3>
STORE_NAME           MyContext
LOAD_NAME            cm
ENTER_CONTEXT        
EXIT_CONTEXT         
LOAD_NAME            print
LOAD_CONST           "3.8. with statement: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 4. Functions and Scopes ---"
CALL_FUNCTION        1
MAKE_FUNCTION        <greet_ref_4>
STORE_NAME           greet
LOAD_NAME            greet
LOAD_CONST           "World"
CALL_FUNCTION        1
MAKE_FUNCTION        <func_with_args_ref_5>
STORE_NAME           func_with_args
LOAD_NAME            func_with_args
LOAD_CONST           1.0
LOAD_CONST           2.0
CALL_FUNCTION        2
LOAD_NAME            func_with_args
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
CALL_FUNCTION        3
LOAD_NAME            func_with_args
LOAD_CONST           a
LOAD_CONST           5.0
LOAD_CONST           b
LOAD_CONST           5.0
BINARY_OPERATION     
LOAD_NAME            func_with_args
LOAD_CONST           c
LOAD_CONST           1.0
LOAD_CONST           b
LOAD_CONST           2.0
LOAD_CONST           a
LOAD_CONST           3.0
BINARY_OPERATION     
MAKE_FUNCTION        <func_with_arbitrary_args_ref_6>
STORE_NAME           func_with_arbitrary_args
LOAD_NAME            func_with_arbitrary_args
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           name
LOAD_CONST           "test"
LOAD_CONST           value
LOAD_CONST           123.0
BINARY_OPERATION     
STORE_NAME           args_val, kwargs_val
MAKE_FUNCTION        <lambda_ref_7>
STORE_NAME           multiply
LOAD_NAME            multiply
LOAD_CONST           3.0
LOAD_CONST           4.0
CALL_FUNCTION        2
MAKE_FUNCTION        <outer_func_ref_9>
STORE_NAME           outer_func
LOAD_NAME            outer_func
CALL_FUNCTION        0
STORE_NAME           closure
LOAD_NAME            closure
CALL_FUNCTION        0
LOAD_NAME            closure
CALL_FUNCTION        0
LOAD_CONST           100.0
STORE_NAME           global_var
MAKE_FUNCTION        <modify_global_ref_10>
STORE_NAME           modify_global
LOAD_NAME            modify_global
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "4.1-4.6. Functions and Scopes: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 5. Object-Oriented Programming ---"
CALL_FUNCTION        1
MAKE_CLASS           <MyClass_ref_15>
STORE_NAME           MyClass
LOAD_NAME            MyClass
LOAD_CONST           20.0
CALL_FUNCTION        1
STORE_NAME           obj
LOAD_NAME            obj
LOAD_ATTR            instance_variable
LOAD_NAME            obj
LOAD_ATTR            instance_method
CALL_FUNCTION        0
LOAD_NAME            MyClass
LOAD_ATTR            class_variable
LOAD_NAME            MyClass
LOAD_ATTR            class_method
CALL_FUNCTION        0
LOAD_NAME            MyClass
LOAD_ATTR            static_method
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "5.1. Classes: PASSED"
CALL_FUNCTION        1
MAKE_CLASS           <ParentA_ref_17>
STORE_NAME           ParentA
MAKE_CLASS           <ParentB_ref_19>
STORE_NAME           ParentB
MAKE_CLASS           <Child_ref_21>
STORE_NAME           Child
LOAD_NAME            Child
CALL_FUNCTION        0
STORE_NAME           child_obj
LOAD_NAME            child_obj
LOAD_ATTR            method_a
CALL_FUNCTION        0
LOAD_NAME            child_obj
LOAD_ATTR            method_b
CALL_FUNCTION        0
LOAD_NAME            child_obj
LOAD_ATTR            method_c
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "5.2. Inheritance: PASSED"
CALL_FUNCTION        1
MAKE_CLASS           <Vector_ref_27>
STORE_NAME           Vector
LOAD_NAME            Vector
LOAD_CONST           1.0
LOAD_CONST           2.0
CALL_FUNCTION        2
STORE_NAME           v1
LOAD_NAME            Vector
LOAD_CONST           3.0
LOAD_CONST           4.0
CALL_FUNCTION        2
STORE_NAME           v2
LOAD_NAME            v1
LOAD_NAME            v2
BINARY_ADD           
STORE_NAME           v3
LOAD_NAME            repr
LOAD_NAME            v3
CALL_FUNCTION        1
LOAD_NAME            len
LOAD_NAME            v3
CALL_FUNCTION        1
LOAD_NAME            v3
LOAD_CONST           0.0
BINARY_SUBSCR        
LOAD_NAME            print
LOAD_CONST           "5.3. Dunder Methods: PASSED"
CALL_FUNCTION        1
MAKE_CLASS           <Circle_ref_32>
STORE_NAME           Circle
LOAD_NAME            Circle
LOAD_CONST           5.0
CALL_FUNCTION        1
STORE_NAME           c
LOAD_NAME            c
LOAD_ATTR            radius
LOAD_NAME            c
LOAD_ATTR            area
LOAD_CONST           10.0
STORE_NAME           c.radius
LOAD_NAME            c
LOAD_ATTR            radius
LOAD_CONST           1.0
UNARY_NEGATIVE       
STORE_NAME           c.radius
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
LOAD_NAME            print
LOAD_CONST           "\n--- 6. Advanced Features ---"
CALL_FUNCTION        1
MAKE_FUNCTION        <my_decorator_ref_34>
STORE_NAME           my_decorator
MAKE_FUNCTION        <say_whee_ref_35>
STORE_NAME           say_whee
LOAD_NAME            say_whee
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "6.1. Decorators: PASSED"
CALL_FUNCTION        1
GENERATOR_FUNCTION   <my_generator_ref_36>
STORE_NAME           my_generator
LOAD_NAME            my_generator
LOAD_CONST           3.0
CALL_FUNCTION        1
STORE_NAME           gen
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
ASYNC_FUNCTION       <my_coroutine_ref_37>
STORE_NAME           my_coroutine
ASYNC_FUNCTION       <main_async_ref_38>
STORE_NAME           main_async
LOAD_NAME            asyncio
LOAD_ATTR            run
LOAD_NAME            main_async
CALL_FUNCTION        0
CALL_FUNCTION        1
MAKE_CLASS           <MyMeta_ref_40>
STORE_NAME           MyMeta
MAKE_CLASS           <MyClassWithMeta_ref_41>
STORE_NAME           MyClassWithMeta
LOAD_NAME            hasattr
LOAD_NAME            MyClassWithMeta
LOAD_CONST           "new_attribute"
CALL_FUNCTION        2
LOAD_NAME            MyClassWithMeta
LOAD_ATTR            new_attribute
LOAD_NAME            print
LOAD_CONST           "6.4. Metaclasses: PASSED"
CALL_FUNCTION        1
MAKE_FUNCTION        <hinted_function_ref_42>
STORE_NAME           hinted_function
LOAD_NAME            hinted_function
LOAD_CONST           "Alice"
LOAD_CONST           30.0
CALL_FUNCTION        2
LOAD_NAME            print
LOAD_CONST           "6.5. Type Hinting: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 7. Standard Library Usage ---"
CALL_FUNCTION        1
LOAD_NAME            math
LOAD_ATTR            sqrt
LOAD_CONST           16.0
CALL_FUNCTION        1
LOAD_NAME            math
LOAD_ATTR            isclose
LOAD_NAME            math
LOAD_ATTR            pi
LOAD_CONST           3.14159
LOAD_CONST           rel_tol
LOAD_CONST           1e-05
BINARY_OPERATION     
LOAD_NAME            cmath
LOAD_ATTR            sqrt
LOAD_CONST           1.0
UNARY_NEGATIVE       
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "7.1. math and cmath: PASSED"
CALL_FUNCTION        1
LOAD_NAME            collections
LOAD_ATTR            deque
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_LIST           3
CALL_FUNCTION        1
STORE_NAME           d
LOAD_NAME            d
LOAD_ATTR            appendleft
LOAD_CONST           0.0
CALL_FUNCTION        1
LOAD_NAME            collections
LOAD_ATTR            namedtuple
LOAD_CONST           "Point"
LOAD_CONST           "x"
LOAD_CONST           "y"
BUILD_LIST           2
CALL_FUNCTION        2
STORE_NAME           Point
LOAD_NAME            Point
LOAD_CONST           1.0
LOAD_CONST           2.0
CALL_FUNCTION        2
STORE_NAME           p
LOAD_NAME            p
LOAD_ATTR            x
LOAD_NAME            p
LOAD_ATTR            y
LOAD_NAME            print
LOAD_CONST           "7.2. collections: PASSED"
CALL_FUNCTION        1
LOAD_NAME            itertools
LOAD_ATTR            count
LOAD_CONST           start
LOAD_CONST           5.0
LOAD_CONST           step
LOAD_CONST           2.0
BINARY_OPERATION     
STORE_NAME           counter
LOAD_NAME            next
LOAD_NAME            counter
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            counter
CALL_FUNCTION        1
LOAD_NAME            list
LOAD_NAME            itertools
LOAD_ATTR            permutations
LOAD_CONST           "AB"
CALL_FUNCTION        1
CALL_FUNCTION        1
STORE_NAME           permutations
LOAD_NAME            print
LOAD_CONST           "7.3. itertools: PASSED"
CALL_FUNCTION        1
LOAD_CONST           '{"name": "John", "age": 30}'
STORE_NAME           json_string
LOAD_NAME            json
LOAD_ATTR            loads
LOAD_NAME            json_string
CALL_FUNCTION        1
STORE_NAME           data
LOAD_NAME            data
LOAD_CONST           "name"
BINARY_SUBSCR        
LOAD_NAME            json
LOAD_ATTR            dumps
LOAD_NAME            data
CALL_FUNCTION        1
STORE_NAME           new_json_string
LOAD_NAME            json
LOAD_ATTR            loads
LOAD_NAME            new_json_string
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "7.4. json: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "The rain in Spain"
STORE_NAME           text
LOAD_NAME            re
LOAD_ATTR            search
LOAD_CONST           r"^The.*Spain$"
LOAD_NAME            text
CALL_FUNCTION        2
STORE_NAME           match
LOAD_NAME            re
LOAD_ATTR            findall
LOAD_CONST           r"ai"
LOAD_NAME            text
CALL_FUNCTION        2
STORE_NAME           found
LOAD_NAME            print
LOAD_CONST           "7.5. re: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 8. Dynamic Features and Introspection ---"
CALL_FUNCTION        1
MAKE_CLASS           <DynamicClass_ref_43>
STORE_NAME           DynamicClass
LOAD_NAME            DynamicClass
CALL_FUNCTION        0
STORE_NAME           dyn_obj
LOAD_NAME            setattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
LOAD_CONST           123.0
CALL_FUNCTION        3
LOAD_NAME            hasattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
LOAD_NAME            getattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
LOAD_NAME            delattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
LOAD_NAME            hasattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
LOGICAL_NOT          
LOAD_NAME            print
LOAD_CONST           "8.1. Dynamic attribute access: PASSED"
CALL_FUNCTION        1
LOAD_NAME            eval
LOAD_CONST           "2 + 3 * 4"
CALL_FUNCTION        1
STORE_NAME           eval_result
LOAD_CONST           "dynamic_var = 10"
STORE_NAME           exec_code
LOAD_NAME            exec
LOAD_NAME            exec_code
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "8.2. eval() and exec(): PASSED (if no exceptions were raised)"
CALL_FUNCTION        1
LOAD_NAME            isinstance
LOAD_CONST           1.0
LOAD_NAME            int
CALL_FUNCTION        2
LOAD_NAME            isinstance
LOAD_CONST           "hello"
LOAD_NAME            int
CALL_FUNCTION        2
LOGICAL_NOT          
LOAD_NAME            issubclass
LOAD_NAME            bool
LOAD_NAME            int
CALL_FUNCTION        2
LOAD_NAME            type
LOAD_CONST           123.0
CALL_FUNCTION        1
LOAD_NAME            int
COMPARE_OP           
LOAD_NAME            print
LOAD_CONST           "8.3. Type introspection: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 9. Missing Node Types Coverage ---"
CALL_FUNCTION        1
LOAD_CONST           True
STORE_NAME           bool_true
LOAD_CONST           False
STORE_NAME           bool_false
LOAD_CONST           
STORE_NAME           none_val
LOAD_CONST           ...
STORE_NAME           ellipsis_val
MAKE_FUNCTION        <function_with_ellipsis_ref_44>
STORE_NAME           function_with_ellipsis
LOAD_CONST           42.0
UNARY_NEGATIVE       
STORE_NAME           negative_num
LOAD_CONST           42.0
BINARY_OPERATION     +
STORE_NAME           positive_num
LOAD_CONST           42.0
UNARY_INVERT         
STORE_NAME           bitwise_not
LOAD_CONST           True
LOGICAL_NOT          
STORE_NAME           logical_not
LOAD_CONST           10.0
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           5.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           2.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           3.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           2.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_CONST           1.0
LOAD_CONST           2.0
COMPARE_OP           
LOAD_CONST           2.0
LOAD_CONST           1.0
COMPARE_OP           
LOGICAL_AND          
LOAD_CONST           3.0
LOAD_CONST           3.0
COMPARE_OP           
LOGICAL_OR           
STORE_NAME           comp_result
LOAD_NAME            bool_true
LOAD_CONST           True
COMPARE_OP           
STORE_NAME           is_result
LOAD_CONST           "a"
LOAD_CONST           "abc"
COMPARE_OP           
STORE_NAME           in_result
LOAD_CONST           "z"
LOAD_CONST           "abc"
COMPARE_OP           
STORE_NAME           not_in_result
MAKE_FUNCTION        <lambda_ref_45>
STORE_NAME           lambda_func
LOAD_NAME            lambda_func
LOAD_CONST           5.0
CALL_FUNCTION        1
STORE_NAME           lambda_result
POP_JUMP_IF_FALSE    <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           ternary_result
BUILD_LIST           0
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
GET_ITER             
FOR_ITER             12
STORE_NAME           x
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
BINARY_OPERATION     
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           list_comp
BUILD_MAP            0
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
GET_ITER             
FOR_ITER             13
STORE_NAME           x
LOAD_NAME            x
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
BINARY_OPERATION     
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           dict_comp
BUILD_SET            0
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
GET_ITER             
FOR_ITER             12
STORE_NAME           x
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
BINARY_OPERATION     
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           set_comp
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
GET_ITER             
FOR_ITER             11
STORE_NAME           x
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
BINARY_OPERATION     
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           gen_expr
LOAD_CONST           1.0
LOAD_CONST           0.0
BINARY_DIVIDE        
STORE_NAME           risky_operation
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
LOAD_NAME            range
LOAD_CONST           2.0
CALL_FUNCTION        1
LOAD_NAME            i
LOAD_CONST           10.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_CONST           0.0
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           2.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            count
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           count
MAKE_CLASS           <SimpleContext_ref_48>
STORE_NAME           SimpleContext
LOAD_NAME            ctx_val
ENTER_CONTEXT        
LOAD_NAME            ctx_val
STORE_NAME           context_result
EXIT_CONTEXT         
LOAD_NAME            ctx1
ENTER_CONTEXT        
LOAD_NAME            ctx2
ENTER_CONTEXT        
LOAD_NAME            ctx1
LOAD_NAME            ctx2
BINARY_ADD           
STORE_NAME           multi_context_result
EXIT_CONTEXT         
EXIT_CONTEXT         
LOAD_CONST           1.0
LOAD_CONST           1.0
COMPARE_OP           
BINARY_OPERATION     
MAKE_FUNCTION        <empty_func_ref_49>
STORE_NAME           empty_func
LOAD_NAME            range
LOAD_CONST           5.0
CALL_FUNCTION        1
LOAD_NAME            i
LOAD_CONST           1.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_NAME            i
LOAD_CONST           3.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
MAKE_FUNCTION        <test_raise_ref_50>
STORE_NAME           test_raise
IMPORT_FROM          math
IMPORT_FROM          sqrt
IMPORT_FROM          square_root
IMPORT_NAME          sys
IMPORT_NAME          system
LOAD_CONST           "global"
STORE_NAME           global_var
MAKE_FUNCTION        <test_global_ref_51>
STORE_NAME           test_global
MAKE_FUNCTION        <outer_ref_53>
STORE_NAME           outer
LOAD_CONST           42.0
STORE_NAME           temp_var
LOAD_NAME            temp_var
BINARY_OPERATION     
LOAD_CONST           0xFF
LOAD_CONST           0x0F
BINARY_AND           
STORE_NAME           bitwise_and
LOAD_CONST           0x10
LOAD_CONST           0x01
BINARY_OR            
STORE_NAME           bitwise_or
LOAD_CONST           0xAA
LOAD_CONST           0x55
BINARY_XOR           
STORE_NAME           bitwise_xor
LOAD_CONST           8.0
LOAD_CONST           2.0
BINARY_LSHIFT        
STORE_NAME           left_shift
LOAD_CONST           32.0
LOAD_CONST           3.0
BINARY_RSHIFT        
STORE_NAME           right_shift
LOAD_CONST           17.0
LOAD_CONST           5.0
BINARY_FLOOR_DIVIDE  
STORE_NAME           floor_div
LOAD_CONST           5.0
LOAD_CONST           50.0
STORE_NAME           x, y
LOAD_CONST           1.0
LOAD_NAME            x
LOAD_CONST           10.0
COMPARE_OP           
LOAD_CONST           0.0
LOAD_NAME            y
LOAD_CONST           100.0
COMPARE_OP           
LOGICAL_AND          
STORE_NAME           chained_comp
LOAD_CONST           0.0
LOAD_NAME            x
LOAD_CONST           10.0
COMPARE_OP           
STORE_NAME           is_between
LOAD_NAME            x
LOAD_CONST           5.0
COMPARE_OP           
STORE_NAME           greater_equal
LOAD_NAME            y
LOAD_CONST           100.0
COMPARE_OP           
STORE_NAME           less_equal
LOAD_NAME            x
LOAD_NAME            y
COMPARE_OP           
STORE_NAME           not_equal
LOAD_NAME            len
LOAD_CONST           "test"
CALL_FUNCTION        1
STORE_NAME           n
LOAD_NAME            n
LOAD_CONST           3.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            n
STORE_NAME           walrus_result
LOAD_NAME            print
LOAD_CONST           "9. Missing Node Types Coverage: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
LOAD_CONST           4.0
LOAD_CONST           5.0
BUILD_LIST           5
STORE_NAME           test_list
LOAD_NAME            test_list
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           first_element
LOAD_NAME            test_list
LOAD_CONST           1.0
UNARY_NEGATIVE       
BINARY_SUBSCR        
STORE_NAME           last_element
LOAD_NAME            test_list
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           slice_access
LOAD_NAME            test_list
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           step_slice
LOAD_CONST           "api_key"
LOAD_CONST           "secret123"
LOAD_CONST           "endpoint"
LOAD_CONST           "https://malicious.com/api"
LOAD_CONST           "payload"
LOAD_CONST           "data"
LOAD_CONST           "encoded"
BUILD_MAP            1
BUILD_MAP            3
STORE_NAME           config_dict
LOAD_NAME            config_dict
LOAD_CONST           "api_key"
BINARY_SUBSCR        
STORE_NAME           api_key
LOAD_NAME            config_dict
LOAD_CONST           "endpoint"
BINARY_SUBSCR        
STORE_NAME           endpoint
LOAD_NAME            config_dict
LOAD_CONST           "pay"
LOAD_CONST           "load"
BINARY_ADD           
BINARY_SUBSCR        
STORE_NAME           dynamic_key
LOAD_CONST           "users"
LOAD_CONST           "name"
LOAD_CONST           "admin"
LOAD_CONST           "permissions"
LOAD_CONST           "read"
LOAD_CONST           "write"
LOAD_CONST           "execute"
BUILD_LIST           3
BUILD_MAP            2
LOAD_CONST           "name"
LOAD_CONST           "guest"
LOAD_CONST           "permissions"
LOAD_CONST           "read"
BUILD_LIST           1
BUILD_MAP            2
BUILD_LIST           2
LOAD_CONST           "config"
LOAD_CONST           "servers"
LOAD_CONST           "192.168.1.1"
LOAD_CONST           "10.0.0.1"
BUILD_LIST           2
LOAD_CONST           "ports"
LOAD_CONST           80.0
LOAD_CONST           443.0
LOAD_CONST           8080.0
BUILD_LIST           3
BUILD_MAP            2
BUILD_MAP            2
STORE_NAME           nested_structure
LOAD_NAME            nested_structure
LOAD_CONST           "users"
BINARY_SUBSCR        
LOAD_CONST           0.0
BINARY_SUBSCR        
LOAD_CONST           "name"
BINARY_SUBSCR        
STORE_NAME           admin_name
LOAD_NAME            nested_structure
LOAD_CONST           "users"
BINARY_SUBSCR        
LOAD_CONST           0.0
BINARY_SUBSCR        
LOAD_CONST           "permissions"
BINARY_SUBSCR        
LOAD_CONST           2.0
BINARY_SUBSCR        
STORE_NAME           admin_permissions
LOAD_NAME            nested_structure
LOAD_CONST           "config"
BINARY_SUBSCR        
LOAD_CONST           "servers"
BINARY_SUBSCR        
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           first_server
LOAD_NAME            nested_structure
LOAD_CONST           "config"
BINARY_SUBSCR        
LOAD_CONST           "ports"
BINARY_SUBSCR        
LOAD_CONST           1.0
BINARY_SUBSCR        
STORE_NAME           https_port
LOAD_CONST           "endpoint"
STORE_NAME           prop_name
LOAD_CONST           "api_key"
STORE_NAME           key_name
LOAD_NAME            config_dict
LOAD_NAME            prop_name
BINARY_SUBSCR        
STORE_NAME           dynamic_access1
LOAD_NAME            config_dict
LOAD_NAME            key_name
BINARY_SUBSCR        
STORE_NAME           dynamic_access2
LOAD_CONST           "api"
LOAD_CONST           "_key"
BINARY_ADD           
STORE_NAME           computed_key
IMPORT_NAME          base64
LOAD_NAME            base64
LOAD_ATTR            b64encode
LOAD_CONST           b"endpoint"
CALL_FUNCTION        1
LOAD_ATTR            decode
CALL_FUNCTION        0
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           encoded_key
LOAD_NAME            config_dict
LOAD_NAME            computed_key
BINARY_SUBSCR        
STORE_NAME           obfuscated_access
LOAD_NAME            list
LOAD_NAME            range
LOAD_CONST           0.0
LOAD_CONST           20.0
LOAD_CONST           2.0
CALL_FUNCTION        3
CALL_FUNCTION        1
STORE_NAME           payload_list
LOAD_NAME            payload_list
LOAD_CONST           5.0
LOAD_CONST           2.0
BINARY_ADD           
BINARY_SUBSCR        
STORE_NAME           calculated_index
LOAD_NAME            payload_list
LOAD_CONST           2.0
LOAD_CONST           2.0
BINARY_POWER         
BINARY_SUBSCR        
STORE_NAME           expression_index
LOAD_NAME            payload_list
LOAD_CONST           15.0
LOAD_NAME            len
LOAD_NAME            payload_list
CALL_FUNCTION        1
BINARY_MODULO        
BINARY_SUBSCR        
STORE_NAME           modulo_index
LOAD_CONST           "eval(base64.b64decode(payload))"
STORE_NAME           malicious_string
LOAD_NAME            malicious_string
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           protocol_char
LOAD_NAME            malicious_string
LOAD_NAME            malicious_string
LOAD_ATTR            find
LOAD_CONST           "("
CALL_FUNCTION        1
BINARY_SUBSCR        
STORE_NAME           paren_char
LOAD_NAME            malicious_string
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           decode_part
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_LIST           3
LOAD_CONST           4.0
LOAD_CONST           5.0
LOAD_CONST           6.0
BUILD_LIST           3
LOAD_CONST           7.0
LOAD_CONST           8.0
LOAD_CONST           9.0
BUILD_LIST           3
BUILD_LIST           3
STORE_NAME           matrix
LOAD_NAME            matrix
LOAD_CONST           1.0
BINARY_SUBSCR        
LOAD_CONST           1.0
BINARY_SUBSCR        
STORE_NAME           center_element
LOAD_NAME            matrix
LOAD_CONST           0.0
BINARY_SUBSCR        
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           corner_element
LOAD_NAME            matrix
LOAD_CONST           1.0
UNARY_NEGATIVE       
BINARY_SUBSCR        
LOAD_CONST           1.0
UNARY_NEGATIVE       
BINARY_SUBSCR        
STORE_NAME           last_row_last_col
LOAD_CONST           "python"
LOAD_CONST           "-c"
LOAD_CONST           "import os; os.system('malicious')"
BUILD_TUPLE          3
STORE_NAME           command_tuple
LOAD_NAME            command_tuple
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           interpreter
LOAD_NAME            command_tuple
LOAD_CONST           1.0
BINARY_SUBSCR        
STORE_NAME           flag
LOAD_NAME            command_tuple
LOAD_CONST           2.0
BINARY_SUBSCR        
STORE_NAME           command_payload
LOAD_CONST           b"\x48\x65\x6c\x6c\x6f"
STORE_NAME           byte_data
LOAD_NAME            byte_data
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           first_byte
LOAD_NAME            byte_data
LOAD_CONST           1.0
BINARY_SUBSCR        
STORE_NAME           second_byte
LOAD_NAME            byte_data
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           byte_slice
IMPORT_NAME          random
LOAD_CONST           2.0
STORE_NAME           global_index
LOAD_NAME            test_list
LOAD_NAME            global_index
BINARY_SUBSCR        
STORE_NAME           scoped_access
LOAD_NAME            test_list
LOAD_NAME            random
LOAD_ATTR            randint
LOAD_CONST           0.0
LOAD_NAME            len
LOAD_NAME            test_list
CALL_FUNCTION        1
LOAD_CONST           1.0
BINARY_SUBTRACT      
CALL_FUNCTION        2
BINARY_SUBSCR        
STORE_NAME           function_based_index
LOAD_NAME            test_list
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           complex_slice1
LOAD_NAME            test_list
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           complex_slice2
LOAD_NAME            test_list
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BINARY_OPERATION     
BINARY_SUBSCR        
STORE_NAME           complex_slice3
LOAD_NAME            list
LOAD_NAME            config_dict
LOAD_ATTR            keys
CALL_FUNCTION        0
CALL_FUNCTION        1
STORE_NAME           dict_keys
LOAD_NAME            list
LOAD_NAME            config_dict
LOAD_ATTR            values
CALL_FUNCTION        0
CALL_FUNCTION        1
STORE_NAME           dict_values
LOAD_NAME            dict_keys
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           first_key
LOAD_NAME            dict_values
LOAD_CONST           0.0
BINARY_SUBSCR        
STORE_NAME           first_value
LOAD_NAME            print
LOAD_CONST           "9.18. BINARY_SUBSCR Test Cases: PASSED"
CALL_FUNCTION        1
BUILD_MAP            0
STORE_NAME           store_obj
BUILD_LIST           0
STORE_NAME           store_arr
LOAD_CONST           "inner"
BUILD_MAP            0
BUILD_MAP            1
STORE_NAME           store_nested
LOAD_CONST           "value1"
LOAD_NAME            store_obj
LOAD_CONST           "key1"
STORE_SUBSCR         
LOAD_CONST           "value2"
LOAD_NAME            store_obj
LOAD_CONST           "key2"
STORE_SUBSCR         
LOAD_CONST           """value3"""
LOAD_NAME            store_obj
LOAD_CONST           """key3"""
STORE_SUBSCR         
LOAD_CONST           "dynamicKey"
STORE_NAME           store_key
LOAD_CONST           "dynamicValue"
LOAD_NAME            store_obj
LOAD_NAME            store_key
STORE_SUBSCR         
LOAD_NAME            store_arr
LOAD_ATTR            extend
LOAD_CONST           
LOAD_CONST           
LOAD_CONST           
BUILD_LIST           3
CALL_FUNCTION        1
LOAD_CONST           "first"
LOAD_NAME            store_arr
LOAD_CONST           0.0
STORE_SUBSCR         
LOAD_CONST           "second"
LOAD_NAME            store_arr
LOAD_CONST           1.0
STORE_SUBSCR         
LOAD_CONST           "third"
LOAD_NAME            store_arr
LOAD_CONST           2.0
STORE_SUBSCR         
LOAD_CONST           "computed"
STORE_NAME           store_prefix
LOAD_CONST           "computed value"
LOAD_NAME            store_obj
LOAD_NAME            store_prefix
LOAD_CONST           "_key"
BINARY_ADD           
STORE_SUBSCR         
LOAD_CONST           "template value"
LOAD_NAME            store_obj
LOAD_NAME            store_prefix
LOAD_CONST           _template
BINARY_OPERATION     
STORE_SUBSCR         
LOAD_CONST           "deeply nested"
LOAD_NAME            store_nested
LOAD_CONST           "inner"
BINARY_SUBSCR        
LOAD_CONST           "deep"
STORE_SUBSCR         
MAKE_FUNCTION        <get_store_key_ref_54>
STORE_NAME           get_store_key
LOAD_CONST           "from function"
LOAD_NAME            store_obj
LOAD_NAME            get_store_key
CALL_FUNCTION        0
STORE_SUBSCR         
LOAD_CONST           "numeric expression"
LOAD_NAME            store_obj
LOAD_CONST           1.0
LOAD_CONST           2.0
BINARY_ADD           
STORE_SUBSCR         
LOAD_CONST           "method call key"
LOAD_NAME            store_obj
LOAD_NAME            store_key
LOAD_ATTR            upper
CALL_FUNCTION        0
STORE_SUBSCR         
LOAD_CONST           0.0
STORE_NAME           store_counter
LOAD_CONST           "with side effect"
LOAD_NAME            store_obj
LOAD_NAME            store_counter
STORE_SUBSCR         
LOAD_NAME            store_counter
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           store_counter
LOAD_CONST           "chained"
LOAD_NAME            store_obj
LOAD_CONST           "b"
STORE_SUBSCR         
LOAD_NAME            store_obj
LOAD_CONST           "a"
STORE_SUBSCR         
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
LOAD_CONST           4.0
LOAD_CONST           5.0
BUILD_LIST           5
STORE_NAME           store_list
LOAD_CONST           10.0
LOAD_CONST           20.0
BUILD_LIST           2
LOAD_NAME            store_list
LOAD_CONST           1.0
LOAD_CONST           3.0
STORE_SUBSCR         
LOAD_CONST           100.0
LOAD_CONST           200.0
LOAD_CONST           300.0
BUILD_LIST           3
LOAD_NAME            store_list
LOAD_CONST           2.0
STORE_SUBSCR         
LOAD_NAME            print
LOAD_CONST           "9.19. STORE_SUBSCR Test Cases: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- Python Compiler Test Suite: Finished ---"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "--- All tests completed. Check output for any FAILED messages. ---"
CALL_FUNCTION        1
LOAD_CONST           "os"
STORE_NAME           module_name
LOAD_NAME            __import__
LOAD_NAME            module_name
CALL_FUNCTION        1
STORE_NAME           imported_os
LOAD_NAME            getattr
LOAD_NAME            imported_os
LOAD_CONST           "system"
CALL_FUNCTION        2
STORE_NAME           getattr_call
LOAD_NAME            getattr
LOAD_NAME            __builtins__
LOAD_CONST           "exec"
CALL_FUNCTION        2
STORE_NAME           exec_func
LOAD_NAME            getattr
LOAD_NAME            __builtins__
LOAD_CONST           "eval"
CALL_FUNCTION        2
STORE_NAME           eval_func
RETURN_VALUE         
LOAD_NAME            print
LOAD_CONST           "Entering context"
CALL_FUNCTION        1
LOAD_CONST           "Hello from with"
RETURN_VALUE         
LOAD_NAME            print
LOAD_CONST           "Exiting context"
CALL_FUNCTION        1
RETURN_VALUE         
MAKE_FUNCTION        <__enter___ref_1>
STORE_NAME           __enter__
MAKE_FUNCTION        <__exit___ref_2>
STORE_NAME           __exit__
LOAD_CONST           Hello,
LOAD_PARAM           name
LOAD_CONST           !
BINARY_OPERATION     
RETURN_VALUE         
LOAD_PARAM           a
LOAD_PARAM           b
BINARY_ADD           
LOAD_PARAM           c
BINARY_ADD           
RETURN_VALUE         
LOAD_PARAM           args
LOAD_PARAM           kwargs
RETURN_VALUE         
LOAD_PARAM           x
LOAD_PARAM           y
BINARY_MULTIPLY      
RETURN_VALUE         
LOAD_NAME            x
LOAD_NAME            x
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           x
LOAD_NAME            x
RETURN_VALUE         
LOAD_CONST           10.0
STORE_NAME           x
MAKE_FUNCTION        <inner_func_ref_8>
STORE_NAME           inner_func
LOAD_NAME            inner_func
RETURN_VALUE         
LOAD_NAME            global_var
LOAD_CONST           200.0
STORE_NAME           global_var
RETURN_VALUE         
LOAD_PARAM           instance_variable
STORE_NAME           self.instance_variable
RETURN_VALUE         
LOAD_PARAM           self
LOAD_ATTR            instance_variable
RETURN_VALUE         
LOAD_PARAM           cls
LOAD_ATTR            class_variable
RETURN_VALUE         
LOAD_CONST           "static"
RETURN_VALUE         
LOAD_CONST           10.0
STORE_NAME           class_variable
MAKE_FUNCTION        <__init___ref_11>
STORE_NAME           __init__
MAKE_FUNCTION        <instance_method_ref_12>
STORE_NAME           instance_method
MAKE_FUNCTION        <class_method_ref_13>
STORE_NAME           class_method
MAKE_FUNCTION        <static_method_ref_14>
STORE_NAME           static_method
LOAD_CONST           "A"
RETURN_VALUE         
MAKE_FUNCTION        <method_a_ref_16>
STORE_NAME           method_a
LOAD_CONST           "B"
RETURN_VALUE         
MAKE_FUNCTION        <method_b_ref_18>
STORE_NAME           method_b
LOAD_CONST           "C"
RETURN_VALUE         
MAKE_FUNCTION        <method_c_ref_20>
STORE_NAME           method_c
LOAD_PARAM           x
STORE_NAME           self.x
LOAD_PARAM           y
STORE_NAME           self.y
RETURN_VALUE         
LOAD_NAME            Vector
LOAD_PARAM           self
LOAD_ATTR            x
LOAD_PARAM           other
LOAD_ATTR            x
BINARY_ADD           
LOAD_PARAM           self
LOAD_ATTR            y
LOAD_PARAM           other
LOAD_ATTR            y
BINARY_ADD           
CALL_FUNCTION        2
RETURN_VALUE         
LOAD_CONST           Vector(
LOAD_PARAM           self
LOAD_ATTR            x
LOAD_CONST           ,
LOAD_PARAM           self
LOAD_ATTR            y
LOAD_CONST           )
BINARY_OPERATION     
RETURN_VALUE         
LOAD_CONST           2.0
RETURN_VALUE         
LOAD_PARAM           index
LOAD_CONST           0.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_PARAM           self
LOAD_ATTR            x
RETURN_VALUE         
LOAD_PARAM           index
LOAD_CONST           1.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_PARAM           self
LOAD_ATTR            y
RETURN_VALUE         
LOAD_NAME            IndexError
BINARY_OPERATION     
RETURN_VALUE         
MAKE_FUNCTION        <__init___ref_22>
STORE_NAME           __init__
MAKE_FUNCTION        <__add___ref_23>
STORE_NAME           __add__
MAKE_FUNCTION        <__repr___ref_24>
STORE_NAME           __repr__
MAKE_FUNCTION        <__len___ref_25>
STORE_NAME           __len__
MAKE_FUNCTION        <__getitem___ref_26>
STORE_NAME           __getitem__
LOAD_PARAM           radius
STORE_NAME           self._radius
RETURN_VALUE         
LOAD_PARAM           self
LOAD_ATTR            _radius
RETURN_VALUE         
LOAD_PARAM           value
LOAD_CONST           0.0
COMPARE_OP           
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            ValueError
LOAD_CONST           "Radius cannot be negative"
CALL_FUNCTION        1
BINARY_OPERATION     
LOAD_PARAM           value
STORE_NAME           self._radius
RETURN_VALUE         
LOAD_CONST           3.14
LOAD_PARAM           self
LOAD_ATTR            _radius
LOAD_CONST           2.0
BINARY_POWER         
BINARY_MULTIPLY      
RETURN_VALUE         
MAKE_FUNCTION        <__init___ref_28>
STORE_NAME           __init__
MAKE_FUNCTION        <radius_ref_29>
STORE_NAME           radius
MAKE_FUNCTION        <radius_ref_30>
STORE_NAME           radius
MAKE_FUNCTION        <area_ref_31>
STORE_NAME           area
LOAD_NAME            print
LOAD_CONST           "Something is happening before the function is called."
CALL_FUNCTION        1
LOAD_NAME            func
LOAD_PARAM           args
LOAD_PARAM           kwargs
BINARY_OPERATION     
STORE_NAME           result
LOAD_NAME            print
LOAD_CONST           "Something is happening after the function is called."
CALL_FUNCTION        1
LOAD_NAME            result
RETURN_VALUE         
MAKE_FUNCTION        <wrapper_ref_33>
STORE_NAME           wrapper
LOAD_NAME            wrapper
RETURN_VALUE         
LOAD_CONST           "Whee!"
RETURN_VALUE         
LOAD_NAME            range
LOAD_PARAM           n
CALL_FUNCTION        1
LOAD_CONST           
BINARY_OPERATION     
RETURN_VALUE         
LOAD_NAME            asyncio
LOAD_ATTR            sleep
LOAD_CONST           0.01
CALL_FUNCTION        1
AWAIT_EXPRESSION     
LOAD_CONST           "Coroutine finished"
RETURN_VALUE         
LOAD_NAME            my_coroutine
CALL_FUNCTION        0
AWAIT_EXPRESSION     
STORE_NAME           result
LOAD_NAME            print
LOAD_CONST           "6.3. Coroutines (async/await): PASSED"
CALL_FUNCTION        1
RETURN_VALUE         
LOAD_CONST           "Hello from metaclass"
LOAD_PARAM           dct
LOAD_CONST           "new_attribute"
STORE_SUBSCR         
LOAD_NAME            super
CALL_FUNCTION        0
LOAD_ATTR            __new__
LOAD_PARAM           cls
LOAD_PARAM           name
LOAD_PARAM           bases
LOAD_PARAM           dct
CALL_FUNCTION        4
RETURN_VALUE         
MAKE_FUNCTION        <__new___ref_39>
STORE_NAME           __new__

LOAD_PARAM           name
LOAD_CONST           is
LOAD_PARAM           age
LOAD_CONST           years old.
BINARY_OPERATION     
RETURN_VALUE         

LOAD_CONST           ...
RETURN_VALUE         
LOAD_PARAM           x
LOAD_CONST           2.0
BINARY_MULTIPLY      
RETURN_VALUE         
LOAD_CONST           "context_value"
RETURN_VALUE         
LOAD_CONST           False
RETURN_VALUE         
MAKE_FUNCTION        <__enter___ref_46>
STORE_NAME           __enter__
MAKE_FUNCTION        <__exit___ref_47>
STORE_NAME           __exit__
RETURN_VALUE         
LOAD_NAME            ValueError
LOAD_CONST           "Test error"
CALL_FUNCTION        1
BINARY_OPERATION     
RETURN_VALUE         
LOAD_NAME            global_var
LOAD_CONST           "modified"
STORE_NAME           global_var
RETURN_VALUE         
LOAD_NAME            nonlocal_var
LOAD_CONST           "inner"
STORE_NAME           nonlocal_var
RETURN_VALUE         
LOAD_CONST           "outer"
STORE_NAME           nonlocal_var
MAKE_FUNCTION        <inner_ref_52>
STORE_NAME           inner
LOAD_NAME            inner
CALL_FUNCTION        0
LOAD_NAME            nonlocal_var
RETURN_VALUE         
LOAD_CONST           "funcKey"
RETURN_VALUE