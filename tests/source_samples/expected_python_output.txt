IMPORT_NAME          sys
IMPORT_NAME          math
IMPORT_NAME          cmath
IMPORT_NAME          collections
IMPORT_NAME          itertools
IMPORT_NAME          json
IMPORT_NAME          re
IMPORT_NAME          asyncio
IMPORT_FROM          functools
IMPORT_FROM          wraps
IMPORT_FROM          typing
IMPORT_FROM          Any
IMPORT_FROM          List
IMPORT_FROM          Dict
IMPORT_FROM          Tuple
IMPORT_FROM          Set
IMPORT_FROM          Optional
IMPORT_NAME          os
IMPORT_NAME          subprocess
IMPORT_NAME          socket
IMPORT_NAME          urllib.request
IMPORT_NAME          base64
IMPORT_NAME          pickle
IMPORT_NAME          marshal
IMPORT_NAME          types
IMPORT_NAME          importlib
IMPORT_NAME          tempfile
IMPORT_NAME          shutil
IMPORT_NAME          pathlib
IMPORT_FROM          os
IMPORT_FROM          environ
IMPORT_FROM          path
IMPORT_FROM          listdir
IMPORT_FROM          sys
IMPORT_FROM          argv
IMPORT_FROM          exit
IMPORT_FROM          modules
IMPORT_FROM          path
IMPORT_FROM          sys_path
IMPORT_FROM          subprocess
IMPORT_FROM          run
IMPORT_FROM          Popen
IMPORT_FROM          PIPE
IMPORT_FROM          call
IMPORT_FROM          socket
IMPORT_FROM          socket
IMPORT_FROM          AF_INET
IMPORT_FROM          SOCK_STREAM
IMPORT_FROM          urllib.parse
IMPORT_FROM          urlparse
IMPORT_FROM          urljoin
IMPORT_FROM          urllib.request
IMPORT_FROM          urlopen
IMPORT_FROM          Request
IMPORT_FROM          base64
IMPORT_FROM          b64encode
IMPORT_FROM          b64decode
IMPORT_FROM          decodebytes
IMPORT_FROM          pickle
IMPORT_FROM          loads
IMPORT_FROM          dumps
IMPORT_FROM          load
IMPORT_FROM          dump
IMPORT_FROM          marshal
IMPORT_FROM          loads
IMPORT_FROM          marshal_loads
IMPORT_FROM          dumps
IMPORT_FROM          marshal_dumps
IMPORT_FROM          types
IMPORT_FROM          CodeType
IMPORT_FROM          ModuleType
IMPORT_FROM          importlib
IMPORT_FROM          import_module
IMPORT_FROM          util
IMPORT_FROM          tempfile
IMPORT_FROM          mkstemp
IMPORT_FROM          mkdtemp
IMPORT_FROM          NamedTemporaryFile
IMPORT_FROM          shutil
IMPORT_FROM          rmtree
IMPORT_FROM          copytree
IMPORT_FROM          move
IMPORT_FROM          pathlib
IMPORT_FROM          Path
IMPORT_FROM          PurePath
IMPORT_NAME          os
IMPORT_NAME          operating_system
IMPORT_NAME          subprocess
IMPORT_NAME          subproc
IMPORT_NAME          socket
IMPORT_NAME          sock
IMPORT_NAME          urllib.request
IMPORT_NAME          web_request
IMPORT_NAME          base64
IMPORT_NAME          b64
IMPORT_NAME          pickle
IMPORT_NAME          pkl
IMPORT_NAME          marshal
IMPORT_NAME          marsh
IMPORT_NAME          types
IMPORT_NAME          tp
IMPORT_NAME          importlib
IMPORT_NAME          imp_lib
IMPORT_FROM          os.path
IMPORT_FROM          join
IMPORT_FROM          exists
IMPORT_FROM          isfile
IMPORT_FROM          isdir
IMPORT_FROM          basename
IMPORT_FROM          dirname
IMPORT_FROM          os.path
IMPORT_FROM          join
IMPORT_FROM          path_join
IMPORT_FROM          exists
IMPORT_FROM          path_exists
IMPORT_FROM          urllib.request
IMPORT_FROM          urlopen
IMPORT_FROM          open_url
IMPORT_FROM          Request
IMPORT_FROM          web_request_obj
IMPORT_FROM          base64
IMPORT_FROM          b64encode
IMPORT_FROM          encode_b64
IMPORT_FROM          b64decode
IMPORT_FROM          decode_b64
IMPORT_NAME          ctypes
IMPORT_FROM          ctypes
IMPORT_FROM          windll
IMPORT_FROM          wintypes
LOAD_CONST           True
STORE_NAME           ctypes_available
LOAD_NAME            ImportError
LOAD_CONST           False
STORE_NAME           ctypes_available
IMPORT_NAME          win32api
IMPORT_FROM          win32api
IMPORT_FROM          GetSystemMetrics
LOAD_CONST           True
STORE_NAME           win32_available
LOAD_NAME            ImportError
LOAD_CONST           False
STORE_NAME           win32_available
IMPORT_NAME          requests
IMPORT_FROM          requests
IMPORT_FROM          get
IMPORT_FROM          post
IMPORT_FROM          Session
LOAD_CONST           True
STORE_NAME           requests_available
LOAD_NAME            ImportError
LOAD_CONST           False
STORE_NAME           requests_available
IMPORT_NAME          keyring
IMPORT_FROM          keyring
IMPORT_FROM          get_password
IMPORT_FROM          set_password
LOAD_NAME            ImportError
IMPORT_NAME          sqlite3
IMPORT_FROM          sqlite3
IMPORT_FROM          connect
IMPORT_FROM          Row
LOAD_NAME            ImportError
IMPORT_NAME          winreg
IMPORT_FROM          winreg
IMPORT_FROM          OpenKey
IMPORT_FROM          QueryValueEx
IMPORT_FROM          HKEY_LOCAL_MACHINE
LOAD_NAME            ImportError
MAKE_FUNCTION        <dynamic_import_test>
    LOAD_CONST           "os"
    STORE_NAME           module_name
    LOAD_NAME            __import__
    LOAD_NAME            module_name
    CALL_FUNCTION        1
    STORE_NAME           imported_os
    LOAD_NAME            getattr
    LOAD_NAME            imported_os
    LOAD_CONST           "system"
    CALL_FUNCTION        2
    STORE_NAME           getattr_call
    LOAD_NAME            getattr
    LOAD_NAME            __builtins__
    LOAD_CONST           "exec"
    CALL_FUNCTION        2
    STORE_NAME           exec_func
    LOAD_NAME            getattr
    LOAD_NAME            __builtins__
    LOAD_CONST           "eval"
    CALL_FUNCTION        2
    STORE_NAME           eval_func
    RETURN_VALUE         
STORE_NAME           dynamic_import_test
LOAD_NAME            print
LOAD_CONST           "--- Extended Import Test Cases: COMPLETED ---"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "--- Python Compiler Test Suite: Starting ---"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 1. Basic Syntax and Literals ---"
CALL_FUNCTION        1
LOAD_CONST           """
This is a
multi-line docstring.
"""
LOAD_CONST           123.0
STORE_NAME           integer_literal
LOAD_CONST           3.14
STORE_NAME           float_literal
LOAD_CONST           2.0
LOAD_CONST           3.0
BINARY_ADD           
STORE_NAME           complex_literal
LOAD_CONST           0b1010
STORE_NAME           binary_literal
LOAD_CONST           0o777
STORE_NAME           octal_literal
LOAD_CONST           0xABC
STORE_NAME           hex_literal
LOAD_NAME            print
LOAD_CONST           "1.2. Numeric Literals: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "hello"
STORE_NAME           single_quoted_string
LOAD_CONST           "world"
STORE_NAME           double_quoted_string
LOAD_CONST           """
Hello
World
"""
STORE_NAME           multi_line_string
LOAD_CONST           r"C:\new\path"
STORE_NAME           raw_string
LOAD_CONST           f"Formatted string with {integer_literal}"
STORE_NAME           f_string
LOAD_CONST           b"this is a byte string"
STORE_NAME           byte_string
LOAD_NAME            print
LOAD_CONST           "1.3. String Literals: PASSED"
CALL_FUNCTION        1
LOAD_CONST           True
STORE_NAME           true_literal
LOAD_CONST           False
STORE_NAME           false_literal
LOAD_CONST           
STORE_NAME           none_literal
LOAD_NAME            print
LOAD_CONST           "1.4. Boolean and None Literals: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 2. Data Types and Operations ---"
CALL_FUNCTION        1
LOAD_CONST           10.0
LOAD_CONST           3.0
STORE_NAME           a, b
LOAD_NAME            a
LOAD_NAME            b
BINARY_ADD           
LOAD_NAME            a
LOAD_NAME            b
BINARY_SUBTRACT      
LOAD_NAME            a
LOAD_NAME            b
BINARY_MULTIPLY      
LOAD_NAME            a
LOAD_NAME            b
BINARY_DIVIDE        
LOAD_NAME            a
LOAD_NAME            b
BINARY_OPERATION     
LOAD_NAME            a
LOAD_NAME            b
BINARY_OPERATION     
LOAD_NAME            a
LOAD_NAME            b
BINARY_OPERATION     
LOAD_CONST           5.0
BINARY_OPERATION     
STORE_NAME           c
LOAD_NAME            c
BINARY_OPERATION     
LOAD_NAME            c
BINARY_OPERATION     
LOAD_NAME            abs
LOAD_NAME            c
CALL_FUNCTION        1
LOAD_NAME            divmod
LOAD_NAME            a
LOAD_NAME            b
CALL_FUNCTION        2
LOAD_NAME            pow
LOAD_NAME            a
LOAD_NAME            b
CALL_FUNCTION        2
LOAD_NAME            round
LOAD_CONST           3.14159
LOAD_CONST           2.0
CALL_FUNCTION        2
LOAD_NAME            print
LOAD_CONST           "2.1. Numeric Types: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "hello"
STORE_NAME           s1
LOAD_CONST           "world"
STORE_NAME           s2
LOAD_NAME            s1
LOAD_CONST           " "
BINARY_ADD           
LOAD_NAME            s2
BINARY_ADD           
LOAD_NAME            s1
LOAD_CONST           3.0
BINARY_MULTIPLY      
LOAD_CONST           "e"
LOAD_NAME            s1
BINARY_OPERATION     
LOAD_CONST           "x"
LOAD_NAME            s1
BINARY_OPERATION     
LOAD_NAME            s1
LOAD_CONST           1.0
LOAD_NAME            s1
LOAD_CONST           1.0
BINARY_OPERATION     
LOAD_NAME            s1
LOAD_CONST           1.0
LOAD_CONST           4.0
LOAD_NAME            len
LOAD_NAME            s1
CALL_FUNCTION        1
LOAD_CONST           "Hello"
LOAD_NAME            lower
CALL_FUNCTION        0
LOAD_CONST           "world"
LOAD_NAME            upper
CALL_FUNCTION        0
LOAD_CONST           "  spaced  "
LOAD_NAME            strip
CALL_FUNCTION        0
LOAD_CONST           "comma,separated"
LOAD_NAME            split
LOAD_CONST           ","
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "2.2. String Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           "two"
LOAD_CONST           3.0
BUILD_LIST           3
STORE_NAME           my_list
LOAD_NAME            len
LOAD_NAME            my_list
CALL_FUNCTION        1
LOAD_NAME            my_list
LOAD_NAME            append
LOAD_CONST           4.0
CALL_FUNCTION        1
LOAD_NAME            my_list
LOAD_NAME            pop
CALL_FUNCTION        0
LOAD_CONST           "one"
STORE_NAME           my_list[0]
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_LIST           2
LOAD_CONST           4.0
BUILD_LIST           3
STORE_NAME           nested_list
LOAD_NAME            nested_list
LOAD_CONST           1.0
LOAD_CONST           1.0
LOAD_NAME            x
LOAD_NAME            x
BINARY_MULTIPLY      
LOAD_NAME            x
LOAD_NAME            range
LOAD_CONST           5.0
CALL_FUNCTION        1
BUILD_LIST           1
STORE_NAME           list_comp
LOAD_NAME            print
LOAD_CONST           "2.3. List Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           "two"
LOAD_CONST           3.0
BUILD_TUPLE          3
STORE_NAME           my_tuple
LOAD_NAME            len
LOAD_NAME            my_tuple
CALL_FUNCTION        1
LOAD_NAME            my_tuple
LOAD_CONST           1.0
LOAD_CONST           "new"
STORE_NAME           my_tuple[1]
LOAD_NAME            print
LOAD_CONST           "2.4. Tuple Immutability: FAILED"
CALL_FUNCTION        1
LOAD_NAME            TypeError
LOAD_NAME            print
LOAD_CONST           "2.4. Tuple Immutability: PASSED"
CALL_FUNCTION        1
LOAD_NAME            my_tuple
STORE_NAME           a, b, c
LOAD_NAME            print
LOAD_CONST           "2.4. Tuple Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "one"
LOAD_CONST           1.0
LOAD_CONST           "two"
LOAD_CONST           2.0
BUILD_MAP            2
STORE_NAME           my_dict
LOAD_NAME            my_dict
LOAD_CONST           "one"
LOAD_CONST           3.0
STORE_NAME           my_dict["three"]
LOAD_CONST           "three"
LOAD_NAME            my_dict
BINARY_OPERATION     
LOAD_NAME            list
LOAD_NAME            my_dict
LOAD_NAME            keys
CALL_FUNCTION        0
CALL_FUNCTION        1
LOAD_NAME            list
LOAD_NAME            my_dict
LOAD_NAME            values
CALL_FUNCTION        0
CALL_FUNCTION        1
LOAD_NAME            my_dict
LOAD_CONST           "two"
BINARY_OPERATION     
LOAD_CONST           "two"
LOAD_NAME            my_dict
BINARY_OPERATION     
LOAD_NAME            x
LOAD_NAME            x
LOAD_NAME            x
BINARY_MULTIPLY      
LOAD_NAME            x
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
BUILD_MAP            1
STORE_NAME           dict_comp
LOAD_NAME            print
LOAD_CONST           "2.5. Dictionary Type: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_SET            4
STORE_NAME           my_set
LOAD_NAME            my_set
LOAD_NAME            add
LOAD_CONST           4.0
CALL_FUNCTION        1
LOAD_CONST           4.0
LOAD_NAME            my_set
BINARY_OPERATION     
LOAD_NAME            my_set
LOAD_NAME            remove
LOAD_CONST           2.0
CALL_FUNCTION        1
LOAD_CONST           2.0
LOAD_NAME            my_set
BINARY_OPERATION     
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_SET            3
STORE_NAME           set1
LOAD_CONST           3.0
LOAD_CONST           4.0
LOAD_CONST           5.0
BUILD_SET            3
STORE_NAME           set2
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_OPERATION     
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_OPERATION     
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_SUBTRACT      
LOAD_NAME            set1
LOAD_NAME            set2
BINARY_OPERATION     
LOAD_NAME            x
LOAD_NAME            x
LOAD_CONST           "abracadabra"
LOAD_NAME            x
LOAD_CONST           "abc"
BINARY_OPERATION     
BUILD_SET            1
STORE_NAME           set_comp
LOAD_NAME            print
LOAD_CONST           "2.6. Set Type: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 3. Control Flow ---"
CALL_FUNCTION        1
LOAD_CONST           10.0
STORE_NAME           x
LOAD_NAME            x
LOAD_CONST           5.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_CONST           "greater"
STORE_NAME           result
JUMP_FORWARD         <JUMP_TARGET>
LOAD_NAME            x
LOAD_CONST           5.0
BINARY_OPERATION     
LOAD_CONST           "equal"
STORE_NAME           result
LOAD_NAME            print
LOAD_CONST           "3.1. if/elif/else: PASSED"
CALL_FUNCTION        1
LOAD_CONST           0.0
STORE_NAME           total
LOAD_NAME            range
LOAD_CONST           5.0
CALL_FUNCTION        1
LOAD_NAME            total
LOAD_NAME            i
BINARY_OPERATION     
STORE_NAME           total
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_LIST           3
LOAD_NAME            i
LOAD_CONST           4.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_CONST           5.0
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           0.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            count
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           count
LOAD_CONST           3.0
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           0.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            count
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           1.0
BINARY_OPERATION     
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_CONST           False
STORE_NAME           found_even
LOAD_NAME            range
LOAD_CONST           10.0
CALL_FUNCTION        1
LOAD_NAME            i
LOAD_CONST           2.0
BINARY_OPERATION     
LOAD_CONST           0.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_NAME            i
LOAD_CONST           5.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_NAME            i
LOAD_CONST           4.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_CONST           True
STORE_NAME           found_even
LOAD_NAME            print
LOAD_CONST           "3.6. break and continue: PASSED"
CALL_FUNCTION        1
LOAD_CONST           1.0
LOAD_CONST           0.0
BINARY_DIVIDE        
LOAD_NAME            ZeroDivisionError
LOAD_NAME            print
LOAD_CONST           "3.7. try/except: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "3.7. finally: PASSED"
CALL_FUNCTION        1
MAKE_CLASS           <MyContext>
    MAKE_FUNCTION        <__enter__>
        LOAD_NAME            print
        LOAD_CONST           "Entering context"
        CALL_FUNCTION        1
        LOAD_CONST           "Hello from with"
        RETURN_VALUE         
    STORE_NAME           __enter__
    MAKE_FUNCTION        <__exit__>
        LOAD_NAME            print
        LOAD_CONST           "Exiting context"
        CALL_FUNCTION        1
        RETURN_VALUE         
    STORE_NAME           __exit__
STORE_NAME           MyContext
LOAD_NAME            print
LOAD_CONST           "3.8. with statement: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 4. Functions and Scopes ---"
CALL_FUNCTION        1
MAKE_FUNCTION        <greet>
    LOAD_CONST           f"Hello, {name}!"
    RETURN_VALUE         
STORE_NAME           greet
LOAD_NAME            greet
LOAD_CONST           "World"
CALL_FUNCTION        1
MAKE_FUNCTION        <func_with_args>
    LOAD_NAME            a
    LOAD_NAME            b
    BINARY_ADD           
    LOAD_NAME            c
    BINARY_ADD           
    RETURN_VALUE         
STORE_NAME           func_with_args
LOAD_NAME            func_with_args
LOAD_CONST           1.0
LOAD_CONST           2.0
CALL_FUNCTION        2
LOAD_NAME            func_with_args
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
CALL_FUNCTION        3
LOAD_NAME            func_with_args
LOAD_NAME            a
LOAD_CONST           5.0
LOAD_NAME            b
LOAD_CONST           5.0
CALL_FUNCTION        2
LOAD_NAME            func_with_args
LOAD_NAME            c
LOAD_CONST           1.0
LOAD_NAME            b
LOAD_CONST           2.0
LOAD_NAME            a
LOAD_CONST           3.0
CALL_FUNCTION        3
MAKE_FUNCTION        <func_with_arbitrary_args>
    LOAD_NAME            args
    LOAD_NAME            kwargs
    RETURN_VALUE         
STORE_NAME           func_with_arbitrary_args
LOAD_NAME            func_with_arbitrary_args
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_NAME            name
LOAD_CONST           "test"
LOAD_NAME            value
LOAD_CONST           123.0
CALL_FUNCTION        4
STORE_NAME           args_val, kwargs_val
MAKE_FUNCTION        <lambda>
    LOAD_NAME            x
    LOAD_NAME            y
    BINARY_MULTIPLY      
    RETURN_VALUE         
STORE_NAME           multiply
LOAD_NAME            multiply
LOAD_CONST           3.0
LOAD_CONST           4.0
CALL_FUNCTION        2
MAKE_FUNCTION        <outer_func>
    LOAD_CONST           10.0
    STORE_NAME           x
    MAKE_FUNCTION        <inner_func>
        LOAD_NAME            x
        LOAD_NAME            x
        LOAD_CONST           1.0
        BINARY_OPERATION     
        STORE_NAME           x
        LOAD_NAME            x
        RETURN_VALUE         
    STORE_NAME           inner_func
    LOAD_NAME            inner_func
    RETURN_VALUE         
STORE_NAME           outer_func
LOAD_NAME            outer_func
CALL_FUNCTION        0
STORE_NAME           closure
LOAD_NAME            closure
CALL_FUNCTION        0
LOAD_NAME            closure
CALL_FUNCTION        0
LOAD_CONST           100.0
STORE_NAME           global_var
MAKE_FUNCTION        <modify_global>
    LOAD_NAME            global_var
    LOAD_CONST           200.0
    STORE_NAME           global_var
    RETURN_VALUE         
STORE_NAME           modify_global
LOAD_NAME            modify_global
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "4.1-4.6. Functions and Scopes: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 5. Object-Oriented Programming ---"
CALL_FUNCTION        1
MAKE_CLASS           <MyClass>
    LOAD_CONST           10.0
    STORE_NAME           class_variable
    MAKE_FUNCTION        <__init__>
        LOAD_NAME            instance_variable
        STORE_NAME           self.instance_variable
        RETURN_VALUE         
    STORE_NAME           __init__
    MAKE_FUNCTION        <instance_method>
        LOAD_NAME            self
        LOAD_NAME            instance_variable
        RETURN_VALUE         
    STORE_NAME           instance_method
    MAKE_FUNCTION        <class_method>
        LOAD_NAME            cls
        LOAD_NAME            class_variable
        RETURN_VALUE         
    STORE_NAME           class_method
    MAKE_FUNCTION        <static_method>
        LOAD_CONST           "static"
        RETURN_VALUE         
    STORE_NAME           static_method
STORE_NAME           MyClass
LOAD_NAME            MyClass
LOAD_CONST           20.0
CALL_FUNCTION        1
STORE_NAME           obj
LOAD_NAME            obj
LOAD_NAME            instance_variable
LOAD_NAME            obj
LOAD_NAME            instance_method
CALL_FUNCTION        0
LOAD_NAME            MyClass
LOAD_NAME            class_variable
LOAD_NAME            MyClass
LOAD_NAME            class_method
CALL_FUNCTION        0
LOAD_NAME            MyClass
LOAD_NAME            static_method
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "5.1. Classes: PASSED"
CALL_FUNCTION        1
MAKE_CLASS           <ParentA>
    MAKE_FUNCTION        <method_a>
        LOAD_CONST           "A"
        RETURN_VALUE         
    STORE_NAME           method_a
STORE_NAME           ParentA
MAKE_CLASS           <ParentB>
    MAKE_FUNCTION        <method_b>
        LOAD_CONST           "B"
        RETURN_VALUE         
    STORE_NAME           method_b
STORE_NAME           ParentB
MAKE_CLASS           <Child>
    MAKE_FUNCTION        <method_c>
        LOAD_CONST           "C"
        RETURN_VALUE         
    STORE_NAME           method_c
STORE_NAME           Child
LOAD_NAME            Child
CALL_FUNCTION        0
STORE_NAME           child_obj
LOAD_NAME            child_obj
LOAD_NAME            method_a
CALL_FUNCTION        0
LOAD_NAME            child_obj
LOAD_NAME            method_b
CALL_FUNCTION        0
LOAD_NAME            child_obj
LOAD_NAME            method_c
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "5.2. Inheritance: PASSED"
CALL_FUNCTION        1
MAKE_CLASS           <Vector>
    MAKE_FUNCTION        <__init__>
        LOAD_NAME            x
        STORE_NAME           self.x
        LOAD_NAME            y
        STORE_NAME           self.y
        RETURN_VALUE         
    STORE_NAME           __init__
    MAKE_FUNCTION        <__add__>
        LOAD_NAME            Vector
        LOAD_NAME            self
        LOAD_NAME            x
        LOAD_NAME            other
        LOAD_NAME            x
        BINARY_ADD           
        LOAD_NAME            self
        LOAD_NAME            y
        LOAD_NAME            other
        LOAD_NAME            y
        BINARY_ADD           
        CALL_FUNCTION        2
        RETURN_VALUE         
    STORE_NAME           __add__
    MAKE_FUNCTION        <__repr__>
        LOAD_CONST           f"Vector({self.x}, {self.y})"
        RETURN_VALUE         
    STORE_NAME           __repr__
    MAKE_FUNCTION        <__len__>
        LOAD_CONST           2.0
        RETURN_VALUE         
    STORE_NAME           __len__
    MAKE_FUNCTION        <__getitem__>
        LOAD_NAME            index
        LOAD_CONST           0.0
        BINARY_OPERATION     
        POP_JUMP_IF_FALSE    <JUMP_TARGET>
        LOAD_NAME            self
        LOAD_NAME            x
        RETURN_VALUE         
        LOAD_NAME            index
        LOAD_CONST           1.0
        BINARY_OPERATION     
        POP_JUMP_IF_FALSE    <JUMP_TARGET>
        LOAD_NAME            self
        LOAD_NAME            y
        RETURN_VALUE         
        LOAD_NAME            IndexError
        BINARY_OPERATION     
        RETURN_VALUE         
    STORE_NAME           __getitem__
STORE_NAME           Vector
LOAD_NAME            Vector
LOAD_CONST           1.0
LOAD_CONST           2.0
CALL_FUNCTION        2
STORE_NAME           v1
LOAD_NAME            Vector
LOAD_CONST           3.0
LOAD_CONST           4.0
CALL_FUNCTION        2
STORE_NAME           v2
LOAD_NAME            v1
LOAD_NAME            v2
BINARY_ADD           
STORE_NAME           v3
LOAD_NAME            repr
LOAD_NAME            v3
CALL_FUNCTION        1
LOAD_NAME            len
LOAD_NAME            v3
CALL_FUNCTION        1
LOAD_NAME            v3
LOAD_CONST           0.0
LOAD_NAME            print
LOAD_CONST           "5.3. Dunder Methods: PASSED"
CALL_FUNCTION        1
MAKE_CLASS           <Circle>
    MAKE_FUNCTION        <__init__>
        LOAD_NAME            radius
        STORE_NAME           self._radius
        RETURN_VALUE         
    STORE_NAME           __init__
    MAKE_FUNCTION        <radius>
        LOAD_NAME            self
        LOAD_NAME            _radius
        RETURN_VALUE         
    STORE_NAME           radius
    MAKE_FUNCTION        <radius>
        LOAD_NAME            value
        LOAD_CONST           0.0
        BINARY_OPERATION     
        POP_JUMP_IF_FALSE    <JUMP_TARGET>
        LOAD_NAME            ValueError
        LOAD_CONST           "Radius cannot be negative"
        CALL_FUNCTION        1
        BINARY_OPERATION     
        LOAD_NAME            value
        STORE_NAME           self._radius
        RETURN_VALUE         
    STORE_NAME           radius
    MAKE_FUNCTION        <area>
        LOAD_CONST           3.14
        LOAD_NAME            self
        LOAD_NAME            _radius
        LOAD_CONST           2.0
        BINARY_OPERATION     
        BINARY_MULTIPLY      
        RETURN_VALUE         
    STORE_NAME           area
STORE_NAME           Circle
LOAD_NAME            Circle
LOAD_CONST           5.0
CALL_FUNCTION        1
STORE_NAME           c
LOAD_NAME            c
LOAD_NAME            radius
LOAD_NAME            c
LOAD_NAME            area
LOAD_CONST           10.0
STORE_NAME           c.radius
LOAD_NAME            c
LOAD_NAME            radius
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           c.radius
LOAD_NAME            ValueError
LOAD_NAME            print
LOAD_CONST           "5.4. Properties: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 6. Advanced Features ---"
CALL_FUNCTION        1
MAKE_FUNCTION        <my_decorator>
    MAKE_FUNCTION        <wrapper>
        LOAD_NAME            print
        LOAD_CONST           "Something is happening before the function is called."
        CALL_FUNCTION        1
        LOAD_NAME            func
        LOAD_NAME            args
        LOAD_NAME            kwargs
        CALL_FUNCTION        2
        STORE_NAME           result
        LOAD_NAME            print
        LOAD_CONST           "Something is happening after the function is called."
        CALL_FUNCTION        1
        LOAD_NAME            result
        RETURN_VALUE         
    STORE_NAME           wrapper
    LOAD_NAME            wrapper
    RETURN_VALUE         
STORE_NAME           my_decorator
MAKE_FUNCTION        <say_whee>
    LOAD_CONST           "Whee!"
    RETURN_VALUE         
STORE_NAME           say_whee
LOAD_NAME            say_whee
CALL_FUNCTION        0
LOAD_NAME            print
LOAD_CONST           "6.1. Decorators: PASSED"
CALL_FUNCTION        1
MAKE_FUNCTION        <my_generator>
    LOAD_NAME            range
    LOAD_NAME            n
    CALL_FUNCTION        1
    LOAD_NAME            i
    RETURN_VALUE         
STORE_NAME           my_generator
LOAD_NAME            my_generator
LOAD_CONST           3.0
CALL_FUNCTION        1
STORE_NAME           gen
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            gen
CALL_FUNCTION        1
LOAD_NAME            StopIteration
LOAD_NAME            print
LOAD_CONST           "6.2. Generators: PASSED"
CALL_FUNCTION        1
MAKE_FUNCTION        <my_coroutine>
    BINARY_OPERATION     
    LOAD_CONST           "Coroutine finished"
    RETURN_VALUE         
STORE_NAME           my_coroutine
MAKE_FUNCTION        <main_async>
    BINARY_OPERATION     
    STORE_NAME           result
    LOAD_NAME            print
    LOAD_CONST           "6.3. Coroutines (async/await): PASSED"
    CALL_FUNCTION        1
    RETURN_VALUE         
STORE_NAME           main_async
LOAD_NAME            asyncio
LOAD_NAME            run
LOAD_NAME            main_async
CALL_FUNCTION        0
CALL_FUNCTION        1
MAKE_CLASS           <MyMeta>
    MAKE_FUNCTION        <__new__>
        LOAD_CONST           "Hello from metaclass"
        STORE_NAME           dct["new_attribute"]
        LOAD_NAME            super
        CALL_FUNCTION        0
        LOAD_NAME            __new__
        LOAD_NAME            cls
        LOAD_NAME            name
        LOAD_NAME            bases
        LOAD_NAME            dct
        CALL_FUNCTION        4
        RETURN_VALUE         
    STORE_NAME           __new__
STORE_NAME           MyMeta
MAKE_CLASS           <MyClassWithMeta>

STORE_NAME           MyClassWithMeta
LOAD_NAME            hasattr
LOAD_NAME            MyClassWithMeta
LOAD_CONST           "new_attribute"
CALL_FUNCTION        2
LOAD_NAME            MyClassWithMeta
LOAD_NAME            new_attribute
LOAD_NAME            print
LOAD_CONST           "6.4. Metaclasses: PASSED"
CALL_FUNCTION        1
MAKE_FUNCTION        <hinted_function>
    LOAD_CONST           f"{name} is {age} years old."
    RETURN_VALUE         
STORE_NAME           hinted_function
LOAD_NAME            hinted_function
LOAD_CONST           "Alice"
LOAD_CONST           30.0
CALL_FUNCTION        2
LOAD_NAME            print
LOAD_CONST           "6.5. Type Hinting: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 7. Standard Library Usage ---"
CALL_FUNCTION        1
LOAD_NAME            math
LOAD_NAME            sqrt
LOAD_CONST           16.0
CALL_FUNCTION        1
LOAD_NAME            math
LOAD_NAME            isclose
LOAD_NAME            math
LOAD_NAME            pi
LOAD_CONST           3.14159
LOAD_NAME            rel_tol
LOAD_CONST           1e-05
CALL_FUNCTION        3
LOAD_NAME            cmath
LOAD_NAME            sqrt
LOAD_CONST           1.0
BINARY_OPERATION     
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "7.1. math and cmath: PASSED"
CALL_FUNCTION        1
LOAD_NAME            collections
LOAD_NAME            deque
LOAD_CONST           1.0
LOAD_CONST           2.0
LOAD_CONST           3.0
BUILD_LIST           3
CALL_FUNCTION        1
STORE_NAME           d
LOAD_NAME            d
LOAD_NAME            appendleft
LOAD_CONST           0.0
CALL_FUNCTION        1
LOAD_NAME            collections
LOAD_NAME            namedtuple
LOAD_CONST           "Point"
LOAD_CONST           "x"
LOAD_CONST           "y"
BUILD_LIST           2
CALL_FUNCTION        2
STORE_NAME           Point
LOAD_NAME            Point
LOAD_CONST           1.0
LOAD_CONST           2.0
CALL_FUNCTION        2
STORE_NAME           p
LOAD_NAME            p
LOAD_NAME            x
LOAD_NAME            p
LOAD_NAME            y
LOAD_NAME            print
LOAD_CONST           "7.2. collections: PASSED"
CALL_FUNCTION        1
LOAD_NAME            itertools
LOAD_NAME            count
LOAD_NAME            start
LOAD_CONST           5.0
LOAD_NAME            step
LOAD_CONST           2.0
CALL_FUNCTION        2
STORE_NAME           counter
LOAD_NAME            next
LOAD_NAME            counter
CALL_FUNCTION        1
LOAD_NAME            next
LOAD_NAME            counter
CALL_FUNCTION        1
LOAD_NAME            list
LOAD_NAME            itertools
LOAD_NAME            permutations
LOAD_CONST           "AB"
CALL_FUNCTION        1
CALL_FUNCTION        1
STORE_NAME           permutations
LOAD_NAME            print
LOAD_CONST           "7.3. itertools: PASSED"
CALL_FUNCTION        1
LOAD_CONST           '{"name": "John", "age": 30}'
STORE_NAME           json_string
LOAD_NAME            json
LOAD_NAME            loads
LOAD_NAME            json_string
CALL_FUNCTION        1
STORE_NAME           data
LOAD_NAME            data
LOAD_CONST           "name"
LOAD_NAME            json
LOAD_NAME            dumps
LOAD_NAME            data
CALL_FUNCTION        1
STORE_NAME           new_json_string
LOAD_NAME            json
LOAD_NAME            loads
LOAD_NAME            new_json_string
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "7.4. json: PASSED"
CALL_FUNCTION        1
LOAD_CONST           "The rain in Spain"
STORE_NAME           text
LOAD_NAME            re
LOAD_NAME            search
LOAD_CONST           r"^The.*Spain$"
LOAD_NAME            text
CALL_FUNCTION        2
STORE_NAME           match
LOAD_NAME            re
LOAD_NAME            findall
LOAD_CONST           r"ai"
LOAD_NAME            text
CALL_FUNCTION        2
STORE_NAME           found
LOAD_NAME            print
LOAD_CONST           "7.5. re: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 8. Dynamic Features and Introspection ---"
CALL_FUNCTION        1
MAKE_CLASS           <DynamicClass>

STORE_NAME           DynamicClass
LOAD_NAME            DynamicClass
CALL_FUNCTION        0
STORE_NAME           dyn_obj
LOAD_NAME            setattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
LOAD_CONST           123.0
CALL_FUNCTION        3
LOAD_NAME            hasattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
LOAD_NAME            getattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
LOAD_NAME            delattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
LOAD_NAME            hasattr
LOAD_NAME            dyn_obj
LOAD_CONST           "dynamic_attr"
CALL_FUNCTION        2
BINARY_OPERATION     
LOAD_NAME            print
LOAD_CONST           "8.1. Dynamic attribute access: PASSED"
CALL_FUNCTION        1
LOAD_NAME            eval
LOAD_CONST           "2 + 3 * 4"
CALL_FUNCTION        1
STORE_NAME           eval_result
LOAD_CONST           "dynamic_var = 10"
STORE_NAME           exec_code
LOAD_NAME            exec
LOAD_NAME            exec_code
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "8.2. eval() and exec(): PASSED (if no exceptions were raised)"
CALL_FUNCTION        1
LOAD_NAME            isinstance
LOAD_CONST           1.0
LOAD_NAME            int
CALL_FUNCTION        2
LOAD_NAME            isinstance
LOAD_CONST           "hello"
LOAD_NAME            int
CALL_FUNCTION        2
BINARY_OPERATION     
LOAD_NAME            issubclass
LOAD_NAME            bool
LOAD_NAME            int
CALL_FUNCTION        2
LOAD_NAME            type
LOAD_CONST           123.0
CALL_FUNCTION        1
LOAD_NAME            int
BINARY_OPERATION     
LOAD_NAME            print
LOAD_CONST           "8.3. Type introspection: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- 9. Missing Node Types Coverage ---"
CALL_FUNCTION        1
LOAD_CONST           True
STORE_NAME           bool_true
LOAD_CONST           False
STORE_NAME           bool_false
LOAD_CONST           
STORE_NAME           none_val
LOAD_CONST           ...
STORE_NAME           ellipsis_val
LOAD_CONST           42.0
BINARY_OPERATION     
STORE_NAME           negative_num
LOAD_CONST           42.0
BINARY_OPERATION     
STORE_NAME           positive_num
LOAD_CONST           42.0
BINARY_OPERATION     
STORE_NAME           bitwise_not
LOAD_CONST           True
BINARY_OPERATION     
STORE_NAME           logical_not
LOAD_CONST           10.0
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           5.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           2.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           3.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_NAME            aug_val
LOAD_CONST           2.0
BINARY_OPERATION     
STORE_NAME           aug_val
LOAD_CONST           1.0
LOAD_CONST           2.0
BINARY_OPERATION     
LOAD_CONST           2.0
LOAD_CONST           1.0
BINARY_OPERATION     
BINARY_OPERATION     
LOAD_CONST           3.0
LOAD_CONST           3.0
BINARY_OPERATION     
BINARY_OPERATION     
STORE_NAME           comp_result
LOAD_NAME            bool_true
LOAD_CONST           True
BINARY_OPERATION     
STORE_NAME           is_result
LOAD_CONST           "a"
LOAD_CONST           "abc"
BINARY_OPERATION     
STORE_NAME           in_result
LOAD_CONST           "z"
LOAD_CONST           "abc"
BINARY_OPERATION     
STORE_NAME           not_in_result
MAKE_FUNCTION        <lambda>
    LOAD_NAME            x
    LOAD_CONST           2.0
    BINARY_MULTIPLY      
    RETURN_VALUE         
STORE_NAME           lambda_func
LOAD_NAME            lambda_func
LOAD_CONST           5.0
CALL_FUNCTION        1
STORE_NAME           lambda_result
POP_JUMP_IF_FALSE    <JUMP_TARGET>
JUMP_FORWARD         <JUMP_TARGET>
STORE_NAME           ternary_result
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
LOAD_NAME            x
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
BUILD_LIST           1
STORE_NAME           list_comp
LOAD_NAME            x
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
LOAD_NAME            x
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
BUILD_MAP            1
STORE_NAME           dict_comp
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
LOAD_NAME            x
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
BUILD_SET            1
STORE_NAME           set_comp
LOAD_NAME            x
LOAD_CONST           2.0
BINARY_MULTIPLY      
LOAD_NAME            x
LOAD_NAME            range
LOAD_CONST           3.0
CALL_FUNCTION        1
STORE_NAME           gen_expr
LOAD_CONST           1.0
LOAD_CONST           0.0
BINARY_DIVIDE        
STORE_NAME           risky_operation
LOAD_NAME            ZeroDivisionError
LOAD_CONST           True
STORE_NAME           error_handled
LOAD_NAME            Exception
LOAD_NAME            e
LOAD_NAME            str
LOAD_NAME            e
CALL_FUNCTION        1
STORE_NAME           other_error
LOAD_CONST           True
STORE_NAME           cleanup_done
LOAD_NAME            range
LOAD_CONST           2.0
CALL_FUNCTION        1
LOAD_NAME            i
LOAD_CONST           10.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_CONST           0.0
STORE_NAME           count
LOAD_NAME            count
LOAD_CONST           2.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
LOAD_NAME            count
LOAD_CONST           1.0
BINARY_OPERATION     
STORE_NAME           count
MAKE_CLASS           <SimpleContext>
    MAKE_FUNCTION        <__enter__>
        LOAD_CONST           "context_value"
        RETURN_VALUE         
    STORE_NAME           __enter__
    MAKE_FUNCTION        <__exit__>
        LOAD_CONST           False
        RETURN_VALUE         
    STORE_NAME           __exit__
STORE_NAME           SimpleContext
LOAD_NAME            ctx_val
STORE_NAME           context_result
LOAD_CONST           1.0
LOAD_CONST           1.0
BINARY_OPERATION     
BINARY_OPERATION     
MAKE_FUNCTION        <empty_func>
    RETURN_VALUE         
STORE_NAME           empty_func
LOAD_NAME            range
LOAD_CONST           5.0
CALL_FUNCTION        1
LOAD_NAME            i
LOAD_CONST           1.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
LOAD_NAME            i
LOAD_CONST           3.0
BINARY_OPERATION     
POP_JUMP_IF_FALSE    <JUMP_TARGET>
BINARY_OPERATION     
MAKE_FUNCTION        <test_raise>
    LOAD_NAME            ValueError
    LOAD_CONST           "Test error"
    CALL_FUNCTION        1
    BINARY_OPERATION     
    RETURN_VALUE         
STORE_NAME           test_raise
IMPORT_FROM          math
IMPORT_FROM          sqrt
IMPORT_FROM          square_root
IMPORT_NAME          sys
IMPORT_NAME          system
LOAD_CONST           "global"
STORE_NAME           global_var
MAKE_FUNCTION        <test_global>
    LOAD_NAME            global_var
    LOAD_CONST           "modified"
    STORE_NAME           global_var
    RETURN_VALUE         
STORE_NAME           test_global
MAKE_FUNCTION        <outer>
    LOAD_CONST           "outer"
    STORE_NAME           nonlocal_var
    MAKE_FUNCTION        <inner>
        LOAD_NAME            nonlocal_var
        LOAD_CONST           "inner"
        STORE_NAME           nonlocal_var
        RETURN_VALUE         
    STORE_NAME           inner
    LOAD_NAME            inner
    CALL_FUNCTION        0
    LOAD_NAME            nonlocal_var
    RETURN_VALUE         
STORE_NAME           outer
LOAD_CONST           42.0
STORE_NAME           temp_var
LOAD_NAME            temp_var
BINARY_OPERATION     
LOAD_NAME            print
LOAD_CONST           "9. Missing Node Types Coverage: PASSED"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "\n--- Python Compiler Test Suite: Finished ---"
CALL_FUNCTION        1
LOAD_NAME            print
LOAD_CONST           "--- All tests completed. Check output for any FAILED messages. ---"
CALL_FUNCTION        1