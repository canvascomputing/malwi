RESUME 0
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME sys
STORE_NAME sys
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME math
STORE_NAME math
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME cmath
STORE_NAME cmath
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME collections
STORE_NAME collections
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME itertools
STORE_NAME itertools
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME json
STORE_NAME json
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME re
STORE_NAME re
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME asyncio
STORE_NAME asyncio
LOAD_CONST 0
LOAD_CONST ('wraps',)
IMPORT_NAME functools
IMPORT_FROM wraps
STORE_NAME wraps
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('Any', 'List', 'Dict', 'Tuple', 'Set', 'Optional')
IMPORT_NAME typing
IMPORT_FROM Any
STORE_NAME Any
IMPORT_FROM List
STORE_NAME List
IMPORT_FROM Dict
STORE_NAME Dict
IMPORT_FROM Tuple
STORE_NAME Tuple
IMPORT_FROM Set
STORE_NAME Set
IMPORT_FROM Optional
STORE_NAME Optional
POP_TOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME os
STORE_NAME os
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME subprocess
STORE_NAME subprocess
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME socket
STORE_NAME socket
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME urllib.request
STORE_NAME urllib.request
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME base64
STORE_NAME base64
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME pickle
STORE_NAME pickle
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME marshal
STORE_NAME marshal
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME types
STORE_NAME types
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME importlib
STORE_NAME importlib
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME tempfile
STORE_NAME tempfile
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME shutil
STORE_NAME shutil
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME pathlib
STORE_NAME pathlib
LOAD_CONST 0
LOAD_CONST ('environ', 'path', 'listdir')
IMPORT_NAME os
IMPORT_FROM environ
STORE_NAME environ
IMPORT_FROM path
STORE_NAME path
IMPORT_FROM listdir
STORE_NAME listdir
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('argv', 'exit', 'modules', 'path')
IMPORT_NAME sys
IMPORT_FROM argv
STORE_NAME argv
IMPORT_FROM exit
STORE_NAME exit
IMPORT_FROM modules
STORE_NAME modules
IMPORT_FROM path
STORE_NAME sys_path
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('run', 'Popen', 'PIPE', 'call')
IMPORT_NAME subprocess
IMPORT_FROM run
STORE_NAME run
IMPORT_FROM Popen
STORE_NAME Popen
IMPORT_FROM PIPE
STORE_NAME PIPE
IMPORT_FROM call
STORE_NAME call
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('socket', 'AF_INET', 'SOCK_STREAM')
IMPORT_NAME socket
IMPORT_FROM socket
STORE_NAME socket
IMPORT_FROM AF_INET
STORE_NAME AF_INET
IMPORT_FROM SOCK_STREAM
STORE_NAME SOCK_STREAM
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('urlparse', 'urljoin')
IMPORT_NAME urllib.parse
IMPORT_FROM urlparse
STORE_NAME urlparse
IMPORT_FROM urljoin
STORE_NAME urljoin
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('urlopen', 'Request')
IMPORT_NAME urllib.request
IMPORT_FROM urlopen
STORE_NAME urlopen
IMPORT_FROM Request
STORE_NAME Request
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('b64encode', 'b64decode', 'decodebytes')
IMPORT_NAME base64
IMPORT_FROM b64encode
STORE_NAME b64encode
IMPORT_FROM b64decode
STORE_NAME b64decode
IMPORT_FROM decodebytes
STORE_NAME decodebytes
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('loads', 'dumps', 'load', 'dump')
IMPORT_NAME pickle
IMPORT_FROM loads
STORE_NAME loads
IMPORT_FROM dumps
STORE_NAME dumps
IMPORT_FROM load
STORE_NAME load
IMPORT_FROM dump
STORE_NAME dump
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('loads', 'dumps')
IMPORT_NAME marshal
IMPORT_FROM loads
STORE_NAME marshal_loads
IMPORT_FROM dumps
STORE_NAME marshal_dumps
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('CodeType', 'ModuleType')
IMPORT_NAME types
IMPORT_FROM CodeType
STORE_NAME CodeType
IMPORT_FROM ModuleType
STORE_NAME ModuleType
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('import_module', 'util')
IMPORT_NAME importlib
IMPORT_FROM import_module
STORE_NAME import_module
IMPORT_FROM util
STORE_NAME util
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('mkstemp', 'mkdtemp', 'NamedTemporaryFile')
IMPORT_NAME tempfile
IMPORT_FROM mkstemp
STORE_NAME mkstemp
IMPORT_FROM mkdtemp
STORE_NAME mkdtemp
IMPORT_FROM NamedTemporaryFile
STORE_NAME NamedTemporaryFile
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('rmtree', 'copytree', 'move')
IMPORT_NAME shutil
IMPORT_FROM rmtree
STORE_NAME rmtree
IMPORT_FROM copytree
STORE_NAME copytree
IMPORT_FROM move
STORE_NAME move
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('Path', 'PurePath')
IMPORT_NAME pathlib
IMPORT_FROM Path
STORE_NAME Path
IMPORT_FROM PurePath
STORE_NAME PurePath
POP_TOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME os
STORE_NAME operating_system
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME subprocess
STORE_NAME subproc
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME socket
STORE_NAME sock
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME urllib.request
STORE_NAME web_request
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME base64
STORE_NAME b64
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME pickle
STORE_NAME pkl
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME marshal
STORE_NAME marsh
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME types
STORE_NAME tp
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME importlib
STORE_NAME imp_lib
LOAD_CONST 0
LOAD_CONST ('join', 'exists', 'isfile', 'isdir', 'basename', 'dirname')
IMPORT_NAME os.path
IMPORT_FROM join
STORE_NAME join
IMPORT_FROM exists
STORE_NAME exists
IMPORT_FROM isfile
STORE_NAME isfile
IMPORT_FROM isdir
STORE_NAME isdir
IMPORT_FROM basename
STORE_NAME basename
IMPORT_FROM dirname
STORE_NAME dirname
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('join', 'exists')
IMPORT_NAME os.path
IMPORT_FROM join
STORE_NAME path_join
IMPORT_FROM exists
STORE_NAME path_exists
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('urlopen', 'Request')
IMPORT_NAME urllib.request
IMPORT_FROM urlopen
STORE_NAME open_url
IMPORT_FROM Request
STORE_NAME web_request_obj
POP_TOP None
LOAD_CONST 0
LOAD_CONST ('b64encode', 'b64decode')
IMPORT_NAME base64
IMPORT_FROM b64encode
STORE_NAME encode_b64
IMPORT_FROM b64decode
STORE_NAME decode_b64
POP_TOP None
NOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME ctypes
STORE_NAME ctypes
LOAD_CONST 0
LOAD_CONST ('windll', 'wintypes')
IMPORT_NAME ctypes
IMPORT_FROM windll
STORE_NAME windll
IMPORT_FROM wintypes
STORE_NAME wintypes
POP_TOP None
LOAD_CONST True
STORE_NAME ctypes_available
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ImportError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 25
POP_TOP None
LOAD_CONST False
STORE_NAME ctypes_available
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
NOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME win32api
STORE_NAME win32api
LOAD_CONST 0
LOAD_CONST ('GetSystemMetrics',)
IMPORT_NAME win32api
IMPORT_FROM GetSystemMetrics
STORE_NAME GetSystemMetrics
POP_TOP None
LOAD_CONST True
STORE_NAME win32_available
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ImportError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 23
POP_TOP None
LOAD_CONST False
STORE_NAME win32_available
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
NOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME requests
STORE_NAME requests
LOAD_CONST 0
LOAD_CONST ('get', 'post', 'Session')
IMPORT_NAME requests
IMPORT_FROM get
STORE_NAME get
IMPORT_FROM post
STORE_NAME post
IMPORT_FROM Session
STORE_NAME Session
POP_TOP None
LOAD_CONST True
STORE_NAME requests_available
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ImportError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 27
POP_TOP None
LOAD_CONST False
STORE_NAME requests_available
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
NOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME keyring
STORE_NAME keyring
LOAD_CONST 0
LOAD_CONST ('get_password', 'set_password')
IMPORT_NAME keyring
IMPORT_FROM get_password
STORE_NAME get_password
IMPORT_FROM set_password
STORE_NAME set_password
POP_TOP None
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ImportError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 21
POP_TOP None
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
NOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME sqlite3
STORE_NAME sqlite3
LOAD_CONST 0
LOAD_CONST ('connect', 'Row')
IMPORT_NAME sqlite3
IMPORT_FROM connect
STORE_NAME connect
IMPORT_FROM Row
STORE_NAME Row
POP_TOP None
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ImportError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 21
POP_TOP None
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
NOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME winreg
STORE_NAME winreg
LOAD_CONST 0
LOAD_CONST ('OpenKey', 'QueryValueEx', 'HKEY_LOCAL_MACHINE')
IMPORT_NAME winreg
IMPORT_FROM OpenKey
STORE_NAME OpenKey
IMPORT_FROM QueryValueEx
STORE_NAME QueryValueEx
IMPORT_FROM HKEY_LOCAL_MACHINE
STORE_NAME HKEY_LOCAL_MACHINE
POP_TOP None
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ImportError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 23
POP_TOP None
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
LOAD_CONST CodeObject(name='dynamic_import_test', byte_code=[Instruction(LOAD_CONST, "os"), Instruction(STORE_GLOBAL, module_name), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, __import__), Instruction(LOAD_GLOBAL, module_name), Instruction(CALL, 1), Instruction(STORE_GLOBAL, imported_os), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, getattr), Instruction(LOAD_GLOBAL, imported_os), Instruction(LOAD_CONST, "system"), Instruction(CALL, 2), Instruction(STORE_GLOBAL, getattr_call), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, getattr), Instruction(LOAD_GLOBAL, __builtins__), Instruction(LOAD_CONST, "exec"), Instruction(CALL, 2), Instruction(STORE_GLOBAL, exec_func), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, getattr), Instruction(LOAD_GLOBAL, __builtins__), Instruction(LOAD_CONST, "eval"), Instruction(CALL, 2), Instruction(STORE_GLOBAL, eval_func), Instruction(RETURN_VALUE, None)], source_code='def dynamic_import_test():\n    # These patterns are commonly used to evade static analysis\n    module_name = "os"\n    imported_os = __import__(module_name)\n\n    getattr_call = getattr(imported_os, "system")\n    exec_func = getattr(__builtins__, "exec")\n    eval_func = getattr(__builtins__, "eval")', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(119, 126), language='python')
MAKE_FUNCTION 0
STORE_NAME dynamic_import_test
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "--- Extended Import Test Cases: COMPLETED ---"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "--- Python Compiler Test Suite: Starting ---"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 1. Basic Syntax and Literals ---"
CALL 1
POP_TOP None
LOAD_CONST """
This is a
multi-line docstring.
"""
POP_TOP None
LOAD_CONST 123.0
STORE_NAME integer_literal
LOAD_CONST 3.14
STORE_NAME float_literal
LOAD_CONST 2.0
LOAD_CONST 3.0
BINARY_OP 0
STORE_NAME complex_literal
LOAD_CONST 0b1010
STORE_NAME binary_literal
LOAD_CONST 0o777
STORE_NAME octal_literal
LOAD_CONST 0xABC
STORE_NAME hex_literal
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "1.2. Numeric Literals: PASSED"
CALL 1
POP_TOP None
LOAD_CONST "hello"
STORE_NAME single_quoted_string
LOAD_CONST "world"
STORE_NAME double_quoted_string
LOAD_CONST """
Hello
World
"""
STORE_NAME multi_line_string
LOAD_CONST r"C:\new\path"
STORE_NAME raw_string
LOAD_CONST Formatted string with 
LOAD_NAME integer_literal
FORMAT_VALUE None
BUILD_STRING 2
STORE_NAME f_string
LOAD_CONST b"this is a byte string"
STORE_NAME byte_string
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "1.3. String Literals: PASSED"
CALL 1
POP_TOP None
LOAD_CONST True
STORE_NAME true_literal
LOAD_CONST False
STORE_NAME false_literal
LOAD_CONST None
STORE_NAME none_literal
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "1.4. Boolean and None Literals: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 2. Data Types and Operations ---"
CALL 1
POP_TOP None
LOAD_CONST 10.0
LOAD_CONST 3.0
UNPACK_SEQUENCE 2
STORE_NAME a
STORE_NAME b
STORE_NAME a, b
LOAD_NAME a
LOAD_NAME b
BINARY_OP 0
POP_TOP None
LOAD_NAME a
LOAD_NAME b
BINARY_OP 2
POP_TOP None
LOAD_NAME a
LOAD_NAME b
BINARY_OP 5
POP_TOP None
LOAD_NAME a
LOAD_NAME b
BINARY_OP 11
POP_TOP None
LOAD_NAME a
LOAD_NAME b
BINARY_OP 12
POP_TOP None
LOAD_NAME a
LOAD_NAME b
BINARY_OP 6
POP_TOP None
LOAD_NAME a
LOAD_NAME b
BINARY_OP 8
POP_TOP None
LOAD_CONST 5.0
UNARY_NEGATIVE None
STORE_NAME c
LOAD_NAME c
UNARY_POSITIVE None
POP_TOP None
LOAD_NAME c
UNARY_NEGATIVE None
POP_TOP None
PUSH_NULL None
LOAD_NAME abs
LOAD_NAME c
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME divmod
LOAD_NAME a
LOAD_NAME b
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME pow
LOAD_NAME a
LOAD_NAME b
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME round
LOAD_CONST 3.14159
LOAD_CONST 2.0
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.1. Numeric Types: PASSED"
CALL 1
POP_TOP None
LOAD_CONST "hello"
STORE_NAME s1
LOAD_CONST "world"
STORE_NAME s2
LOAD_NAME s1
LOAD_CONST " "
BINARY_OP 0
LOAD_NAME s2
BINARY_OP 0
POP_TOP None
LOAD_NAME s1
LOAD_CONST 3.0
BINARY_OP 5
POP_TOP None
LOAD_CONST "e"
LOAD_NAME s1
COMPARE_OP None
POP_TOP None
LOAD_CONST "x"
LOAD_NAME s1
COMPARE_OP None
POP_TOP None
LOAD_NAME s1
LOAD_CONST 1.0
BINARY_SUBSCR None
POP_TOP None
LOAD_NAME s1
LOAD_CONST 1.0
UNARY_NEGATIVE None
BINARY_SUBSCR None
POP_TOP None
LOAD_NAME s1
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
POP_TOP None
PUSH_NULL None
LOAD_NAME len
LOAD_NAME s1
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_CONST "Hello"
LOAD_ATTR lower
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_CONST "world"
LOAD_ATTR upper
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_CONST "  spaced  "
LOAD_ATTR strip
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_CONST "comma,separated"
LOAD_ATTR split
LOAD_CONST ","
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.2. String Type: PASSED"
CALL 1
POP_TOP None
LOAD_CONST 1.0
LOAD_CONST "two"
LOAD_CONST 3.0
BUILD_LIST 3
STORE_NAME my_list
PUSH_NULL None
LOAD_NAME len
LOAD_NAME my_list
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME my_list
LOAD_ATTR append
LOAD_CONST 4.0
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME my_list
LOAD_ATTR pop
CALL 0
POP_TOP None
LOAD_CONST "one"
LOAD_NAME my_list
LOAD_CONST 0.0
STORE_SUBSCR None
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 2
LOAD_CONST 4.0
BUILD_LIST 3
STORE_NAME nested_list
LOAD_NAME nested_list
LOAD_CONST 1.0
BINARY_SUBSCR None
LOAD_CONST 1.0
BINARY_SUBSCR None
POP_TOP None
BUILD_LIST 0
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 5.0
CALL 1
GET_ITER None
FOR_ITER 13
STORE_FAST x
LOAD_FAST x
LOAD_FAST x
BINARY_OP 5
LIST_APPEND 1
JUMP_FORWARD 6
STORE_NAME list_comp
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.3. List Type: PASSED"
CALL 1
POP_TOP None
LOAD_CONST 1.0
LOAD_CONST "two"
LOAD_CONST 3.0
BUILD_TUPLE 3
STORE_NAME my_tuple
PUSH_NULL None
LOAD_NAME len
LOAD_NAME my_tuple
CALL 1
POP_TOP None
LOAD_NAME my_tuple
LOAD_CONST 1.0
BINARY_SUBSCR None
POP_TOP None
NOP None
LOAD_CONST "new"
LOAD_NAME my_tuple
LOAD_CONST 1.0
STORE_SUBSCR None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.4. Tuple Immutability: FAILED"
CALL 1
POP_TOP None
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME TypeError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 23
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.4. Tuple Immutability: PASSED"
CALL 1
POP_TOP None
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
LOAD_NAME my_tuple
UNPACK_SEQUENCE 3
STORE_NAME a
STORE_NAME b
STORE_NAME c
STORE_NAME a, b, c
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.4. Tuple Type: PASSED"
CALL 1
POP_TOP None
LOAD_CONST "one"
LOAD_CONST 1.0
LOAD_CONST "two"
LOAD_CONST 2.0
BUILD_MAP 2
STORE_NAME my_dict
LOAD_NAME my_dict
LOAD_CONST "one"
BINARY_SUBSCR None
POP_TOP None
LOAD_CONST 3.0
LOAD_NAME my_dict
LOAD_CONST "three"
STORE_SUBSCR None
LOAD_CONST "three"
LOAD_NAME my_dict
COMPARE_OP None
POP_TOP None
PUSH_NULL None
LOAD_NAME list
PUSH_NULL None
LOAD_NAME my_dict
LOAD_ATTR keys
CALL 0
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME list
PUSH_NULL None
LOAD_NAME my_dict
LOAD_ATTR values
CALL 0
CALL 1
POP_TOP None
LOAD_NAME my_dict
LOAD_CONST "two"
DELETE_SUBSCR None
LOAD_CONST "two"
LOAD_NAME my_dict
COMPARE_OP None
POP_TOP None
BUILD_MAP 0
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 3.0
CALL 1
GET_ITER None
FOR_ITER 14
STORE_FAST x
LOAD_FAST x
LOAD_FAST x
LOAD_FAST x
BINARY_OP 5
MAP_ADD 1
JUMP_FORWARD 6
STORE_NAME dict_comp
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.5. Dictionary Type: PASSED"
CALL 1
POP_TOP None
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_SET 4
STORE_NAME my_set
PUSH_NULL None
LOAD_NAME my_set
LOAD_ATTR add
LOAD_CONST 4.0
CALL 1
POP_TOP None
LOAD_CONST 4.0
LOAD_NAME my_set
COMPARE_OP None
POP_TOP None
PUSH_NULL None
LOAD_NAME my_set
LOAD_ATTR remove
LOAD_CONST 2.0
CALL 1
POP_TOP None
LOAD_CONST 2.0
LOAD_NAME my_set
COMPARE_OP None
POP_TOP None
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_SET 3
STORE_NAME set1
LOAD_CONST 3.0
LOAD_CONST 4.0
LOAD_CONST 5.0
BUILD_SET 3
STORE_NAME set2
LOAD_NAME set1
LOAD_NAME set2
BINARY_OP 4
POP_TOP None
LOAD_NAME set1
LOAD_NAME set2
BINARY_OP 1
POP_TOP None
LOAD_NAME set1
LOAD_NAME set2
BINARY_OP 2
POP_TOP None
LOAD_NAME set1
LOAD_NAME set2
BINARY_OP 7
POP_TOP None
BUILD_SET 0
LOAD_CONST "abracadabra"
GET_ITER None
FOR_ITER 12
STORE_FAST x
LOAD_FAST x
LOAD_CONST "abc"
COMPARE_OP None
POP_JUMP_IF_FALSE 3
LOAD_FAST x
SET_ADD 1
JUMP_FORWARD 3
STORE_NAME set_comp
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "2.6. Set Type: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 3. Control Flow ---"
CALL 1
POP_TOP None
LOAD_CONST 10.0
STORE_NAME x
LOAD_NAME x
LOAD_CONST 5.0
COMPARE_OP None
POP_JUMP_IF_FALSE 7
LOAD_CONST "greater"
STORE_NAME result
JUMP_FORWARD 12
LOAD_NAME x
LOAD_CONST 5.0
COMPARE_OP None
LOAD_CONST "equal"
STORE_NAME result
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "3.1. if/elif/else: PASSED"
CALL 1
POP_TOP None
LOAD_CONST 0.0
STORE_NAME total
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 5.0
CALL 1
GET_ITER None
FOR_ITER 6
STORE_NAME i
LOAD_NAME total
LOAD_NAME i
BINARY_OP None
STORE_NAME total
JUMP_BACKWARD 7
END_FOR None
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 3
GET_ITER None
FOR_ITER 7
STORE_NAME i
LOAD_NAME i
LOAD_CONST 4.0
COMPARE_OP None
POP_JUMP_IF_FALSE 5
BINARY_OPERATION None
JUMP_BACKWARD 8
END_FOR None
LOAD_CONST 5.0
STORE_NAME count
LOAD_NAME count
LOAD_CONST 0.0
COMPARE_OP None
POP_JUMP_IF_FALSE 5
LOAD_NAME count
LOAD_CONST 1.0
BINARY_OP None
STORE_NAME count
JUMP_BACKWARD 9
LOAD_CONST 3.0
STORE_NAME count
LOAD_NAME count
LOAD_CONST 0.0
COMPARE_OP None
POP_JUMP_IF_FALSE 11
LOAD_NAME count
LOAD_CONST 1.0
BINARY_OP None
STORE_NAME count
LOAD_NAME count
LOAD_CONST 1.0
UNARY_NEGATIVE None
COMPARE_OP None
POP_JUMP_IF_FALSE 6
BINARY_OPERATION None
JUMP_BACKWARD 15
LOAD_CONST False
STORE_NAME found_even
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 10.0
CALL 1
GET_ITER None
FOR_ITER 20
STORE_NAME i
LOAD_NAME i
LOAD_CONST 2.0
BINARY_OP 6
LOAD_CONST 0.0
COMPARE_OP None
POP_JUMP_IF_FALSE 7
BINARY_OPERATION None
LOAD_NAME i
LOAD_CONST 5.0
COMPARE_OP None
POP_JUMP_IF_FALSE 5
BINARY_OPERATION None
LOAD_NAME i
LOAD_CONST 4.0
COMPARE_OP None
POP_JUMP_IF_FALSE 6
LOAD_CONST True
STORE_NAME found_even
JUMP_BACKWARD 21
END_FOR None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "3.6. break and continue: PASSED"
CALL 1
POP_TOP None
NOP None
LOAD_CONST 1.0
LOAD_CONST 0.0
BINARY_OP 11
POP_TOP None
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ZeroDivisionError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 18
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "3.7. try/except: PASSED"
CALL 1
POP_TOP None
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='MyContext', byte_code=[Instruction(MAKE_FUNCTION, __enter__), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, print), Instruction(LOAD_CONST, "Entering context"), Instruction(CALL, 1), Instruction(POP_TOP, None), Instruction(LOAD_CONST, "Hello from with"), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __enter__), Instruction(MAKE_FUNCTION, __exit__), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, print), Instruction(LOAD_CONST, "Exiting context"), Instruction(CALL, 1), Instruction(POP_TOP, None), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __exit__)], source_code='class MyContext:\n    def __enter__(self):\n        print("Entering context")\n        return "Hello from with"\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print("Exiting context")', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(326, 332), language='python')
MAKE_FUNCTION 0
LOAD_CONST MyContext
CALL 2
STORE_NAME MyContext
PUSH_NULL None
LOAD_NAME MyContext
CALL 0
BEFORE_WITH None
STORE_NAME cm
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
CALL 2
POP_TOP None
PUSH_EXC_INFO None
WITH_EXCEPT_START None
POP_JUMP_IF_TRUE 14
RERAISE 2
POP_TOP None
POP_EXCEPT None
POP_TOP None
POP_TOP None
JUMP_BACKWARD 5
COPY 3
POP_EXCEPT None
RERAISE 1
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "3.8. with statement: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 4. Functions and Scopes ---"
CALL 1
POP_TOP None
LOAD_CONST CodeObject(name='greet', byte_code=[Instruction(LOAD_CONST, Hello, ), Instruction(LOAD_PARAM, name), Instruction(FORMAT_VALUE, None), Instruction(LOAD_CONST, !), Instruction(BUILD_STRING, 3), Instruction(RETURN_VALUE, None)], source_code='def greet(name):\n    return f"Hello, {name}!"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(348, 349), language='python')
MAKE_FUNCTION 0
STORE_NAME greet
PUSH_NULL None
LOAD_NAME greet
LOAD_CONST "World"
CALL 1
POP_TOP None
LOAD_CONST CodeObject(name='func_with_args', byte_code=[Instruction(LOAD_PARAM, a), Instruction(LOAD_PARAM, b), Instruction(BINARY_OP, 0), Instruction(LOAD_PARAM, c), Instruction(BINARY_OP, 0), Instruction(RETURN_VALUE, None)], source_code='def func_with_args(a, b, c=10):\n    return a + b + c', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(356, 357), language='python')
MAKE_FUNCTION 0
STORE_NAME func_with_args
PUSH_NULL None
LOAD_NAME func_with_args
LOAD_CONST 1.0
LOAD_CONST 2.0
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME func_with_args
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME func_with_args
LOAD_CONST 5.0
LOAD_CONST 5.0
KW_NAMES ('a', 'b')
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME func_with_args
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
KW_NAMES ('c', 'b', 'a')
CALL 3
POP_TOP None
LOAD_CONST CodeObject(name='func_with_arbitrary_args', byte_code=[Instruction(LOAD_PARAM, args), Instruction(LOAD_PARAM, kwargs), Instruction(RETURN_VALUE, None)], source_code='def func_with_arbitrary_args(*args, **kwargs):\n    return args, kwargs', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(367, 368), language='python')
MAKE_FUNCTION 0
STORE_NAME func_with_arbitrary_args
PUSH_NULL None
LOAD_NAME func_with_arbitrary_args
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST "test"
LOAD_CONST 123.0
KW_NAMES ('name', 'value')
CALL 4
UNPACK_SEQUENCE 2
STORE_NAME args_val
STORE_NAME kwargs_val
STORE_NAME args_val, kwargs_val
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "Testing KW_NAMES generation"
LOAD_CONST ""
LOAD_CONST True
KW_NAMES ('end', 'flush')
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME open
LOAD_CONST "test.txt"
LOAD_CONST "w"
LOAD_CONST "utf-8"
KW_NAMES ('mode', 'encoding')
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME sorted
LOAD_CONST 3.0
LOAD_CONST 1.0
LOAD_CONST 4.0
LOAD_CONST 2.0
BUILD_LIST 4
MAKE_FUNCTION lambda
LOAD_CONST True
KW_NAMES ('key', 'reverse')
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME dict
LOAD_CONST "test"
LOAD_CONST 42.0
LOAD_CONST True
KW_NAMES ('name', 'value', 'flag')
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME max
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 3
LOAD_CONST 0.0
KW_NAMES ('default',)
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME min
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 3
LOAD_CONST 0.0
KW_NAMES ('default',)
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 0.0
LOAD_CONST 10.0
LOAD_CONST 2.0
KW_NAMES ('step',)
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_CONST "Hello {name}"
LOAD_ATTR format
LOAD_CONST "World"
KW_NAMES ('name',)
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME func_with_args
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
KW_NAMES ('a', 'b', 'c')
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME func_with_args
LOAD_CONST 10.0
LOAD_CONST 20.0
LOAD_CONST 30.0
KW_NAMES ('c',)
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_CONST "test string"
LOAD_ATTR replace
LOAD_CONST "test"
LOAD_CONST "new"
LOAD_CONST 1.0
KW_NAMES ('count',)
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 3
LOAD_ATTR index
LOAD_CONST 2.0
LOAD_CONST 0.0
KW_NAMES ('start',)
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='TestClass', byte_code=[Instruction(MAKE_FUNCTION, __init__), Instruction(LOAD_PARAM, param1), Instruction(LOAD_PARAM, self), Instruction(STORE_ATTR, param1), Instruction(LOAD_PARAM, param2), Instruction(LOAD_PARAM, self), Instruction(STORE_ATTR, param2), Instruction(LOAD_PARAM, param3), Instruction(LOAD_PARAM, self), Instruction(STORE_ATTR, param3), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __init__)], source_code='class TestClass:\n    def __init__(self, param1, param2=None, param3=False):\n        self.param1 = param1\n        self.param2 = param2\n        self.param3 = param3', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(392, 396), language='python')
MAKE_FUNCTION 0
LOAD_CONST TestClass
CALL 2
STORE_NAME TestClass
PUSH_NULL None
LOAD_NAME TestClass
LOAD_CONST "value"
LOAD_CONST "optional"
LOAD_CONST True
KW_NAMES ('param2', 'param3')
CALL 3
STORE_NAME test_instance
PUSH_NULL None
LOAD_NAME enumerate
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 3
LOAD_CONST 1.0
KW_NAMES ('start',)
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME zip
LOAD_CONST 1.0
LOAD_CONST 2.0
BUILD_LIST 2
LOAD_CONST 3.0
LOAD_CONST 4.0
BUILD_LIST 2
LOAD_CONST True
KW_NAMES ('strict',)
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME filter
MAKE_FUNCTION lambda
LOAD_CONST 1.0
LOAD_CONST 1.0
UNARY_NEGATIVE None
LOAD_CONST 2.0
BUILD_LIST 3
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME dict
LOAD_CONST "test"
LOAD_CONST 42.0
LOAD_CONST 3.14
LOAD_CONST True
LOAD_CONST None
KW_NAMES ('string_arg', 'int_arg', 'float_arg', 'bool_arg', 'none_arg')
CALL 5
STORE_NAME complex_call
MAKE_FUNCTION lambda
STORE_NAME multiply
PUSH_NULL None
LOAD_NAME multiply
LOAD_CONST 3.0
LOAD_CONST 4.0
CALL 2
POP_TOP None
LOAD_CONST CodeObject(name='outer_func', byte_code=[Instruction(LOAD_CONST, 10.0), Instruction(STORE_GLOBAL, x), Instruction(MAKE_FUNCTION, inner_func), Instruction(LOAD_DEREF, x), Instruction(LOAD_CONST, 1.0), Instruction(BINARY_OP, None), Instruction(STORE_DEREF, x), Instruction(LOAD_DEREF, x), Instruction(RETURN_VALUE, None), Instruction(STORE_GLOBAL, inner_func), Instruction(LOAD_GLOBAL, inner_func), Instruction(RETURN_VALUE, None)], source_code='def outer_func():\n    x = 10\n\n    def inner_func():\n        nonlocal x\n        x += 1\n        return x\n\n    return inner_func', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(420, 428), language='python')
MAKE_FUNCTION 0
STORE_NAME outer_func
PUSH_NULL None
LOAD_NAME outer_func
CALL 0
STORE_NAME closure
PUSH_NULL None
LOAD_NAME closure
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME closure
CALL 0
POP_TOP None
LOAD_CONST 100.0
STORE_GLOBAL global_var
LOAD_CONST CodeObject(name='modify_global', byte_code=[Instruction(LOAD_CONST, 200.0), Instruction(STORE_GLOBAL, global_var), Instruction(RETURN_VALUE, None)], source_code='def modify_global():\n    global global_var\n    global_var = 200', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(439, 441), language='python')
MAKE_FUNCTION 0
STORE_NAME modify_global
PUSH_NULL None
LOAD_NAME modify_global
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "4.1-4.6. Functions and Scopes: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 5. Object-Oriented Programming ---"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='MyClass', byte_code=[Instruction(LOAD_CONST, 10.0), Instruction(STORE_NAME, class_variable), Instruction(MAKE_FUNCTION, __init__), Instruction(LOAD_PARAM, instance_variable), Instruction(LOAD_PARAM, self), Instruction(STORE_ATTR, instance_variable), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __init__), Instruction(MAKE_FUNCTION, instance_method), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, instance_variable), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, instance_method), Instruction(LOAD_NAME, classmethod), Instruction(LOAD_CONST, CodeObject(name='class_method', byte_code=[Instruction(LOAD_PARAM, cls), Instruction(LOAD_ATTR, class_variable), Instruction(RETURN_VALUE, None)], source_code='def class_method(cls):\n        return cls.class_variable', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(465, 466), language='python')), Instruction(MAKE_FUNCTION, 0), Instruction(CALL, 0), Instruction(STORE_NAME, class_method), Instruction(LOAD_NAME, staticmethod), Instruction(LOAD_CONST, CodeObject(name='static_method', byte_code=[Instruction(LOAD_CONST, "static"), Instruction(RETURN_VALUE, None)], source_code='def static_method():\n        return "static"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(469, 470), language='python')), Instruction(MAKE_FUNCTION, 0), Instruction(CALL, 0), Instruction(STORE_NAME, static_method)], source_code='class MyClass:\n    class_variable = 10\n\n    def __init__(self, instance_variable):\n        self.instance_variable = instance_variable\n\n    def instance_method(self):\n        return self.instance_variable\n\n    @classmethod\n    def class_method(cls):\n        return cls.class_variable\n\n    @staticmethod\n    def static_method():\n        return "static"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(455, 470), language='python')
MAKE_FUNCTION 0
LOAD_CONST MyClass
CALL 2
STORE_NAME MyClass
PUSH_NULL None
LOAD_NAME MyClass
LOAD_CONST 20.0
CALL 1
STORE_NAME obj
LOAD_NAME obj
LOAD_ATTR instance_variable
POP_TOP None
PUSH_NULL None
LOAD_NAME obj
LOAD_ATTR instance_method
CALL 0
POP_TOP None
LOAD_NAME MyClass
LOAD_ATTR class_variable
POP_TOP None
PUSH_NULL None
LOAD_NAME MyClass
LOAD_ATTR class_method
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME MyClass
LOAD_ATTR static_method
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "5.1. Classes: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='ParentA', byte_code=[Instruction(MAKE_FUNCTION, method_a), Instruction(LOAD_CONST, "A"), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, method_a)], source_code='class ParentA:\n    def method_a(self):\n        return "A"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(483, 485), language='python')
MAKE_FUNCTION 0
LOAD_CONST ParentA
CALL 2
STORE_NAME ParentA
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='ParentB', byte_code=[Instruction(MAKE_FUNCTION, method_b), Instruction(LOAD_CONST, "B"), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, method_b)], source_code='class ParentB:\n    def method_b(self):\n        return "B"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(488, 490), language='python')
MAKE_FUNCTION 0
LOAD_CONST ParentB
CALL 2
STORE_NAME ParentB
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='Child', byte_code=[Instruction(MAKE_FUNCTION, method_c), Instruction(LOAD_CONST, "C"), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, method_c)], source_code='class Child(ParentA, ParentB):\n    def method_c(self):\n        return "C"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(493, 495), language='python')
MAKE_FUNCTION 0
LOAD_CONST Child
CALL 2
STORE_NAME Child
PUSH_NULL None
LOAD_NAME Child
CALL 0
STORE_NAME child_obj
PUSH_NULL None
LOAD_NAME child_obj
LOAD_ATTR method_a
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME child_obj
LOAD_ATTR method_b
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME child_obj
LOAD_ATTR method_c
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "5.2. Inheritance: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='Vector', byte_code=[Instruction(MAKE_FUNCTION, __init__), Instruction(LOAD_DEREF, x), Instruction(LOAD_PARAM, self), Instruction(STORE_ATTR, x), Instruction(LOAD_PARAM, y), Instruction(LOAD_PARAM, self), Instruction(STORE_ATTR, y), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __init__), Instruction(MAKE_FUNCTION, __add__), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, Vector), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, x), Instruction(LOAD_PARAM, other), Instruction(LOAD_ATTR, x), Instruction(BINARY_OP, 0), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, y), Instruction(LOAD_PARAM, other), Instruction(LOAD_ATTR, y), Instruction(BINARY_OP, 0), Instruction(CALL, 2), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __add__), Instruction(MAKE_FUNCTION, __repr__), Instruction(LOAD_CONST, Vector(), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, x), Instruction(FORMAT_VALUE, None), Instruction(LOAD_CONST, , ), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, y), Instruction(FORMAT_VALUE, None), Instruction(LOAD_CONST, )), Instruction(BUILD_STRING, 5), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __repr__), Instruction(MAKE_FUNCTION, __len__), Instruction(LOAD_CONST, 2.0), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __len__), Instruction(MAKE_FUNCTION, __getitem__), Instruction(LOAD_PARAM, index), Instruction(LOAD_CONST, 0.0), Instruction(COMPARE_OP, None), Instruction(POP_JUMP_IF_FALSE, 7), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, x), Instruction(RETURN_VALUE, None), Instruction(LOAD_PARAM, index), Instruction(LOAD_CONST, 1.0), Instruction(COMPARE_OP, None), Instruction(POP_JUMP_IF_FALSE, 7), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, y), Instruction(RETURN_VALUE, None), Instruction(LOAD_GLOBAL, IndexError), Instruction(BINARY_OPERATION, None), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __getitem__)], source_code='class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __repr__(self):\n        return f"Vector({self.x}, {self.y})"\n\n    def __len__(self):\n        return 2\n\n    def __getitem__(self, index):\n        if index == 0:\n            return self.x\n        if index == 1:\n            return self.y\n        raise IndexError', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(506, 525), language='python')
MAKE_FUNCTION 0
LOAD_CONST Vector
CALL 2
STORE_NAME Vector
PUSH_NULL None
LOAD_NAME Vector
LOAD_CONST 1.0
LOAD_CONST 2.0
CALL 2
STORE_NAME v1
PUSH_NULL None
LOAD_NAME Vector
LOAD_CONST 3.0
LOAD_CONST 4.0
CALL 2
STORE_NAME v2
LOAD_NAME v1
LOAD_NAME v2
BINARY_OP 0
STORE_NAME v3
PUSH_NULL None
LOAD_NAME repr
LOAD_NAME v3
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME len
LOAD_NAME v3
CALL 1
POP_TOP None
LOAD_NAME v3
LOAD_CONST 0.0
BINARY_SUBSCR None
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "5.3. Dunder Methods: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='Circle', byte_code=[Instruction(MAKE_FUNCTION, __init__), Instruction(LOAD_PARAM, radius), Instruction(LOAD_PARAM, self), Instruction(STORE_ATTR, _radius), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __init__), Instruction(LOAD_NAME, property), Instruction(LOAD_CONST, CodeObject(name='radius', byte_code=[Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, _radius), Instruction(RETURN_VALUE, None)], source_code='def radius(self):\n        return self._radius', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(543, 544), language='python')), Instruction(MAKE_FUNCTION, 0), Instruction(CALL, 0), Instruction(STORE_NAME, radius), Instruction(LOAD_NAME, property), Instruction(LOAD_CONST, CodeObject(name='area', byte_code=[Instruction(LOAD_CONST, 3.14), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, _radius), Instruction(LOAD_CONST, 2.0), Instruction(BINARY_OP, 8), Instruction(BINARY_OP, 5), Instruction(RETURN_VALUE, None)], source_code='def area(self):\n        return 3.14 * self._radius**2', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(553, 554), language='python')), Instruction(MAKE_FUNCTION, 0), Instruction(CALL, 0), Instruction(STORE_NAME, area)], source_code='class Circle:\n    def __init__(self, radius):\n        self._radius = radius\n\n    @property\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        if value < 0:\n            raise ValueError("Radius cannot be negative")\n        self._radius = value\n\n    @property\n    def area(self):\n        return 3.14 * self._radius**2', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(538, 554), language='python')
MAKE_FUNCTION 0
LOAD_CONST Circle
CALL 2
STORE_NAME Circle
PUSH_NULL None
LOAD_NAME Circle
LOAD_CONST 5.0
CALL 1
STORE_NAME c
LOAD_NAME c
LOAD_ATTR radius
POP_TOP None
LOAD_NAME c
LOAD_ATTR area
POP_TOP None
LOAD_CONST 10.0
LOAD_NAME c
STORE_ATTR radius
LOAD_NAME c
LOAD_ATTR radius
POP_TOP None
NOP None
LOAD_CONST 1.0
UNARY_NEGATIVE None
LOAD_NAME c
STORE_ATTR radius
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ValueError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 18
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "5.4. Properties: PASSED"
CALL 1
POP_TOP None
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 6. Advanced Features ---"
CALL 1
POP_TOP None
LOAD_CONST CodeObject(name='my_decorator', byte_code=[Instruction(LOAD_GLOBAL, wrapper), Instruction(RETURN_VALUE, None)], source_code='def my_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print("Something is happening before the function is called.")\n        result = func(*args, **kwargs)\n        print("Something is happening after the function is called.")\n        return result\n\n    return wrapper', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(575, 583), language='python')
MAKE_FUNCTION 0
STORE_NAME my_decorator
LOAD_NAME my_decorator
LOAD_CONST CodeObject(name='say_whee', byte_code=[Instruction(LOAD_CONST, "Whee!"), Instruction(RETURN_VALUE, None)], source_code='def say_whee():\n    return "Whee!"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(587, 588), language='python')
MAKE_FUNCTION 0
CALL 0
STORE_NAME say_whee
PUSH_NULL None
LOAD_NAME say_whee
CALL 0
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "6.1. Decorators: PASSED"
CALL 1
POP_TOP None
LOAD_CONST CodeObject(name='my_generator', byte_code=[Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, range), Instruction(LOAD_PARAM, n), Instruction(CALL, 1), Instruction(GET_ITER, None), Instruction(FOR_ITER, 5), Instruction(STORE_NAME, i), Instruction(LOAD_CONST, None), Instruction(YIELD_VALUE, None), Instruction(POP_TOP, None), Instruction(JUMP_BACKWARD, 6), Instruction(END_FOR, None), Instruction(RETURN_VALUE, None)], source_code='def my_generator(n):\n    for i in range(n):\n        yield i', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(596, 598), language='python')
GENERATOR_FUNCTION 0
STORE_NAME my_generator
PUSH_NULL None
LOAD_NAME my_generator
LOAD_CONST 3.0
CALL 1
STORE_NAME gen
PUSH_NULL None
LOAD_NAME next
LOAD_NAME gen
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME next
LOAD_NAME gen
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME next
LOAD_NAME gen
CALL 1
POP_TOP None
NOP None
PUSH_NULL None
LOAD_NAME next
LOAD_NAME gen
CALL 1
POP_TOP None
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME StopIteration
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 19
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "6.2. Generators: PASSED"
CALL 1
POP_TOP None
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
LOAD_CONST CodeObject(name='my_coroutine', byte_code=[Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, asyncio), Instruction(LOAD_ATTR, sleep), Instruction(LOAD_CONST, 0.01), Instruction(CALL, 1), Instruction(AWAIT_EXPRESSION, None), Instruction(POP_TOP, None), Instruction(LOAD_CONST, "Coroutine finished"), Instruction(RETURN_VALUE, None)], source_code='async def my_coroutine():\n    await asyncio.sleep(0.01)\n    return "Coroutine finished"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(612, 614), language='python')
ASYNC_FUNCTION 0
STORE_NAME my_coroutine
LOAD_CONST CodeObject(name='main_async', byte_code=[Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, my_coroutine), Instruction(CALL, 0), Instruction(AWAIT_EXPRESSION, None), Instruction(STORE_GLOBAL, result), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, print), Instruction(LOAD_CONST, "6.3. Coroutines (async/await): PASSED"), Instruction(CALL, 1), Instruction(POP_TOP, None), Instruction(RETURN_VALUE, None)], source_code='async def main_async():\n    result = await my_coroutine()\n    print("6.3. Coroutines (async/await): PASSED")', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(617, 619), language='python')
ASYNC_FUNCTION 0
STORE_NAME main_async
PUSH_NULL None
LOAD_NAME asyncio
LOAD_ATTR run
PUSH_NULL None
LOAD_NAME main_async
CALL 0
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='MyMeta', byte_code=[Instruction(MAKE_FUNCTION, __new__), Instruction(LOAD_CONST, "Hello from metaclass"), Instruction(LOAD_PARAM, dct), Instruction(LOAD_CONST, "new_attribute"), Instruction(STORE_SUBSCR, None), Instruction(PUSH_NULL, None), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, super), Instruction(CALL, 0), Instruction(LOAD_ATTR, __new__), Instruction(LOAD_PARAM, cls), Instruction(LOAD_PARAM, name), Instruction(LOAD_PARAM, bases), Instruction(LOAD_PARAM, dct), Instruction(CALL, 4), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __new__)], source_code='class MyMeta(type):\n    def __new__(cls, name, bases, dct):\n        dct["new_attribute"] = "Hello from metaclass"\n        return super().__new__(cls, name, bases, dct)', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(626, 629), language='python')
MAKE_FUNCTION 0
LOAD_CONST MyMeta
CALL 2
STORE_NAME MyMeta
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='MyClassWithMeta', byte_code=[], source_code='class MyClassWithMeta(metaclass=MyMeta):\n    pass', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(632, 633), language='python')
MAKE_FUNCTION 0
LOAD_CONST MyClassWithMeta
CALL 2
STORE_NAME MyClassWithMeta
PUSH_NULL None
LOAD_NAME hasattr
LOAD_NAME MyClassWithMeta
LOAD_CONST "new_attribute"
CALL 2
POP_TOP None
LOAD_NAME MyClassWithMeta
LOAD_ATTR new_attribute
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "6.4. Metaclasses: PASSED"
CALL 1
POP_TOP None
LOAD_CONST CodeObject(name='hinted_function', byte_code=[Instruction(LOAD_PARAM, name), Instruction(FORMAT_VALUE, None), Instruction(LOAD_CONST,  is ), Instruction(LOAD_PARAM, age), Instruction(FORMAT_VALUE, None), Instruction(LOAD_CONST,  years old.), Instruction(BUILD_STRING, 4), Instruction(RETURN_VALUE, None)], source_code='def hinted_function(name: str, age: int) -> str:\n    return f"{name} is {age} years old."', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(642, 643), language='python')
MAKE_FUNCTION 0
STORE_NAME hinted_function
PUSH_NULL None
LOAD_NAME hinted_function
LOAD_CONST "Alice"
LOAD_CONST 30.0
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "6.5. Type Hinting: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 7. Standard Library Usage ---"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME math
LOAD_ATTR sqrt
LOAD_CONST 16.0
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME math
LOAD_ATTR isclose
LOAD_NAME math
LOAD_ATTR pi
LOAD_CONST 3.14159
LOAD_CONST 1e-05
KW_NAMES ('rel_tol',)
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME cmath
LOAD_ATTR sqrt
LOAD_CONST 1.0
UNARY_NEGATIVE None
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "7.1. math and cmath: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME collections
LOAD_ATTR deque
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 3
CALL 1
STORE_NAME d
PUSH_NULL None
LOAD_NAME d
LOAD_ATTR appendleft
LOAD_CONST 0.0
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME collections
LOAD_ATTR namedtuple
LOAD_CONST "Point"
LOAD_CONST "x"
LOAD_CONST "y"
BUILD_LIST 2
CALL 2
STORE_NAME Point
PUSH_NULL None
LOAD_NAME Point
LOAD_CONST 1.0
LOAD_CONST 2.0
CALL 2
STORE_NAME p
LOAD_NAME p
LOAD_ATTR x
POP_TOP None
LOAD_NAME p
LOAD_ATTR y
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "7.2. collections: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME itertools
LOAD_ATTR count
LOAD_CONST 5.0
LOAD_CONST 2.0
KW_NAMES ('start', 'step')
CALL 2
STORE_NAME counter
PUSH_NULL None
LOAD_NAME next
LOAD_NAME counter
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME next
LOAD_NAME counter
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME list
PUSH_NULL None
LOAD_NAME itertools
LOAD_ATTR permutations
LOAD_CONST "AB"
CALL 1
CALL 1
STORE_NAME permutations
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "7.3. itertools: PASSED"
CALL 1
POP_TOP None
LOAD_CONST '{"name": "John", "age": 30}'
STORE_NAME json_string
PUSH_NULL None
LOAD_NAME json
LOAD_ATTR loads
LOAD_NAME json_string
CALL 1
STORE_NAME data
LOAD_NAME data
LOAD_CONST "name"
BINARY_SUBSCR None
POP_TOP None
PUSH_NULL None
LOAD_NAME json
LOAD_ATTR dumps
LOAD_NAME data
CALL 1
STORE_NAME new_json_string
PUSH_NULL None
LOAD_NAME json
LOAD_ATTR loads
LOAD_NAME new_json_string
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "7.4. json: PASSED"
CALL 1
POP_TOP None
LOAD_CONST "The rain in Spain"
STORE_NAME text
PUSH_NULL None
LOAD_NAME re
LOAD_ATTR search
LOAD_CONST r"^The.*Spain$"
LOAD_NAME text
CALL 2
STORE_NAME match
PUSH_NULL None
LOAD_NAME re
LOAD_ATTR findall
LOAD_CONST r"ai"
LOAD_NAME text
CALL 2
STORE_NAME found
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "7.5. re: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 8. Dynamic Features and Introspection ---"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='DynamicClass', byte_code=[], source_code='class DynamicClass:\n    pass', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(701, 702), language='python')
MAKE_FUNCTION 0
LOAD_CONST DynamicClass
CALL 2
STORE_NAME DynamicClass
PUSH_NULL None
LOAD_NAME DynamicClass
CALL 0
STORE_NAME dyn_obj
PUSH_NULL None
LOAD_NAME setattr
LOAD_NAME dyn_obj
LOAD_CONST "dynamic_attr"
LOAD_CONST 123.0
CALL 3
POP_TOP None
PUSH_NULL None
LOAD_NAME hasattr
LOAD_NAME dyn_obj
LOAD_CONST "dynamic_attr"
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME getattr
LOAD_NAME dyn_obj
LOAD_CONST "dynamic_attr"
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME delattr
LOAD_NAME dyn_obj
LOAD_CONST "dynamic_attr"
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME hasattr
LOAD_NAME dyn_obj
LOAD_CONST "dynamic_attr"
CALL 2
LOGICAL_NOT None
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "8.1. Dynamic attribute access: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME eval
LOAD_CONST "2 + 3 * 4"
CALL 1
STORE_NAME eval_result
LOAD_CONST "dynamic_var = 10"
STORE_NAME exec_code
PUSH_NULL None
LOAD_NAME exec
LOAD_NAME exec_code
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "8.2. eval() and exec(): PASSED (if no exceptions were raised)"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME isinstance
LOAD_CONST 1.0
LOAD_NAME int
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_NAME isinstance
LOAD_CONST "hello"
LOAD_NAME int
CALL 2
LOGICAL_NOT None
POP_TOP None
PUSH_NULL None
LOAD_NAME issubclass
LOAD_NAME bool
LOAD_NAME int
CALL 2
POP_TOP None
PUSH_NULL None
LOAD_GLOBAL type
LOAD_CONST 123.0
CALL 1
LOAD_NAME int
COMPARE_OP None
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "8.3. Type introspection: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- 9. Missing Node Types Coverage ---"
CALL 1
POP_TOP None
LOAD_CONST True
STORE_NAME bool_true
LOAD_CONST False
STORE_NAME bool_false
LOAD_CONST None
STORE_NAME none_val
LOAD_CONST ...
STORE_NAME ellipsis_val
LOAD_CONST CodeObject(name='function_with_ellipsis', byte_code=[Instruction(LOAD_CONST, ...), Instruction(RETURN_VALUE, None)], source_code='def function_with_ellipsis(*args, **kwargs) -> ...:\n    return ...', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(742, 743), language='python')
MAKE_FUNCTION 0
STORE_NAME function_with_ellipsis
LOAD_CONST 42.0
UNARY_NEGATIVE None
STORE_NAME negative_num
LOAD_CONST 42.0
UNARY_POSITIVE None
STORE_NAME positive_num
LOAD_CONST 42.0
UNARY_INVERT None
STORE_NAME bitwise_not
LOAD_CONST True
LOGICAL_NOT None
STORE_NAME logical_not
LOAD_CONST 10.0
STORE_NAME aug_val
LOAD_NAME aug_val
LOAD_CONST 5.0
BINARY_OP None
STORE_NAME aug_val
LOAD_NAME aug_val
LOAD_CONST 2.0
BINARY_OP None
STORE_NAME aug_val
LOAD_NAME aug_val
LOAD_CONST 3.0
BINARY_OP None
STORE_NAME aug_val
LOAD_NAME aug_val
LOAD_CONST 2.0
BINARY_OP None
STORE_NAME aug_val
LOAD_CONST 1.0
LOAD_CONST 2.0
COMPARE_OP None
LOAD_CONST 2.0
LOAD_CONST 1.0
COMPARE_OP None
LOGICAL_AND None
LOAD_CONST 3.0
LOAD_CONST 3.0
COMPARE_OP None
LOGICAL_OR None
STORE_NAME comp_result
LOAD_NAME bool_true
LOAD_CONST True
COMPARE_OP None
STORE_NAME is_result
LOAD_CONST "a"
LOAD_CONST "abc"
COMPARE_OP None
STORE_NAME in_result
LOAD_CONST "z"
LOAD_CONST "abc"
COMPARE_OP None
STORE_NAME not_in_result
MAKE_FUNCTION lambda
STORE_NAME lambda_func
PUSH_NULL None
LOAD_NAME lambda_func
LOAD_CONST 5.0
CALL 1
STORE_NAME lambda_result
POP_JUMP_IF_FALSE 2
JUMP_FORWARD 2
STORE_NAME ternary_result
BUILD_LIST 0
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 3.0
CALL 1
GET_ITER None
FOR_ITER 13
STORE_FAST x
LOAD_FAST x
LOAD_CONST 2.0
BINARY_OP 5
LIST_APPEND 1
JUMP_FORWARD 6
STORE_NAME list_comp
BUILD_MAP 0
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 3.0
CALL 1
GET_ITER None
FOR_ITER 14
STORE_FAST x
LOAD_FAST x
LOAD_FAST x
LOAD_CONST 2.0
BINARY_OP 5
MAP_ADD 1
JUMP_FORWARD 6
STORE_NAME dict_comp
BUILD_SET 0
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 3.0
CALL 1
GET_ITER None
FOR_ITER 13
STORE_FAST x
LOAD_FAST x
LOAD_CONST 2.0
BINARY_OP 5
SET_ADD 1
JUMP_FORWARD 6
STORE_NAME set_comp
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 3.0
CALL 1
GET_ITER None
FOR_ITER 11
STORE_FAST x
LOAD_FAST x
LOAD_CONST 2.0
BINARY_OP 5
JUMP_FORWARD 5
STORE_NAME gen_expr
NOP None
LOAD_CONST 1.0
LOAD_CONST 0.0
BINARY_OP 11
STORE_NAME risky_operation
RETURN_CONST None
PUSH_EXC_INFO None
LOAD_NAME ZeroDivisionError
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 15
POP_TOP None
LOAD_CONST True
STORE_NAME error_handled
POP_EXCEPT None
RETURN_CONST None
LOAD_NAME Exception as e
CHECK_EXC_MATCH None
POP_JUMP_IF_FALSE 26
POP_TOP None
PUSH_NULL None
LOAD_NAME str
LOAD_NAME e
CALL 1
STORE_NAME other_error
POP_EXCEPT None
RETURN_CONST None
RERAISE 0
COPY 3
POP_EXCEPT None
RERAISE 1
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 2.0
CALL 1
GET_ITER None
FOR_ITER 7
STORE_NAME i
LOAD_NAME i
LOAD_CONST 10.0
COMPARE_OP None
POP_JUMP_IF_FALSE 5
BINARY_OPERATION None
JUMP_BACKWARD 8
END_FOR None
LOAD_CONST 0.0
STORE_NAME count
LOAD_NAME count
LOAD_CONST 2.0
COMPARE_OP None
POP_JUMP_IF_FALSE 5
LOAD_NAME count
LOAD_CONST 1.0
BINARY_OP None
STORE_NAME count
JUMP_BACKWARD 9
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='SimpleContext', byte_code=[Instruction(MAKE_FUNCTION, __enter__), Instruction(LOAD_CONST, "context_value"), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __enter__), Instruction(MAKE_FUNCTION, __exit__), Instruction(LOAD_CONST, False), Instruction(RETURN_VALUE, None), Instruction(STORE_NAME, __exit__)], source_code='class SimpleContext:\n    def __enter__(self):\n        return "context_value"\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        return False', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(808, 813), language='python')
MAKE_FUNCTION 0
LOAD_CONST SimpleContext
CALL 2
STORE_NAME SimpleContext
PUSH_NULL None
LOAD_NAME SimpleContext
CALL 0
BEFORE_WITH None
STORE_NAME ctx_val
LOAD_NAME ctx_val
STORE_NAME context_result
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
CALL 2
POP_TOP None
PUSH_EXC_INFO None
WITH_EXCEPT_START None
POP_JUMP_IF_TRUE 16
RERAISE 2
POP_TOP None
POP_EXCEPT None
POP_TOP None
POP_TOP None
JUMP_BACKWARD 5
COPY 3
POP_EXCEPT None
RERAISE 1
PUSH_NULL None
LOAD_NAME SimpleContext
CALL 0
BEFORE_WITH None
STORE_NAME ctx1
PUSH_NULL None
LOAD_NAME SimpleContext
CALL 0
BEFORE_WITH None
STORE_NAME ctx2
LOAD_NAME ctx1
LOAD_NAME ctx2
BINARY_OP 0
STORE_NAME multi_context_result
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
CALL 2
POP_TOP None
PUSH_EXC_INFO None
WITH_EXCEPT_START None
POP_JUMP_IF_TRUE 23
RERAISE 2
POP_TOP None
POP_EXCEPT None
POP_TOP None
POP_TOP None
JUMP_BACKWARD 5
COPY 3
POP_EXCEPT None
RERAISE 1
LOAD_CONST 1.0
LOAD_CONST 1.0
COMPARE_OP None
BINARY_OPERATION None
LOAD_CONST CodeObject(name='empty_func', byte_code=[Instruction(RETURN_VALUE, None)], source_code='def empty_func():\n    pass', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(828, 829), language='python')
MAKE_FUNCTION 0
STORE_NAME empty_func
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 5.0
CALL 1
GET_ITER None
FOR_ITER 12
STORE_NAME i
LOAD_NAME i
LOAD_CONST 1.0
COMPARE_OP None
POP_JUMP_IF_FALSE 5
BINARY_OPERATION None
LOAD_NAME i
LOAD_CONST 3.0
COMPARE_OP None
POP_JUMP_IF_FALSE 5
BINARY_OPERATION None
JUMP_BACKWARD 13
END_FOR None
LOAD_CONST CodeObject(name='test_raise', byte_code=[Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, ValueError), Instruction(LOAD_CONST, "Test error"), Instruction(CALL, 1), Instruction(BINARY_OPERATION, None), Instruction(RETURN_VALUE, None)], source_code='def test_raise():\n    raise ValueError("Test error")', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(840, 841), language='python')
MAKE_FUNCTION 0
STORE_NAME test_raise
LOAD_CONST 0
LOAD_CONST ('sqrt',)
IMPORT_NAME math
IMPORT_FROM sqrt
STORE_NAME square_root
POP_TOP None
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME sys
STORE_NAME system
LOAD_CONST "global"
STORE_GLOBAL global_var
LOAD_CONST CodeObject(name='test_global', byte_code=[Instruction(LOAD_CONST, "modified"), Instruction(STORE_GLOBAL, global_var), Instruction(RETURN_VALUE, None)], source_code='def test_global():\n    global global_var\n    global_var = "modified"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(852, 854), language='python')
MAKE_FUNCTION 0
STORE_NAME test_global
LOAD_CONST CodeObject(name='outer', byte_code=[Instruction(LOAD_CONST, "outer"), Instruction(STORE_GLOBAL, nonlocal_var), Instruction(MAKE_FUNCTION, inner), Instruction(LOAD_CONST, "inner"), Instruction(STORE_DEREF, nonlocal_var), Instruction(RETURN_VALUE, None), Instruction(STORE_GLOBAL, inner), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, inner), Instruction(CALL, 0), Instruction(POP_TOP, None), Instruction(LOAD_DEREF, nonlocal_var), Instruction(RETURN_VALUE, None)], source_code='def outer():\n    nonlocal_var = "outer"\n\n    def inner():\n        nonlocal nonlocal_var\n        nonlocal_var = "inner"\n\n    inner()\n    return nonlocal_var', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(857, 865), language='python')
MAKE_FUNCTION 0
STORE_NAME outer
LOAD_CONST 42.0
STORE_GLOBAL simple_global
LOAD_CONST CodeObject(name='read_simple_global', byte_code=[Instruction(LOAD_GLOBAL, simple_global), Instruction(RETURN_VALUE, None)], source_code='def read_simple_global():\n    # This should generate LOAD_NAME (not declared as global)\n    return simple_global', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(875, 877), language='python')
MAKE_FUNCTION 0
STORE_NAME read_simple_global
LOAD_CONST CodeObject(name='modify_simple_global', byte_code=[Instruction(LOAD_GLOBAL, simple_global), Instruction(LOAD_CONST, 1.0), Instruction(BINARY_OP, 0), Instruction(STORE_GLOBAL, simple_global), Instruction(LOAD_CONST, 100.0), Instruction(STORE_GLOBAL, simple_global), Instruction(RETURN_VALUE, None)], source_code='def modify_simple_global():\n    global simple_global\n    # This should generate LOAD_GLOBAL and STORE_GLOBAL\n    simple_global = simple_global + 1\n    simple_global = 100', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(880, 884), language='python')
MAKE_FUNCTION 0
STORE_NAME modify_simple_global
LOAD_CONST 10.0
STORE_GLOBAL global_x
LOAD_CONST 20.0
STORE_GLOBAL global_y
LOAD_CONST 30.0
STORE_GLOBAL global_z
LOAD_CONST CodeObject(name='multiple_globals', byte_code=[Instruction(LOAD_GLOBAL, global_x), Instruction(LOAD_CONST, 2.0), Instruction(BINARY_OP, 5), Instruction(STORE_GLOBAL, global_x), Instruction(LOAD_GLOBAL, global_y), Instruction(LOAD_GLOBAL, global_x), Instruction(BINARY_OP, 0), Instruction(STORE_GLOBAL, global_y), Instruction(LOAD_GLOBAL, global_x), Instruction(LOAD_GLOBAL, global_y), Instruction(BINARY_OP, 0), Instruction(LOAD_GLOBAL, global_z), Instruction(BINARY_OP, 0), Instruction(STORE_GLOBAL, global_z), Instruction(LOAD_GLOBAL, global_x), Instruction(LOAD_GLOBAL, global_y), Instruction(LOAD_GLOBAL, global_z), Instruction(RETURN_VALUE, None)], source_code='def multiple_globals():\n    global global_x, global_y, global_z\n    # All of these should generate LOAD_GLOBAL/STORE_GLOBAL\n    global_x = global_x * 2\n    global_y = global_y + global_x\n    global_z = global_x + global_y + global_z\n    return global_x, global_y, global_z', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(893, 899), language='python')
MAKE_FUNCTION 0
STORE_NAME multiple_globals
LOAD_CONST "I am global"
STORE_GLOBAL mixed_var
LOAD_CONST CodeObject(name='mixed_scope', byte_code=[Instruction(LOAD_CONST, "I am local"), Instruction(STORE_GLOBAL, local_var), Instruction(LOAD_GLOBAL, local_var), Instruction(STORE_GLOBAL, temp), Instruction(LOAD_GLOBAL, mixed_var), Instruction(STORE_GLOBAL, global_temp), Instruction(LOAD_CONST, "Modified by function"), Instruction(STORE_GLOBAL, mixed_var), Instruction(LOAD_CONST, "Modified locally"), Instruction(STORE_GLOBAL, local_var), Instruction(LOAD_GLOBAL, local_var), Instruction(LOAD_GLOBAL, mixed_var), Instruction(RETURN_VALUE, None)], source_code='def mixed_scope():\n    local_var = "I am local"\n    global mixed_var\n\n    # This should generate LOAD_NAME for local_var\n    temp = local_var\n\n    # This should generate LOAD_GLOBAL for mixed_var\n    global_temp = mixed_var\n\n    # This should generate STORE_GLOBAL\n    mixed_var = "Modified by function"\n\n    # This should generate STORE_NAME\n    local_var = "Modified locally"\n\n    return local_var, mixed_var', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(906, 922), language='python')
MAKE_FUNCTION 0
STORE_NAME mixed_scope
LOAD_CONST "key"
LOAD_CONST "value"
BUILD_MAP 1
STORE_GLOBAL context_global
LOAD_CONST CodeObject(name='global_in_expressions', byte_code=[Instruction(LOAD_GLOBAL, context_global), Instruction(LOAD_CONST, "key"), Instruction(BINARY_SUBSCR, None), Instruction(STORE_GLOBAL, value), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, context_global), Instruction(LOAD_ATTR, keys), Instruction(CALL, 0), Instruction(STORE_GLOBAL, keys), Instruction(LOAD_CONST, "new_key"), Instruction(LOAD_CONST, "new_value"), Instruction(LOAD_CONST, "count"), Instruction(LOAD_CONST, 42.0), Instruction(BUILD_MAP, 2), Instruction(STORE_GLOBAL, context_global), Instruction(LOAD_GLOBAL, context_global), Instruction(POP_JUMP_IF_FALSE, 10), Instruction(LOAD_GLOBAL, context_global), Instruction(LOAD_CONST, "count"), Instruction(BINARY_SUBSCR, None), Instruction(LOAD_CONST, 1.0), Instruction(BINARY_OP, 0), Instruction(LOAD_GLOBAL, context_global), Instruction(LOAD_CONST, "count"), Instruction(STORE_SUBSCR, None), Instruction(RETURN_VALUE, None)], source_code='def global_in_expressions():\n    global context_global\n\n    # LOAD_GLOBAL in subscript context\n    value = context_global["key"]\n\n    # LOAD_GLOBAL in method call\n    keys = context_global.keys()\n\n    # STORE_GLOBAL with complex value\n    context_global = {"new_key": "new_value", "count": 42}\n\n    # LOAD_GLOBAL in conditional\n    if context_global:\n        # LOAD_GLOBAL in augmented assignment\n        context_global["count"] = context_global["count"] + 1', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(929, 944), language='python')
MAKE_FUNCTION 0
STORE_NAME global_in_expressions
LOAD_CONST CodeObject(name='global_function', byte_code=[Instruction(LOAD_CONST, "I am a global function"), Instruction(RETURN_VALUE, None)], source_code='def global_function():\n    return "I am a global function"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(948, 949), language='python')
MAKE_FUNCTION 0
STORE_NAME global_function
PUSH_NULL None
LOAD_BUILD_CLASS None
LOAD_CONST CodeObject(name='GlobalClass', byte_code=[], source_code='class GlobalClass:\n    pass', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(952, 953), language='python')
MAKE_FUNCTION 0
LOAD_CONST GlobalClass
CALL 2
STORE_NAME GlobalClass
LOAD_CONST CodeObject(name='test_global_callables', byte_code=[Instruction(LOAD_GLOBAL, global_function), Instruction(STORE_GLOBAL, func_ref), Instruction(LOAD_GLOBAL, GlobalClass), Instruction(STORE_GLOBAL, class_ref), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, global_function), Instruction(CALL, 0), Instruction(STORE_GLOBAL, result), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, GlobalClass), Instruction(CALL, 0), Instruction(STORE_GLOBAL, instance), Instruction(LOAD_GLOBAL, func_ref), Instruction(LOAD_GLOBAL, class_ref), Instruction(LOAD_GLOBAL, result), Instruction(LOAD_GLOBAL, instance), Instruction(RETURN_VALUE, None)], source_code='def test_global_callables():\n    # These should generate LOAD_NAME, not LOAD_GLOBAL (no global declaration)\n    func_ref = global_function\n    class_ref = GlobalClass\n\n    # Calling them\n    result = global_function()\n    instance = GlobalClass()\n\n    return func_ref, class_ref, result, instance', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(956, 965), language='python')
MAKE_FUNCTION 0
STORE_NAME test_global_callables
LOAD_CONST "outer"
STORE_GLOBAL outer_global
LOAD_CONST CodeObject(name='outer_with_global', byte_code=[Instruction(LOAD_CONST, "inner"), Instruction(STORE_GLOBAL, inner_var), Instruction(MAKE_FUNCTION, inner_with_global), Instruction(LOAD_GLOBAL, outer_global), Instruction(STORE_GLOBAL, temp1), Instruction(LOAD_DEREF, inner_var), Instruction(STORE_GLOBAL, temp2), Instruction(LOAD_CONST, "modified by inner"), Instruction(STORE_GLOBAL, outer_global), Instruction(LOAD_CONST, "modified by inner"), Instruction(STORE_DEREF, inner_var), Instruction(RETURN_VALUE, None), Instruction(STORE_GLOBAL, inner_with_global), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, inner_with_global), Instruction(CALL, 0), Instruction(POP_TOP, None), Instruction(LOAD_DEREF, inner_var), Instruction(LOAD_GLOBAL, outer_global), Instruction(RETURN_VALUE, None)], source_code='def outer_with_global():\n    inner_var = "inner"\n\n    def inner_with_global():\n        global outer_global\n        nonlocal inner_var\n\n        # LOAD_GLOBAL for outer_global\n        temp1 = outer_global\n\n        # LOAD_NAME for inner_var (nonlocal, not global)\n        temp2 = inner_var\n\n        # STORE_GLOBAL for outer_global\n        outer_global = "modified by inner"\n\n        # STORE_NAME for inner_var\n        inner_var = "modified by inner"\n\n    inner_with_global()\n    return inner_var, outer_global', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(972, 992), language='python')
MAKE_FUNCTION 0
STORE_NAME outer_with_global
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
LOAD_CONST 4.0
LOAD_CONST 5.0
BUILD_LIST 5
STORE_GLOBAL comp_global
LOAD_CONST CodeObject(name='global_in_comprehensions', byte_code=[Instruction(BUILD_LIST, 0), Instruction(LOAD_GLOBAL, comp_global), Instruction(GET_ITER, None), Instruction(FOR_ITER, 10), Instruction(STORE_FAST, x), Instruction(LOAD_FAST, x), Instruction(LOAD_CONST, 2.0), Instruction(BINARY_OP, 5), Instruction(LIST_APPEND, 1), Instruction(JUMP_FORWARD, 3), Instruction(STORE_GLOBAL, doubled), Instruction(LOAD_GLOBAL, comp_global), Instruction(GET_ITER, None), Instruction(FOR_ITER, 8), Instruction(STORE_FAST, x), Instruction(LOAD_FAST, x), Instruction(LOAD_CONST, 2.0), Instruction(BINARY_OP, 8), Instruction(JUMP_FORWARD, 2), Instruction(STORE_GLOBAL, gen), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, list), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, range), Instruction(LOAD_CONST, 10.0), Instruction(CALL, 1), Instruction(CALL, 1), Instruction(STORE_GLOBAL, comp_global), Instruction(LOAD_GLOBAL, doubled), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, list), Instruction(LOAD_GLOBAL, gen), Instruction(CALL, 1), Instruction(RETURN_VALUE, None)], source_code='def global_in_comprehensions():\n    global comp_global\n\n    # LOAD_GLOBAL in list comprehension\n    doubled = [x * 2 for x in comp_global]\n\n    # LOAD_GLOBAL in generator expression\n    gen = (x**2 for x in comp_global)\n\n    # STORE_GLOBAL\n    comp_global = list(range(10))\n\n    return doubled, list(gen)', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(999, 1011), language='python')
MAKE_FUNCTION 0
STORE_NAME global_in_comprehensions
LOAD_CONST "global shadow"
STORE_GLOBAL shadow_var
LOAD_CONST CodeObject(name='shadow_test', byte_code=[Instruction(LOAD_CONST, "local shadow"), Instruction(STORE_GLOBAL, shadow_var), Instruction(MAKE_FUNCTION, inner_shadow), Instruction(LOAD_CONST, "modified local"), Instruction(STORE_DEREF, shadow_var), Instruction(RETURN_VALUE, None), Instruction(STORE_GLOBAL, inner_shadow), Instruction(MAKE_FUNCTION, inner_global_shadow), Instruction(LOAD_CONST, "modified global"), Instruction(STORE_DEREF, shadow_var), Instruction(RETURN_VALUE, None), Instruction(STORE_GLOBAL, inner_global_shadow), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, inner_shadow), Instruction(CALL, 0), Instruction(POP_TOP, None), Instruction(LOAD_DEREF, shadow_var), Instruction(STORE_GLOBAL, local_result), Instruction(PUSH_NULL, None), Instruction(LOAD_GLOBAL, inner_global_shadow), Instruction(CALL, 0), Instruction(POP_TOP, None), Instruction(LOAD_GLOBAL, local_result), Instruction(RETURN_VALUE, None)], source_code='def shadow_test():\n    # This creates a local variable, should use LOAD_NAME/STORE_NAME\n    shadow_var = "local shadow"\n\n    def inner_shadow():\n        # This accesses the local from outer function\n        nonlocal shadow_var\n        shadow_var = "modified local"\n\n    def inner_global_shadow():\n        # This accesses the global, should use LOAD_GLOBAL/STORE_GLOBAL\n        global shadow_var\n        shadow_var = "modified global"\n\n    inner_shadow()\n    local_result = shadow_var\n\n    inner_global_shadow()\n\n    return local_result', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(1018, 1037), language='python')
MAKE_FUNCTION 0
STORE_NAME shadow_test
LOAD_CONST "my custom type"
STORE_GLOBAL type
LOAD_CONST CodeObject(name='global_shadowing_builtin', byte_code=[Instruction(LOAD_GLOBAL, type), Instruction(STORE_GLOBAL, current), Instruction(LOAD_CONST, "modified type"), Instruction(STORE_GLOBAL, type), Instruction(LOAD_GLOBAL, __builtins__), Instruction(LOAD_ATTR, type), Instruction(STORE_GLOBAL, actual_type), Instruction(LOAD_GLOBAL, current), Instruction(LOAD_GLOBAL, actual_type), Instruction(RETURN_VALUE, None)], source_code='def global_shadowing_builtin():\n    global type\n\n    # LOAD_GLOBAL for our global \'type\'\n    current = type\n\n    # STORE_GLOBAL\n    type = "modified type"\n\n    # Using the actual builtin (should be different)\n    actual_type = __builtins__.type\n\n    return current, actual_type', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(1044, 1056), language='python')
MAKE_FUNCTION 0
STORE_NAME global_shadowing_builtin
LOAD_CONST 42.0
STORE_NAME temp_var
DELETE_NAME temp_var
LOAD_CONST 0xFF
LOAD_CONST 0x0F
BINARY_OP 1
STORE_NAME bitwise_and
LOAD_CONST 0x10
LOAD_CONST 0x01
BINARY_OP 4
STORE_NAME bitwise_or
LOAD_CONST 0xAA
LOAD_CONST 0x55
BINARY_OP 7
STORE_NAME bitwise_xor
LOAD_CONST 8.0
LOAD_CONST 2.0
BINARY_OP 9
STORE_NAME left_shift
LOAD_CONST 32.0
LOAD_CONST 3.0
BINARY_OP 10
STORE_NAME right_shift
LOAD_CONST 17.0
LOAD_CONST 5.0
BINARY_OP 12
STORE_NAME floor_div
LOAD_CONST 5.0
LOAD_CONST 50.0
UNPACK_SEQUENCE 2
STORE_DEREF x
STORE_NAME y
STORE_NAME x, y
LOAD_CONST 1.0
LOAD_DEREF x
COPY 1
LOAD_CONST 10.0
COMPARE_OP None
LOAD_CONST 0.0
LOAD_NAME y
COPY 1
LOAD_CONST 100.0
COMPARE_OP None
LOGICAL_AND None
STORE_NAME chained_comp
LOAD_CONST 0.0
LOAD_DEREF x
COPY 1
LOAD_CONST 10.0
COMPARE_OP None
STORE_NAME is_between
LOAD_DEREF x
LOAD_CONST 5.0
COMPARE_OP None
STORE_NAME greater_equal
LOAD_NAME y
LOAD_CONST 100.0
COMPARE_OP None
STORE_NAME less_equal
LOAD_DEREF x
LOAD_NAME y
COMPARE_OP None
STORE_NAME not_equal
PUSH_NULL None
LOAD_NAME len
LOAD_CONST "test"
CALL 1
COPY 1
STORE_NAME n
LOAD_CONST 3.0
COMPARE_OP None
POP_JUMP_IF_FALSE 11
LOAD_NAME n
STORE_NAME walrus_result
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "9. Missing Node Types Coverage: PASSED"
CALL 1
POP_TOP None
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
LOAD_CONST 4.0
LOAD_CONST 5.0
BUILD_LIST 5
STORE_NAME test_list
LOAD_NAME test_list
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME first_element
LOAD_NAME test_list
LOAD_CONST 1.0
UNARY_NEGATIVE None
BINARY_SUBSCR None
STORE_NAME last_element
LOAD_NAME test_list
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME slice_access
LOAD_NAME test_list
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME step_slice
LOAD_CONST "api_key"
LOAD_CONST "secret123"
LOAD_CONST "endpoint"
LOAD_CONST "https://malicious.com/api"
LOAD_CONST "payload"
LOAD_CONST "data"
LOAD_CONST "encoded"
BUILD_MAP 1
BUILD_MAP 3
STORE_NAME config_dict
LOAD_NAME config_dict
LOAD_CONST "api_key"
BINARY_SUBSCR None
STORE_NAME api_key
LOAD_NAME config_dict
LOAD_CONST "endpoint"
BINARY_SUBSCR None
STORE_NAME endpoint
LOAD_NAME config_dict
LOAD_CONST "pay"
LOAD_CONST "load"
BINARY_OP 0
BINARY_SUBSCR None
STORE_NAME dynamic_key
LOAD_CONST "users"
LOAD_CONST "name"
LOAD_CONST "admin"
LOAD_CONST "permissions"
LOAD_CONST "read"
LOAD_CONST "write"
LOAD_CONST "execute"
BUILD_LIST 3
BUILD_MAP 2
LOAD_CONST "name"
LOAD_CONST "guest"
LOAD_CONST "permissions"
LOAD_CONST "read"
BUILD_LIST 1
BUILD_MAP 2
BUILD_LIST 2
LOAD_CONST "config"
LOAD_CONST "servers"
LOAD_CONST "192.168.1.1"
LOAD_CONST "10.0.0.1"
BUILD_LIST 2
LOAD_CONST "ports"
LOAD_CONST 80.0
LOAD_CONST 443.0
LOAD_CONST 8080.0
BUILD_LIST 3
BUILD_MAP 2
BUILD_MAP 2
STORE_NAME nested_structure
LOAD_NAME nested_structure
LOAD_CONST "users"
BINARY_SUBSCR None
LOAD_CONST 0.0
BINARY_SUBSCR None
LOAD_CONST "name"
BINARY_SUBSCR None
STORE_NAME admin_name
LOAD_NAME nested_structure
LOAD_CONST "users"
BINARY_SUBSCR None
LOAD_CONST 0.0
BINARY_SUBSCR None
LOAD_CONST "permissions"
BINARY_SUBSCR None
LOAD_CONST 2.0
BINARY_SUBSCR None
STORE_NAME admin_permissions
LOAD_NAME nested_structure
LOAD_CONST "config"
BINARY_SUBSCR None
LOAD_CONST "servers"
BINARY_SUBSCR None
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME first_server
LOAD_NAME nested_structure
LOAD_CONST "config"
BINARY_SUBSCR None
LOAD_CONST "ports"
BINARY_SUBSCR None
LOAD_CONST 1.0
BINARY_SUBSCR None
STORE_NAME https_port
LOAD_CONST "endpoint"
STORE_NAME prop_name
LOAD_CONST "api_key"
STORE_NAME key_name
LOAD_NAME config_dict
LOAD_NAME prop_name
BINARY_SUBSCR None
STORE_NAME dynamic_access1
LOAD_NAME config_dict
LOAD_NAME key_name
BINARY_SUBSCR None
STORE_NAME dynamic_access2
LOAD_CONST "api"
LOAD_CONST "_key"
BINARY_OP 0
STORE_NAME computed_key
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME base64
STORE_NAME base64
PUSH_NULL None
PUSH_NULL None
LOAD_NAME base64
LOAD_ATTR b64encode
LOAD_CONST b"endpoint"
CALL 1
LOAD_ATTR decode
CALL 0
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME encoded_key
LOAD_NAME config_dict
LOAD_NAME computed_key
BINARY_SUBSCR None
STORE_NAME obfuscated_access
PUSH_NULL None
LOAD_NAME list
PUSH_NULL None
LOAD_NAME range
LOAD_CONST 0.0
LOAD_CONST 20.0
LOAD_CONST 2.0
CALL 3
CALL 1
STORE_NAME payload_list
LOAD_NAME payload_list
LOAD_CONST 5.0
LOAD_CONST 2.0
BINARY_OP 0
BINARY_SUBSCR None
STORE_NAME calculated_index
LOAD_NAME payload_list
LOAD_CONST 2.0
LOAD_CONST 2.0
BINARY_OP 8
BINARY_SUBSCR None
STORE_NAME expression_index
LOAD_NAME payload_list
LOAD_CONST 15.0
PUSH_NULL None
LOAD_NAME len
LOAD_NAME payload_list
CALL 1
BINARY_OP 6
BINARY_SUBSCR None
STORE_NAME modulo_index
LOAD_CONST "eval(base64.b64decode(payload))"
STORE_NAME malicious_string
LOAD_NAME malicious_string
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME protocol_char
LOAD_NAME malicious_string
PUSH_NULL None
LOAD_NAME malicious_string
LOAD_ATTR find
LOAD_CONST "("
CALL 1
BINARY_SUBSCR None
STORE_NAME paren_char
LOAD_NAME malicious_string
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME decode_part
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
BUILD_LIST 3
LOAD_CONST 4.0
LOAD_CONST 5.0
LOAD_CONST 6.0
BUILD_LIST 3
LOAD_CONST 7.0
LOAD_CONST 8.0
LOAD_CONST 9.0
BUILD_LIST 3
BUILD_LIST 3
STORE_NAME matrix
LOAD_NAME matrix
LOAD_CONST 1.0
BINARY_SUBSCR None
LOAD_CONST 1.0
BINARY_SUBSCR None
STORE_NAME center_element
LOAD_NAME matrix
LOAD_CONST 0.0
BINARY_SUBSCR None
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME corner_element
LOAD_NAME matrix
LOAD_CONST 1.0
UNARY_NEGATIVE None
BINARY_SUBSCR None
LOAD_CONST 1.0
UNARY_NEGATIVE None
BINARY_SUBSCR None
STORE_NAME last_row_last_col
LOAD_CONST "python"
LOAD_CONST "-c"
LOAD_CONST "import os; os.system('malicious')"
BUILD_TUPLE 3
STORE_NAME command_tuple
LOAD_NAME command_tuple
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME interpreter
LOAD_NAME command_tuple
LOAD_CONST 1.0
BINARY_SUBSCR None
STORE_NAME flag
LOAD_NAME command_tuple
LOAD_CONST 2.0
BINARY_SUBSCR None
STORE_NAME command_payload
LOAD_CONST b"\x48\x65\x6c\x6c\x6f"
STORE_NAME byte_data
LOAD_NAME byte_data
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME first_byte
LOAD_NAME byte_data
LOAD_CONST 1.0
BINARY_SUBSCR None
STORE_NAME second_byte
LOAD_NAME byte_data
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME byte_slice
LOAD_CONST 0
LOAD_CONST None
IMPORT_NAME random
STORE_NAME random
LOAD_CONST 2.0
STORE_NAME global_index
LOAD_NAME test_list
LOAD_NAME global_index
BINARY_SUBSCR None
STORE_NAME scoped_access
LOAD_NAME test_list
PUSH_NULL None
LOAD_NAME random
LOAD_ATTR randint
LOAD_CONST 0.0
PUSH_NULL None
LOAD_NAME len
LOAD_NAME test_list
CALL 1
LOAD_CONST 1.0
BINARY_OP 2
CALL 2
BINARY_SUBSCR None
STORE_NAME function_based_index
LOAD_NAME test_list
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME complex_slice1
LOAD_NAME test_list
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME complex_slice2
LOAD_NAME test_list
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BINARY_OPERATION None
BINARY_SUBSCR None
STORE_NAME complex_slice3
PUSH_NULL None
LOAD_NAME list
PUSH_NULL None
LOAD_NAME config_dict
LOAD_ATTR keys
CALL 0
CALL 1
STORE_NAME dict_keys
PUSH_NULL None
LOAD_NAME list
PUSH_NULL None
LOAD_NAME config_dict
LOAD_ATTR values
CALL 0
CALL 1
STORE_NAME dict_values
LOAD_NAME dict_keys
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME first_key
LOAD_NAME dict_values
LOAD_CONST 0.0
BINARY_SUBSCR None
STORE_NAME first_value
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "9.18. BINARY_SUBSCR Test Cases: PASSED"
CALL 1
POP_TOP None
BUILD_MAP 0
STORE_NAME store_obj
BUILD_LIST 0
STORE_NAME store_arr
LOAD_CONST "inner"
BUILD_MAP 0
BUILD_MAP 1
STORE_NAME store_nested
LOAD_CONST "value1"
LOAD_NAME store_obj
LOAD_CONST "key1"
STORE_SUBSCR None
LOAD_CONST "value2"
LOAD_NAME store_obj
LOAD_CONST "key2"
STORE_SUBSCR None
LOAD_CONST """value3"""
LOAD_NAME store_obj
LOAD_CONST """key3"""
STORE_SUBSCR None
LOAD_CONST "dynamicKey"
STORE_NAME store_key
LOAD_CONST "dynamicValue"
LOAD_NAME store_obj
LOAD_NAME store_key
STORE_SUBSCR None
PUSH_NULL None
LOAD_NAME store_arr
LOAD_ATTR extend
LOAD_CONST None
LOAD_CONST None
LOAD_CONST None
BUILD_LIST 3
CALL 1
POP_TOP None
LOAD_CONST "first"
LOAD_NAME store_arr
LOAD_CONST 0.0
STORE_SUBSCR None
LOAD_CONST "second"
LOAD_NAME store_arr
LOAD_CONST 1.0
STORE_SUBSCR None
LOAD_CONST "third"
LOAD_NAME store_arr
LOAD_CONST 2.0
STORE_SUBSCR None
LOAD_CONST "computed"
STORE_NAME store_prefix
LOAD_CONST "computed value"
LOAD_NAME store_obj
LOAD_NAME store_prefix
LOAD_CONST "_key"
BINARY_OP 0
STORE_SUBSCR None
LOAD_CONST "template value"
LOAD_NAME store_obj
LOAD_NAME store_prefix
FORMAT_VALUE None
LOAD_CONST _template
BUILD_STRING 2
STORE_SUBSCR None
LOAD_CONST "deeply nested"
LOAD_NAME store_nested
LOAD_CONST "inner"
BINARY_SUBSCR None
LOAD_CONST "deep"
STORE_SUBSCR None
LOAD_CONST CodeObject(name='get_store_key', byte_code=[Instruction(LOAD_CONST, "funcKey"), Instruction(RETURN_VALUE, None)], source_code='def get_store_key():\n    return "funcKey"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(1220, 1221), language='python')
MAKE_FUNCTION 0
STORE_NAME get_store_key
LOAD_CONST "from function"
LOAD_NAME store_obj
PUSH_NULL None
LOAD_NAME get_store_key
CALL 0
STORE_SUBSCR None
LOAD_CONST "numeric expression"
LOAD_NAME store_obj
LOAD_CONST 1.0
LOAD_CONST 2.0
BINARY_OP 0
STORE_SUBSCR None
LOAD_CONST "method call key"
LOAD_NAME store_obj
PUSH_NULL None
LOAD_NAME store_key
LOAD_ATTR upper
CALL 0
STORE_SUBSCR None
LOAD_CONST 0.0
STORE_NAME store_counter
LOAD_CONST "with side effect"
LOAD_NAME store_obj
LOAD_NAME store_counter
STORE_SUBSCR None
LOAD_NAME store_counter
LOAD_CONST 1.0
BINARY_OP None
STORE_NAME store_counter
LOAD_CONST "chained"
LOAD_NAME store_obj
LOAD_CONST "b"
STORE_SUBSCR None
LOAD_NAME store_obj
LOAD_CONST "a"
STORE_SUBSCR None
LOAD_CONST 1.0
LOAD_CONST 2.0
LOAD_CONST 3.0
LOAD_CONST 4.0
LOAD_CONST 5.0
BUILD_LIST 5
STORE_NAME store_list
LOAD_CONST 10.0
LOAD_CONST 20.0
BUILD_LIST 2
LOAD_NAME store_list
LOAD_CONST 1.0
LOAD_CONST 3.0
STORE_SUBSCR None
LOAD_CONST 100.0
LOAD_CONST 200.0
LOAD_CONST 300.0
BUILD_LIST 3
LOAD_NAME store_list
LOAD_CONST 2.0
STORE_SUBSCR None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "9.19. STORE_SUBSCR Test Cases: PASSED"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "\n--- Python Compiler Test Suite: Finished ---"
CALL 1
POP_TOP None
PUSH_NULL None
LOAD_NAME print
LOAD_CONST "--- All tests completed. Check output for any FAILED messages. ---"
CALL 1
POP_TOP None
RETURN_CONST None
LOAD_CONST "os"
STORE_GLOBAL module_name
PUSH_NULL None
LOAD_GLOBAL __import__
LOAD_GLOBAL module_name
CALL 1
STORE_GLOBAL imported_os
PUSH_NULL None
LOAD_GLOBAL getattr
LOAD_GLOBAL imported_os
LOAD_CONST "system"
CALL 2
STORE_GLOBAL getattr_call
PUSH_NULL None
LOAD_GLOBAL getattr
LOAD_GLOBAL __builtins__
LOAD_CONST "exec"
CALL 2
STORE_GLOBAL exec_func
PUSH_NULL None
LOAD_GLOBAL getattr
LOAD_GLOBAL __builtins__
LOAD_CONST "eval"
CALL 2
STORE_GLOBAL eval_func
RETURN_VALUE None
MAKE_FUNCTION __enter__
PUSH_NULL None
LOAD_GLOBAL print
LOAD_CONST "Entering context"
CALL 1
POP_TOP None
LOAD_CONST "Hello from with"
RETURN_VALUE None
STORE_NAME __enter__
MAKE_FUNCTION __exit__
PUSH_NULL None
LOAD_GLOBAL print
LOAD_CONST "Exiting context"
CALL 1
POP_TOP None
RETURN_VALUE None
STORE_NAME __exit__
LOAD_CONST Hello, 
LOAD_PARAM name
FORMAT_VALUE None
LOAD_CONST !
BUILD_STRING 3
RETURN_VALUE None
LOAD_PARAM a
LOAD_PARAM b
BINARY_OP 0
LOAD_PARAM c
BINARY_OP 0
RETURN_VALUE None
LOAD_PARAM args
LOAD_PARAM kwargs
RETURN_VALUE None
LOAD_PARAM x
RETURN_VALUE None
MAKE_FUNCTION __init__
LOAD_PARAM param1
LOAD_PARAM self
STORE_ATTR param1
LOAD_PARAM param2
LOAD_PARAM self
STORE_ATTR param2
LOAD_PARAM param3
LOAD_PARAM self
STORE_ATTR param3
RETURN_VALUE None
STORE_NAME __init__
LOAD_PARAM x
LOAD_CONST 0.0
COMPARE_OP None
RETURN_VALUE None
LOAD_PARAM x
LOAD_PARAM y
BINARY_OP 5
RETURN_VALUE None
LOAD_CONST 10.0
STORE_GLOBAL x
MAKE_FUNCTION inner_func
LOAD_DEREF x
LOAD_CONST 1.0
BINARY_OP None
STORE_DEREF x
LOAD_DEREF x
RETURN_VALUE None
STORE_GLOBAL inner_func
LOAD_GLOBAL inner_func
RETURN_VALUE None
LOAD_CONST 200.0
STORE_GLOBAL global_var
RETURN_VALUE None
LOAD_PARAM cls
LOAD_ATTR class_variable
RETURN_VALUE None
LOAD_CONST "static"
RETURN_VALUE None
LOAD_CONST 10.0
STORE_NAME class_variable
MAKE_FUNCTION __init__
LOAD_PARAM instance_variable
LOAD_PARAM self
STORE_ATTR instance_variable
RETURN_VALUE None
STORE_NAME __init__
MAKE_FUNCTION instance_method
LOAD_PARAM self
LOAD_ATTR instance_variable
RETURN_VALUE None
STORE_NAME instance_method
LOAD_NAME classmethod
LOAD_CONST CodeObject(name='class_method', byte_code=[Instruction(LOAD_PARAM, cls), Instruction(LOAD_ATTR, class_variable), Instruction(RETURN_VALUE, None)], source_code='def class_method(cls):\n        return cls.class_variable', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(465, 466), language='python')
MAKE_FUNCTION 0
CALL 0
STORE_NAME class_method
LOAD_NAME staticmethod
LOAD_CONST CodeObject(name='static_method', byte_code=[Instruction(LOAD_CONST, "static"), Instruction(RETURN_VALUE, None)], source_code='def static_method():\n        return "static"', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(469, 470), language='python')
MAKE_FUNCTION 0
CALL 0
STORE_NAME static_method
MAKE_FUNCTION method_a
LOAD_CONST "A"
RETURN_VALUE None
STORE_NAME method_a
MAKE_FUNCTION method_b
LOAD_CONST "B"
RETURN_VALUE None
STORE_NAME method_b
MAKE_FUNCTION method_c
LOAD_CONST "C"
RETURN_VALUE None
STORE_NAME method_c
MAKE_FUNCTION __init__
LOAD_DEREF x
LOAD_PARAM self
STORE_ATTR x
LOAD_PARAM y
LOAD_PARAM self
STORE_ATTR y
RETURN_VALUE None
STORE_NAME __init__
MAKE_FUNCTION __add__
PUSH_NULL None
LOAD_GLOBAL Vector
LOAD_PARAM self
LOAD_ATTR x
LOAD_PARAM other
LOAD_ATTR x
BINARY_OP 0
LOAD_PARAM self
LOAD_ATTR y
LOAD_PARAM other
LOAD_ATTR y
BINARY_OP 0
CALL 2
RETURN_VALUE None
STORE_NAME __add__
MAKE_FUNCTION __repr__
LOAD_CONST Vector(
LOAD_PARAM self
LOAD_ATTR x
FORMAT_VALUE None
LOAD_CONST , 
LOAD_PARAM self
LOAD_ATTR y
FORMAT_VALUE None
LOAD_CONST )
BUILD_STRING 5
RETURN_VALUE None
STORE_NAME __repr__
MAKE_FUNCTION __len__
LOAD_CONST 2.0
RETURN_VALUE None
STORE_NAME __len__
MAKE_FUNCTION __getitem__
LOAD_PARAM index
LOAD_CONST 0.0
COMPARE_OP None
POP_JUMP_IF_FALSE 7
LOAD_PARAM self
LOAD_ATTR x
RETURN_VALUE None
LOAD_PARAM index
LOAD_CONST 1.0
COMPARE_OP None
POP_JUMP_IF_FALSE 7
LOAD_PARAM self
LOAD_ATTR y
RETURN_VALUE None
LOAD_GLOBAL IndexError
BINARY_OPERATION None
RETURN_VALUE None
STORE_NAME __getitem__
LOAD_PARAM self
LOAD_ATTR _radius
RETURN_VALUE None
LOAD_CONST 3.14
LOAD_PARAM self
LOAD_ATTR _radius
LOAD_CONST 2.0
BINARY_OP 8
BINARY_OP 5
RETURN_VALUE None
MAKE_FUNCTION __init__
LOAD_PARAM radius
LOAD_PARAM self
STORE_ATTR _radius
RETURN_VALUE None
STORE_NAME __init__
LOAD_NAME property
LOAD_CONST CodeObject(name='radius', byte_code=[Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, _radius), Instruction(RETURN_VALUE, None)], source_code='def radius(self):\n        return self._radius', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(543, 544), language='python')
MAKE_FUNCTION 0
CALL 0
STORE_NAME radius
LOAD_NAME property
LOAD_CONST CodeObject(name='area', byte_code=[Instruction(LOAD_CONST, 3.14), Instruction(LOAD_PARAM, self), Instruction(LOAD_ATTR, _radius), Instruction(LOAD_CONST, 2.0), Instruction(BINARY_OP, 8), Instruction(BINARY_OP, 5), Instruction(RETURN_VALUE, None)], source_code='def area(self):\n        return 3.14 * self._radius**2', path=PosixPath('/Users/mav/dev/malwi/tests/source_samples/python.py'), location=(553, 554), language='python')
MAKE_FUNCTION 0
CALL 0
STORE_NAME area
LOAD_GLOBAL wrapper
RETURN_VALUE None
LOAD_CONST "Whee!"
RETURN_VALUE None
PUSH_NULL None
LOAD_GLOBAL range
LOAD_PARAM n
CALL 1
GET_ITER None
FOR_ITER 5
STORE_NAME i
LOAD_CONST None
YIELD_VALUE None
POP_TOP None
JUMP_BACKWARD 6
END_FOR None
RETURN_VALUE None
PUSH_NULL None
LOAD_GLOBAL asyncio
LOAD_ATTR sleep
LOAD_CONST 0.01
CALL 1
AWAIT_EXPRESSION None
POP_TOP None
LOAD_CONST "Coroutine finished"
RETURN_VALUE None
PUSH_NULL None
LOAD_GLOBAL my_coroutine
CALL 0
AWAIT_EXPRESSION None
STORE_GLOBAL result
PUSH_NULL None
LOAD_GLOBAL print
LOAD_CONST "6.3. Coroutines (async/await): PASSED"
CALL 1
POP_TOP None
RETURN_VALUE None
MAKE_FUNCTION __new__
LOAD_CONST "Hello from metaclass"
LOAD_PARAM dct
LOAD_CONST "new_attribute"
STORE_SUBSCR None
PUSH_NULL None
PUSH_NULL None
LOAD_GLOBAL super
CALL 0
LOAD_ATTR __new__
LOAD_PARAM cls
LOAD_PARAM name
LOAD_PARAM bases
LOAD_PARAM dct
CALL 4
RETURN_VALUE None
STORE_NAME __new__

LOAD_PARAM name
FORMAT_VALUE None
LOAD_CONST  is 
LOAD_PARAM age
FORMAT_VALUE None
LOAD_CONST  years old.
BUILD_STRING 4
RETURN_VALUE None

LOAD_CONST ...
RETURN_VALUE None
LOAD_DEREF x
LOAD_CONST 2.0
BINARY_OP 5
RETURN_VALUE None
MAKE_FUNCTION __enter__
LOAD_CONST "context_value"
RETURN_VALUE None
STORE_NAME __enter__
MAKE_FUNCTION __exit__
LOAD_CONST False
RETURN_VALUE None
STORE_NAME __exit__
RETURN_VALUE None
PUSH_NULL None
LOAD_GLOBAL ValueError
LOAD_CONST "Test error"
CALL 1
BINARY_OPERATION None
RETURN_VALUE None
LOAD_CONST "modified"
STORE_GLOBAL global_var
RETURN_VALUE None
LOAD_CONST "outer"
STORE_GLOBAL nonlocal_var
MAKE_FUNCTION inner
LOAD_CONST "inner"
STORE_DEREF nonlocal_var
RETURN_VALUE None
STORE_GLOBAL inner
PUSH_NULL None
LOAD_GLOBAL inner
CALL 0
POP_TOP None
LOAD_DEREF nonlocal_var
RETURN_VALUE None
LOAD_GLOBAL simple_global
RETURN_VALUE None
LOAD_GLOBAL simple_global
LOAD_CONST 1.0
BINARY_OP 0
STORE_GLOBAL simple_global
LOAD_CONST 100.0
STORE_GLOBAL simple_global
RETURN_VALUE None
LOAD_GLOBAL global_x
LOAD_CONST 2.0
BINARY_OP 5
STORE_GLOBAL global_x
LOAD_GLOBAL global_y
LOAD_GLOBAL global_x
BINARY_OP 0
STORE_GLOBAL global_y
LOAD_GLOBAL global_x
LOAD_GLOBAL global_y
BINARY_OP 0
LOAD_GLOBAL global_z
BINARY_OP 0
STORE_GLOBAL global_z
LOAD_GLOBAL global_x
LOAD_GLOBAL global_y
LOAD_GLOBAL global_z
RETURN_VALUE None
LOAD_CONST "I am local"
STORE_GLOBAL local_var
LOAD_GLOBAL local_var
STORE_GLOBAL temp
LOAD_GLOBAL mixed_var
STORE_GLOBAL global_temp
LOAD_CONST "Modified by function"
STORE_GLOBAL mixed_var
LOAD_CONST "Modified locally"
STORE_GLOBAL local_var
LOAD_GLOBAL local_var
LOAD_GLOBAL mixed_var
RETURN_VALUE None
LOAD_GLOBAL context_global
LOAD_CONST "key"
BINARY_SUBSCR None
STORE_GLOBAL value
PUSH_NULL None
LOAD_GLOBAL context_global
LOAD_ATTR keys
CALL 0
STORE_GLOBAL keys
LOAD_CONST "new_key"
LOAD_CONST "new_value"
LOAD_CONST "count"
LOAD_CONST 42.0
BUILD_MAP 2
STORE_GLOBAL context_global
LOAD_GLOBAL context_global
POP_JUMP_IF_FALSE 10
LOAD_GLOBAL context_global
LOAD_CONST "count"
BINARY_SUBSCR None
LOAD_CONST 1.0
BINARY_OP 0
LOAD_GLOBAL context_global
LOAD_CONST "count"
STORE_SUBSCR None
RETURN_VALUE None
LOAD_CONST "I am a global function"
RETURN_VALUE None

LOAD_GLOBAL global_function
STORE_GLOBAL func_ref
LOAD_GLOBAL GlobalClass
STORE_GLOBAL class_ref
PUSH_NULL None
LOAD_GLOBAL global_function
CALL 0
STORE_GLOBAL result
PUSH_NULL None
LOAD_GLOBAL GlobalClass
CALL 0
STORE_GLOBAL instance
LOAD_GLOBAL func_ref
LOAD_GLOBAL class_ref
LOAD_GLOBAL result
LOAD_GLOBAL instance
RETURN_VALUE None
LOAD_CONST "inner"
STORE_GLOBAL inner_var
MAKE_FUNCTION inner_with_global
LOAD_GLOBAL outer_global
STORE_GLOBAL temp1
LOAD_DEREF inner_var
STORE_GLOBAL temp2
LOAD_CONST "modified by inner"
STORE_GLOBAL outer_global
LOAD_CONST "modified by inner"
STORE_DEREF inner_var
RETURN_VALUE None
STORE_GLOBAL inner_with_global
PUSH_NULL None
LOAD_GLOBAL inner_with_global
CALL 0
POP_TOP None
LOAD_DEREF inner_var
LOAD_GLOBAL outer_global
RETURN_VALUE None
BUILD_LIST 0
LOAD_GLOBAL comp_global
GET_ITER None
FOR_ITER 10
STORE_FAST x
LOAD_FAST x
LOAD_CONST 2.0
BINARY_OP 5
LIST_APPEND 1
JUMP_FORWARD 3
STORE_GLOBAL doubled
LOAD_GLOBAL comp_global
GET_ITER None
FOR_ITER 8
STORE_FAST x
LOAD_FAST x
LOAD_CONST 2.0
BINARY_OP 8
JUMP_FORWARD 2
STORE_GLOBAL gen
PUSH_NULL None
LOAD_GLOBAL list
PUSH_NULL None
LOAD_GLOBAL range
LOAD_CONST 10.0
CALL 1
CALL 1
STORE_GLOBAL comp_global
LOAD_GLOBAL doubled
PUSH_NULL None
LOAD_GLOBAL list
LOAD_GLOBAL gen
CALL 1
RETURN_VALUE None
LOAD_CONST "local shadow"
STORE_GLOBAL shadow_var
MAKE_FUNCTION inner_shadow
LOAD_CONST "modified local"
STORE_DEREF shadow_var
RETURN_VALUE None
STORE_GLOBAL inner_shadow
MAKE_FUNCTION inner_global_shadow
LOAD_CONST "modified global"
STORE_DEREF shadow_var
RETURN_VALUE None
STORE_GLOBAL inner_global_shadow
PUSH_NULL None
LOAD_GLOBAL inner_shadow
CALL 0
POP_TOP None
LOAD_DEREF shadow_var
STORE_GLOBAL local_result
PUSH_NULL None
LOAD_GLOBAL inner_global_shadow
CALL 0
POP_TOP None
LOAD_GLOBAL local_result
RETURN_VALUE None
LOAD_GLOBAL type
STORE_GLOBAL current
LOAD_CONST "modified type"
STORE_GLOBAL type
LOAD_GLOBAL __builtins__
LOAD_ATTR type
STORE_GLOBAL actual_type
LOAD_GLOBAL current
LOAD_GLOBAL actual_type
RETURN_VALUE None
LOAD_CONST "funcKey"
RETURN_VALUE None