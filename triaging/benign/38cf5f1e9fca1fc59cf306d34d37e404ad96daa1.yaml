statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/permissions.py
  contents:
  - name: Permissions
    score: 0.0
    code: |-
      @fill_with_flags()
      class Permissions(BaseFlags):
          """Wraps up the Discord permission value.

          The properties provided are two way. You can set and retrieve individual
          bits using the properties as if they were regular bools. This allows
          you to edit permissions.

          .. versionchanged:: 1.3
              You can now use keyword arguments to initialize :class:`Permissions`
              similar to :meth:`update`.

          .. container:: operations

              .. describe:: x == y

                  Checks if two permissions are equal.
              .. describe:: x != y

                  Checks if two permissions are not equal.
              .. describe:: x <= y

                  Checks if a permission is a subset of another permission.
              .. describe:: x >= y

                  Checks if a permission is a superset of another permission.
              .. describe:: x < y

                   Checks if a permission is a strict subset of another permission.
              .. describe:: x > y

                   Checks if a permission is a strict superset of another permission.
              .. describe:: hash(x)

                     Return the permission's hash.
              .. describe:: iter(x)

                     Returns an iterator of ``(perm, value)`` pairs. This allows it
                     to be, for example, constructed as a dict or a list of pairs.
                     Note that aliases are not shown.

          Attributes
          -----------
          value: :class:`int`
              The raw value. This value is a bit array field of a 53-bit integer
              representing the currently available permissions. You should query
              permissions via the properties rather than using this raw value.
          """

          __slots__ = ()

          def __init__(self, permissions=0, **kwargs):
              if not isinstance(permissions, int):
                  raise TypeError('Expected int parameter, received %s instead.' % permissions.__class__.__name__)

              self.value = permissions
              for key, value in kwargs.items():
                  if key not in self.VALID_FLAGS:
                      raise TypeError('%r is not a valid permission name.' % key)
                  setattr(self, key, value)

          def is_subset(self, other):
              """Returns ``True`` if self has the same or fewer permissions as other."""
              if isinstance(other, Permissions):
                  return (self.value & other.value) == self.value
              else:
                  raise TypeError("cannot compare {} with {}".format(self.__class__.__name__, other.__class__.__name__))

          def is_superset(self, other):
              """Returns ``True`` if self has the same or more permissions as other."""
              if isinstance(other, Permissions):
                  return (self.value | other.value) == self.value
              else:
                  raise TypeError("cannot compare {} with {}".format(self.__class__.__name__, other.__class__.__name__))

          def is_strict_subset(self, other):
              """Returns ``True`` if the permissions on other are a strict subset of those on self."""
              return self.is_subset(other) and self != other

          def is_strict_superset(self, other):
              """Returns ``True`` if the permissions on other are a strict superset of those on self."""
              return self.is_superset(other) and self != other

          __le__ = is_subset
          __ge__ = is_superset
          __lt__ = is_strict_subset
          __gt__ = is_strict_superset

          @classmethod
          def none(cls):
              """A factory method that creates a :class:`Permissions` with all
              permissions set to ``False``."""
              return cls(0)

          @classmethod
          def all(cls):
              """A factory method that creates a :class:`Permissions` with all
              permissions set to ``True``.
              """
              return cls(0b111111111111111111111111111111111)

          @classmethod
          def all_channel(cls):
              """A :class:`Permissions` with all channel-specific permissions set to
              ``True`` and the guild-specific ones set to ``False``. The guild-specific
              permissions are currently:

              - :attr:`manage_emojis`
              - :attr:`view_audit_log`
              - :attr:`view_guild_insights`
              - :attr:`manage_guild`
              - :attr:`change_nickname`
              - :attr:`manage_nicknames`
              - :attr:`kick_members`
              - :attr:`ban_members`
              - :attr:`administrator`

              .. versionchanged:: 1.7
                 Added :attr:`stream`, :attr:`priority_speaker` and :attr:`use_slash_commands` permissions.
              """
              return cls(0b10110011111101111111111101010001)

          @classmethod
          def general(cls):
              """A factory method that creates a :class:`Permissions` with all
              "General" permissions from the official Discord UI set to ``True``.

              .. versionchanged:: 1.7
                 Permission :attr:`read_messages` is now included in the general permissions, but
                 permissions :attr:`administrator`, :attr:`create_instant_invite`, :attr:`kick_members`,
                 :attr:`ban_members`, :attr:`change_nickname` and :attr:`manage_nicknames` are
                 no longer part of the general permissions.
              """
              return cls(0b01110000000010000000010010110000)

          @classmethod
          def membership(cls):
              """A factory method that creates a :class:`Permissions` with all
              "Membership" permissions from the official Discord UI set to ``True``.

              .. versionadded:: 1.7
              """
              return cls(0b00001100000000000000000000000111)

          @classmethod
          def text(cls):
              """A factory method that creates a :class:`Permissions` with all
              "Text" permissions from the official Discord UI set to ``True``.

              .. versionchanged:: 1.7
                 Permission :attr:`read_messages` is no longer part of the text permissions.
                 Added :attr:`use_slash_commands` permission.
              """
              return cls(0b10000000000001111111100001000000)

          @classmethod
          def voice(cls):
              """A factory method that creates a :class:`Permissions` with all
              "Voice" permissions from the official Discord UI set to ``True``."""
              return cls(0b00000011111100000000001100000000)

          @classmethod
          def stage(cls):
              """A factory method that creates a :class:`Permissions` with all
              "Stage Channel" permissions from the official Discord UI set to ``True``.

              .. versionadded:: 1.7
              """
              return cls(1 << 32)

          @classmethod
          def stage_moderator(cls):
              """A factory method that creates a :class:`Permissions` with all
              "Stage Moderator" permissions from the official Discord UI set to ``True``.

              .. versionadded:: 1.7
              """
              return cls(0b100000001010000000000000000000000)

          @classmethod
          def advanced(cls):
              """A factory method that creates a :class:`Permissions` with all
              "Advanced" permissions from the official Discord UI set to ``True``.

              .. versionadded:: 1.7
              """
              return cls(1 << 3)

          def update(self, **kwargs):
              r"""Bulk updates this permission object.

              Allows you to set multiple attributes by using keyword
              arguments. The names must be equivalent to the properties
              listed. Extraneous key/value pairs will be silently ignored.

              Parameters
              ------------
              \*\*kwargs
                  A list of key/value pairs to bulk update permissions with.
              """
              for key, value in kwargs.items():
                  if key in self.VALID_FLAGS:
                      setattr(self, key, value)

          def handle_overwrite(self, allow, deny):
              # Basically this is what's happening here.
              # We have an original bit array, e.g. 1010
              # Then we have another bit array that is 'denied', e.g. 1111
              # And then we have the last one which is 'allowed', e.g. 0101
              # We want original OP denied to end up resulting in
              # whatever is in denied to be set to 0.
              # So 1010 OP 1111 -> 0000
              # Then we take this value and look at the allowed values.
              # And whatever is allowed is set to 1.
              # So 0000 OP2 0101 -> 0101
              # The OP is base  & ~denied.
              # The OP2 is base | allowed.
              self.value = (self.value & ~deny) | allow

          @flag_value
          def create_instant_invite(self):
              """:class:`bool`: Returns ``True`` if the user can create instant invites."""
              return 1 << 0

          @flag_value
          def kick_members(self):
              """:class:`bool`: Returns ``True`` if the user can kick users from the guild."""
              return 1 << 1

          @flag_value
          def ban_members(self):
              """:class:`bool`: Returns ``True`` if a user can ban users from the guild."""
              return 1 << 2

          @flag_value
          def administrator(self):
              """:class:`bool`: Returns ``True`` if a user is an administrator. This role overrides all other permissions.

              This also bypasses all channel-specific overrides.
              """
              return 1 << 3

          @flag_value
          def manage_channels(self):
              """:class:`bool`: Returns ``True`` if a user can edit, delete, or create channels in the guild.

              This also corresponds to the "Manage Channel" channel-specific override."""
              return 1 << 4

          @flag_value
          def manage_guild(self):
              """:class:`bool`: Returns ``True`` if a user can edit guild properties."""
              return 1 << 5

          @flag_value
          def add_reactions(self):
              """:class:`bool`: Returns ``True`` if a user can add reactions to messages."""
              return 1 << 6

          @flag_value
          def view_audit_log(self):
              """:class:`bool`: Returns ``True`` if a user can view the guild's audit log."""
              return 1 << 7

          @flag_value
          def priority_speaker(self):
              """:class:`bool`: Returns ``True`` if a user can be more easily heard while talking."""
              return 1 << 8

          @flag_value
          def stream(self):
              """:class:`bool`: Returns ``True`` if a user can stream in a voice channel."""
              return 1 << 9

          @flag_value
          def read_messages(self):
              """:class:`bool`: Returns ``True`` if a user can read messages from all or specific text channels."""
              return 1 << 10

          @make_permission_alias('read_messages')
          def view_channel(self):
              """:class:`bool`: An alias for :attr:`read_messages`.

              .. versionadded:: 1.3
              """
              return 1 << 10

          @flag_value
          def send_messages(self):
              """:class:`bool`: Returns ``True`` if a user can send messages from all or specific text channels."""
              return 1 << 11

          @flag_value
          def send_tts_messages(self):
              """:class:`bool`: Returns ``True`` if a user can send TTS messages from all or specific text channels."""
              return 1 << 12

          @flag_value
          def manage_messages(self):
              """:class:`bool`: Returns ``True`` if a user can delete or pin messages in a text channel.

              .. note::

                  Note that there are currently no ways to edit other people's messages.
              """
              return 1 << 13

          @flag_value
          def embed_links(self):
              """:class:`bool`: Returns ``True`` if a user's messages will automatically be embedded by Discord."""
              return 1 << 14

          @flag_value
          def attach_files(self):
              """:class:`bool`: Returns ``True`` if a user can send files in their messages."""
              return 1 << 15

          @flag_value
          def read_message_history(self):
              """:class:`bool`: Returns ``True`` if a user can read a text channel's previous messages."""
              return 1 << 16

          @flag_value
          def mention_everyone(self):
              """:class:`bool`: Returns ``True`` if a user's @everyone or @here will mention everyone in the text channel."""
              return 1 << 17

          @flag_value
          def external_emojis(self):
              """:class:`bool`: Returns ``True`` if a user can use emojis from other guilds."""
              return 1 << 18

          @make_permission_alias('external_emojis')
          def use_external_emojis(self):
              """:class:`bool`: An alias for :attr:`external_emojis`.

              .. versionadded:: 1.3
              """
              return 1 << 18

          @flag_value
          def view_guild_insights(self):
              """:class:`bool`: Returns ``True`` if a user can view the guild's insights.

              .. versionadded:: 1.3
              """
              return 1 << 19

          @flag_value
          def connect(self):
              """:class:`bool`: Returns ``True`` if a user can connect to a voice channel."""
              return 1 << 20

          @flag_value
          def speak(self):
              """:class:`bool`: Returns ``True`` if a user can speak in a voice channel."""
              return 1 << 21

          @flag_value
          def mute_members(self):
              """:class:`bool`: Returns ``True`` if a user can mute other users."""
              return 1 << 22

          @flag_value
          def deafen_members(self):
              """:class:`bool`: Returns ``True`` if a user can deafen other users."""
              return 1 << 23

          @flag_value
          def move_members(self):
              """:class:`bool`: Returns ``True`` if a user can move users between other voice channels."""
              return 1 << 24

          @flag_value
          def use_voice_activation(self):
              """:class:`bool`: Returns ``True`` if a user can use voice activation in voice channels."""
              return 1 << 25

          @flag_value
          def change_nickname(self):
              """:class:`bool`: Returns ``True`` if a user can change their nickname in the guild."""
              return 1 << 26

          @flag_value
          def manage_nicknames(self):
              """:class:`bool`: Returns ``True`` if a user can change other user's nickname in the guild."""
              return 1 << 27

          @flag_value
          def manage_roles(self):
              """:class:`bool`: Returns ``True`` if a user can create or edit roles less than their role's position.

              This also corresponds to the "Manage Permissions" channel-specific override.
              """
              return 1 << 28

          @make_permission_alias('manage_roles')
          def manage_permissions(self):
              """:class:`bool`: An alias for :attr:`manage_roles`.

              .. versionadded:: 1.3
              """
              return 1 << 28

          @flag_value
          def manage_webhooks(self):
              """:class:`bool`: Returns ``True`` if a user can create, edit, or delete webhooks."""
              return 1 << 29

          @flag_value
          def manage_emojis(self):
              """:class:`bool`: Returns ``True`` if a user can create, edit, or delete emojis."""
              return 1 << 30

          @flag_value
          def use_slash_commands(self):
              """:class:`bool`: Returns ``True`` if a user can use slash commands.

              .. versionadded:: 1.7
              """
              return 1 << 31

          @flag_value
          def request_to_speak(self):
              """:class:`bool`: Returns ``True`` if a user can request to speak in a stage channel.

              .. versionadded:: 1.7
              """
              return 1 << 32
    tokens: resume load_name __name__ store_name __module__ load_const Permissions store_name __qualname__ load_const STRING_LEN_L_ENT_HIGH store_name __doc__ load_const store_name __slots__ load_const load_const OBJECT make_function defaults store_name __init__ load_const OBJECT make_function store_name is_subset load_const OBJECT make_function store_name is_superset load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_name is_subset store_name __le__ load_name is_superset store_name __ge__ load_name STRING_LEN_S_ENT_HIGH store_name __lt__ load_name STRING_LEN_S_ENT_HIGH store_name __gt__ load_name classmethod load_const OBJECT make_function call store_name none load_name classmethod load_const OBJECT make_function call store_name all load_name classmethod load_const OBJECT make_function call store_name all_channel load_name classmethod load_const OBJECT make_function call store_name general load_name classmethod load_const OBJECT make_function call store_name membership load_name classmethod load_const OBJECT make_function call store_name text load_name classmethod load_const OBJECT make_function call store_name voice load_name classmethod load_const OBJECT make_function call store_name stage load_name classmethod load_const OBJECT make_function call store_name stage_moderator load_name classmethod load_const OBJECT make_function call store_name advanced load_const OBJECT make_function store_name update load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name kick_members load_name flag_value load_const OBJECT make_function call store_name ban_members load_name flag_value load_const OBJECT make_function call store_name administrator load_name flag_value load_const OBJECT make_function call store_name manage_channels load_name flag_value load_const OBJECT make_function call store_name manage_guild load_name flag_value load_const OBJECT make_function call store_name add_reactions load_name flag_value load_const OBJECT make_function call store_name view_audit_log load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name stream load_name flag_value load_const OBJECT make_function call store_name read_messages push_null load_name STRING_LEN_S_ENT_HIGH load_const read_messages call load_const OBJECT make_function call store_name view_channel load_name flag_value load_const OBJECT make_function call store_name send_messages load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name manage_messages load_name flag_value load_const OBJECT make_function call store_name embed_links load_name flag_value load_const OBJECT make_function call store_name attach_files load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name external_emojis push_null load_name STRING_LEN_S_ENT_HIGH load_const external_emojis call load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name connect load_name flag_value load_const OBJECT make_function call store_name speak load_name flag_value load_const OBJECT make_function call store_name mute_members load_name flag_value load_const OBJECT make_function call store_name deafen_members load_name flag_value load_const OBJECT make_function call store_name move_members load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name change_nickname load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name manage_roles push_null load_name STRING_LEN_S_ENT_HIGH load_const manage_roles call load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name manage_webhooks load_name flag_value load_const OBJECT make_function call store_name manage_emojis load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name flag_value load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: de67170c2f639130d7e54858413883321af15ed68fcf1e47ef681e79407fee38
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/permissions.py
  : 
