statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/trust_list.py
  contents:
  - name: _ca_path
    score: 0.0
    code: |-
      def _ca_path(temp_dir=None):
          """
          Returns the file path to the CA certs file

          :param temp_dir:
              The temporary directory to cache the CA certs in on OS X and Windows.
              Needs to have secure permissions so other users can not modify the
              contents.

          :return:
              A 2-element tuple:
               - 0: A unicode string of the file path
               - 1: A bool if the file is a temporary file
          """

          ca_path = system_path()

          # Windows and OS X
          if ca_path is None:
              if temp_dir is None:
                  temp_dir = tempfile.gettempdir()

              if not os.path.isdir(temp_dir):
                  raise CACertsError(pretty_message(
                      '''
                      The temp dir specified, "%s", is not a directory
                      ''',
                      temp_dir
                  ))

              ca_path = os.path.join(temp_dir, 'oscrypto-ca-bundle.crt')
              return (ca_path, True)

          return (ca_path, False)
    tokens: resume load_global system_path call store_fast ca_path load_fast ca_path pop_jump_if_not_none TO_NUMBER load_fast temp_dir pop_jump_if_not_none TO_NUMBER load_global tempfile load_attr gettempdir call store_fast temp_dir load_global os load_attr path load_attr isdir load_fast temp_dir call pop_jump_if_true TO_NUMBER load_global CACertsError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_fast temp_dir call call raise_varargs load_global os load_attr path load_attr join load_fast temp_dir load_const STRING_LEN_S_ENT_HIGH call store_fast ca_path load_fast ca_path load_const INTEGER build_tuple return_value load_fast ca_path load_const INTEGER build_tuple return_value
    hash: 683ceccfd5cbe2441ae25619d40b68bee571dc75622fdc60e7c9435fb182390f
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/trust_list.py
  : 
