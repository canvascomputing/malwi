statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/webhook.py
  contents:
  - name: Webhook.send
    score: 0.0
    code: |-
      def send(self, content=None, *, wait=False, username=None, avatar_url=None, tts=False,
                                          file=None, files=None, embed=None, embeds=None, allowed_mentions=None):
              """|maybecoro|

              Sends a message using the webhook.

              If the webhook is constructed with a :class:`RequestsWebhookAdapter` then this is
              not a coroutine.

              The content must be a type that can convert to a string through ``str(content)``.

              To upload a single file, the ``file`` parameter should be used with a
              single :class:`File` object.

              If the ``embed`` parameter is provided, it must be of type :class:`Embed` and
              it must be a rich embed type. You cannot mix the ``embed`` parameter with the
              ``embeds`` parameter, which must be a :class:`list` of :class:`Embed` objects to send.

              Parameters
              ------------
              content: :class:`str`
                  The content of the message to send.
              wait: :class:`bool`
                  Whether the server should wait before sending a response. This essentially
                  means that the return type of this function changes from ``None`` to
                  a :class:`WebhookMessage` if set to ``True``.
              username: :class:`str`
                  The username to send with this message. If no username is provided
                  then the default username for the webhook is used.
              avatar_url: Union[:class:`str`, :class:`Asset`]
                  The avatar URL to send with this message. If no avatar URL is provided
                  then the default avatar for the webhook is used.
              tts: :class:`bool`
                  Indicates if the message should be sent using text-to-speech.
              file: :class:`File`
                  The file to upload. This cannot be mixed with ``files`` parameter.
              files: List[:class:`File`]
                  A list of files to send with the content. This cannot be mixed with the
                  ``file`` parameter.
              embed: :class:`Embed`
                  The rich embed for the content to send. This cannot be mixed with
                  ``embeds`` parameter.
              embeds: List[:class:`Embed`]
                  A list of embeds to send with the content. Maximum of 10. This cannot
                  be mixed with the ``embed`` parameter.
              allowed_mentions: :class:`AllowedMentions`
                  Controls the mentions being processed in this message.

                  .. versionadded:: 1.4

              Raises
              --------
              HTTPException
                  Sending the message failed.
              NotFound
                  This webhook was not found.
              Forbidden
                  The authorization token for the webhook is incorrect.
              InvalidArgument
                  You specified both ``embed`` and ``embeds`` or the length of
                  ``embeds`` was invalid or there was no token associated with
                  this webhook.

              Returns
              ---------
              Optional[:class:`WebhookMessage`]
                  The message that was sent.
              """

              payload = {}
              if self.token is None:
                  raise InvalidArgument('This webhook does not have a token associated with it')
              if files is not None and file is not None:
                  raise InvalidArgument('Cannot mix file and files keyword arguments.')
              if embeds is not None and embed is not None:
                  raise InvalidArgument('Cannot mix embed and embeds keyword arguments.')

              if embeds is not None:
                  if len(embeds) > 10:
                      raise InvalidArgument('embeds has a maximum of 10 elements.')
                  payload['embeds'] = [e.to_dict() for e in embeds]

              if embed is not None:
                  payload['embeds'] = [embed.to_dict()]

              if content is not None:
                  payload['content'] = str(content)

              payload['tts'] = tts
              if avatar_url:
                  payload['avatar_url'] = str(avatar_url)
              if username:
                  payload['username'] = username

              previous_mentions = getattr(self._state, 'allowed_mentions', None)

              if allowed_mentions:
                  if previous_mentions is not None:
                      payload['allowed_mentions'] = previous_mentions.merge(allowed_mentions).to_dict()
                  else:
                      payload['allowed_mentions'] = allowed_mentions.to_dict()
              elif previous_mentions is not None:
                  payload['allowed_mentions'] = previous_mentions.to_dict()

              return self._adapter.execute_webhook(wait=wait, file=file, files=files, payload=payload)
    tokens: resume build_map store_fast payload load_fast self load_attr token pop_jump_if_not_none TO_NUMBER load_global InvalidArgument load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast files pop_jump_if_none TO_NUMBER load_fast file pop_jump_if_none TO_NUMBER load_global InvalidArgument load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast embeds pop_jump_if_none TO_NUMBER load_fast embed pop_jump_if_none TO_NUMBER load_global InvalidArgument load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast embeds pop_jump_if_none TO_NUMBER load_global len load_fast embeds call load_const INTEGER compare_op > pop_jump_if_false TO_NUMBER load_global InvalidArgument load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast embeds get_iter load_fast_and_clear e swap build_list swap for_iter TO_NUMBER store_fast e load_fast e load_attr to_dict call list_append jump_backward TO_NUMBER end_for swap store_fast e load_fast payload load_const embeds store_subscr load_fast embed pop_jump_if_none TO_NUMBER load_fast embed load_attr to_dict call build_list load_fast payload load_const embeds store_subscr load_fast content pop_jump_if_none TO_NUMBER load_global str load_fast content call load_fast payload load_const content store_subscr load_fast tts load_fast payload load_const tts store_subscr load_fast avatar_url pop_jump_if_false TO_NUMBER load_global str load_fast avatar_url call load_fast payload load_const avatar_url store_subscr load_fast username pop_jump_if_false TO_NUMBER load_fast username load_fast payload load_const username store_subscr load_global REFLECTION_DYNAMIC_READ load_fast self load_attr _state load_const STRING_LEN_S_ENT_HIGH load_const call store_fast STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH pop_jump_if_false TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH pop_jump_if_none TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH load_attr merge load_fast STRING_LEN_S_ENT_HIGH call load_attr to_dict call load_fast payload load_const STRING_LEN_S_ENT_HIGH store_subscr jump_forward TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH load_attr to_dict call load_fast payload load_const STRING_LEN_S_ENT_HIGH store_subscr jump_forward TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH pop_jump_if_none TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH load_attr to_dict call load_fast payload load_const STRING_LEN_S_ENT_HIGH store_subscr load_fast self load_attr _adapter load_attr execute_webhook load_fast wait load_fast file load_fast files load_fast payload kw_names file files payload wait call return_value swap pop_top swap store_fast e reraise
    hash: 1a046ad502c9641913998a453563a3e68ad2f2f7ab17fa3170dfb67259fc87f8
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/webhook.py: 
