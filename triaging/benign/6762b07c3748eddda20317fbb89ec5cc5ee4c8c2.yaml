statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_poolmanager.py
  contents:
  - name: TestPoolManager.test_http_with_ssl_keywords
    score: 0.0
    code: |-
      def test_http_with_ssl_keywords(self):
              http = PoolManager(ca_certs='REQUIRED')
              self.addCleanup(http.clear)

              r = http.request('GET', 'http://%s:%s/' % (self.host, self.port))
              self.assertEqual(r.status, 200)
    tokens: 'resume load_global PoolManager load_const REQUIRED kw_names ca_certs call store_fast http load_fast self load_attr addCleanup load_fast http load_attr clear call pop_top load_fast http load_attr request load_const GET load_const http:// load_fast self load_attr host format_value INTEGER load_const : load_fast self load_attr port format_value INTEGER load_const / build_string call store_fast r load_fast self load_attr assertEqual load_fast r load_attr status load_const INTEGER call pop_top return_const None'
    hash: 5aa38081b8c8657d3affa6113b36586bb924354f1f2d1dbea3eea5f8104588fc
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_poolmanager.py
  : 
