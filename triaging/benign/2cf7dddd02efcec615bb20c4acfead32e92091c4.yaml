statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/appinfo.py
  contents:
  - name: AppInfo.guild
    score: 0.0
    code: |-
      @property
          def guild(self):
              """Optional[:class:`Guild`]: If this application is a game sold on Discord,
              this field will be the guild to which it has been linked

              .. versionadded:: 1.3
              """
              return self._state._get_guild(int(self.guild_id))
    tokens: resume load_fast self load_attr _state load_attr _get_guild load_global int load_fast self load_attr guild_id call call return_value
    hash: ed40da11aaa2956d2a03da85025e92312f2dee238d5bbe94108222142215f30a
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/appinfo.py: 
