statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/raw_models.py
  contents:
  - name: RawBulkMessageDeleteEvent.__init__
    score: 0.0
    code: |-
      def __init__(self, data):
              self.message_ids = {int(x) for x in data.get('ids', [])}
              self.channel_id = int(data['channel_id'])
              self.cached_messages = []

              try:
                  self.guild_id = int(data['guild_id'])
              except KeyError:
                  self.guild_id = None
    tokens: resume load_fast data load_attr get load_const ids build_list call get_iter load_fast_and_clear x swap build_set swap for_iter TO_NUMBER store_fast x load_global int load_fast x call set_add jump_backward TO_NUMBER end_for swap store_fast x load_fast self store_attr message_ids load_global int load_fast data load_const channel_id binary_subscr call load_fast self store_attr channel_id build_list load_fast self store_attr cached_messages nop load_global int load_fast data load_const guild_id binary_subscr call load_fast self store_attr guild_id return_const None swap pop_top swap store_fast x reraise push_exc_info load_global KeyError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const load_fast self store_attr guild_id pop_except return_const None reraise copy pop_except reraise
    hash: d30f82ca6876aacaae42808bf8e625f4c1fac17f94ced7b66fb3e2665f98d8bb
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/raw_models.py
  : 
