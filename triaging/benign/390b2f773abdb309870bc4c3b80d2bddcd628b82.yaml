statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/formatter.py
  contents:
  - name: Formatter.__init__
    score: null
    code: |-
      def __init__(self, args):
              self._args = args
    tokens: resume load_fast args load_fast self store_attr _args return_const None
    hash: 2f24264b1b2192a508544682d66ee66c61ae15b2eff17a6c752a717a68b55b98
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/formatter.py: 
