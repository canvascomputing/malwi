statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/asymmetric.py
  contents:
  - name: PublicKey.__init__
    score: 0.0
    code: |-
      def __init__(self, sec_key_ref, asn1):
              """
              :param sec_key_ref:
                  A Security framework SecKeyRef value from loading/importing the
                  key

              :param asn1:
                  An asn1crypto.keys.PublicKeyInfo object
              """

              self.sec_key_ref = sec_key_ref
              self.asn1 = asn1
              self._lib = CoreFoundation
    tokens: resume load_fast sec_key_ref load_fast self store_attr sec_key_ref load_fast asn1 load_fast self store_attr asn1 load_global CoreFoundation load_fast self store_attr _lib return_const None
    hash: c97119f0a538ec7e0f056d59cfa4f031753aab7a6dc87b74226917489ff4f6e4
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/asymmetric.py
  : 
