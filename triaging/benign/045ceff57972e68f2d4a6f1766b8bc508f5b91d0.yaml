statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/help.py
  contents:
  - name: ServiceHelpCommand.name
    score: null
    code: |-
      @property
          def name(self):
              return self._name
    tokens: resume load_fast self load_attr _name return_value
    hash: 2c2423e4d704c54b659b9b0fe2a88200d100bf971f62e2b0a00dcb9970d78207
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/help.py: 
