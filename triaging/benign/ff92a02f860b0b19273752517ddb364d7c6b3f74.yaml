statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/request.py
  contents:
  - name: AcsRequest.__init__
    score: 0.0
    code: |-
      def __init__(self, product, version=None,
                       action_name=None,
                       location_service_code=None,
                       location_endpoint_type='openAPI',
                       accept_format=None,
                       protocol_type=None,
                       method=None):
              """

              :param product:
              :param version:
              :param action_name:
              :param params:
              :param resource_owner_account:
              :param protocol_type:
              :param accept_format:
              :return:
              """
              self._version = version
              self._product = product
              self._action_name = action_name
              self._protocol_type = protocol_type
              if self._protocol_type is None:
                  self._protocol_type = _default_protocol_type

              self._accept_format = accept_format
              self._params = {}
              self._method = method
              self._header = {}
              if action_name is not None:
                  self.add_header('x-acs-action', action_name)
              if version is not None:
                  self.add_header('x-acs-version', version)
              self._body_params = {}
              self._uri_pattern = None
              self._uri_params = None
              self._content = None
              self._location_service_code = location_service_code
              self._location_endpoint_type = location_endpoint_type
              self.add_header('x-sdk-invoke-type', 'normal')
              self.endpoint = None
              self._extra_user_agent = {}
              self.string_to_sign = ''
              self._request_connect_timeout = None
              self._request_read_timeout = None
              self.request_network = "public"
              self.product_suffix = ""
              self.endpoint_map = None
              self.endpoint_regional = None
    tokens: resume load_fast version load_fast self store_attr _version load_fast product load_fast self store_attr _product load_fast action_name load_fast self store_attr _action_name load_fast protocol_type load_fast self store_attr _protocol_type load_fast self load_attr _protocol_type pop_jump_if_not_none TO_NUMBER load_global STRING_LEN_S_ENT_HIGH load_fast self store_attr _protocol_type load_fast accept_format load_fast self store_attr _accept_format build_map load_fast self store_attr _params load_fast method load_fast self store_attr _method build_map load_fast self store_attr _header load_fast action_name pop_jump_if_none TO_NUMBER load_fast self load_attr add_header load_const x-acs-action load_fast action_name call pop_top load_fast version pop_jump_if_none TO_NUMBER load_fast self load_attr add_header load_const x-acs-version load_fast version call pop_top build_map load_fast self store_attr _body_params load_const load_fast self store_attr _uri_pattern load_const load_fast self store_attr _uri_params load_const load_fast self store_attr _content load_fast STRING_LEN_S_ENT_HIGH load_fast self store_attr STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH load_fast self store_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr add_header load_const STRING_LEN_S_ENT_HIGH load_const normal call pop_top load_const load_fast self store_attr endpoint build_map load_fast self store_attr STRING_LEN_S_ENT_HIGH load_const load_fast self store_attr string_to_sign load_const load_fast self store_attr STRING_LEN_S_ENT_HIGH load_const load_fast self store_attr STRING_LEN_S_ENT_HIGH load_const public load_fast self store_attr request_network load_const load_fast self store_attr product_suffix load_const load_fast self store_attr endpoint_map load_const load_fast self store_attr STRING_LEN_S_ENT_HIGH return_const None
    hash: ed537c27a38d8f3f4beb054e07279f3e1327cecf69e56ba210b00b4dfcee0a97
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/request.py
  : 
