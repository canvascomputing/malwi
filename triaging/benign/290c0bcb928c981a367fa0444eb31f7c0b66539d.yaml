statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/state.py
  contents:
  - name: ConnectionState._get_guild
    score: 0.0
    code: |-
      def _get_guild(self, guild_id):
              return self._guilds.get(guild_id)
    tokens: resume load_fast self load_attr _guilds load_attr get load_fast guild_id call return_value
    hash: e0ba6d6ee2a6518dd5cbca335336df3e38897a5502313cf82ba6825bcf20c8a1
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/state.py: 
