statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/rrequests/2.27.1/rrequests-2.27.1/rrequests-2.27.1/tests/test_lowlevel.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-

      import pytest
      import threading
      import requests

      from tests.testserver.server import Server, consume_socket_content

      from .utils import override_environ


      def echo_response_handler(sock):
          """Simple handler that will take request and echo it back to requester."""
          request_content = consume_socket_content(sock, timeout=0.5)

          text_200 = (
              b'HTTP/1.1 200 OK\r\n'
              b'Content-Length: %d\r\n\r\n'
              b'%s'
          ) % (len(request_content), request_content)
          sock.send(text_200)
    tokens: resume load_const INTEGER load_const import_name pytest store_name pytest load_const INTEGER load_const import_name threading store_name threading load_const INTEGER load_const import_name requests store_name requests load_const INTEGER load_const import_name STRING_LEN_S_ENT_MED import_from Server store_name Server import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name utils import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const http load_const http build_list build_tuple load_const https load_const https build_list build_tuple load_const all load_const http load_const https build_list build_tuple build_list store_name STRING_LEN_S_ENT_HIGH build_list store_name _proxy_combos load_name STRING_LEN_S_ENT_HIGH get_iter for_iter TO_NUMBER unpack_sequence store_name prefix store_name schemes load_name schemes get_iter for_iter TO_NUMBER store_name scheme load_name _proxy_combos load_attr append load_const {}_proxy load_attr format load_name prefix call load_name scheme build_tuple call pop_top jump_backward TO_NUMBER end_for jump_backward TO_NUMBER end_for load_name _proxy_combos load_name _proxy_combos get_iter load_fast_and_clear var load_fast_and_clear scheme swap build_list swap for_iter TO_NUMBER unpack_sequence store_fast var store_fast scheme load_fast var load_attr upper call load_fast scheme build_tuple list_append jump_backward TO_NUMBER end_for swap store_fast scheme store_fast var binary_op += store_name _proxy_combos load_name pytest load_attr mark load_attr parametrize load_const var,scheme load_name _proxy_combos call load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH return_const None swap pop_top swap store_fast scheme store_fast var reraise
    hash: 594298251a07455aa2d0bd2fc9411d3a1657643bc22182b7ca477333cc8b6615
sources:
  .repo_cache/malicious_repos/pypi_malregistry/rrequests/2.27.1/rrequests-2.27.1/rrequests-2.27.1/tests/test_lowlevel.py: 
