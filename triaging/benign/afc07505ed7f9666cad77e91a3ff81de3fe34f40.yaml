statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_selectors.py
  contents:
  - name: BaseSelectorTestCase.test_select_multiple_event_types
    score: 0.0
    code: |-
      def test_select_multiple_event_types(self):
              s = self.make_selector()

              rd, wr = self.make_socketpair()
              key = s.register(rd, selectors.EVENT_READ | selectors.EVENT_WRITE)

              self.assertEqual([(key, selectors.EVENT_WRITE)], s.select(0.001))

              wr.send(b'x')
              time.sleep(0.01)  # Wait for the write to flush.

              self.assertEqual([(key, selectors.EVENT_READ | selectors.EVENT_WRITE)], s.select(0.001))
    tokens: resume load_fast self load_attr make_selector call store_fast s load_fast self load_attr make_socketpair call unpack_sequence store_fast rd store_fast wr load_fast s load_attr register load_fast rd load_global selectors load_attr EVENT_READ load_global selectors load_attr EVENT_WRITE binary_op | call store_fast key load_fast self load_attr assertEqual load_fast key load_global selectors load_attr EVENT_WRITE build_tuple build_list load_fast s load_attr select load_const FLOAT call call pop_top load_fast wr load_attr send load_const call pop_top load_global time load_attr sleep load_const FLOAT call pop_top load_fast self load_attr assertEqual load_fast key load_global selectors load_attr EVENT_READ load_global selectors load_attr EVENT_WRITE binary_op | build_tuple build_list load_fast s load_attr select load_const FLOAT call call pop_top return_const None
    hash: aecec47f1da6ba812469367287da29c61a8eb6c8c0dd92d2350b32eaf36c740f
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_selectors.py: 
