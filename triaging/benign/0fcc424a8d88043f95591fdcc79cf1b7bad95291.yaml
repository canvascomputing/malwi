statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/iterators.py
  contents:
  - name: AuditLogIterator._fill
    score: 0.0
    code: |-
      async def _fill(self):
              from .user import User

              if self._get_retrieve():
                  users, data = await self._strategy(self.retrieve)
                  if len(data) < 100:
                      self.limit = 0 # terminate the infinite loop

                  if self.reverse:
                      data = reversed(data)
                  if self._filter:
                      data = filter(self._filter, data)

                  for user in users:
                      u = User(data=user, state=self._state)
                      self._users[u.id] = u

                  for element in data:
                      # TODO: remove this if statement later
                      if element['action_type'] is None:
                          continue

                      await self.entries.put(AuditLogEntry(data=element, users=self._users, guild=self.guild))
    tokens: return_generator pop_top resume load_const INTEGER load_const import_name user import_from User store_fast User pop_top load_fast self load_attr _get_retrieve call pop_jump_if_false TO_NUMBER load_fast self load_attr _strategy load_fast self load_attr retrieve call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send unpack_sequence store_fast users store_fast data load_global len load_fast data call load_const INTEGER compare_op < pop_jump_if_false TO_NUMBER load_const INTEGER load_fast self store_attr limit load_fast self load_attr reverse pop_jump_if_false TO_NUMBER load_global reversed load_fast data call store_fast data load_fast self load_attr _filter pop_jump_if_false TO_NUMBER load_global filter load_fast self load_attr _filter load_fast data call store_fast data load_fast users get_iter for_iter TO_NUMBER store_fast user push_null load_fast User load_fast user load_fast self load_attr _state kw_names data state call store_fast u load_fast u load_fast self load_attr _users load_fast u load_attr id store_subscr jump_backward TO_NUMBER end_for load_fast data get_iter for_iter TO_NUMBER store_fast element load_fast element load_const action_type binary_subscr pop_jump_if_not_none TO_NUMBER jump_backward TO_NUMBER load_fast self load_attr entries load_attr put load_global AuditLogEntry load_fast element load_fast self load_attr _users load_fast self load_attr guild kw_names data guild users call call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top jump_backward TO_NUMBER end_for return_const None return_const None cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: c860919ca62388a965fc84febd2e1dbb88f0b82df59cf6b0e8eec42747ffbf0e
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/iterators.py
  : IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgppbXBvcnQgYXN5bmNpbwppbXBvcnQgZGF0ZXRpbWUKCmZyb20gLmVycm9ycyBpbXBvcnQgTm9Nb3JlSXRlbXMKZnJvbSAudXRpbHMgaW1wb3J0IHRpbWVfc25vd2ZsYWtlLCBtYXliZV9jb3JvdXRpbmUKZnJvbSAub2JqZWN0IGltcG9ydCBPYmplY3QKZnJvbSAuYXVkaXRfbG9ncyBpbXBvcnQgQXVkaXRMb2dFbnRyeQoKT0xERVNUX09CSkVDVCA9IE9iamVjdChpZD0wKQoKY2xhc3MgX0FzeW5jSXRlcmF0b3I6CiAgICBfX3Nsb3RzX18gPSAoKQoKICAgIGRlZiBnZXQoc2VsZiwgKiphdHRycyk6CiAgICAgICAgZGVmIHByZWRpY2F0ZShlbGVtKToKICAgICAgICAgICAgZm9yIGF0dHIsIHZhbCBpbiBhdHRycy5pdGVtcygpOgogICAgICAgICAgICAgICAgbmVzdGVkID0gYXR0ci5zcGxpdCgnX18nKQogICAgICAgICAgICAgICAgb2JqID0gZWxlbQogICAgICAgICAgICAgICAgZm9yIGF0dHJpYnV0ZSBpbiBuZXN0ZWQ6CiAgICAgICAgICAgICAgICAgICAgb2JqID0gZ2V0YXR0cihvYmosIGF0dHJpYnV0ZSkKCiAgICAgICAgICAgICAgICBpZiBvYmogIT0gdmFsOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICByZXR1cm4gc2VsZi5maW5kKHByZWRpY2F0ZSkKCiAgICBhc3luYyBkZWYgZmluZChzZWxmLCBwcmVkaWNhdGUpOgogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVsZW0gPSBhd2FpdCBzZWxmLm5leHQoKQogICAgICAgICAgICBleGNlcHQgTm9Nb3JlSXRlbXM6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgcmV0ID0gYXdhaXQgbWF5YmVfY29yb3V0aW5lKHByZWRpY2F0ZSwgZWxlbSkKICAgICAgICAgICAgaWYgcmV0OgogICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0KCiAgICBkZWYgY2h1bmsoc2VsZiwgbWF4X3NpemUpOgogICAgICAgIGlmIG1heF9zaXplIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ2FzeW5jIGl0ZXJhdG9yIGNodW5rIHNpemVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAuJykKICAgICAgICByZXR1cm4gX0NodW5rZWRBc3luY0l0ZXJhdG9yKHNlbGYsIG1heF9zaXplKQoKICAgIGRlZiBtYXAoc2VsZiwgZnVuYyk6CiAgICAgICAgcmV0dXJuIF9NYXBwZWRBc3luY0l0ZXJhdG9yKHNlbGYsIGZ1bmMpCgogICAgZGVmIGZpbHRlcihzZWxmLCBwcmVkaWNhdGUpOgogICAgICAgIHJldHVybiBfRmlsdGVyZWRBc3luY0l0ZXJhdG9yKHNlbGYsIHByZWRpY2F0ZSkKCiAgICBhc3luYyBkZWYgZmxhdHRlbihzZWxmKToKICAgICAgICByZXQgPSBbXQogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGl0ZW0gPSBhd2FpdCBzZWxmLm5leHQoKQogICAgICAgICAgICBleGNlcHQgTm9Nb3JlSXRlbXM6CiAgICAgICAgICAgICAgICByZXR1cm4gcmV0CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXQuYXBwZW5kKGl0ZW0pCgogICAgZGVmIF9fYWl0ZXJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGFzeW5jIGRlZiBfX2FuZXh0X18oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBtc2cgPSBhd2FpdCBzZWxmLm5leHQoKQogICAgICAgIGV4Y2VwdCBOb01vcmVJdGVtczoKICAgICAgICAgICAgcmFpc2UgU3RvcEFzeW5jSXRlcmF0aW9uKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gbXNnCgpkZWYgX2lkZW50aXR5KHgpOgogICAgcmV0dXJuIHgKCmNsYXNzIF9DaHVua2VkQXN5bmNJdGVyYXRvcihfQXN5bmNJdGVyYXRvcik6CiAgICBkZWYgX19pbml0X18oc2VsZiwgaXRlcmF0b3IsIG1heF9zaXplKToKICAgICAgICBzZWxmLml0ZXJhdG9yID0gaXRlcmF0b3IKICAgICAgICBzZWxmLm1heF9zaXplID0gbWF4X3NpemUKCiAgICBhc3luYyBkZWYgbmV4dChzZWxmKToKICAgICAgICByZXQgPSBbXQogICAgICAgIG4gPSAwCiAgICAgICAgd2hpbGUgbiA8IHNlbGYubWF4X3NpemU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGl0ZW0gPSBhd2FpdCBzZWxmLml0ZXJhdG9yLm5leHQoKQogICAgICAgICAgICBleGNlcHQgTm9Nb3JlSXRlbXM6CiAgICAgICAgICAgICAgICBpZiByZXQ6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldAogICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldC5hcHBlbmQoaXRlbSkKICAgICAgICAgICAgICAgIG4gKz0gMQogICAgICAgIHJldHVybiByZXQKCmNsYXNzIF9NYXBwZWRBc3luY0l0ZXJhdG9yKF9Bc3luY0l0ZXJhdG9yKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpdGVyYXRvciwgZnVuYyk6CiAgICAgICAgc2VsZi5pdGVyYXRvciA9IGl0ZXJhdG9yCiAgICAgICAgc2VsZi5mdW5jID0gZnVuYwoKICAgIGFzeW5jIGRlZiBuZXh0KHNlbGYpOgogICAgICAgICMgdGhpcyByYWlzZXMgTm9Nb3JlSXRlbXMgYW5kIHdpbGwgcHJvcGFnYXRlIGFwcHJvcHJpYXRlbHkKICAgICAgICBpdGVtID0gYXdhaXQgc2VsZi5pdGVyYXRvci5uZXh0KCkKICAgICAgICByZXR1cm4gYXdhaXQgbWF5YmVfY29yb3V0aW5lKHNlbGYuZnVuYywgaXRlbSkKCmNsYXNzIF9GaWx0ZXJlZEFzeW5jSXRlcmF0b3IoX0FzeW5jSXRlcmF0b3IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGl0ZXJhdG9yLCBwcmVkaWNhdGUpOgogICAgICAgIHNlbGYuaXRlcmF0b3IgPSBpdGVyYXRvcgoKICAgICAgICBpZiBwcmVkaWNhdGUgaXMgTm9uZToKICAgICAgICAgICAgcHJlZGljYXRlID0gX2lkZW50aXR5CgogICAgICAgIHNlbGYucHJlZGljYXRlID0gcHJlZGljYXRlCgogICAgYXN5bmMgZGVmIG5leHQoc2VsZik6CiAgICAgICAgZ2V0dGVyID0gc2VsZi5pdGVyYXRvci5uZXh0CiAgICAgICAgcHJlZCA9IHNlbGYucHJlZGljYXRlCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgIyBwcm9wYWdhdGUgTm9Nb3JlSXRlbXMgc2ltaWxhciB0byBfTWFwcGVkQXN5bmNJdGVyYXRvcgogICAgICAgICAgICBpdGVtID0gYXdhaXQgZ2V0dGVyKCkKICAgICAgICAgICAgcmV0ID0gYXdhaXQgbWF5YmVfY29yb3V0aW5lKHByZWQsIGl0ZW0pCiAgICAgICAgICAgIGlmIHJldDoKICAgICAgICAgICAgICAgIHJldHVybiBpdGVtCgpjbGFzcyBSZWFjdGlvbkl0ZXJhdG9yKF9Bc3luY0l0ZXJhdG9yKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtZXNzYWdlLCBlbW9qaSwgbGltaXQ9MTAwLCBhZnRlcj1Ob25lKToKICAgICAgICBzZWxmLm1lc3NhZ2UgPSBtZXNzYWdlCiAgICAgICAgc2VsZi5saW1pdCA9IGxpbWl0CiAgICAgICAgc2VsZi5hZnRlciA9IGFmdGVyCiAgICAgICAgc3RhdGUgPSBtZXNzYWdlLl9zdGF0ZQogICAgICAgIHNlbGYuZ2V0dGVyID0gc3RhdGUuaHR0cC5nZXRfcmVhY3Rpb25fdXNlcnMKICAgICAgICBzZWxmLnN0YXRlID0gc3RhdGUKICAgICAgICBzZWxmLmVtb2ppID0gZW1vamkKICAgICAgICBzZWxmLmd1aWxkID0gbWVzc2FnZS5ndWlsZAogICAgICAgIHNlbGYuY2hhbm5lbF9pZCA9IG1lc3NhZ2UuY2hhbm5lbC5pZAogICAgICAgIHNlbGYudXNlcnMgPSBhc3luY2lvLlF1ZXVlKCkKCiAgICBhc3luYyBkZWYgbmV4dChzZWxmKToKICAgICAgICBpZiBzZWxmLnVzZXJzLmVtcHR5KCk6CiAgICAgICAgICAgIGF3YWl0IHNlbGYuZmlsbF91c2VycygpCgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIHNlbGYudXNlcnMuZ2V0X25vd2FpdCgpCiAgICAgICAgZXhjZXB0IGFzeW5jaW8uUXVldWVFbXB0eToKICAgICAgICAgICAgcmFpc2UgTm9Nb3JlSXRlbXMoKQoKICAgIGFzeW5jIGRlZiBmaWxsX3VzZXJzKHNlbGYpOgogICAgICAgICMgdGhpcyBpcyBhIGhhY2sgYmVjYXVzZSA+Y2lyY3VsYXIgaW1wb3J0czwKICAgICAgICBmcm9tIC51c2VyIGltcG9ydCBVc2VyCgogICAgICAgIGlmIHNlbGYubGltaXQgPiAwOgogICAgICAgICAgICByZXRyaWV2ZSA9IHNlbGYubGltaXQgaWYgc2VsZi5saW1pdCA8PSAxMDAgZWxzZSAxMDAKCiAgICAgICAgICAgIGFmdGVyID0gc2VsZi5hZnRlci5pZCBpZiBzZWxmLmFmdGVyIGVsc2UgTm9uZQogICAgICAgICAgICBkYXRhID0gYXdhaXQgc2VsZi5nZXR0ZXIoc2VsZi5jaGFubmVsX2lkLCBzZWxmLm1lc3NhZ2UuaWQsIHNlbGYuZW1vamksIHJldHJpZXZlLCBhZnRlcj1hZnRlcikKCiAgICAgICAgICAgIGlmIGRhdGE6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0IC09IHJldHJpZXZlCiAgICAgICAgICAgICAgICBzZWxmLmFmdGVyID0gT2JqZWN0KGlkPWludChkYXRhWy0xXVsnaWQnXSkpCgogICAgICAgICAgICBpZiBzZWxmLmd1aWxkIGlzIE5vbmUgb3IgaXNpbnN0YW5jZShzZWxmLmd1aWxkLCBPYmplY3QpOgogICAgICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gcmV2ZXJzZWQoZGF0YSk6CiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2VsZi51c2Vycy5wdXQoVXNlcihzdGF0ZT1zZWxmLnN0YXRlLCBkYXRhPWVsZW1lbnQpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gcmV2ZXJzZWQoZGF0YSk6CiAgICAgICAgICAgICAgICAgICAgbWVtYmVyX2lkID0gaW50KGVsZW1lbnRbJ2lkJ10pCiAgICAgICAgICAgICAgICAgICAgbWVtYmVyID0gc2VsZi5ndWlsZC5nZXRfbWVtYmVyKG1lbWJlcl9pZCkKICAgICAgICAgICAgICAgICAgICBpZiBtZW1iZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYudXNlcnMucHV0KG1lbWJlcikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZWxmLnVzZXJzLnB1dChVc2VyKHN0YXRlPXNlbGYuc3RhdGUsIGRhdGE9ZWxlbWVudCkpCgpjbGFzcyBIaXN0b3J5SXRlcmF0b3IoX0FzeW5jSXRlcmF0b3IpOgogICAgIiIiSXRlcmF0b3IgZm9yIHJlY2VpdmluZyBhIGNoYW5uZWwncyBtZXNzYWdlIGhpc3RvcnkuCgogICAgVGhlIG1lc3NhZ2VzIGVuZHBvaW50IGhhcyB0d28gYmVoYXZpb3VycyB3ZSBjYXJlIGFib3V0IGhlcmU6CiAgICBJZiBgYGJlZm9yZWBgIGlzIHNwZWNpZmllZCwgdGhlIG1lc3NhZ2VzIGVuZHBvaW50IHJldHVybnMgdGhlIGBsaW1pdGAKICAgIG5ld2VzdCBtZXNzYWdlcyBiZWZvcmUgYGBiZWZvcmVgYCwgc29ydGVkIHdpdGggbmV3ZXN0IGZpcnN0LiBGb3IgZmlsbGluZyBvdmVyCiAgICAxMDAgbWVzc2FnZXMsIHVwZGF0ZSB0aGUgYGBiZWZvcmVgYCBwYXJhbWV0ZXIgdG8gdGhlIG9sZGVzdCBtZXNzYWdlIHJlY2VpdmVkLgogICAgTWVzc2FnZXMgd2lsbCBiZSByZXR1cm5lZCBpbiBvcmRlciBieSB0aW1lLgogICAgSWYgYGBhZnRlcmBgIGlzIHNwZWNpZmllZCwgaXQgcmV0dXJucyB0aGUgYGBsaW1pdGBgIG9sZGVzdCBtZXNzYWdlcyBhZnRlcgogICAgYGBhZnRlcmBgLCBzb3J0ZWQgd2l0aCBuZXdlc3QgZmlyc3QuIEZvciBmaWxsaW5nIG92ZXIgMTAwIG1lc3NhZ2VzLCB1cGRhdGUgdGhlCiAgICBgYGFmdGVyYGAgcGFyYW1ldGVyIHRvIHRoZSBuZXdlc3QgbWVzc2FnZSByZWNlaXZlZC4gSWYgbWVzc2FnZXMgYXJlIG5vdAogICAgcmV2ZXJzZWQsIHRoZXkgd2lsbCBiZSBvdXQgb2Ygb3JkZXIgKDk5LTAsIDE5OS0xMDAsIHNvIG9uKQoKICAgIEEgbm90ZSB0aGF0IGlmIGJvdGggYGBiZWZvcmVgYCBhbmQgYGBhZnRlcmBgIGFyZSBzcGVjaWZpZWQsIGBgYmVmb3JlYGAgaXMgaWdub3JlZCBieSB0aGUKICAgIG1lc3NhZ2VzIGVuZHBvaW50LgoKICAgIFBhcmFtZXRlcnMKICAgIC0tLS0tLS0tLS0tCiAgICBtZXNzYWdlYWJsZTogOmNsYXNzOmBhYmMuTWVzc2FnZWFibGVgCiAgICAgICAgTWVzc2FnZWFibGUgY2xhc3MgdG8gcmV0cmlldmUgbWVzc2FnZSBoaXN0b3J5IGZyb20uCiAgICBsaW1pdDogOmNsYXNzOmBpbnRgCiAgICAgICAgTWF4aW11bSBudW1iZXIgb2YgbWVzc2FnZXMgdG8gcmV0cmlldmUKICAgIGJlZm9yZTogT3B0aW9uYWxbVW5pb25bOmNsYXNzOmBhYmMuU25vd2ZsYWtlYCwgOmNsYXNzOmBkYXRldGltZS5kYXRldGltZWBdXQogICAgICAgIE1lc3NhZ2UgYmVmb3JlIHdoaWNoIGFsbCBtZXNzYWdlcyBtdXN0IGJlLgogICAgYWZ0ZXI6IE9wdGlvbmFsW1VuaW9uWzpjbGFzczpgYWJjLlNub3dmbGFrZWAsIDpjbGFzczpgZGF0ZXRpbWUuZGF0ZXRpbWVgXV0KICAgICAgICBNZXNzYWdlIGFmdGVyIHdoaWNoIGFsbCBtZXNzYWdlcyBtdXN0IGJlLgogICAgYXJvdW5kOiBPcHRpb25hbFtVbmlvbls6Y2xhc3M6YGFiYy5Tbm93Zmxha2VgLCA6Y2xhc3M6YGRhdGV0aW1lLmRhdGV0aW1lYF1dCiAgICAgICAgTWVzc2FnZSBhcm91bmQgd2hpY2ggYWxsIG1lc3NhZ2VzIG11c3QgYmUuIExpbWl0IG1heCAxMDEuIE5vdGUgdGhhdCBpZgogICAgICAgIGxpbWl0IGlzIGFuIGV2ZW4gbnVtYmVyLCB0aGlzIHdpbGwgcmV0dXJuIGF0IG1vc3QgbGltaXQrMSBtZXNzYWdlcy4KICAgIG9sZGVzdF9maXJzdDogT3B0aW9uYWxbOmNsYXNzOmBib29sYF0KICAgICAgICBJZiBzZXQgdG8gYGBUcnVlYGAsIHJldHVybiBtZXNzYWdlcyBpbiBvbGRlc3QtPm5ld2VzdCBvcmRlci4gRGVmYXVsdHMgdG8KICAgICAgICBgYFRydWVgYCBpZiBgYWZ0ZXJgIGlzIHNwZWNpZmllZCwgb3RoZXJ3aXNlIGBgRmFsc2VgYC4KICAgICIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtZXNzYWdlYWJsZSwgbGltaXQsCiAgICAgICAgICAgICAgICAgYmVmb3JlPU5vbmUsIGFmdGVyPU5vbmUsIGFyb3VuZD1Ob25lLCBvbGRlc3RfZmlyc3Q9Tm9uZSk6CgogICAgICAgIGlmIGlzaW5zdGFuY2UoYmVmb3JlLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgIGJlZm9yZSA9IE9iamVjdChpZD10aW1lX3Nub3dmbGFrZShiZWZvcmUsIGhpZ2g9RmFsc2UpKQogICAgICAgIGlmIGlzaW5zdGFuY2UoYWZ0ZXIsIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgYWZ0ZXIgPSBPYmplY3QoaWQ9dGltZV9zbm93Zmxha2UoYWZ0ZXIsIGhpZ2g9VHJ1ZSkpCiAgICAgICAgaWYgaXNpbnN0YW5jZShhcm91bmQsIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgYXJvdW5kID0gT2JqZWN0KGlkPXRpbWVfc25vd2ZsYWtlKGFyb3VuZCkpCgogICAgICAgIGlmIG9sZGVzdF9maXJzdCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLnJldmVyc2UgPSBhZnRlciBpcyBub3QgTm9uZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYucmV2ZXJzZSA9IG9sZGVzdF9maXJzdAoKICAgICAgICBzZWxmLm1lc3NhZ2VhYmxlID0gbWVzc2FnZWFibGUKICAgICAgICBzZWxmLmxpbWl0ID0gbGltaXQKICAgICAgICBzZWxmLmJlZm9yZSA9IGJlZm9yZQogICAgICAgIHNlbGYuYWZ0ZXIgPSBhZnRlciBvciBPTERFU1RfT0JKRUNUCiAgICAgICAgc2VsZi5hcm91bmQgPSBhcm91bmQKCiAgICAgICAgc2VsZi5fZmlsdGVyID0gTm9uZSAgIyBtZXNzYWdlIGRpY3QgLT4gYm9vbAoKICAgICAgICBzZWxmLnN0YXRlID0gc2VsZi5tZXNzYWdlYWJsZS5fc3RhdGUKICAgICAgICBzZWxmLmxvZ3NfZnJvbSA9IHNlbGYuc3RhdGUuaHR0cC5sb2dzX2Zyb20KICAgICAgICBzZWxmLm1lc3NhZ2VzID0gYXN5bmNpby5RdWV1ZSgpCgogICAgICAgIGlmIHNlbGYuYXJvdW5kOgogICAgICAgICAgICBpZiBzZWxmLmxpbWl0IGlzIE5vbmU6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdoaXN0b3J5IGRvZXMgbm90IHN1cHBvcnQgYXJvdW5kIHdpdGggbGltaXQ9Tm9uZScpCiAgICAgICAgICAgIGlmIHNlbGYubGltaXQgPiAxMDE6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJoaXN0b3J5IG1heCBsaW1pdCAxMDEgd2hlbiBzcGVjaWZ5aW5nIGFyb3VuZCBwYXJhbWV0ZXIiKQogICAgICAgICAgICBlbGlmIHNlbGYubGltaXQgPT0gMTAxOgogICAgICAgICAgICAgICAgc2VsZi5saW1pdCA9IDEwMCAgIyBUaGFua3MgZGlzY29yZAoKICAgICAgICAgICAgc2VsZi5fcmV0cmlldmVfbWVzc2FnZXMgPSBzZWxmLl9yZXRyaWV2ZV9tZXNzYWdlc19hcm91bmRfc3RyYXRlZ3kKICAgICAgICAgICAgaWYgc2VsZi5iZWZvcmUgYW5kIHNlbGYuYWZ0ZXI6CiAgICAgICAgICAgICAgICBzZWxmLl9maWx0ZXIgPSBsYW1iZGEgbTogc2VsZi5hZnRlci5pZCA8IGludChtWydpZCddKSA8IHNlbGYuYmVmb3JlLmlkCiAgICAgICAgICAgIGVsaWYgc2VsZi5iZWZvcmU6CiAgICAgICAgICAgICAgICBzZWxmLl9maWx0ZXIgPSBsYW1iZGEgbTogaW50KG1bJ2lkJ10pIDwgc2VsZi5iZWZvcmUuaWQKICAgICAgICAgICAgZWxpZiBzZWxmLmFmdGVyOgogICAgICAgICAgICAgICAgc2VsZi5fZmlsdGVyID0gbGFtYmRhIG06IHNlbGYuYWZ0ZXIuaWQgPCBpbnQobVsnaWQnXSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBzZWxmLnJldmVyc2U6CiAgICAgICAgICAgICAgICBzZWxmLl9yZXRyaWV2ZV9tZXNzYWdlcyA9IHNlbGYuX3JldHJpZXZlX21lc3NhZ2VzX2FmdGVyX3N0cmF0ZWd5CiAgICAgICAgICAgICAgICBpZiAoc2VsZi5iZWZvcmUpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX2ZpbHRlciA9IGxhbWJkYSBtOiBpbnQobVsnaWQnXSkgPCBzZWxmLmJlZm9yZS5pZAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5fcmV0cmlldmVfbWVzc2FnZXMgPSBzZWxmLl9yZXRyaWV2ZV9tZXNzYWdlc19iZWZvcmVfc3RyYXRlZ3kKICAgICAgICAgICAgICAgIGlmIChzZWxmLmFmdGVyIGFuZCBzZWxmLmFmdGVyICE9IE9MREVTVF9PQkpFQ1QpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX2ZpbHRlciA9IGxhbWJkYSBtOiBpbnQobVsnaWQnXSkgPiBzZWxmLmFmdGVyLmlkCgogICAgYXN5bmMgZGVmIG5leHQoc2VsZik6CiAgICAgICAgaWYgc2VsZi5tZXNzYWdlcy5lbXB0eSgpOgogICAgICAgICAgICBhd2FpdCBzZWxmLmZpbGxfbWVzc2FnZXMoKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLm1lc3NhZ2VzLmdldF9ub3dhaXQoKQogICAgICAgIGV4Y2VwdCBhc3luY2lvLlF1ZXVlRW1wdHk6CiAgICAgICAgICAgIHJhaXNlIE5vTW9yZUl0ZW1zKCkKCiAgICBkZWYgX2dldF9yZXRyaWV2ZShzZWxmKToKICAgICAgICBsID0gc2VsZi5saW1pdAogICAgICAgIGlmIGwgaXMgTm9uZSBvciBsID4gMTAwOgogICAgICAgICAgICByID0gMTAwCiAgICAgICAgZWxzZToKICAgICAgICAgICAgciA9IGwKICAgICAgICBzZWxmLnJldHJpZXZlID0gcgogICAgICAgIHJldHVybiByID4gMAoKICAgIGFzeW5jIGRlZiBmbGF0dGVuKHNlbGYpOgogICAgICAgICMgdGhpcyBpcyBzaW1pbGFyIHRvIGZpbGxfbWVzc2FnZXMgZXhjZXB0IGl0IHVzZXMgYSBsaXN0IGluc3RlYWQKICAgICAgICAjIG9mIGEgcXVldWUgdG8gcGxhY2UgdGhlIG1lc3NhZ2VzIGluLgogICAgICAgIHJlc3VsdCA9IFtdCiAgICAgICAgY2hhbm5lbCA9IGF3YWl0IHNlbGYubWVzc2FnZWFibGUuX2dldF9jaGFubmVsKCkKICAgICAgICBzZWxmLmNoYW5uZWwgPSBjaGFubmVsCiAgICAgICAgd2hpbGUgc2VsZi5fZ2V0X3JldHJpZXZlKCk6CiAgICAgICAgICAgIGRhdGEgPSBhd2FpdCBzZWxmLl9yZXRyaWV2ZV9tZXNzYWdlcyhzZWxmLnJldHJpZXZlKQogICAgICAgICAgICBpZiBsZW4oZGF0YSkgPCAxMDA6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0ID0gMCAjIHRlcm1pbmF0ZSB0aGUgaW5maW5pdGUgbG9vcAoKICAgICAgICAgICAgaWYgc2VsZi5yZXZlcnNlOgogICAgICAgICAgICAgICAgZGF0YSA9IHJldmVyc2VkKGRhdGEpCiAgICAgICAgICAgIGlmIHNlbGYuX2ZpbHRlcjoKICAgICAgICAgICAgICAgIGRhdGEgPSBmaWx0ZXIoc2VsZi5fZmlsdGVyLCBkYXRhKQoKICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gZGF0YToKICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoc2VsZi5zdGF0ZS5jcmVhdGVfbWVzc2FnZShjaGFubmVsPWNoYW5uZWwsIGRhdGE9ZWxlbWVudCkpCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGFzeW5jIGRlZiBmaWxsX21lc3NhZ2VzKHNlbGYpOgogICAgICAgIGlmIG5vdCBoYXNhdHRyKHNlbGYsICdjaGFubmVsJyk6CiAgICAgICAgICAgICMgZG8gdGhlIHJlcXVpcmVkIHNldCB1cAogICAgICAgICAgICBjaGFubmVsID0gYXdhaXQgc2VsZi5tZXNzYWdlYWJsZS5fZ2V0X2NoYW5uZWwoKQogICAgICAgICAgICBzZWxmLmNoYW5uZWwgPSBjaGFubmVsCgogICAgICAgIGlmIHNlbGYuX2dldF9yZXRyaWV2ZSgpOgogICAgICAgICAgICBkYXRhID0gYXdhaXQgc2VsZi5fcmV0cmlldmVfbWVzc2FnZXMoc2VsZi5yZXRyaWV2ZSkKICAgICAgICAgICAgaWYgbGVuKGRhdGEpIDwgMTAwOgogICAgICAgICAgICAgICAgc2VsZi5saW1pdCA9IDAgIyB0ZXJtaW5hdGUgdGhlIGluZmluaXRlIGxvb3AKCiAgICAgICAgICAgIGlmIHNlbGYucmV2ZXJzZToKICAgICAgICAgICAgICAgIGRhdGEgPSByZXZlcnNlZChkYXRhKQogICAgICAgICAgICBpZiBzZWxmLl9maWx0ZXI6CiAgICAgICAgICAgICAgICBkYXRhID0gZmlsdGVyKHNlbGYuX2ZpbHRlciwgZGF0YSkKCiAgICAgICAgICAgIGNoYW5uZWwgPSBzZWxmLmNoYW5uZWwKICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gZGF0YToKICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYubWVzc2FnZXMucHV0KHNlbGYuc3RhdGUuY3JlYXRlX21lc3NhZ2UoY2hhbm5lbD1jaGFubmVsLCBkYXRhPWVsZW1lbnQpKQoKICAgIGFzeW5jIGRlZiBfcmV0cmlldmVfbWVzc2FnZXMoc2VsZiwgcmV0cmlldmUpOgogICAgICAgICIiIlJldHJpZXZlIG1lc3NhZ2VzIGFuZCB1cGRhdGUgbmV4dCBwYXJhbWV0ZXJzLiIiIgogICAgICAgIHBhc3MKCiAgICBhc3luYyBkZWYgX3JldHJpZXZlX21lc3NhZ2VzX2JlZm9yZV9zdHJhdGVneShzZWxmLCByZXRyaWV2ZSk6CiAgICAgICAgIiIiUmV0cmlldmUgbWVzc2FnZXMgdXNpbmcgYmVmb3JlIHBhcmFtZXRlci4iIiIKICAgICAgICBiZWZvcmUgPSBzZWxmLmJlZm9yZS5pZCBpZiBzZWxmLmJlZm9yZSBlbHNlIE5vbmUKICAgICAgICBkYXRhID0gYXdhaXQgc2VsZi5sb2dzX2Zyb20oc2VsZi5jaGFubmVsLmlkLCByZXRyaWV2ZSwgYmVmb3JlPWJlZm9yZSkKICAgICAgICBpZiBsZW4oZGF0YSk6CiAgICAgICAgICAgIGlmIHNlbGYubGltaXQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0IC09IHJldHJpZXZlCiAgICAgICAgICAgIHNlbGYuYmVmb3JlID0gT2JqZWN0KGlkPWludChkYXRhWy0xXVsnaWQnXSkpCiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBhc3luYyBkZWYgX3JldHJpZXZlX21lc3NhZ2VzX2FmdGVyX3N0cmF0ZWd5KHNlbGYsIHJldHJpZXZlKToKICAgICAgICAiIiJSZXRyaWV2ZSBtZXNzYWdlcyB1c2luZyBhZnRlciBwYXJhbWV0ZXIuIiIiCiAgICAgICAgYWZ0ZXIgPSBzZWxmLmFmdGVyLmlkIGlmIHNlbGYuYWZ0ZXIgZWxzZSBOb25lCiAgICAgICAgZGF0YSA9IGF3YWl0IHNlbGYubG9nc19mcm9tKHNlbGYuY2hhbm5lbC5pZCwgcmV0cmlldmUsIGFmdGVyPWFmdGVyKQogICAgICAgIGlmIGxlbihkYXRhKToKICAgICAgICAgICAgaWYgc2VsZi5saW1pdCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHNlbGYubGltaXQgLT0gcmV0cmlldmUKICAgICAgICAgICAgc2VsZi5hZnRlciA9IE9iamVjdChpZD1pbnQoZGF0YVswXVsnaWQnXSkpCiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBhc3luYyBkZWYgX3JldHJpZXZlX21lc3NhZ2VzX2Fyb3VuZF9zdHJhdGVneShzZWxmLCByZXRyaWV2ZSk6CiAgICAgICAgIiIiUmV0cmlldmUgbWVzc2FnZXMgdXNpbmcgYXJvdW5kIHBhcmFtZXRlci4iIiIKICAgICAgICBpZiBzZWxmLmFyb3VuZDoKICAgICAgICAgICAgYXJvdW5kID0gc2VsZi5hcm91bmQuaWQgaWYgc2VsZi5hcm91bmQgZWxzZSBOb25lCiAgICAgICAgICAgIGRhdGEgPSBhd2FpdCBzZWxmLmxvZ3NfZnJvbShzZWxmLmNoYW5uZWwuaWQsIHJldHJpZXZlLCBhcm91bmQ9YXJvdW5kKQogICAgICAgICAgICBzZWxmLmFyb3VuZCA9IE5vbmUKICAgICAgICAgICAgcmV0dXJuIGRhdGEKICAgICAgICByZXR1cm4gW10KCmNsYXNzIEF1ZGl0TG9nSXRlcmF0b3IoX0FzeW5jSXRlcmF0b3IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGd1aWxkLCBsaW1pdD1Ob25lLCBiZWZvcmU9Tm9uZSwgYWZ0ZXI9Tm9uZSwgb2xkZXN0X2ZpcnN0PU5vbmUsIHVzZXJfaWQ9Tm9uZSwgYWN0aW9uX3R5cGU9Tm9uZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZShiZWZvcmUsIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgYmVmb3JlID0gT2JqZWN0KGlkPXRpbWVfc25vd2ZsYWtlKGJlZm9yZSwgaGlnaD1GYWxzZSkpCiAgICAgICAgaWYgaXNpbnN0YW5jZShhZnRlciwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICBhZnRlciA9IE9iamVjdChpZD10aW1lX3Nub3dmbGFrZShhZnRlciwgaGlnaD1UcnVlKSkKCgogICAgICAgIGlmIG9sZGVzdF9maXJzdCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLnJldmVyc2UgPSBhZnRlciBpcyBub3QgTm9uZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYucmV2ZXJzZSA9IG9sZGVzdF9maXJzdAoKICAgICAgICBzZWxmLmd1aWxkID0gZ3VpbGQKICAgICAgICBzZWxmLmxvb3AgPSBndWlsZC5fc3RhdGUubG9vcAogICAgICAgIHNlbGYucmVxdWVzdCA9IGd1aWxkLl9zdGF0ZS5odHRwLmdldF9hdWRpdF9sb2dzCiAgICAgICAgc2VsZi5saW1pdCA9IGxpbWl0CiAgICAgICAgc2VsZi5iZWZvcmUgPSBiZWZvcmUKICAgICAgICBzZWxmLnVzZXJfaWQgPSB1c2VyX2lkCiAgICAgICAgc2VsZi5hY3Rpb25fdHlwZSA9IGFjdGlvbl90eXBlCiAgICAgICAgc2VsZi5hZnRlciA9IE9MREVTVF9PQkpFQ1QKICAgICAgICBzZWxmLl91c2VycyA9IHt9CiAgICAgICAgc2VsZi5fc3RhdGUgPSBndWlsZC5fc3RhdGUKCgogICAgICAgIHNlbGYuX2ZpbHRlciA9IE5vbmUgICMgZW50cnkgZGljdCAtPiBib29sCgogICAgICAgIHNlbGYuZW50cmllcyA9IGFzeW5jaW8uUXVldWUoKQoKCiAgICAgICAgaWYgc2VsZi5yZXZlcnNlOgogICAgICAgICAgICBzZWxmLl9zdHJhdGVneSA9IHNlbGYuX2FmdGVyX3N0cmF0ZWd5CiAgICAgICAgICAgIGlmIHNlbGYuYmVmb3JlOgogICAgICAgICAgICAgICAgc2VsZi5fZmlsdGVyID0gbGFtYmRhIG06IGludChtWydpZCddKSA8IHNlbGYuYmVmb3JlLmlkCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5fc3RyYXRlZ3kgPSBzZWxmLl9iZWZvcmVfc3RyYXRlZ3kKICAgICAgICAgICAgaWYgc2VsZi5hZnRlciBhbmQgc2VsZi5hZnRlciAhPSBPTERFU1RfT0JKRUNUOgogICAgICAgICAgICAgICAgc2VsZi5fZmlsdGVyID0gbGFtYmRhIG06IGludChtWydpZCddKSA+IHNlbGYuYWZ0ZXIuaWQKCiAgICBhc3luYyBkZWYgX2JlZm9yZV9zdHJhdGVneShzZWxmLCByZXRyaWV2ZSk6CiAgICAgICAgYmVmb3JlID0gc2VsZi5iZWZvcmUuaWQgaWYgc2VsZi5iZWZvcmUgZWxzZSBOb25lCiAgICAgICAgZGF0YSA9IGF3YWl0IHNlbGYucmVxdWVzdChzZWxmLmd1aWxkLmlkLCBsaW1pdD1yZXRyaWV2ZSwgdXNlcl9pZD1zZWxmLnVzZXJfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25fdHlwZT1zZWxmLmFjdGlvbl90eXBlLCBiZWZvcmU9YmVmb3JlKQoKICAgICAgICBlbnRyaWVzID0gZGF0YS5nZXQoJ2F1ZGl0X2xvZ19lbnRyaWVzJywgW10pCiAgICAgICAgaWYgbGVuKGRhdGEpIGFuZCBlbnRyaWVzOgogICAgICAgICAgICBpZiBzZWxmLmxpbWl0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgc2VsZi5saW1pdCAtPSByZXRyaWV2ZQogICAgICAgICAgICBzZWxmLmJlZm9yZSA9IE9iamVjdChpZD1pbnQoZW50cmllc1stMV1bJ2lkJ10pKQogICAgICAgIHJldHVybiBkYXRhLmdldCgndXNlcnMnLCBbXSksIGVudHJpZXMKCiAgICBhc3luYyBkZWYgX2FmdGVyX3N0cmF0ZWd5KHNlbGYsIHJldHJpZXZlKToKICAgICAgICBhZnRlciA9IHNlbGYuYWZ0ZXIuaWQgaWYgc2VsZi5hZnRlciBlbHNlIE5vbmUKICAgICAgICBkYXRhID0gYXdhaXQgc2VsZi5yZXF1ZXN0KHNlbGYuZ3VpbGQuaWQsIGxpbWl0PXJldHJpZXZlLCB1c2VyX2lkPXNlbGYudXNlcl9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbl90eXBlPXNlbGYuYWN0aW9uX3R5cGUsIGFmdGVyPWFmdGVyKQogICAgICAgIGVudHJpZXMgPSBkYXRhLmdldCgnYXVkaXRfbG9nX2VudHJpZXMnLCBbXSkKICAgICAgICBpZiBsZW4oZGF0YSkgYW5kIGVudHJpZXM6CiAgICAgICAgICAgIGlmIHNlbGYubGltaXQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0IC09IHJldHJpZXZlCiAgICAgICAgICAgIHNlbGYuYWZ0ZXIgPSBPYmplY3QoaWQ9aW50KGVudHJpZXNbMF1bJ2lkJ10pKQogICAgICAgIHJldHVybiBkYXRhLmdldCgndXNlcnMnLCBbXSksIGVudHJpZXMKCiAgICBhc3luYyBkZWYgbmV4dChzZWxmKToKICAgICAgICBpZiBzZWxmLmVudHJpZXMuZW1wdHkoKToKICAgICAgICAgICAgYXdhaXQgc2VsZi5fZmlsbCgpCgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZW50cmllcy5nZXRfbm93YWl0KCkKICAgICAgICBleGNlcHQgYXN5bmNpby5RdWV1ZUVtcHR5OgogICAgICAgICAgICByYWlzZSBOb01vcmVJdGVtcygpCgogICAgZGVmIF9nZXRfcmV0cmlldmUoc2VsZik6CiAgICAgICAgbCA9IHNlbGYubGltaXQKICAgICAgICBpZiBsIGlzIE5vbmUgb3IgbCA+IDEwMDoKICAgICAgICAgICAgciA9IDEwMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHIgPSBsCiAgICAgICAgc2VsZi5yZXRyaWV2ZSA9IHIKICAgICAgICByZXR1cm4gciA+IDAKCiAgICBhc3luYyBkZWYgX2ZpbGwoc2VsZik6CiAgICAgICAgZnJvbSAudXNlciBpbXBvcnQgVXNlcgoKICAgICAgICBpZiBzZWxmLl9nZXRfcmV0cmlldmUoKToKICAgICAgICAgICAgdXNlcnMsIGRhdGEgPSBhd2FpdCBzZWxmLl9zdHJhdGVneShzZWxmLnJldHJpZXZlKQogICAgICAgICAgICBpZiBsZW4oZGF0YSkgPCAxMDA6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0ID0gMCAjIHRlcm1pbmF0ZSB0aGUgaW5maW5pdGUgbG9vcAoKICAgICAgICAgICAgaWYgc2VsZi5yZXZlcnNlOgogICAgICAgICAgICAgICAgZGF0YSA9IHJldmVyc2VkKGRhdGEpCiAgICAgICAgICAgIGlmIHNlbGYuX2ZpbHRlcjoKICAgICAgICAgICAgICAgIGRhdGEgPSBmaWx0ZXIoc2VsZi5fZmlsdGVyLCBkYXRhKQoKICAgICAgICAgICAgZm9yIHVzZXIgaW4gdXNlcnM6CiAgICAgICAgICAgICAgICB1ID0gVXNlcihkYXRhPXVzZXIsIHN0YXRlPXNlbGYuX3N0YXRlKQogICAgICAgICAgICAgICAgc2VsZi5fdXNlcnNbdS5pZF0gPSB1CgogICAgICAgICAgICBmb3IgZWxlbWVudCBpbiBkYXRhOgogICAgICAgICAgICAgICAgIyBUT0RPOiByZW1vdmUgdGhpcyBpZiBzdGF0ZW1lbnQgbGF0ZXIKICAgICAgICAgICAgICAgIGlmIGVsZW1lbnRbJ2FjdGlvbl90eXBlJ10gaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYuZW50cmllcy5wdXQoQXVkaXRMb2dFbnRyeShkYXRhPWVsZW1lbnQsIHVzZXJzPXNlbGYuX3VzZXJzLCBndWlsZD1zZWxmLmd1aWxkKSkKCgpjbGFzcyBHdWlsZEl0ZXJhdG9yKF9Bc3luY0l0ZXJhdG9yKToKICAgICIiIkl0ZXJhdG9yIGZvciByZWNlaXZpbmcgdGhlIGNsaWVudCdzIGd1aWxkcy4KCiAgICBUaGUgZ3VpbGRzIGVuZHBvaW50IGhhcyB0aGUgc2FtZSB0d28gYmVoYXZpb3VycyBhcyBkZXNjcmliZWQKICAgIGluIDpjbGFzczpgSGlzdG9yeUl0ZXJhdG9yYDoKICAgIElmIGBgYmVmb3JlYGAgaXMgc3BlY2lmaWVkLCB0aGUgZ3VpbGRzIGVuZHBvaW50IHJldHVybnMgdGhlIGBgbGltaXRgYAogICAgbmV3ZXN0IGd1aWxkcyBiZWZvcmUgYGBiZWZvcmVgYCwgc29ydGVkIHdpdGggbmV3ZXN0IGZpcnN0LiBGb3IgZmlsbGluZyBvdmVyCiAgICAxMDAgZ3VpbGRzLCB1cGRhdGUgdGhlIGBgYmVmb3JlYGAgcGFyYW1ldGVyIHRvIHRoZSBvbGRlc3QgZ3VpbGQgcmVjZWl2ZWQuCiAgICBHdWlsZHMgd2lsbCBiZSByZXR1cm5lZCBpbiBvcmRlciBieSB0aW1lLgogICAgSWYgYGFmdGVyYCBpcyBzcGVjaWZpZWQsIGl0IHJldHVybnMgdGhlIGBgbGltaXRgYCBvbGRlc3QgZ3VpbGRzIGFmdGVyIGBgYWZ0ZXJgYCwKICAgIHNvcnRlZCB3aXRoIG5ld2VzdCBmaXJzdC4gRm9yIGZpbGxpbmcgb3ZlciAxMDAgZ3VpbGRzLCB1cGRhdGUgdGhlIGBgYWZ0ZXJgYAogICAgcGFyYW1ldGVyIHRvIHRoZSBuZXdlc3QgZ3VpbGQgcmVjZWl2ZWQsIElmIGd1aWxkcyBhcmUgbm90IHJldmVyc2VkLCB0aGV5CiAgICB3aWxsIGJlIG91dCBvZiBvcmRlciAoOTktMCwgMTk5LTEwMCwgc28gb24pCgogICAgTm90IHRoYXQgaWYgYm90aCBgYGJlZm9yZWBgIGFuZCBgYGFmdGVyYGAgYXJlIHNwZWNpZmllZCwgYGBiZWZvcmVgYCBpcyBpZ25vcmVkIGJ5IHRoZQogICAgZ3VpbGRzIGVuZHBvaW50LgoKICAgIFBhcmFtZXRlcnMKICAgIC0tLS0tLS0tLS0tCiAgICBib3Q6IDpjbGFzczpgZGlzY29yZC5DbGllbnRgCiAgICAgICAgVGhlIGNsaWVudCB0byByZXRyaWV2ZSB0aGUgZ3VpbGRzIGZyb20uCiAgICBsaW1pdDogOmNsYXNzOmBpbnRgCiAgICAgICAgTWF4aW11bSBudW1iZXIgb2YgZ3VpbGRzIHRvIHJldHJpZXZlLgogICAgYmVmb3JlOiBPcHRpb25hbFtVbmlvbls6Y2xhc3M6YGFiYy5Tbm93Zmxha2VgLCA6Y2xhc3M6YGRhdGV0aW1lLmRhdGV0aW1lYF1dCiAgICAgICAgT2JqZWN0IGJlZm9yZSB3aGljaCBhbGwgZ3VpbGRzIG11c3QgYmUuCiAgICBhZnRlcjogT3B0aW9uYWxbVW5pb25bOmNsYXNzOmBhYmMuU25vd2ZsYWtlYCwgOmNsYXNzOmBkYXRldGltZS5kYXRldGltZWBdXQogICAgICAgIE9iamVjdCBhZnRlciB3aGljaCBhbGwgZ3VpbGRzIG11c3QgYmUuCiAgICAiIiIKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBib3QsIGxpbWl0LCBiZWZvcmU9Tm9uZSwgYWZ0ZXI9Tm9uZSk6CgogICAgICAgIGlmIGlzaW5zdGFuY2UoYmVmb3JlLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgIGJlZm9yZSA9IE9iamVjdChpZD10aW1lX3Nub3dmbGFrZShiZWZvcmUsIGhpZ2g9RmFsc2UpKQogICAgICAgIGlmIGlzaW5zdGFuY2UoYWZ0ZXIsIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgYWZ0ZXIgPSBPYmplY3QoaWQ9dGltZV9zbm93Zmxha2UoYWZ0ZXIsIGhpZ2g9VHJ1ZSkpCgogICAgICAgIHNlbGYuYm90ID0gYm90CiAgICAgICAgc2VsZi5saW1pdCA9IGxpbWl0CiAgICAgICAgc2VsZi5iZWZvcmUgPSBiZWZvcmUKICAgICAgICBzZWxmLmFmdGVyID0gYWZ0ZXIKCiAgICAgICAgc2VsZi5fZmlsdGVyID0gTm9uZQoKICAgICAgICBzZWxmLnN0YXRlID0gc2VsZi5ib3QuX2Nvbm5lY3Rpb24KICAgICAgICBzZWxmLmdldF9ndWlsZHMgPSBzZWxmLmJvdC5odHRwLmdldF9ndWlsZHMKICAgICAgICBzZWxmLmd1aWxkcyA9IGFzeW5jaW8uUXVldWUoKQoKICAgICAgICBpZiBzZWxmLmJlZm9yZSBhbmQgc2VsZi5hZnRlcjoKICAgICAgICAgICAgc2VsZi5fcmV0cmlldmVfZ3VpbGRzID0gc2VsZi5fcmV0cmlldmVfZ3VpbGRzX2JlZm9yZV9zdHJhdGVneQogICAgICAgICAgICBzZWxmLl9maWx0ZXIgPSBsYW1iZGEgbTogaW50KG1bJ2lkJ10pID4gc2VsZi5hZnRlci5pZAogICAgICAgIGVsaWYgc2VsZi5hZnRlcjoKICAgICAgICAgICAgc2VsZi5fcmV0cmlldmVfZ3VpbGRzID0gc2VsZi5fcmV0cmlldmVfZ3VpbGRzX2FmdGVyX3N0cmF0ZWd5CiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5fcmV0cmlldmVfZ3VpbGRzID0gc2VsZi5fcmV0cmlldmVfZ3VpbGRzX2JlZm9yZV9zdHJhdGVneQoKICAgIGFzeW5jIGRlZiBuZXh0KHNlbGYpOgogICAgICAgIGlmIHNlbGYuZ3VpbGRzLmVtcHR5KCk6CiAgICAgICAgICAgIGF3YWl0IHNlbGYuZmlsbF9ndWlsZHMoKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLmd1aWxkcy5nZXRfbm93YWl0KCkKICAgICAgICBleGNlcHQgYXN5bmNpby5RdWV1ZUVtcHR5OgogICAgICAgICAgICByYWlzZSBOb01vcmVJdGVtcygpCgogICAgZGVmIF9nZXRfcmV0cmlldmUoc2VsZik6CiAgICAgICAgbCA9IHNlbGYubGltaXQKICAgICAgICBpZiBsIGlzIE5vbmUgb3IgbCA+IDEwMDoKICAgICAgICAgICAgciA9IDEwMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHIgPSBsCiAgICAgICAgc2VsZi5yZXRyaWV2ZSA9IHIKICAgICAgICByZXR1cm4gciA+IDAKCiAgICBkZWYgY3JlYXRlX2d1aWxkKHNlbGYsIGRhdGEpOgogICAgICAgIGZyb20gLmd1aWxkIGltcG9ydCBHdWlsZAogICAgICAgIHJldHVybiBHdWlsZChzdGF0ZT1zZWxmLnN0YXRlLCBkYXRhPWRhdGEpCgogICAgYXN5bmMgZGVmIGZsYXR0ZW4oc2VsZik6CiAgICAgICAgcmVzdWx0ID0gW10KICAgICAgICB3aGlsZSBzZWxmLl9nZXRfcmV0cmlldmUoKToKICAgICAgICAgICAgZGF0YSA9IGF3YWl0IHNlbGYuX3JldHJpZXZlX2d1aWxkcyhzZWxmLnJldHJpZXZlKQogICAgICAgICAgICBpZiBsZW4oZGF0YSkgPCAxMDA6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0ID0gMAoKICAgICAgICAgICAgaWYgc2VsZi5fZmlsdGVyOgogICAgICAgICAgICAgICAgZGF0YSA9IGZpbHRlcihzZWxmLl9maWx0ZXIsIGRhdGEpCgogICAgICAgICAgICBmb3IgZWxlbWVudCBpbiBkYXRhOgogICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChzZWxmLmNyZWF0ZV9ndWlsZChlbGVtZW50KSkKICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgYXN5bmMgZGVmIGZpbGxfZ3VpbGRzKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX2dldF9yZXRyaWV2ZSgpOgogICAgICAgICAgICBkYXRhID0gYXdhaXQgc2VsZi5fcmV0cmlldmVfZ3VpbGRzKHNlbGYucmV0cmlldmUpCiAgICAgICAgICAgIGlmIHNlbGYubGltaXQgaXMgTm9uZSBvciBsZW4oZGF0YSkgPCAxMDA6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0ID0gMAoKICAgICAgICAgICAgaWYgc2VsZi5fZmlsdGVyOgogICAgICAgICAgICAgICAgZGF0YSA9IGZpbHRlcihzZWxmLl9maWx0ZXIsIGRhdGEpCgogICAgICAgICAgICBmb3IgZWxlbWVudCBpbiBkYXRhOgogICAgICAgICAgICAgICAgYXdhaXQgc2VsZi5ndWlsZHMucHV0KHNlbGYuY3JlYXRlX2d1aWxkKGVsZW1lbnQpKQoKICAgIGFzeW5jIGRlZiBfcmV0cmlldmVfZ3VpbGRzKHNlbGYsIHJldHJpZXZlKToKICAgICAgICAiIiJSZXRyaWV2ZSBndWlsZHMgYW5kIHVwZGF0ZSBuZXh0IHBhcmFtZXRlcnMuIiIiCiAgICAgICAgcGFzcwoKICAgIGFzeW5jIGRlZiBfcmV0cmlldmVfZ3VpbGRzX2JlZm9yZV9zdHJhdGVneShzZWxmLCByZXRyaWV2ZSk6CiAgICAgICAgIiIiUmV0cmlldmUgZ3VpbGRzIHVzaW5nIGJlZm9yZSBwYXJhbWV0ZXIuIiIiCiAgICAgICAgYmVmb3JlID0gc2VsZi5iZWZvcmUuaWQgaWYgc2VsZi5iZWZvcmUgZWxzZSBOb25lCiAgICAgICAgZGF0YSA9IGF3YWl0IHNlbGYuZ2V0X2d1aWxkcyhyZXRyaWV2ZSwgYmVmb3JlPWJlZm9yZSkKICAgICAgICBpZiBsZW4oZGF0YSk6CiAgICAgICAgICAgIGlmIHNlbGYubGltaXQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0IC09IHJldHJpZXZlCiAgICAgICAgICAgIHNlbGYuYmVmb3JlID0gT2JqZWN0KGlkPWludChkYXRhWy0xXVsnaWQnXSkpCiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBhc3luYyBkZWYgX3JldHJpZXZlX2d1aWxkc19hZnRlcl9zdHJhdGVneShzZWxmLCByZXRyaWV2ZSk6CiAgICAgICAgIiIiUmV0cmlldmUgZ3VpbGRzIHVzaW5nIGFmdGVyIHBhcmFtZXRlci4iIiIKICAgICAgICBhZnRlciA9IHNlbGYuYWZ0ZXIuaWQgaWYgc2VsZi5hZnRlciBlbHNlIE5vbmUKICAgICAgICBkYXRhID0gYXdhaXQgc2VsZi5nZXRfZ3VpbGRzKHJldHJpZXZlLCBhZnRlcj1hZnRlcikKICAgICAgICBpZiBsZW4oZGF0YSk6CiAgICAgICAgICAgIGlmIHNlbGYubGltaXQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0IC09IHJldHJpZXZlCiAgICAgICAgICAgIHNlbGYuYWZ0ZXIgPSBPYmplY3QoaWQ9aW50KGRhdGFbMF1bJ2lkJ10pKQogICAgICAgIHJldHVybiBkYXRhCgpjbGFzcyBNZW1iZXJJdGVyYXRvcihfQXN5bmNJdGVyYXRvcik6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZ3VpbGQsIGxpbWl0PTEwMDAsIGFmdGVyPU5vbmUpOgoKICAgICAgICBpZiBpc2luc3RhbmNlKGFmdGVyLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgIGFmdGVyID0gT2JqZWN0KGlkPXRpbWVfc25vd2ZsYWtlKGFmdGVyLCBoaWdoPVRydWUpKQoKICAgICAgICBzZWxmLmd1aWxkID0gZ3VpbGQKICAgICAgICBzZWxmLmxpbWl0ID0gbGltaXQKICAgICAgICBzZWxmLmFmdGVyID0gYWZ0ZXIgb3IgT0xERVNUX09CSkVDVAoKICAgICAgICBzZWxmLnN0YXRlID0gc2VsZi5ndWlsZC5fc3RhdGUKICAgICAgICBzZWxmLmdldF9tZW1iZXJzID0gc2VsZi5zdGF0ZS5odHRwLmdldF9tZW1iZXJzCiAgICAgICAgc2VsZi5tZW1iZXJzID0gYXN5bmNpby5RdWV1ZSgpCgogICAgYXN5bmMgZGVmIG5leHQoc2VsZik6CiAgICAgICAgaWYgc2VsZi5tZW1iZXJzLmVtcHR5KCk6CiAgICAgICAgICAgIGF3YWl0IHNlbGYuZmlsbF9tZW1iZXJzKCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJzLmdldF9ub3dhaXQoKQogICAgICAgIGV4Y2VwdCBhc3luY2lvLlF1ZXVlRW1wdHk6CiAgICAgICAgICAgIHJhaXNlIE5vTW9yZUl0ZW1zKCkKCiAgICBkZWYgX2dldF9yZXRyaWV2ZShzZWxmKToKICAgICAgICBsID0gc2VsZi5saW1pdAogICAgICAgIGlmIGwgaXMgTm9uZSBvciBsID4gMTAwMDoKICAgICAgICAgICAgciA9IDEwMDAKICAgICAgICBlbHNlOgogICAgICAgICAgICByID0gbAogICAgICAgIHNlbGYucmV0cmlldmUgPSByCiAgICAgICAgcmV0dXJuIHIgPiAwCgogICAgYXN5bmMgZGVmIGZpbGxfbWVtYmVycyhzZWxmKToKICAgICAgICBpZiBzZWxmLl9nZXRfcmV0cmlldmUoKToKICAgICAgICAgICAgYWZ0ZXIgPSBzZWxmLmFmdGVyLmlkIGlmIHNlbGYuYWZ0ZXIgZWxzZSBOb25lCiAgICAgICAgICAgIGRhdGEgPSBhd2FpdCBzZWxmLmdldF9tZW1iZXJzKHNlbGYuZ3VpbGQuaWQsIHNlbGYucmV0cmlldmUsIGFmdGVyKQogICAgICAgICAgICBpZiBub3QgZGF0YToKICAgICAgICAgICAgICAgICMgbm8gZGF0YSwgdGVybWluYXRlCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIGlmIGxlbihkYXRhKSA8IDEwMDA6CiAgICAgICAgICAgICAgICBzZWxmLmxpbWl0ID0gMCAjIHRlcm1pbmF0ZSBsb29wCgogICAgICAgICAgICBzZWxmLmFmdGVyID0gT2JqZWN0KGlkPWludChkYXRhWy0xXVsndXNlciddWydpZCddKSkKCiAgICAgICAgICAgIGZvciBlbGVtZW50IGluIHJldmVyc2VkKGRhdGEpOgogICAgICAgICAgICAgICAgYXdhaXQgc2VsZi5tZW1iZXJzLnB1dChzZWxmLmNyZWF0ZV9tZW1iZXIoZWxlbWVudCkpCgogICAgZGVmIGNyZWF0ZV9tZW1iZXIoc2VsZiwgZGF0YSk6CiAgICAgICAgZnJvbSAubWVtYmVyIGltcG9ydCBNZW1iZXIKICAgICAgICByZXR1cm4gTWVtYmVyKGRhdGE9ZGF0YSwgZ3VpbGQ9c2VsZi5ndWlsZCwgc3RhdGU9c2VsZi5zdGF0ZSkK
