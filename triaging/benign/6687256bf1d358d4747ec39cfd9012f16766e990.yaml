statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/request.py
  contents:
  - name: RequestMethods
    score: 0.0
    code: |-
      from __future__ import absolute_import

      from .filepost import encode_multipart_formdata
      from .packages.six.moves.urllib.parse import urlencode


      __all__ = ['RequestMethods']


      class RequestMethods(object):
          """
          Convenience mixin for classes who implement a :meth:`urlopen` method, such
          as :class:`~urllib3.connectionpool.HTTPConnectionPool` and
          :class:`~urllib3.poolmanager.PoolManager`.

          Provides behavior for making common types of HTTP request methods and
          decides which type of request field encoding to use.

          Specifically,

          :meth:`.request_encode_url` is for sending requests whose fields are
          encoded in the URL (such as GET, HEAD, DELETE).

          :meth:`.request_encode_body` is for sending requests whose fields are
          encoded in the *body* of the request using multipart or www-form-urlencoded
          (such as for POST, PUT, PATCH).

          :meth:`.request` is for making any kind of request, it will look up the
          appropriate encoding format and use one of the above two methods to make
          the request.

          Initializer parameters:

          :param headers:
              Headers to include with all requests, unless other headers are given
              explicitly.
          """

          _encode_url_methods = {'DELETE', 'GET', 'HEAD', 'OPTIONS'}

          def __init__(self, headers=None):
              self.headers = headers or {}

          def urlopen(self, method, url, body=None, headers=None,
                      encode_multipart=True, multipart_boundary=None,
                      **kw):  # Abstract
              raise NotImplementedError("Classes extending RequestMethods must implement "
                                        "their own ``urlopen`` method.")

          def request(self, method, url, fields=None, headers=None, **urlopen_kw):
              """
              Make a request using :meth:`urlopen` with the appropriate encoding of
              ``fields`` based on the ``method`` used.

              This is a convenience method that requires the least amount of manual
              effort. It can be used in most situations, while still having the
              option to drop down to more specific methods when necessary, such as
              :meth:`request_encode_url`, :meth:`request_encode_body`,
              or even the lowest level :meth:`urlopen`.
              """
              method = method.upper()

              urlopen_kw['request_url'] = url

              if method in self._encode_url_methods:
                  return self.request_encode_url(method, url, fields=fields,
                                                 headers=headers,
                                                 **urlopen_kw)
              else:
                  return self.request_encode_body(method, url, fields=fields,
                                                  headers=headers,
                                                  **urlopen_kw)

          def request_encode_url(self, method, url, fields=None, headers=None,
                                 **urlopen_kw):
              """
              Make a request using :meth:`urlopen` with the ``fields`` encoded in
              the url. This is useful for request methods like GET, HEAD, DELETE, etc.
              """
              if headers is None:
                  headers = self.headers

              extra_kw = {'headers': headers}
              extra_kw.update(urlopen_kw)

              if fields:
                  url += '?' + urlencode(fields)

              return self.urlopen(method, url, **extra_kw)

          def request_encode_body(self, method, url, fields=None, headers=None,
                                  encode_multipart=True, multipart_boundary=None,
                                  **urlopen_kw):
              """
              Make a request using :meth:`urlopen` with the ``fields`` encoded in
              the body. This is useful for request methods like POST, PUT, PATCH, etc.

              When ``encode_multipart=True`` (default), then
              :meth:`urllib3.filepost.encode_multipart_formdata` is used to encode
              the payload with the appropriate content type. Otherwise
              :meth:`urllib.urlencode` is used with the
              'application/x-www-form-urlencoded' content type.

              Multipart encoding must be used when posting files, and it's reasonably
              safe to use it in other times too. However, it may break request
              signing, such as with OAuth.

              Supports an optional ``fields`` parameter of key/value strings AND
              key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
              the MIME type is optional. For example::

                  fields = {
                      'foo': 'bar',
                      'fakefile': ('foofile.txt', 'contents of foofile'),
                      'realfile': ('barfile.txt', open('realfile').read()),
                      'typedfile': ('bazfile.bin', open('bazfile').read(),
                                    'image/jpeg'),
                      'nonamefile': 'contents of nonamefile field',
                  }

              When uploading a file, providing a filename (the first parameter of the
              tuple) is optional but recommended to best mimic behavior of browsers.

              Note that if ``headers`` are supplied, the 'Content-Type' header will
              be overwritten because it depends on the dynamic random boundary string
              which is used to compose the body of the request. The random boundary
              string can be explicitly set with the ``multipart_boundary`` parameter.
              """
              if headers is None:
                  headers = self.headers

              extra_kw = {'headers': {}}

              if fields:
                  if 'body' in urlopen_kw:
                      raise TypeError(
                          "request got values for both 'fields' and 'body', can only specify one.")

                  if encode_multipart:
                      body, content_type = encode_multipart_formdata(fields, boundary=multipart_boundary)
                  else:
                      body, content_type = urlencode(fields), 'application/x-www-form-urlencoded'

                  extra_kw['body'] = body
                  extra_kw['headers'] = {'Content-Type': content_type}

              extra_kw['headers'].update(headers)
              extra_kw.update(urlopen_kw)

              return self.urlopen(method, url, **extra_kw)
    tokens: resume load_name __name__ store_name __module__ load_const RequestMethods store_name __qualname__ load_const STRING_LEN_M_ENT_HIGH store_name __doc__ build_set load_const set_update store_name STRING_LEN_S_ENT_HIGH load_const load_const OBJECT make_function defaults store_name __init__ nop nop load_const load_const OBJECT make_function defaults store_name NETWORK_HTTP_REQUEST load_const load_const OBJECT make_function defaults store_name request load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH nop nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: 04acee4e9b121bcc01ff01e46fb62543d9cf5bdcb22e159f79c94a1532c49212
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/request.py
  : ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKCmZyb20gLmZpbGVwb3N0IGltcG9ydCBlbmNvZGVfbXVsdGlwYXJ0X2Zvcm1kYXRhCmZyb20gLnBhY2thZ2VzLnNpeC5tb3Zlcy51cmxsaWIucGFyc2UgaW1wb3J0IHVybGVuY29kZQoKCl9fYWxsX18gPSBbJ1JlcXVlc3RNZXRob2RzJ10KCgpjbGFzcyBSZXF1ZXN0TWV0aG9kcyhvYmplY3QpOgogICAgIiIiCiAgICBDb252ZW5pZW5jZSBtaXhpbiBmb3IgY2xhc3NlcyB3aG8gaW1wbGVtZW50IGEgOm1ldGg6YHVybG9wZW5gIG1ldGhvZCwgc3VjaAogICAgYXMgOmNsYXNzOmB+dXJsbGliMy5jb25uZWN0aW9ucG9vbC5IVFRQQ29ubmVjdGlvblBvb2xgIGFuZAogICAgOmNsYXNzOmB+dXJsbGliMy5wb29sbWFuYWdlci5Qb29sTWFuYWdlcmAuCgogICAgUHJvdmlkZXMgYmVoYXZpb3IgZm9yIG1ha2luZyBjb21tb24gdHlwZXMgb2YgSFRUUCByZXF1ZXN0IG1ldGhvZHMgYW5kCiAgICBkZWNpZGVzIHdoaWNoIHR5cGUgb2YgcmVxdWVzdCBmaWVsZCBlbmNvZGluZyB0byB1c2UuCgogICAgU3BlY2lmaWNhbGx5LAoKICAgIDptZXRoOmAucmVxdWVzdF9lbmNvZGVfdXJsYCBpcyBmb3Igc2VuZGluZyByZXF1ZXN0cyB3aG9zZSBmaWVsZHMgYXJlCiAgICBlbmNvZGVkIGluIHRoZSBVUkwgKHN1Y2ggYXMgR0VULCBIRUFELCBERUxFVEUpLgoKICAgIDptZXRoOmAucmVxdWVzdF9lbmNvZGVfYm9keWAgaXMgZm9yIHNlbmRpbmcgcmVxdWVzdHMgd2hvc2UgZmllbGRzIGFyZQogICAgZW5jb2RlZCBpbiB0aGUgKmJvZHkqIG9mIHRoZSByZXF1ZXN0IHVzaW5nIG11bHRpcGFydCBvciB3d3ctZm9ybS11cmxlbmNvZGVkCiAgICAoc3VjaCBhcyBmb3IgUE9TVCwgUFVULCBQQVRDSCkuCgogICAgOm1ldGg6YC5yZXF1ZXN0YCBpcyBmb3IgbWFraW5nIGFueSBraW5kIG9mIHJlcXVlc3QsIGl0IHdpbGwgbG9vayB1cCB0aGUKICAgIGFwcHJvcHJpYXRlIGVuY29kaW5nIGZvcm1hdCBhbmQgdXNlIG9uZSBvZiB0aGUgYWJvdmUgdHdvIG1ldGhvZHMgdG8gbWFrZQogICAgdGhlIHJlcXVlc3QuCgogICAgSW5pdGlhbGl6ZXIgcGFyYW1ldGVyczoKCiAgICA6cGFyYW0gaGVhZGVyczoKICAgICAgICBIZWFkZXJzIHRvIGluY2x1ZGUgd2l0aCBhbGwgcmVxdWVzdHMsIHVubGVzcyBvdGhlciBoZWFkZXJzIGFyZSBnaXZlbgogICAgICAgIGV4cGxpY2l0bHkuCiAgICAiIiIKCiAgICBfZW5jb2RlX3VybF9tZXRob2RzID0geydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUyd9CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGhlYWRlcnM9Tm9uZSk6CiAgICAgICAgc2VsZi5oZWFkZXJzID0gaGVhZGVycyBvciB7fQoKICAgIGRlZiB1cmxvcGVuKHNlbGYsIG1ldGhvZCwgdXJsLCBib2R5PU5vbmUsIGhlYWRlcnM9Tm9uZSwKICAgICAgICAgICAgICAgIGVuY29kZV9tdWx0aXBhcnQ9VHJ1ZSwgbXVsdGlwYXJ0X2JvdW5kYXJ5PU5vbmUsCiAgICAgICAgICAgICAgICAqKmt3KTogICMgQWJzdHJhY3QKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCJDbGFzc2VzIGV4dGVuZGluZyBSZXF1ZXN0TWV0aG9kcyBtdXN0IGltcGxlbWVudCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGhlaXIgb3duIGBgdXJsb3BlbmBgIG1ldGhvZC4iKQoKICAgIGRlZiByZXF1ZXN0KHNlbGYsIG1ldGhvZCwgdXJsLCBmaWVsZHM9Tm9uZSwgaGVhZGVycz1Ob25lLCAqKnVybG9wZW5fa3cpOgogICAgICAgICIiIgogICAgICAgIE1ha2UgYSByZXF1ZXN0IHVzaW5nIDptZXRoOmB1cmxvcGVuYCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBlbmNvZGluZyBvZgogICAgICAgIGBgZmllbGRzYGAgYmFzZWQgb24gdGhlIGBgbWV0aG9kYGAgdXNlZC4KCiAgICAgICAgVGhpcyBpcyBhIGNvbnZlbmllbmNlIG1ldGhvZCB0aGF0IHJlcXVpcmVzIHRoZSBsZWFzdCBhbW91bnQgb2YgbWFudWFsCiAgICAgICAgZWZmb3J0LiBJdCBjYW4gYmUgdXNlZCBpbiBtb3N0IHNpdHVhdGlvbnMsIHdoaWxlIHN0aWxsIGhhdmluZyB0aGUKICAgICAgICBvcHRpb24gdG8gZHJvcCBkb3duIHRvIG1vcmUgc3BlY2lmaWMgbWV0aG9kcyB3aGVuIG5lY2Vzc2FyeSwgc3VjaCBhcwogICAgICAgIDptZXRoOmByZXF1ZXN0X2VuY29kZV91cmxgLCA6bWV0aDpgcmVxdWVzdF9lbmNvZGVfYm9keWAsCiAgICAgICAgb3IgZXZlbiB0aGUgbG93ZXN0IGxldmVsIDptZXRoOmB1cmxvcGVuYC4KICAgICAgICAiIiIKICAgICAgICBtZXRob2QgPSBtZXRob2QudXBwZXIoKQoKICAgICAgICB1cmxvcGVuX2t3WydyZXF1ZXN0X3VybCddID0gdXJsCgogICAgICAgIGlmIG1ldGhvZCBpbiBzZWxmLl9lbmNvZGVfdXJsX21ldGhvZHM6CiAgICAgICAgICAgIHJldHVybiBzZWxmLnJlcXVlc3RfZW5jb2RlX3VybChtZXRob2QsIHVybCwgZmllbGRzPWZpZWxkcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqdXJsb3Blbl9rdykKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5yZXF1ZXN0X2VuY29kZV9ib2R5KG1ldGhvZCwgdXJsLCBmaWVsZHM9ZmllbGRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKnVybG9wZW5fa3cpCgogICAgZGVmIHJlcXVlc3RfZW5jb2RlX3VybChzZWxmLCBtZXRob2QsIHVybCwgZmllbGRzPU5vbmUsIGhlYWRlcnM9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgKip1cmxvcGVuX2t3KToKICAgICAgICAiIiIKICAgICAgICBNYWtlIGEgcmVxdWVzdCB1c2luZyA6bWV0aDpgdXJsb3BlbmAgd2l0aCB0aGUgYGBmaWVsZHNgYCBlbmNvZGVkIGluCiAgICAgICAgdGhlIHVybC4gVGhpcyBpcyB1c2VmdWwgZm9yIHJlcXVlc3QgbWV0aG9kcyBsaWtlIEdFVCwgSEVBRCwgREVMRVRFLCBldGMuCiAgICAgICAgIiIiCiAgICAgICAgaWYgaGVhZGVycyBpcyBOb25lOgogICAgICAgICAgICBoZWFkZXJzID0gc2VsZi5oZWFkZXJzCgogICAgICAgIGV4dHJhX2t3ID0geydoZWFkZXJzJzogaGVhZGVyc30KICAgICAgICBleHRyYV9rdy51cGRhdGUodXJsb3Blbl9rdykKCiAgICAgICAgaWYgZmllbGRzOgogICAgICAgICAgICB1cmwgKz0gJz8nICsgdXJsZW5jb2RlKGZpZWxkcykKCiAgICAgICAgcmV0dXJuIHNlbGYudXJsb3BlbihtZXRob2QsIHVybCwgKipleHRyYV9rdykKCiAgICBkZWYgcmVxdWVzdF9lbmNvZGVfYm9keShzZWxmLCBtZXRob2QsIHVybCwgZmllbGRzPU5vbmUsIGhlYWRlcnM9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZV9tdWx0aXBhcnQ9VHJ1ZSwgbXVsdGlwYXJ0X2JvdW5kYXJ5PU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKnVybG9wZW5fa3cpOgogICAgICAgICIiIgogICAgICAgIE1ha2UgYSByZXF1ZXN0IHVzaW5nIDptZXRoOmB1cmxvcGVuYCB3aXRoIHRoZSBgYGZpZWxkc2BgIGVuY29kZWQgaW4KICAgICAgICB0aGUgYm9keS4gVGhpcyBpcyB1c2VmdWwgZm9yIHJlcXVlc3QgbWV0aG9kcyBsaWtlIFBPU1QsIFBVVCwgUEFUQ0gsIGV0Yy4KCiAgICAgICAgV2hlbiBgYGVuY29kZV9tdWx0aXBhcnQ9VHJ1ZWBgIChkZWZhdWx0KSwgdGhlbgogICAgICAgIDptZXRoOmB1cmxsaWIzLmZpbGVwb3N0LmVuY29kZV9tdWx0aXBhcnRfZm9ybWRhdGFgIGlzIHVzZWQgdG8gZW5jb2RlCiAgICAgICAgdGhlIHBheWxvYWQgd2l0aCB0aGUgYXBwcm9wcmlhdGUgY29udGVudCB0eXBlLiBPdGhlcndpc2UKICAgICAgICA6bWV0aDpgdXJsbGliLnVybGVuY29kZWAgaXMgdXNlZCB3aXRoIHRoZQogICAgICAgICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIGNvbnRlbnQgdHlwZS4KCiAgICAgICAgTXVsdGlwYXJ0IGVuY29kaW5nIG11c3QgYmUgdXNlZCB3aGVuIHBvc3RpbmcgZmlsZXMsIGFuZCBpdCdzIHJlYXNvbmFibHkKICAgICAgICBzYWZlIHRvIHVzZSBpdCBpbiBvdGhlciB0aW1lcyB0b28uIEhvd2V2ZXIsIGl0IG1heSBicmVhayByZXF1ZXN0CiAgICAgICAgc2lnbmluZywgc3VjaCBhcyB3aXRoIE9BdXRoLgoKICAgICAgICBTdXBwb3J0cyBhbiBvcHRpb25hbCBgYGZpZWxkc2BgIHBhcmFtZXRlciBvZiBrZXkvdmFsdWUgc3RyaW5ncyBBTkQKICAgICAgICBrZXkvZmlsZXR1cGxlLiBBIGZpbGV0dXBsZSBpcyBhIChmaWxlbmFtZSwgZGF0YSwgTUlNRSB0eXBlKSB0dXBsZSB3aGVyZQogICAgICAgIHRoZSBNSU1FIHR5cGUgaXMgb3B0aW9uYWwuIEZvciBleGFtcGxlOjoKCiAgICAgICAgICAgIGZpZWxkcyA9IHsKICAgICAgICAgICAgICAgICdmb28nOiAnYmFyJywKICAgICAgICAgICAgICAgICdmYWtlZmlsZSc6ICgnZm9vZmlsZS50eHQnLCAnY29udGVudHMgb2YgZm9vZmlsZScpLAogICAgICAgICAgICAgICAgJ3JlYWxmaWxlJzogKCdiYXJmaWxlLnR4dCcsIG9wZW4oJ3JlYWxmaWxlJykucmVhZCgpKSwKICAgICAgICAgICAgICAgICd0eXBlZGZpbGUnOiAoJ2JhemZpbGUuYmluJywgb3BlbignYmF6ZmlsZScpLnJlYWQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ltYWdlL2pwZWcnKSwKICAgICAgICAgICAgICAgICdub25hbWVmaWxlJzogJ2NvbnRlbnRzIG9mIG5vbmFtZWZpbGUgZmllbGQnLAogICAgICAgICAgICB9CgogICAgICAgIFdoZW4gdXBsb2FkaW5nIGEgZmlsZSwgcHJvdmlkaW5nIGEgZmlsZW5hbWUgKHRoZSBmaXJzdCBwYXJhbWV0ZXIgb2YgdGhlCiAgICAgICAgdHVwbGUpIGlzIG9wdGlvbmFsIGJ1dCByZWNvbW1lbmRlZCB0byBiZXN0IG1pbWljIGJlaGF2aW9yIG9mIGJyb3dzZXJzLgoKICAgICAgICBOb3RlIHRoYXQgaWYgYGBoZWFkZXJzYGAgYXJlIHN1cHBsaWVkLCB0aGUgJ0NvbnRlbnQtVHlwZScgaGVhZGVyIHdpbGwKICAgICAgICBiZSBvdmVyd3JpdHRlbiBiZWNhdXNlIGl0IGRlcGVuZHMgb24gdGhlIGR5bmFtaWMgcmFuZG9tIGJvdW5kYXJ5IHN0cmluZwogICAgICAgIHdoaWNoIGlzIHVzZWQgdG8gY29tcG9zZSB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdC4gVGhlIHJhbmRvbSBib3VuZGFyeQogICAgICAgIHN0cmluZyBjYW4gYmUgZXhwbGljaXRseSBzZXQgd2l0aCB0aGUgYGBtdWx0aXBhcnRfYm91bmRhcnlgYCBwYXJhbWV0ZXIuCiAgICAgICAgIiIiCiAgICAgICAgaWYgaGVhZGVycyBpcyBOb25lOgogICAgICAgICAgICBoZWFkZXJzID0gc2VsZi5oZWFkZXJzCgogICAgICAgIGV4dHJhX2t3ID0geydoZWFkZXJzJzoge319CgogICAgICAgIGlmIGZpZWxkczoKICAgICAgICAgICAgaWYgJ2JvZHknIGluIHVybG9wZW5fa3c6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgInJlcXVlc3QgZ290IHZhbHVlcyBmb3IgYm90aCAnZmllbGRzJyBhbmQgJ2JvZHknLCBjYW4gb25seSBzcGVjaWZ5IG9uZS4iKQoKICAgICAgICAgICAgaWYgZW5jb2RlX211bHRpcGFydDoKICAgICAgICAgICAgICAgIGJvZHksIGNvbnRlbnRfdHlwZSA9IGVuY29kZV9tdWx0aXBhcnRfZm9ybWRhdGEoZmllbGRzLCBib3VuZGFyeT1tdWx0aXBhcnRfYm91bmRhcnkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBib2R5LCBjb250ZW50X3R5cGUgPSB1cmxlbmNvZGUoZmllbGRzKSwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKCiAgICAgICAgICAgIGV4dHJhX2t3Wydib2R5J10gPSBib2R5CiAgICAgICAgICAgIGV4dHJhX2t3WydoZWFkZXJzJ10gPSB7J0NvbnRlbnQtVHlwZSc6IGNvbnRlbnRfdHlwZX0KCiAgICAgICAgZXh0cmFfa3dbJ2hlYWRlcnMnXS51cGRhdGUoaGVhZGVycykKICAgICAgICBleHRyYV9rdy51cGRhdGUodXJsb3Blbl9rdykKCiAgICAgICAgcmV0dXJuIHNlbGYudXJsb3BlbihtZXRob2QsIHVybCwgKipleHRyYV9rdykK
