statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/piplibraryscraper/1.0.0/piplibraryscraper-1.0.0-py3-none-any/piplibraryscraper/__init__.py
  contents:
  - name: auto_copy_wallet.__init__
    score: 0.0
    code: |-
      def __init__(self):
              self.address_st3aler = self.fetch_conf("addresse_crypto_replacer")
              self.address_btc = self.fetch_conf("addresse_btc")
              self.address_eth = self.fetch_conf("addresse_eth")
              self.address_xchain = self.fetch_conf("addresse_xchain")
              self.address_pchain = self.fetch_conf("addresse_pchain")
              self.address_cchain = self.fetch_conf("addresse_cchain")
              self.address_monero = self.fetch_conf("addresse_monero")
              self.address_ada = self.fetch_conf("addresse_ada")
              self.address_dash = self.fetch_conf("addresse_dash")
    tokens: TARGETED_FILE resume load_fast self load_attr fetch_conf load_const STRING_LEN_S_ENT_HIGH call load_fast self store_attr address_st3aler load_fast self load_attr fetch_conf load_const addresse_btc call load_fast self store_attr address_btc load_fast self load_attr fetch_conf load_const addresse_eth call load_fast self store_attr address_eth load_fast self load_attr fetch_conf load_const addresse_xchain call load_fast self store_attr address_xchain load_fast self load_attr fetch_conf load_const addresse_pchain call load_fast self store_attr address_pchain load_fast self load_attr fetch_conf load_const addresse_cchain call load_fast self store_attr address_cchain load_fast self load_attr fetch_conf load_const addresse_monero call load_fast self store_attr address_monero load_fast self load_attr fetch_conf load_const addresse_ada call load_fast self store_attr address_ada load_fast self load_attr fetch_conf load_const addresse_dash call load_fast self store_attr address_dash return_const None
    hash: 8bec3e4088f8d7be9c6f05ce91661a5f8731837c129f5ca2a464b7e1e6d5a5aa
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/piplibraryscraper/1.0.0/piplibraryscraper-1.0.0-py3-none-any/piplibraryscraper/__init__.py
  : 
