statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/shaasigma/2.0.0/shaasigma-2.0.0/shaasigma-2.0.0/shaasigma/__init__.py
  contents:
  - name: TimeDelta.__repr__
    score: 0.0
    code: |-
      def __repr__(self):
              return f"datetime2.{type(self).__name__}('{self.fractional_days!s}')"
    tokens: TARGETED_FILE resume load_const datetime2. load_global type load_fast self call load_attr __name__ format_value INTEGER load_const (' load_fast self load_attr fractional_days format_value INTEGER load_const ') build_string return_value
    hash: 80f47d7813ade8cdd3e9fb9cbedb4de3d3d8826f695ae68deed496aa2cf968af
sources:
  .repo_cache/malicious_repos/pypi_malregistry/shaasigma/2.0.0/shaasigma-2.0.0/shaasigma-2.0.0/shaasigma/__init__.py: 
