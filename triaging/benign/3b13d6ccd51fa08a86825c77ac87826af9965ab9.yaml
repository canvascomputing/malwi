statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/emr/ssh.py
  contents:
  - name: Socks
    score: 0.0
    code: |-
      # Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      #     http://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.

      import os
      import subprocess
      import tempfile

      from awscli.customizations.emr import constants
      from awscli.customizations.emr import emrutils
      from awscli.customizations.emr import sshutils
      from awscli.customizations.emr.command import Command

      KEY_PAIR_FILE_HELP_TEXT = '\nA value for the variable Key Pair File ' \
          'can be set in the AWS CLI config file using the ' \
          '"aws configure set emr.key_pair_file <value>" command.\n'


      class Socks(Command):
          NAME = 'socks'
          DESCRIPTION = ('Create a socks tunnel on port 8157 from your machine '
                         'to the master.\n%s' % KEY_PAIR_FILE_HELP_TEXT)
          ARG_TABLE = [
              {'name': 'cluster-id', 'required': True,
               'help_text': 'Cluster Id of cluster you want to ssh into'},
              {'name': 'key-pair-file', 'required': True,
               'help_text': 'Private key file to use for login'},
          ]

          def _run_main_command(self, parsed_args, parsed_globals):
              try:
                  master_dns = sshutils.validate_and_find_master_dns(
                      session=self._session,
                      parsed_globals=parsed_globals,
                      cluster_id=parsed_args.cluster_id)

                  key_file = parsed_args.key_pair_file
                  sshutils.validate_ssh_with_key_file(key_file)
                  f = tempfile.NamedTemporaryFile(delete=False)
                  if (emrutils.which('ssh') or emrutils.which('ssh.exe')):
                      command = ['ssh', '-o', 'StrictHostKeyChecking=no', '-o',
                                 'ServerAliveInterval=10', '-ND', '8157', '-i',
                                 parsed_args.key_pair_file, constants.SSH_USER +
                                 '@' + master_dns]
                  else:
                      command = ['putty', '-ssh', '-i', parsed_args.key_pair_file,
                                 constants.SSH_USER + '@' + master_dns, '-N', '-D',
                                 '8157']

                  print(' '.join(command))
                  rc = subprocess.call(command)
                  return rc
              except KeyboardInterrupt:
                  print('Disabling Socks Tunnel.')
                  return 0
    tokens: resume load_name __name__ store_name __module__ load_const Socks store_name __qualname__ load_const socks store_name NAME load_const STRING_LEN_S_ENT_HIGH load_name STRING_LEN_S_ENT_HIGH binary_op % store_name DESCRIPTION load_const cluster-id load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const key-pair-file load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map build_list store_name ARG_TABLE load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: dd376881f1b374781c3c8773c3231922c080f22e235a65c28e35869266183263
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/emr/ssh.py: 
