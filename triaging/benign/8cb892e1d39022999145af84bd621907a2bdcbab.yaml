statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/_core_foundation_ctypes.py
  contents:
  - name: CFHelpers.cf_number_from_integer
    score: 0.0
    code: |-
      @staticmethod
          def cf_number_from_integer(integer):
              """
              Creates a CFNumber object from an integer

              :param integer:
                  The integer to create the CFNumber for

              :return:
                  A CFNumber
              """

              integer_as_long = c_long(integer)
              return CoreFoundation.CFNumberCreate(
                  CoreFoundation.kCFAllocatorDefault,
                  kCFNumberCFIndexType,
                  byref(integer_as_long)
              )
    tokens: resume load_global c_long load_fast integer call store_fast integer_as_long load_global CoreFoundation load_attr CFNumberCreate load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH load_global STRING_BASE64_LEN_S_ENT_HIGH load_global byref load_fast integer_as_long call call return_value
    hash: acdbb8b7715d16f5b20be50f4571fe1473df6a08657d5c12b76a3da8092da479
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/_core_foundation_ctypes.py
  : 
