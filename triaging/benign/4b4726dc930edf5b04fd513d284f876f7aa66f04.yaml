statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/member.py
  contents:
  - name: Member
    score: 0.0
    code: "@flatten_user\nclass Member(discord.abc.Messageable, _BaseUser):\n    \"\"\"Represents a Discord member to a :class:`Guild`.\n\n    This implements a lot of the functionality of :class:`User`.\n\n    .. container:: operations\n\n        .. describe:: x == y\n\n            Checks if two members are equal.\n            Note that this works with :class:`User` instances too.\n\n        .. describe:: x != y\n\n            Checks if two members are not equal.\n            Note that this works with :class:`User` instances too.\n\n        .. describe:: hash(x)\n\n            Returns the member's hash.\n\n        .. describe:: str(x)\n\n            Returns the member's name with the discriminator.\n\n    Attributes\n    ----------\n    joined_at: Optional[:class:`datetime.datetime`]\n        A datetime object that specifies the date and time in UTC that the member joined the guild.\n        If the member left and rejoined the guild, this will be the latest date. In certain cases, this can be ``None``.\n    activities: Tuple[Union[:class:`BaseActivity`, :class:`Spotify`]]\n        The activities that the user is currently doing.\n\n        .. note::\n\n            Due to a Discord API limitation, a user's Spotify activity may not appear\n            if they are listening to a song with a title longer\n            than 128 characters. See :issue:`1738` for more information.\n\n    guild: :class:`Guild`\n        The guild that the member belongs to.\n    nick: Optional[:class:`str`]\n        The guild specific nickname of the user.\n    pending: :class:`bool`\n        Whether the member is pending member verification.\n\n        .. versionadded:: 1.6\n    premium_since: Optional[:class:`datetime.datetime`]\n        A datetime object that specifies the date and time in UTC when the member used their\n        Nitro boost on the guild, if available. This could be ``None``.\n    \"\"\"\n\n    __slots__ = ('_roles', 'joined_at', 'premium_since', '_client_status',\n                 'activities', 'guild', 'pending', 'nick', '_user', '_state')\n\n    def __init__(self, *, data, guild, state):\n        self._state = state\n        self._user = state.store_user(data['user'])\n        self.guild = guild\n        self.joined_at = utils.parse_time(data.get('joined_at'))\n        self.premium_since = utils.parse_time(data.get('premium_since'))\n        self._update_roles(data)\n        self._client_status = {\n            None: 'offline'\n        }\n        self.activities = tuple(map(create_activity, data.get('activities', [])))\n        self.nick = data.get('nick', None)\n        self.pending = data.get('pending', False)\n\n    def __str__(self):\n        return str(self._user)\n\n    def __repr__(self):\n        return '<Member id={1.id} name={1.name!r} discriminator={1.discriminator!r}' \\\n               ' bot={1.bot} nick={0.nick!r} guild={0.guild!r}>'.format(self, self._user)\n\n    def __eq__(self, other):\n        return isinstance(other, _BaseUser) and other.id == self.id\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __hash__(self):\n        return hash(self._user)\n\n    @classmethod\n    def _from_message(cls, *, message, data):\n        author = message.author\n        data['user'] = author._to_minimal_user_json()\n        return cls(data=data, guild=message.guild, state=message._state)\n\n    def _update_from_message(self, data):\n        self.joined_at = utils.parse_time(data.get('joined_at'))\n        self.premium_since = utils.parse_time(data.get('premium_since'))\n        self._update_roles(data)\n        self.nick = data.get('nick', None)\n        self.pending = data.get('pending', False)\n\n    @classmethod\n    def _try_upgrade(cls, *,  data, guild, state):\n        # A User object with a 'member' key\n        try:\n            member_data = data.pop('member')\n        except KeyError:\n            return state.store_user(data)\n        else:\n            member_data['user'] = data\n            return cls(data=member_data, guild=guild, state=state)\n\n    @classmethod\n    def _from_presence_update(cls, *, data, guild, state):\n        clone = cls(data=data, guild=guild, state=state)\n        to_return = cls(data=data, guild=guild, state=state)\n        to_return._client_status = {\n            sys.intern(key): sys.intern(value)\n            for key, value in data.get('client_status', {}).items()\n        }\n        to_return._client_status[None] = sys.intern(data['status'])\n        return to_return, clone\n\n    @classmethod\n    def _copy(cls, member):\n        self = cls.__new__(cls) # to bypass __init__\n\n        self._roles = utils.SnowflakeList(member._roles, is_sorted=True)\n        self.joined_at = member.joined_at\n        self.premium_since = member.premium_since\n        self._client_status = member._client_status.copy()\n        self.guild = member.guild\n        self.nick = member.nick\n        self.pending = member.pending\n        self.activities = member.activities\n        self._state = member._state\n\n        # Reference will not be copied unless necessary by PRESENCE_UPDATE\n        # See below\n        self._user = member._user\n        return self\n\n    async def _get_channel(self):\n        ch = await self.create_dm()\n        return ch\n\n    def _update_roles(self, data):\n        self._roles = utils.SnowflakeList(map(int, data['roles']))\n\n    def _update(self, data):\n        # the nickname change is optional,\n        # if it isn't in the payload then it didn't change\n        try:\n            self.nick = data['nick']\n        except KeyError:\n            pass\n\n        try:\n            self.pending = data['pending']\n        except KeyError:\n            pass\n\n        self.premium_since = utils.parse_time(data.get('premium_since'))\n        self._update_roles(data)\n\n    def _presence_update(self, data, user):\n        self.activities = tuple(map(create_activity, data.get('activities', [])))\n        self._client_status = {\n            sys.intern(key): sys.intern(value)\n            for key, value in data.get('client_status', {}).items()\n        }\n        self._client_status[None] = sys.intern(data['status'])\n\n        if len(user) > 1:\n            return self._update_inner_user(user)\n        return False\n\n    def _update_inner_user(self, user):\n        u = self._user\n        original = (u.name, u.avatar, u.discriminator, u._public_flags)\n        # These keys seem to always be available\n        modified = (user['username'], user['avatar'], user['discriminator'], user.get('public_flags', 0))\n        if original != modified:\n            to_return = User._copy(self._user)\n            u.name, u.avatar, u.discriminator, u._public_flags = modified\n            # Signal to dispatch on_user_update\n            return to_return, u\n\n    @property\n    def status(self):\n        \"\"\":class:`Status`: The member's overall status. If the value is unknown, then it will be a :class:`str` instead.\"\"\"\n        return try_enum(Status, self._client_status[None])\n\n    @property\n    def raw_status(self):\n        \"\"\":class:`str`: The member's overall status as a string value.\n\n        .. versionadded:: 1.5\n        \"\"\"\n        return self._client_status[None]\n\n    @status.setter\n    def status(self, value):\n        # internal use only\n        self._client_status[None] = str(value)\n\n    @property\n    def mobile_status(self):\n        \"\"\":class:`Status`: The member's status on a mobile device, if applicable.\"\"\"\n        return try_enum(Status, self._client_status.get('mobile', 'offline'))\n\n    @property\n    def desktop_status(self):\n        \"\"\":class:`Status`: The member's status on the desktop client, if applicable.\"\"\"\n        return try_enum(Status, self._client_status.get('desktop', 'offline'))\n\n    @property\n    def web_status(self):\n        \"\"\":class:`Status`: The member's status on the web client, if applicable.\"\"\"\n        return try_enum(Status, self._client_status.get('web', 'offline'))\n\n    def is_on_mobile(self):\n        \"\"\":class:`bool`: A helper function that determines if a member is active on a mobile device.\"\"\"\n        return 'mobile' in self._client_status\n\n    @property\n    def colour(self):\n        \"\"\":class:`Colour`: A property that returns a colour denoting the rendered colour\n        for the member. If the default colour is the one rendered then an instance\n        of :meth:`Colour.default` is returned.\n\n        There is an alias for this named :attr:`color`.\n        \"\"\"\n\n        roles = self.roles[1:] # remove @everyone\n\n        # highest order of the colour is the one that gets rendered.\n        # if the highest is the default colour then the next one with a colour\n        # is chosen instead\n        for role in reversed(roles):\n            if role.colour.value:\n                return role.colour\n        return Colour.default()\n\n    @property\n    def color(self):\n        \"\"\":class:`Colour`: A property that returns a color denoting the rendered color for\n        the member. If the default color is the one rendered then an instance of :meth:`Colour.default`\n        is returned.\n\n        There is an alias for this named :attr:`colour`.\n        \"\"\"\n        return self.colour\n\n    @property\n    def roles(self):\n        \"\"\"List[:class:`Role`]: A :class:`list` of :class:`Role` that the member belongs to. Note\n        that the first element of this list is always the default '@everyone'\n        role.\n\n        These roles are sorted by their position in the role hierarchy.\n        \"\"\"\n        result = []\n        g = self.guild\n        for role_id in self._roles:\n            role = g.get_role(role_id)\n            if role:\n                result.append(role)\n        result.append(g.default_role)\n        result.sort()\n        return result\n\n    @property\n    def mention(self):\n        \"\"\":class:`str`: Returns a string that allows you to mention the member.\"\"\"\n        if self.nick:\n            return '<@!%s>' % self.id\n        return '<@%s>' % self.id\n\n    @property\n    def display_name(self):\n        \"\"\":class:`str`: Returns the user's display name.\n\n        For regular users this is just their username, but\n        if they have a guild specific nickname then that\n        is returned instead.\n        \"\"\"\n        return self.nick or self.name\n\n    @property\n    def activity(self):\n        \"\"\"Union[:class:`BaseActivity`, :class:`Spotify`]: Returns the primary\n        activity the user is currently doing. Could be ``None`` if no activity is being done.\n\n        .. note::\n\n            Due to a Discord API limitation, this may be ``None`` if \n            the user is listening to a song on Spotify with a title longer\n            than 128 characters. See :issue:`1738` for more information.\n\n        .. note::\n\n            A user may have multiple activities, these can be accessed under :attr:`activities`.\n        \"\"\"\n        if self.activities:\n            return self.activities[0]\n\n    def mentioned_in(self, message):\n        \"\"\"Checks if the member is mentioned in the specified message.\n\n        Parameters\n        -----------\n        message: :class:`Message`\n            The message to check if you're mentioned in.\n\n        Returns\n        -------\n        :class:`bool`\n            Indicates if the member is mentioned in the message.\n        \"\"\"\n        if message.guild is None or message.guild.id != self.guild.id:\n            return False\n\n        if self._user.mentioned_in(message):\n            return True\n\n        return any(self._roles.has(role.id) for role in message.role_mentions)\n\n    def permissions_in(self, channel):\n        \"\"\"An alias for :meth:`abc.GuildChannel.permissions_for`.\n\n        Basically equivalent to:\n\n        .. code-block:: python3\n\n            channel.permissions_for(self)\n\n        Parameters\n        -----------\n        channel: :class:`abc.GuildChannel`\n            The channel to check your permissions for.\n\n        Returns\n        -------\n        :class:`Permissions`\n            The resolved permissions for the member.\n        \"\"\"\n        return channel.permissions_for(self)\n\n    @property\n    def top_role(self):\n        \"\"\":class:`Role`: Returns the member's highest role.\n\n        This is useful for figuring where a member stands in the role\n        hierarchy chain.\n        \"\"\"\n        guild = self.guild\n        if len(self._roles) == 0:\n            return guild.default_role\n\n        return max(guild.get_role(rid) or guild.default_role for rid in self._roles)\n\n    @property\n    def guild_permissions(self):\n        \"\"\":class:`Permissions`: Returns the member's guild permissions.\n\n        This only takes into consideration the guild permissions\n        and not most of the implied permissions or any of the\n        channel permission overwrites. For 100% accurate permission\n        calculation, please use either :meth:`permissions_in` or\n        :meth:`abc.GuildChannel.permissions_for`.\n\n        This does take into consideration guild ownership and the\n        administrator implication.\n        \"\"\"\n\n        if self.guild.owner_id == self.id:\n            return Permissions.all()\n\n        base = Permissions.none()\n        for r in self.roles:\n            base.value |= r.permissions.value\n\n        if base.administrator:\n            return Permissions.all()\n\n        return base\n\n    @property\n    def voice(self):\n        \"\"\"Optional[:class:`VoiceState`]: Returns the member's current voice state.\"\"\"\n        return self.guild._voice_state_for(self._user.id)\n\n    async def ban(self, **kwargs):\n        \"\"\"|coro|\n\n        Bans this member. Equivalent to :meth:`Guild.ban`.\n        \"\"\"\n        await self.guild.ban(self, **kwargs)\n\n    async def unban(self, *, reason=None):\n        \"\"\"|coro|\n\n        Unbans this member. Equivalent to :meth:`Guild.unban`.\n        \"\"\"\n        await self.guild.unban(self, reason=reason)\n\n    async def kick(self, *, reason=None):\n        \"\"\"|coro|\n\n        Kicks this member. Equivalent to :meth:`Guild.kick`.\n        \"\"\"\n        await self.guild.kick(self, reason=reason)\n\n    async def edit(self, *, reason=None, **fields):\n        \"\"\"|coro|\n\n        Edits the member's data.\n\n        Depending on the parameter passed, this requires different permissions listed below:\n\n        +---------------+--------------------------------------+\n        |   Parameter   |              Permission              |\n        +---------------+--------------------------------------+\n        | nick          | :attr:`Permissions.manage_nicknames` |\n        +---------------+--------------------------------------+\n        | mute          | :attr:`Permissions.mute_members`     |\n        +---------------+--------------------------------------+\n        | deafen        | :attr:`Permissions.deafen_members`   |\n        +---------------+--------------------------------------+\n        | roles         | :attr:`Permissions.manage_roles`     |\n        +---------------+--------------------------------------+\n        | voice_channel | :attr:`Permissions.move_members`     |\n        +---------------+--------------------------------------+\n\n        All parameters are optional.\n\n        .. versionchanged:: 1.1\n            Can now pass ``None`` to ``voice_channel`` to kick a member from voice.\n\n        Parameters\n        -----------\n        nick: Optional[:class:`str`]\n            The member's new nickname. Use ``None`` to remove the nickname.\n        mute: :class:`bool`\n            Indicates if the member should be guild muted or un-muted.\n        deafen: :class:`bool`\n            Indicates if the member should be guild deafened or un-deafened.\n        suppress: :class:`bool`\n            Indicates if the member should be suppressed in stage channels.\n\n            .. versionadded:: 1.7\n\n        roles: Optional[List[:class:`Role`]]\n            The member's new list of roles. This *replaces* the roles.\n        voice_channel: Optional[:class:`VoiceChannel`]\n            The voice channel to move the member to.\n            Pass ``None`` to kick them from voice.\n        reason: Optional[:class:`str`]\n            The reason for editing this member. Shows up on the audit log.\n\n        Raises\n        -------\n        Forbidden\n            You do not have the proper permissions to the action requested.\n        HTTPException\n            The operation failed.\n        \"\"\"\n        http = self._state.http\n        guild_id = self.guild.id\n        me = self._state.self_id == self.id\n        payload = {}\n\n        try:\n            nick = fields['nick']\n        except KeyError:\n            # nick not present so...\n            pass\n        else:\n            nick = nick or ''\n            if me:\n                await http.change_my_nickname(guild_id, nick, reason=reason)\n            else:\n                payload['nick'] = nick\n\n        deafen = fields.get('deafen')\n        if deafen is not None:\n            payload['deaf'] = deafen\n\n        mute = fields.get('mute')\n        if mute is not None:\n            payload['mute'] = mute\n\n        suppress = fields.get('suppress')\n        if suppress is not None:\n            voice_state_payload = {\n                'channel_id': self.voice.channel.id,\n                'suppress': suppress,\n            }\n\n            if suppress or self.bot:\n                voice_state_payload['request_to_speak_timestamp'] = None\n\n            if me:\n                await http.edit_my_voice_state(guild_id, voice_state_payload)\n            else:\n                if not suppress:\n                    voice_state_payload['request_to_speak_timestamp'] = datetime.datetime.utcnow().isoformat()\n                await http.edit_voice_state(guild_id, self.id, voice_state_payload)\n\n        try:\n            vc = fields['voice_channel']\n        except KeyError:\n            pass\n        else:\n            payload['channel_id'] = vc and vc.id\n\n        try:\n            roles = fields['roles']\n        except KeyError:\n            pass\n        else:\n            payload['roles'] = tuple(r.id for r in roles)\n\n        if payload:\n            await http.edit_member(guild_id, self.id, reason=reason, **payload)\n\n        # TODO: wait for WS event for modify-in-place behaviour\n\n    async def request_to_speak(self):\n        \"\"\"|coro|\n\n        Request to speak in the connected channel.\n\n        Only applies to stage channels.\n\n        .. note::\n\n            Requesting members that are not the client is equivalent\n            to :attr:`.edit` providing ``suppress`` as ``False``.\n\n        .. versionadded:: 1.7\n\n        Raises\n        -------\n        Forbidden\n            You do not have the proper permissions to the action requested.\n        HTTPException\n            The operation failed.\n        \"\"\"\n        payload = {\n            'channel_id': self.voice.channel.id,\n            'request_to_speak_timestamp': datetime.datetime.utcnow().isoformat(),\n        }\n\n        if self._state.self_id != self.id:\n            payload['suppress'] = False\n            await self._state.http.edit_voice_state(self.guild.id, self.id, payload)\n        else:\n            await self._state.http.edit_my_voice_state(self.guild.id, payload)\n\n    async def move_to(self, channel, *, reason=None):\n        \"\"\"|coro|\n\n        Moves a member to a new voice channel (they must be connected first).\n\n        You must have the :attr:`~Permissions.move_members` permission to\n        use this.\n\n        This raises the same exceptions as :meth:`edit`.\n\n        .. versionchanged:: 1.1\n            Can now pass ``None`` to kick a member from voice.\n\n        Parameters\n        -----------\n        channel: Optional[:class:`VoiceChannel`]\n            The new voice channel to move the member to.\n            Pass ``None`` to kick them from voice.\n        reason: Optional[:class:`str`]\n            The reason for doing this action. Shows up on the audit log.\n        \"\"\"\n        await self.edit(voice_channel=channel, reason=reason)\n\n    async def add_roles(self, *roles, reason=None, atomic=True):\n        r\"\"\"|coro|\n\n        Gives the member a number of :class:`Role`\\s.\n\n        You must have the :attr:`~Permissions.manage_roles` permission to\n        use this, and the added :class:`Role`\\s must appear lower in the list\n        of roles than the highest role of the member.\n\n        Parameters\n        -----------\n        \\*roles: :class:`abc.Snowflake`\n            An argument list of :class:`abc.Snowflake` representing a :class:`Role`\n            to give to the member.\n        reason: Optional[:class:`str`]\n            The reason for adding these roles. Shows up on the audit log.\n        atomic: :class:`bool`\n            Whether to atomically add roles. This will ensure that multiple\n            operations will always be applied regardless of the current\n            state of the cache.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to add these roles.\n        HTTPException\n            Adding roles failed.\n        \"\"\"\n\n        if not atomic:\n            new_roles = utils._unique(Object(id=r.id) for s in (self.roles[1:], roles) for r in s)\n            await self.edit(roles=new_roles, reason=reason)\n        else:\n            req = self._state.http.add_role\n            guild_id = self.guild.id\n            user_id = self.id\n            for role in roles:\n                await req(guild_id, user_id, role.id, reason=reason)\n\n    async def remove_roles(self, *roles, reason=None, atomic=True):\n        r\"\"\"|coro|\n\n        Removes :class:`Role`\\s from this member.\n\n        You must have the :attr:`~Permissions.manage_roles` permission to\n        use this, and the removed :class:`Role`\\s must appear lower in the list\n        of roles than the highest role of the member.\n\n        Parameters\n        -----------\n        \\*roles: :class:`abc.Snowflake`\n            An argument list of :class:`abc.Snowflake` representing a :class:`Role`\n            to remove from the member.\n        reason: Optional[:class:`str`]\n            The reason for removing these roles. Shows up on the audit log.\n        atomic: :class:`bool`\n            Whether to atomically remove roles. This will ensure that multiple\n            operations will always be applied regardless of the current\n            state of the cache.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to remove these roles.\n        HTTPException\n            Removing the roles failed.\n        \"\"\"\n\n        if not atomic:\n            new_roles = [Object(id=r.id) for r in self.roles[1:]] # remove @everyone\n            for role in roles:\n                try:\n                    new_roles.remove(Object(id=role.id))\n                except ValueError:\n                    pass\n\n            await self.edit(roles=new_roles, reason=reason)\n        else:\n            req = self._state.http.remove_role\n            guild_id = self.guild.id\n            user_id = self.id\n            for role in roles:\n                await req(guild_id, user_id, role.id, reason=reason)"
    tokens: resume load_name __name__ store_name __module__ load_const Member store_name __qualname__ load_const STRING_LEN_L_ENT_HIGH store_name __doc__ load_const store_name __slots__ load_const OBJECT make_function store_name __init__ load_const OBJECT make_function store_name __str__ load_const OBJECT make_function store_name __repr__ load_const OBJECT make_function store_name __eq__ load_const OBJECT make_function store_name __ne__ load_const OBJECT make_function store_name __hash__ load_name classmethod load_const OBJECT make_function call store_name _from_message load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_name classmethod load_const OBJECT make_function call store_name _try_upgrade load_name classmethod load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name classmethod load_const OBJECT make_function call store_name _copy load_const OBJECT make_function store_name _get_channel load_const OBJECT make_function store_name _update_roles load_const OBJECT make_function store_name _update load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_name property load_const OBJECT make_function call store_name status load_name property load_const OBJECT make_function call store_name raw_status load_name status load_attr setter load_const OBJECT make_function call store_name status load_name property load_const OBJECT make_function call store_name mobile_status load_name property load_const OBJECT make_function call store_name desktop_status load_name property load_const OBJECT make_function call store_name web_status load_const OBJECT make_function store_name is_on_mobile load_name property load_const OBJECT make_function call store_name colour load_name property load_const OBJECT make_function call store_name color load_name property load_const OBJECT make_function call store_name roles load_name property load_const OBJECT make_function call store_name mention load_name property load_const OBJECT make_function call store_name display_name load_name property load_const OBJECT make_function call store_name activity load_const OBJECT make_function store_name mentioned_in load_const OBJECT make_function store_name permissions_in load_name property load_const OBJECT make_function call store_name top_role load_name property load_const OBJECT make_function call store_name STRING_LEN_S_ENT_HIGH load_name property load_const OBJECT make_function call store_name voice load_const OBJECT make_function store_name ban load_const load_const build_const_key_map load_const OBJECT make_function kwdefaults store_name unban load_const load_const build_const_key_map load_const OBJECT make_function kwdefaults store_name kick load_const load_const build_const_key_map load_const OBJECT make_function kwdefaults store_name edit load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const load_const build_const_key_map load_const OBJECT make_function kwdefaults store_name move_to load_const load_const INTEGER load_const build_const_key_map load_const OBJECT make_function kwdefaults store_name add_roles load_const load_const INTEGER load_const build_const_key_map load_const OBJECT make_function kwdefaults store_name remove_roles return_const None
    hash: a341f63a08e03967106dc56f5ae8972ac21f1172ff7e6d0e9121cba60cfaa82a
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/member.py: IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGluc3BlY3QKaW1wb3J0IGl0ZXJ0b29scwppbXBvcnQgc3lzCmZyb20gb3BlcmF0b3IgaW1wb3J0IGF0dHJnZXR0ZXIKCmltcG9ydCBkaXNjb3JkLmFiYwoKZnJvbSAuIGltcG9ydCB1dGlscwpmcm9tIC5lcnJvcnMgaW1wb3J0IENsaWVudEV4Y2VwdGlvbgpmcm9tIC51c2VyIGltcG9ydCBCYXNlVXNlciwgVXNlcgpmcm9tIC5hY3Rpdml0eSBpbXBvcnQgY3JlYXRlX2FjdGl2aXR5CmZyb20gLnBlcm1pc3Npb25zIGltcG9ydCBQZXJtaXNzaW9ucwpmcm9tIC5lbnVtcyBpbXBvcnQgU3RhdHVzLCB0cnlfZW51bQpmcm9tIC5jb2xvdXIgaW1wb3J0IENvbG91cgpmcm9tIC5vYmplY3QgaW1wb3J0IE9iamVjdAoKY2xhc3MgVm9pY2VTdGF0ZToKICAgICIiIlJlcHJlc2VudHMgYSBEaXNjb3JkIHVzZXIncyB2b2ljZSBzdGF0ZS4KCiAgICBBdHRyaWJ1dGVzCiAgICAtLS0tLS0tLS0tLS0KICAgIGRlYWY6IDpjbGFzczpgYm9vbGAKICAgICAgICBJbmRpY2F0ZXMgaWYgdGhlIHVzZXIgaXMgY3VycmVudGx5IGRlYWZlbmVkIGJ5IHRoZSBndWlsZC4KICAgIG11dGU6IDpjbGFzczpgYm9vbGAKICAgICAgICBJbmRpY2F0ZXMgaWYgdGhlIHVzZXIgaXMgY3VycmVudGx5IG11dGVkIGJ5IHRoZSBndWlsZC4KICAgIHNlbGZfbXV0ZTogOmNsYXNzOmBib29sYAogICAgICAgIEluZGljYXRlcyBpZiB0aGUgdXNlciBpcyBjdXJyZW50bHkgbXV0ZWQgYnkgdGhlaXIgb3duIGFjY29yZC4KICAgIHNlbGZfZGVhZjogOmNsYXNzOmBib29sYAogICAgICAgIEluZGljYXRlcyBpZiB0aGUgdXNlciBpcyBjdXJyZW50bHkgZGVhZmVuZWQgYnkgdGhlaXIgb3duIGFjY29yZC4KICAgIHNlbGZfc3RyZWFtOiA6Y2xhc3M6YGJvb2xgCiAgICAgICAgSW5kaWNhdGVzIGlmIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBzdHJlYW1pbmcgdmlhICdHbyBMaXZlJyBmZWF0dXJlLgoKICAgICAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjMKCiAgICBzZWxmX3ZpZGVvOiA6Y2xhc3M6YGJvb2xgCiAgICAgICAgSW5kaWNhdGVzIGlmIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBicm9hZGNhc3RpbmcgdmlkZW8uCiAgICBzdXBwcmVzczogOmNsYXNzOmBib29sYAogICAgICAgIEluZGljYXRlcyBpZiB0aGUgdXNlciBpcyBzdXBwcmVzc2VkIGZyb20gc3BlYWtpbmcuCgogICAgICAgIE9ubHkgYXBwbGllcyB0byBzdGFnZSBjaGFubmVscy4KCiAgICAgICAgLi4gdmVyc2lvbmFkZGVkOjogMS43CgogICAgcmVxdWVzdGVkX3RvX3NwZWFrX2F0OiBPcHRpb25hbFs6Y2xhc3M6YGRhdGV0aW1lLmRhdGV0aW1lYF0KICAgICAgICBBIGRhdGV0aW1lIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgZGF0ZSBhbmQgdGltZSBpbiBVVEMgdGhhdCB0aGUgbWVtYmVyCiAgICAgICAgcmVxdWVzdGVkIHRvIHNwZWFrLiBJdCB3aWxsIGJlIGBgTm9uZWBgIGlmIHRoZXkgYXJlIG5vdCByZXF1ZXN0aW5nIHRvIHNwZWFrCiAgICAgICAgYW55bW9yZSBvciBoYXZlIGJlZW4gYWNjZXB0ZWQgdG8gc3BlYWsuCgogICAgICAgIE9ubHkgYXBwbGljYWJsZSB0byBzdGFnZSBjaGFubmVscy4KCiAgICAgICAgLi4gdmVyc2lvbmFkZGVkOjogMS43CgogICAgYWZrOiA6Y2xhc3M6YGJvb2xgCiAgICAgICAgSW5kaWNhdGVzIGlmIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBpbiB0aGUgQUZLIGNoYW5uZWwgaW4gdGhlIGd1aWxkLgogICAgY2hhbm5lbDogT3B0aW9uYWxbVW5pb25bOmNsYXNzOmBWb2ljZUNoYW5uZWxgLCA6Y2xhc3M6YFN0YWdlQ2hhbm5lbGBdXQogICAgICAgIFRoZSB2b2ljZSBjaGFubmVsIHRoYXQgdGhlIHVzZXIgaXMgY3VycmVudGx5IGNvbm5lY3RlZCB0by4gYGBOb25lYGAgaWYgdGhlIHVzZXIKICAgICAgICBpcyBub3QgY3VycmVudGx5IGluIGEgdm9pY2UgY2hhbm5lbC4KICAgICIiIgoKICAgIF9fc2xvdHNfXyA9ICgnc2Vzc2lvbl9pZCcsICdkZWFmJywgJ211dGUnLCAnc2VsZl9tdXRlJywKICAgICAgICAgICAgICAgICAnc2VsZl9zdHJlYW0nLCAnc2VsZl92aWRlbycsICdzZWxmX2RlYWYnLCAnYWZrJywgJ2NoYW5uZWwnLAogICAgICAgICAgICAgICAgICdyZXF1ZXN0ZWRfdG9fc3BlYWtfYXQnLCAnc3VwcHJlc3MnKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqLCBkYXRhLCBjaGFubmVsPU5vbmUpOgogICAgICAgIHNlbGYuc2Vzc2lvbl9pZCA9IGRhdGEuZ2V0KCdzZXNzaW9uX2lkJykKICAgICAgICBzZWxmLl91cGRhdGUoZGF0YSwgY2hhbm5lbCkKCiAgICBkZWYgX3VwZGF0ZShzZWxmLCBkYXRhLCBjaGFubmVsKToKICAgICAgICBzZWxmLnNlbGZfbXV0ZSA9IGRhdGEuZ2V0KCdzZWxmX211dGUnLCBGYWxzZSkKICAgICAgICBzZWxmLnNlbGZfZGVhZiA9IGRhdGEuZ2V0KCdzZWxmX2RlYWYnLCBGYWxzZSkKICAgICAgICBzZWxmLnNlbGZfc3RyZWFtID0gZGF0YS5nZXQoJ3NlbGZfc3RyZWFtJywgRmFsc2UpCiAgICAgICAgc2VsZi5zZWxmX3ZpZGVvID0gZGF0YS5nZXQoJ3NlbGZfdmlkZW8nLCBGYWxzZSkKICAgICAgICBzZWxmLmFmayA9IGRhdGEuZ2V0KCdzdXBwcmVzcycsIEZhbHNlKQogICAgICAgIHNlbGYubXV0ZSA9IGRhdGEuZ2V0KCdtdXRlJywgRmFsc2UpCiAgICAgICAgc2VsZi5kZWFmID0gZGF0YS5nZXQoJ2RlYWYnLCBGYWxzZSkKICAgICAgICBzZWxmLnN1cHByZXNzID0gZGF0YS5nZXQoJ3N1cHByZXNzJywgRmFsc2UpCiAgICAgICAgc2VsZi5yZXF1ZXN0ZWRfdG9fc3BlYWtfYXQgPSB1dGlscy5wYXJzZV90aW1lKGRhdGEuZ2V0KCdyZXF1ZXN0X3RvX3NwZWFrX3RpbWVzdGFtcCcpKQogICAgICAgIHNlbGYuY2hhbm5lbCA9IGNoYW5uZWwKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgYXR0cnMgPSBbCiAgICAgICAgICAgICgnc2VsZl9tdXRlJywgc2VsZi5zZWxmX211dGUpLAogICAgICAgICAgICAoJ3NlbGZfZGVhZicsIHNlbGYuc2VsZl9kZWFmKSwKICAgICAgICAgICAgKCdzZWxmX3N0cmVhbScsIHNlbGYuc2VsZl9zdHJlYW0pLAogICAgICAgICAgICAoJ3N1cHByZXNzJywgc2VsZi5zdXBwcmVzcyksCiAgICAgICAgICAgICgncmVxdWVzdGVkX3RvX3NwZWFrX2F0Jywgc2VsZi5yZXF1ZXN0ZWRfdG9fc3BlYWtfYXQpLAogICAgICAgICAgICAoJ2NoYW5uZWwnLCBzZWxmLmNoYW5uZWwpCiAgICAgICAgXQogICAgICAgIHJldHVybiAnPCVzICVzPicgJSAoc2VsZi5fX2NsYXNzX18uX19uYW1lX18sICcgJy5qb2luKCclcz0lcicgJSB0IGZvciB0IGluIGF0dHJzKSkKCmRlZiBmbGF0dGVuX3VzZXIoY2xzKToKICAgIGZvciBhdHRyLCB2YWx1ZSBpbiBpdGVydG9vbHMuY2hhaW4oQmFzZVVzZXIuX19kaWN0X18uaXRlbXMoKSwgVXNlci5fX2RpY3RfXy5pdGVtcygpKToKICAgICAgICAjIGlnbm9yZSBwcml2YXRlL3NwZWNpYWwgbWV0aG9kcwogICAgICAgIGlmIGF0dHIuc3RhcnRzd2l0aCgnXycpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAjIGRvbid0IG92ZXJyaWRlIHdoYXQgd2UgYWxyZWFkeSBoYXZlCiAgICAgICAgaWYgYXR0ciBpbiBjbHMuX19kaWN0X186CiAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICMgaWYgaXQncyBhIHNsb3R0ZWQgYXR0cmlidXRlIG9yIGEgcHJvcGVydHksIHJlZGlyZWN0IGl0CiAgICAgICAgIyBzbG90dGVkIG1lbWJlcnMgYXJlIGltcGxlbWVudGVkIGFzIG1lbWJlcl9kZXNjcmlwdG9ycyBpbiBUeXBlLl9fZGljdF9fCiAgICAgICAgaWYgbm90IGhhc2F0dHIodmFsdWUsICdfX2Fubm90YXRpb25zX18nKToKICAgICAgICAgICAgZ2V0dGVyID0gYXR0cmdldHRlcignX3VzZXIuJyArIGF0dHIpCiAgICAgICAgICAgIHNldGF0dHIoY2xzLCBhdHRyLCBwcm9wZXJ0eShnZXR0ZXIsIGRvYz0nRXF1aXZhbGVudCB0byA6YXR0cjpgVXNlci4lc2AnICUgYXR0cikpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBUZWNobmljYWxseSwgdGhpcyBjYW4gYWxzbyB1c2UgYXR0cmdldHRlcgogICAgICAgICAgICAjIEhvd2V2ZXIgSSdtIG5vdCBzdXJlIGhvdyBJIGZlZWwgYWJvdXQgImZ1bmN0aW9ucyIgcmV0dXJuaW5nIHByb3BlcnRpZXMKICAgICAgICAgICAgIyBJdCBwcm9iYWJseSBicmVha3Mgc29tZXRoaW5nIGluIFNwaGlueC4KICAgICAgICAgICAgIyBwcm9iYWJseSBhIG1lbWJlciBmdW5jdGlvbiBieSBub3cKICAgICAgICAgICAgZGVmIGdlbmVyYXRlX2Z1bmN0aW9uKHgpOgogICAgICAgICAgICAgICAgIyBXZSB3YW50IHNwaGlueCB0byBwcm9wZXJseSBzaG93IGNvcm91dGluZSBmdW5jdGlvbnMgYXMgY29yb3V0aW5lcwogICAgICAgICAgICAgICAgaWYgaW5zcGVjdC5pc2Nvcm91dGluZWZ1bmN0aW9uKHZhbHVlKToKICAgICAgICAgICAgICAgICAgICBhc3luYyBkZWYgZ2VuZXJhbChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0YXR0cihzZWxmLl91c2VyLCB4KSgqYXJncywgKiprd2FyZ3MpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRlZiBnZW5lcmFsKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRhdHRyKHNlbGYuX3VzZXIsIHgpKCphcmdzLCAqKmt3YXJncykKCiAgICAgICAgICAgICAgICBnZW5lcmFsLl9fbmFtZV9fID0geAogICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYWwKCiAgICAgICAgICAgIGZ1bmMgPSBnZW5lcmF0ZV9mdW5jdGlvbihhdHRyKQogICAgICAgICAgICBmdW5jID0gdXRpbHMuY29weV9kb2ModmFsdWUpKGZ1bmMpCiAgICAgICAgICAgIHNldGF0dHIoY2xzLCBhdHRyLCBmdW5jKQoKICAgIHJldHVybiBjbHMKCl9CYXNlVXNlciA9IGRpc2NvcmQuYWJjLlVzZXIKCkBmbGF0dGVuX3VzZXIKY2xhc3MgTWVtYmVyKGRpc2NvcmQuYWJjLk1lc3NhZ2VhYmxlLCBfQmFzZVVzZXIpOgogICAgIiIiUmVwcmVzZW50cyBhIERpc2NvcmQgbWVtYmVyIHRvIGEgOmNsYXNzOmBHdWlsZGAuCgogICAgVGhpcyBpbXBsZW1lbnRzIGEgbG90IG9mIHRoZSBmdW5jdGlvbmFsaXR5IG9mIDpjbGFzczpgVXNlcmAuCgogICAgLi4gY29udGFpbmVyOjogb3BlcmF0aW9ucwoKICAgICAgICAuLiBkZXNjcmliZTo6IHggPT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byBtZW1iZXJzIGFyZSBlcXVhbC4KICAgICAgICAgICAgTm90ZSB0aGF0IHRoaXMgd29ya3Mgd2l0aCA6Y2xhc3M6YFVzZXJgIGluc3RhbmNlcyB0b28uCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCAhPSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIG1lbWJlcnMgYXJlIG5vdCBlcXVhbC4KICAgICAgICAgICAgTm90ZSB0aGF0IHRoaXMgd29ya3Mgd2l0aCA6Y2xhc3M6YFVzZXJgIGluc3RhbmNlcyB0b28uCgogICAgICAgIC4uIGRlc2NyaWJlOjogaGFzaCh4KQoKICAgICAgICAgICAgUmV0dXJucyB0aGUgbWVtYmVyJ3MgaGFzaC4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiBzdHIoeCkKCiAgICAgICAgICAgIFJldHVybnMgdGhlIG1lbWJlcidzIG5hbWUgd2l0aCB0aGUgZGlzY3JpbWluYXRvci4KCiAgICBBdHRyaWJ1dGVzCiAgICAtLS0tLS0tLS0tCiAgICBqb2luZWRfYXQ6IE9wdGlvbmFsWzpjbGFzczpgZGF0ZXRpbWUuZGF0ZXRpbWVgXQogICAgICAgIEEgZGF0ZXRpbWUgb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBkYXRlIGFuZCB0aW1lIGluIFVUQyB0aGF0IHRoZSBtZW1iZXIgam9pbmVkIHRoZSBndWlsZC4KICAgICAgICBJZiB0aGUgbWVtYmVyIGxlZnQgYW5kIHJlam9pbmVkIHRoZSBndWlsZCwgdGhpcyB3aWxsIGJlIHRoZSBsYXRlc3QgZGF0ZS4gSW4gY2VydGFpbiBjYXNlcywgdGhpcyBjYW4gYmUgYGBOb25lYGAuCiAgICBhY3Rpdml0aWVzOiBUdXBsZVtVbmlvbls6Y2xhc3M6YEJhc2VBY3Rpdml0eWAsIDpjbGFzczpgU3BvdGlmeWBdXQogICAgICAgIFRoZSBhY3Rpdml0aWVzIHRoYXQgdGhlIHVzZXIgaXMgY3VycmVudGx5IGRvaW5nLgoKICAgICAgICAuLiBub3RlOjoKCiAgICAgICAgICAgIER1ZSB0byBhIERpc2NvcmQgQVBJIGxpbWl0YXRpb24sIGEgdXNlcidzIFNwb3RpZnkgYWN0aXZpdHkgbWF5IG5vdCBhcHBlYXIKICAgICAgICAgICAgaWYgdGhleSBhcmUgbGlzdGVuaW5nIHRvIGEgc29uZyB3aXRoIGEgdGl0bGUgbG9uZ2VyCiAgICAgICAgICAgIHRoYW4gMTI4IGNoYXJhY3RlcnMuIFNlZSA6aXNzdWU6YDE3MzhgIGZvciBtb3JlIGluZm9ybWF0aW9uLgoKICAgIGd1aWxkOiA6Y2xhc3M6YEd1aWxkYAogICAgICAgIFRoZSBndWlsZCB0aGF0IHRoZSBtZW1iZXIgYmVsb25ncyB0by4KICAgIG5pY2s6IE9wdGlvbmFsWzpjbGFzczpgc3RyYF0KICAgICAgICBUaGUgZ3VpbGQgc3BlY2lmaWMgbmlja25hbWUgb2YgdGhlIHVzZXIuCiAgICBwZW5kaW5nOiA6Y2xhc3M6YGJvb2xgCiAgICAgICAgV2hldGhlciB0aGUgbWVtYmVyIGlzIHBlbmRpbmcgbWVtYmVyIHZlcmlmaWNhdGlvbi4KCiAgICAgICAgLi4gdmVyc2lvbmFkZGVkOjogMS42CiAgICBwcmVtaXVtX3NpbmNlOiBPcHRpb25hbFs6Y2xhc3M6YGRhdGV0aW1lLmRhdGV0aW1lYF0KICAgICAgICBBIGRhdGV0aW1lIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgZGF0ZSBhbmQgdGltZSBpbiBVVEMgd2hlbiB0aGUgbWVtYmVyIHVzZWQgdGhlaXIKICAgICAgICBOaXRybyBib29zdCBvbiB0aGUgZ3VpbGQsIGlmIGF2YWlsYWJsZS4gVGhpcyBjb3VsZCBiZSBgYE5vbmVgYC4KICAgICIiIgoKICAgIF9fc2xvdHNfXyA9ICgnX3JvbGVzJywgJ2pvaW5lZF9hdCcsICdwcmVtaXVtX3NpbmNlJywgJ19jbGllbnRfc3RhdHVzJywKICAgICAgICAgICAgICAgICAnYWN0aXZpdGllcycsICdndWlsZCcsICdwZW5kaW5nJywgJ25pY2snLCAnX3VzZXInLCAnX3N0YXRlJykKCiAgICBkZWYgX19pbml0X18oc2VsZiwgKiwgZGF0YSwgZ3VpbGQsIHN0YXRlKToKICAgICAgICBzZWxmLl9zdGF0ZSA9IHN0YXRlCiAgICAgICAgc2VsZi5fdXNlciA9IHN0YXRlLnN0b3JlX3VzZXIoZGF0YVsndXNlciddKQogICAgICAgIHNlbGYuZ3VpbGQgPSBndWlsZAogICAgICAgIHNlbGYuam9pbmVkX2F0ID0gdXRpbHMucGFyc2VfdGltZShkYXRhLmdldCgnam9pbmVkX2F0JykpCiAgICAgICAgc2VsZi5wcmVtaXVtX3NpbmNlID0gdXRpbHMucGFyc2VfdGltZShkYXRhLmdldCgncHJlbWl1bV9zaW5jZScpKQogICAgICAgIHNlbGYuX3VwZGF0ZV9yb2xlcyhkYXRhKQogICAgICAgIHNlbGYuX2NsaWVudF9zdGF0dXMgPSB7CiAgICAgICAgICAgIE5vbmU6ICdvZmZsaW5lJwogICAgICAgIH0KICAgICAgICBzZWxmLmFjdGl2aXRpZXMgPSB0dXBsZShtYXAoY3JlYXRlX2FjdGl2aXR5LCBkYXRhLmdldCgnYWN0aXZpdGllcycsIFtdKSkpCiAgICAgICAgc2VsZi5uaWNrID0gZGF0YS5nZXQoJ25pY2snLCBOb25lKQogICAgICAgIHNlbGYucGVuZGluZyA9IGRhdGEuZ2V0KCdwZW5kaW5nJywgRmFsc2UpCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHN0cihzZWxmLl91c2VyKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzxNZW1iZXIgaWQ9ezEuaWR9IG5hbWU9ezEubmFtZSFyfSBkaXNjcmltaW5hdG9yPXsxLmRpc2NyaW1pbmF0b3Ihcn0nIFwKICAgICAgICAgICAgICAgJyBib3Q9ezEuYm90fSBuaWNrPXswLm5pY2shcn0gZ3VpbGQ9ezAuZ3VpbGQhcn0+Jy5mb3JtYXQoc2VsZiwgc2VsZi5fdXNlcikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gaXNpbnN0YW5jZShvdGhlciwgX0Jhc2VVc2VyKSBhbmQgb3RoZXIuaWQgPT0gc2VsZi5pZAoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3Qgc2VsZi5fX2VxX18ob3RoZXIpCgogICAgZGVmIF9faGFzaF9fKHNlbGYpOgogICAgICAgIHJldHVybiBoYXNoKHNlbGYuX3VzZXIpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX2Zyb21fbWVzc2FnZShjbHMsICosIG1lc3NhZ2UsIGRhdGEpOgogICAgICAgIGF1dGhvciA9IG1lc3NhZ2UuYXV0aG9yCiAgICAgICAgZGF0YVsndXNlciddID0gYXV0aG9yLl90b19taW5pbWFsX3VzZXJfanNvbigpCiAgICAgICAgcmV0dXJuIGNscyhkYXRhPWRhdGEsIGd1aWxkPW1lc3NhZ2UuZ3VpbGQsIHN0YXRlPW1lc3NhZ2UuX3N0YXRlKQoKICAgIGRlZiBfdXBkYXRlX2Zyb21fbWVzc2FnZShzZWxmLCBkYXRhKToKICAgICAgICBzZWxmLmpvaW5lZF9hdCA9IHV0aWxzLnBhcnNlX3RpbWUoZGF0YS5nZXQoJ2pvaW5lZF9hdCcpKQogICAgICAgIHNlbGYucHJlbWl1bV9zaW5jZSA9IHV0aWxzLnBhcnNlX3RpbWUoZGF0YS5nZXQoJ3ByZW1pdW1fc2luY2UnKSkKICAgICAgICBzZWxmLl91cGRhdGVfcm9sZXMoZGF0YSkKICAgICAgICBzZWxmLm5pY2sgPSBkYXRhLmdldCgnbmljaycsIE5vbmUpCiAgICAgICAgc2VsZi5wZW5kaW5nID0gZGF0YS5nZXQoJ3BlbmRpbmcnLCBGYWxzZSkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBfdHJ5X3VwZ3JhZGUoY2xzLCAqLCAgZGF0YSwgZ3VpbGQsIHN0YXRlKToKICAgICAgICAjIEEgVXNlciBvYmplY3Qgd2l0aCBhICdtZW1iZXInIGtleQogICAgICAgIHRyeToKICAgICAgICAgICAgbWVtYmVyX2RhdGEgPSBkYXRhLnBvcCgnbWVtYmVyJykKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5zdG9yZV91c2VyKGRhdGEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbWVtYmVyX2RhdGFbJ3VzZXInXSA9IGRhdGEKICAgICAgICAgICAgcmV0dXJuIGNscyhkYXRhPW1lbWJlcl9kYXRhLCBndWlsZD1ndWlsZCwgc3RhdGU9c3RhdGUpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX2Zyb21fcHJlc2VuY2VfdXBkYXRlKGNscywgKiwgZGF0YSwgZ3VpbGQsIHN0YXRlKToKICAgICAgICBjbG9uZSA9IGNscyhkYXRhPWRhdGEsIGd1aWxkPWd1aWxkLCBzdGF0ZT1zdGF0ZSkKICAgICAgICB0b19yZXR1cm4gPSBjbHMoZGF0YT1kYXRhLCBndWlsZD1ndWlsZCwgc3RhdGU9c3RhdGUpCiAgICAgICAgdG9fcmV0dXJuLl9jbGllbnRfc3RhdHVzID0gewogICAgICAgICAgICBzeXMuaW50ZXJuKGtleSk6IHN5cy5pbnRlcm4odmFsdWUpCiAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIGluIGRhdGEuZ2V0KCdjbGllbnRfc3RhdHVzJywge30pLml0ZW1zKCkKICAgICAgICB9CiAgICAgICAgdG9fcmV0dXJuLl9jbGllbnRfc3RhdHVzW05vbmVdID0gc3lzLmludGVybihkYXRhWydzdGF0dXMnXSkKICAgICAgICByZXR1cm4gdG9fcmV0dXJuLCBjbG9uZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9jb3B5KGNscywgbWVtYmVyKToKICAgICAgICBzZWxmID0gY2xzLl9fbmV3X18oY2xzKSAjIHRvIGJ5cGFzcyBfX2luaXRfXwoKICAgICAgICBzZWxmLl9yb2xlcyA9IHV0aWxzLlNub3dmbGFrZUxpc3QobWVtYmVyLl9yb2xlcywgaXNfc29ydGVkPVRydWUpCiAgICAgICAgc2VsZi5qb2luZWRfYXQgPSBtZW1iZXIuam9pbmVkX2F0CiAgICAgICAgc2VsZi5wcmVtaXVtX3NpbmNlID0gbWVtYmVyLnByZW1pdW1fc2luY2UKICAgICAgICBzZWxmLl9jbGllbnRfc3RhdHVzID0gbWVtYmVyLl9jbGllbnRfc3RhdHVzLmNvcHkoKQogICAgICAgIHNlbGYuZ3VpbGQgPSBtZW1iZXIuZ3VpbGQKICAgICAgICBzZWxmLm5pY2sgPSBtZW1iZXIubmljawogICAgICAgIHNlbGYucGVuZGluZyA9IG1lbWJlci5wZW5kaW5nCiAgICAgICAgc2VsZi5hY3Rpdml0aWVzID0gbWVtYmVyLmFjdGl2aXRpZXMKICAgICAgICBzZWxmLl9zdGF0ZSA9IG1lbWJlci5fc3RhdGUKCiAgICAgICAgIyBSZWZlcmVuY2Ugd2lsbCBub3QgYmUgY29waWVkIHVubGVzcyBuZWNlc3NhcnkgYnkgUFJFU0VOQ0VfVVBEQVRFCiAgICAgICAgIyBTZWUgYmVsb3cKICAgICAgICBzZWxmLl91c2VyID0gbWVtYmVyLl91c2VyCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBhc3luYyBkZWYgX2dldF9jaGFubmVsKHNlbGYpOgogICAgICAgIGNoID0gYXdhaXQgc2VsZi5jcmVhdGVfZG0oKQogICAgICAgIHJldHVybiBjaAoKICAgIGRlZiBfdXBkYXRlX3JvbGVzKHNlbGYsIGRhdGEpOgogICAgICAgIHNlbGYuX3JvbGVzID0gdXRpbHMuU25vd2ZsYWtlTGlzdChtYXAoaW50LCBkYXRhWydyb2xlcyddKSkKCiAgICBkZWYgX3VwZGF0ZShzZWxmLCBkYXRhKToKICAgICAgICAjIHRoZSBuaWNrbmFtZSBjaGFuZ2UgaXMgb3B0aW9uYWwsCiAgICAgICAgIyBpZiBpdCBpc24ndCBpbiB0aGUgcGF5bG9hZCB0aGVuIGl0IGRpZG4ndCBjaGFuZ2UKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubmljayA9IGRhdGFbJ25pY2snXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYucGVuZGluZyA9IGRhdGFbJ3BlbmRpbmcnXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBzZWxmLnByZW1pdW1fc2luY2UgPSB1dGlscy5wYXJzZV90aW1lKGRhdGEuZ2V0KCdwcmVtaXVtX3NpbmNlJykpCiAgICAgICAgc2VsZi5fdXBkYXRlX3JvbGVzKGRhdGEpCgogICAgZGVmIF9wcmVzZW5jZV91cGRhdGUoc2VsZiwgZGF0YSwgdXNlcik6CiAgICAgICAgc2VsZi5hY3Rpdml0aWVzID0gdHVwbGUobWFwKGNyZWF0ZV9hY3Rpdml0eSwgZGF0YS5nZXQoJ2FjdGl2aXRpZXMnLCBbXSkpKQogICAgICAgIHNlbGYuX2NsaWVudF9zdGF0dXMgPSB7CiAgICAgICAgICAgIHN5cy5pbnRlcm4oa2V5KTogc3lzLmludGVybih2YWx1ZSkKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gZGF0YS5nZXQoJ2NsaWVudF9zdGF0dXMnLCB7fSkuaXRlbXMoKQogICAgICAgIH0KICAgICAgICBzZWxmLl9jbGllbnRfc3RhdHVzW05vbmVdID0gc3lzLmludGVybihkYXRhWydzdGF0dXMnXSkKCiAgICAgICAgaWYgbGVuKHVzZXIpID4gMToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3VwZGF0ZV9pbm5lcl91c2VyKHVzZXIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF91cGRhdGVfaW5uZXJfdXNlcihzZWxmLCB1c2VyKToKICAgICAgICB1ID0gc2VsZi5fdXNlcgogICAgICAgIG9yaWdpbmFsID0gKHUubmFtZSwgdS5hdmF0YXIsIHUuZGlzY3JpbWluYXRvciwgdS5fcHVibGljX2ZsYWdzKQogICAgICAgICMgVGhlc2Uga2V5cyBzZWVtIHRvIGFsd2F5cyBiZSBhdmFpbGFibGUKICAgICAgICBtb2RpZmllZCA9ICh1c2VyWyd1c2VybmFtZSddLCB1c2VyWydhdmF0YXInXSwgdXNlclsnZGlzY3JpbWluYXRvciddLCB1c2VyLmdldCgncHVibGljX2ZsYWdzJywgMCkpCiAgICAgICAgaWYgb3JpZ2luYWwgIT0gbW9kaWZpZWQ6CiAgICAgICAgICAgIHRvX3JldHVybiA9IFVzZXIuX2NvcHkoc2VsZi5fdXNlcikKICAgICAgICAgICAgdS5uYW1lLCB1LmF2YXRhciwgdS5kaXNjcmltaW5hdG9yLCB1Ll9wdWJsaWNfZmxhZ3MgPSBtb2RpZmllZAogICAgICAgICAgICAjIFNpZ25hbCB0byBkaXNwYXRjaCBvbl91c2VyX3VwZGF0ZQogICAgICAgICAgICByZXR1cm4gdG9fcmV0dXJuLCB1CgogICAgQHByb3BlcnR5CiAgICBkZWYgc3RhdHVzKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgU3RhdHVzYDogVGhlIG1lbWJlcidzIG92ZXJhbGwgc3RhdHVzLiBJZiB0aGUgdmFsdWUgaXMgdW5rbm93biwgdGhlbiBpdCB3aWxsIGJlIGEgOmNsYXNzOmBzdHJgIGluc3RlYWQuIiIiCiAgICAgICAgcmV0dXJuIHRyeV9lbnVtKFN0YXR1cywgc2VsZi5fY2xpZW50X3N0YXR1c1tOb25lXSkKCiAgICBAcHJvcGVydHkKICAgIGRlZiByYXdfc3RhdHVzKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgc3RyYDogVGhlIG1lbWJlcidzIG92ZXJhbGwgc3RhdHVzIGFzIGEgc3RyaW5nIHZhbHVlLgoKICAgICAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjUKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5fY2xpZW50X3N0YXR1c1tOb25lXQoKICAgIEBzdGF0dXMuc2V0dGVyCiAgICBkZWYgc3RhdHVzKHNlbGYsIHZhbHVlKToKICAgICAgICAjIGludGVybmFsIHVzZSBvbmx5CiAgICAgICAgc2VsZi5fY2xpZW50X3N0YXR1c1tOb25lXSA9IHN0cih2YWx1ZSkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBtb2JpbGVfc3RhdHVzKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgU3RhdHVzYDogVGhlIG1lbWJlcidzIHN0YXR1cyBvbiBhIG1vYmlsZSBkZXZpY2UsIGlmIGFwcGxpY2FibGUuIiIiCiAgICAgICAgcmV0dXJuIHRyeV9lbnVtKFN0YXR1cywgc2VsZi5fY2xpZW50X3N0YXR1cy5nZXQoJ21vYmlsZScsICdvZmZsaW5lJykpCgogICAgQHByb3BlcnR5CiAgICBkZWYgZGVza3RvcF9zdGF0dXMoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBTdGF0dXNgOiBUaGUgbWVtYmVyJ3Mgc3RhdHVzIG9uIHRoZSBkZXNrdG9wIGNsaWVudCwgaWYgYXBwbGljYWJsZS4iIiIKICAgICAgICByZXR1cm4gdHJ5X2VudW0oU3RhdHVzLCBzZWxmLl9jbGllbnRfc3RhdHVzLmdldCgnZGVza3RvcCcsICdvZmZsaW5lJykpCgogICAgQHByb3BlcnR5CiAgICBkZWYgd2ViX3N0YXR1cyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YFN0YXR1c2A6IFRoZSBtZW1iZXIncyBzdGF0dXMgb24gdGhlIHdlYiBjbGllbnQsIGlmIGFwcGxpY2FibGUuIiIiCiAgICAgICAgcmV0dXJuIHRyeV9lbnVtKFN0YXR1cywgc2VsZi5fY2xpZW50X3N0YXR1cy5nZXQoJ3dlYicsICdvZmZsaW5lJykpCgogICAgZGVmIGlzX29uX21vYmlsZShzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBBIGhlbHBlciBmdW5jdGlvbiB0aGF0IGRldGVybWluZXMgaWYgYSBtZW1iZXIgaXMgYWN0aXZlIG9uIGEgbW9iaWxlIGRldmljZS4iIiIKICAgICAgICByZXR1cm4gJ21vYmlsZScgaW4gc2VsZi5fY2xpZW50X3N0YXR1cwoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGNvbG91cihzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YENvbG91cmA6IEEgcHJvcGVydHkgdGhhdCByZXR1cm5zIGEgY29sb3VyIGRlbm90aW5nIHRoZSByZW5kZXJlZCBjb2xvdXIKICAgICAgICBmb3IgdGhlIG1lbWJlci4gSWYgdGhlIGRlZmF1bHQgY29sb3VyIGlzIHRoZSBvbmUgcmVuZGVyZWQgdGhlbiBhbiBpbnN0YW5jZQogICAgICAgIG9mIDptZXRoOmBDb2xvdXIuZGVmYXVsdGAgaXMgcmV0dXJuZWQuCgogICAgICAgIFRoZXJlIGlzIGFuIGFsaWFzIGZvciB0aGlzIG5hbWVkIDphdHRyOmBjb2xvcmAuCiAgICAgICAgIiIiCgogICAgICAgIHJvbGVzID0gc2VsZi5yb2xlc1sxOl0gIyByZW1vdmUgQGV2ZXJ5b25lCgogICAgICAgICMgaGlnaGVzdCBvcmRlciBvZiB0aGUgY29sb3VyIGlzIHRoZSBvbmUgdGhhdCBnZXRzIHJlbmRlcmVkLgogICAgICAgICMgaWYgdGhlIGhpZ2hlc3QgaXMgdGhlIGRlZmF1bHQgY29sb3VyIHRoZW4gdGhlIG5leHQgb25lIHdpdGggYSBjb2xvdXIKICAgICAgICAjIGlzIGNob3NlbiBpbnN0ZWFkCiAgICAgICAgZm9yIHJvbGUgaW4gcmV2ZXJzZWQocm9sZXMpOgogICAgICAgICAgICBpZiByb2xlLmNvbG91ci52YWx1ZToKICAgICAgICAgICAgICAgIHJldHVybiByb2xlLmNvbG91cgogICAgICAgIHJldHVybiBDb2xvdXIuZGVmYXVsdCgpCgogICAgQHByb3BlcnR5CiAgICBkZWYgY29sb3Ioc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBDb2xvdXJgOiBBIHByb3BlcnR5IHRoYXQgcmV0dXJucyBhIGNvbG9yIGRlbm90aW5nIHRoZSByZW5kZXJlZCBjb2xvciBmb3IKICAgICAgICB0aGUgbWVtYmVyLiBJZiB0aGUgZGVmYXVsdCBjb2xvciBpcyB0aGUgb25lIHJlbmRlcmVkIHRoZW4gYW4gaW5zdGFuY2Ugb2YgOm1ldGg6YENvbG91ci5kZWZhdWx0YAogICAgICAgIGlzIHJldHVybmVkLgoKICAgICAgICBUaGVyZSBpcyBhbiBhbGlhcyBmb3IgdGhpcyBuYW1lZCA6YXR0cjpgY29sb3VyYC4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5jb2xvdXIKCiAgICBAcHJvcGVydHkKICAgIGRlZiByb2xlcyhzZWxmKToKICAgICAgICAiIiJMaXN0WzpjbGFzczpgUm9sZWBdOiBBIDpjbGFzczpgbGlzdGAgb2YgOmNsYXNzOmBSb2xlYCB0aGF0IHRoZSBtZW1iZXIgYmVsb25ncyB0by4gTm90ZQogICAgICAgIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhpcyBsaXN0IGlzIGFsd2F5cyB0aGUgZGVmYXVsdCAnQGV2ZXJ5b25lJwogICAgICAgIHJvbGUuCgogICAgICAgIFRoZXNlIHJvbGVzIGFyZSBzb3J0ZWQgYnkgdGhlaXIgcG9zaXRpb24gaW4gdGhlIHJvbGUgaGllcmFyY2h5LgogICAgICAgICIiIgogICAgICAgIHJlc3VsdCA9IFtdCiAgICAgICAgZyA9IHNlbGYuZ3VpbGQKICAgICAgICBmb3Igcm9sZV9pZCBpbiBzZWxmLl9yb2xlczoKICAgICAgICAgICAgcm9sZSA9IGcuZ2V0X3JvbGUocm9sZV9pZCkKICAgICAgICAgICAgaWYgcm9sZToKICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQocm9sZSkKICAgICAgICByZXN1bHQuYXBwZW5kKGcuZGVmYXVsdF9yb2xlKQogICAgICAgIHJlc3VsdC5zb3J0KCkKICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgQHByb3BlcnR5CiAgICBkZWYgbWVudGlvbihzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YHN0cmA6IFJldHVybnMgYSBzdHJpbmcgdGhhdCBhbGxvd3MgeW91IHRvIG1lbnRpb24gdGhlIG1lbWJlci4iIiIKICAgICAgICBpZiBzZWxmLm5pY2s6CiAgICAgICAgICAgIHJldHVybiAnPEAhJXM+JyAlIHNlbGYuaWQKICAgICAgICByZXR1cm4gJzxAJXM+JyAlIHNlbGYuaWQKCiAgICBAcHJvcGVydHkKICAgIGRlZiBkaXNwbGF5X25hbWUoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBzdHJgOiBSZXR1cm5zIHRoZSB1c2VyJ3MgZGlzcGxheSBuYW1lLgoKICAgICAgICBGb3IgcmVndWxhciB1c2VycyB0aGlzIGlzIGp1c3QgdGhlaXIgdXNlcm5hbWUsIGJ1dAogICAgICAgIGlmIHRoZXkgaGF2ZSBhIGd1aWxkIHNwZWNpZmljIG5pY2tuYW1lIHRoZW4gdGhhdAogICAgICAgIGlzIHJldHVybmVkIGluc3RlYWQuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYubmljayBvciBzZWxmLm5hbWUKCiAgICBAcHJvcGVydHkKICAgIGRlZiBhY3Rpdml0eShzZWxmKToKICAgICAgICAiIiJVbmlvbls6Y2xhc3M6YEJhc2VBY3Rpdml0eWAsIDpjbGFzczpgU3BvdGlmeWBdOiBSZXR1cm5zIHRoZSBwcmltYXJ5CiAgICAgICAgYWN0aXZpdHkgdGhlIHVzZXIgaXMgY3VycmVudGx5IGRvaW5nLiBDb3VsZCBiZSBgYE5vbmVgYCBpZiBubyBhY3Rpdml0eSBpcyBiZWluZyBkb25lLgoKICAgICAgICAuLiBub3RlOjoKCiAgICAgICAgICAgIER1ZSB0byBhIERpc2NvcmQgQVBJIGxpbWl0YXRpb24sIHRoaXMgbWF5IGJlIGBgTm9uZWBgIGlmIAogICAgICAgICAgICB0aGUgdXNlciBpcyBsaXN0ZW5pbmcgdG8gYSBzb25nIG9uIFNwb3RpZnkgd2l0aCBhIHRpdGxlIGxvbmdlcgogICAgICAgICAgICB0aGFuIDEyOCBjaGFyYWN0ZXJzLiBTZWUgOmlzc3VlOmAxNzM4YCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KCiAgICAgICAgLi4gbm90ZTo6CgogICAgICAgICAgICBBIHVzZXIgbWF5IGhhdmUgbXVsdGlwbGUgYWN0aXZpdGllcywgdGhlc2UgY2FuIGJlIGFjY2Vzc2VkIHVuZGVyIDphdHRyOmBhY3Rpdml0aWVzYC4KICAgICAgICAiIiIKICAgICAgICBpZiBzZWxmLmFjdGl2aXRpZXM6CiAgICAgICAgICAgIHJldHVybiBzZWxmLmFjdGl2aXRpZXNbMF0KCiAgICBkZWYgbWVudGlvbmVkX2luKHNlbGYsIG1lc3NhZ2UpOgogICAgICAgICIiIkNoZWNrcyBpZiB0aGUgbWVtYmVyIGlzIG1lbnRpb25lZCBpbiB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UuCgogICAgICAgIFBhcmFtZXRlcnMKICAgICAgICAtLS0tLS0tLS0tLQogICAgICAgIG1lc3NhZ2U6IDpjbGFzczpgTWVzc2FnZWAKICAgICAgICAgICAgVGhlIG1lc3NhZ2UgdG8gY2hlY2sgaWYgeW91J3JlIG1lbnRpb25lZCBpbi4KCiAgICAgICAgUmV0dXJucwogICAgICAgIC0tLS0tLS0KICAgICAgICA6Y2xhc3M6YGJvb2xgCiAgICAgICAgICAgIEluZGljYXRlcyBpZiB0aGUgbWVtYmVyIGlzIG1lbnRpb25lZCBpbiB0aGUgbWVzc2FnZS4KICAgICAgICAiIiIKICAgICAgICBpZiBtZXNzYWdlLmd1aWxkIGlzIE5vbmUgb3IgbWVzc2FnZS5ndWlsZC5pZCAhPSBzZWxmLmd1aWxkLmlkOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgaWYgc2VsZi5fdXNlci5tZW50aW9uZWRfaW4obWVzc2FnZSk6CiAgICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBhbnkoc2VsZi5fcm9sZXMuaGFzKHJvbGUuaWQpIGZvciByb2xlIGluIG1lc3NhZ2Uucm9sZV9tZW50aW9ucykKCiAgICBkZWYgcGVybWlzc2lvbnNfaW4oc2VsZiwgY2hhbm5lbCk6CiAgICAgICAgIiIiQW4gYWxpYXMgZm9yIDptZXRoOmBhYmMuR3VpbGRDaGFubmVsLnBlcm1pc3Npb25zX2ZvcmAuCgogICAgICAgIEJhc2ljYWxseSBlcXVpdmFsZW50IHRvOgoKICAgICAgICAuLiBjb2RlLWJsb2NrOjogcHl0aG9uMwoKICAgICAgICAgICAgY2hhbm5lbC5wZXJtaXNzaW9uc19mb3Ioc2VsZikKCiAgICAgICAgUGFyYW1ldGVycwogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgY2hhbm5lbDogOmNsYXNzOmBhYmMuR3VpbGRDaGFubmVsYAogICAgICAgICAgICBUaGUgY2hhbm5lbCB0byBjaGVjayB5b3VyIHBlcm1pc3Npb25zIGZvci4KCiAgICAgICAgUmV0dXJucwogICAgICAgIC0tLS0tLS0KICAgICAgICA6Y2xhc3M6YFBlcm1pc3Npb25zYAogICAgICAgICAgICBUaGUgcmVzb2x2ZWQgcGVybWlzc2lvbnMgZm9yIHRoZSBtZW1iZXIuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGNoYW5uZWwucGVybWlzc2lvbnNfZm9yKHNlbGYpCgogICAgQHByb3BlcnR5CiAgICBkZWYgdG9wX3JvbGUoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBSb2xlYDogUmV0dXJucyB0aGUgbWVtYmVyJ3MgaGlnaGVzdCByb2xlLgoKICAgICAgICBUaGlzIGlzIHVzZWZ1bCBmb3IgZmlndXJpbmcgd2hlcmUgYSBtZW1iZXIgc3RhbmRzIGluIHRoZSByb2xlCiAgICAgICAgaGllcmFyY2h5IGNoYWluLgogICAgICAgICIiIgogICAgICAgIGd1aWxkID0gc2VsZi5ndWlsZAogICAgICAgIGlmIGxlbihzZWxmLl9yb2xlcykgPT0gMDoKICAgICAgICAgICAgcmV0dXJuIGd1aWxkLmRlZmF1bHRfcm9sZQoKICAgICAgICByZXR1cm4gbWF4KGd1aWxkLmdldF9yb2xlKHJpZCkgb3IgZ3VpbGQuZGVmYXVsdF9yb2xlIGZvciByaWQgaW4gc2VsZi5fcm9sZXMpCgogICAgQHByb3BlcnR5CiAgICBkZWYgZ3VpbGRfcGVybWlzc2lvbnMoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBQZXJtaXNzaW9uc2A6IFJldHVybnMgdGhlIG1lbWJlcidzIGd1aWxkIHBlcm1pc3Npb25zLgoKICAgICAgICBUaGlzIG9ubHkgdGFrZXMgaW50byBjb25zaWRlcmF0aW9uIHRoZSBndWlsZCBwZXJtaXNzaW9ucwogICAgICAgIGFuZCBub3QgbW9zdCBvZiB0aGUgaW1wbGllZCBwZXJtaXNzaW9ucyBvciBhbnkgb2YgdGhlCiAgICAgICAgY2hhbm5lbCBwZXJtaXNzaW9uIG92ZXJ3cml0ZXMuIEZvciAxMDAlIGFjY3VyYXRlIHBlcm1pc3Npb24KICAgICAgICBjYWxjdWxhdGlvbiwgcGxlYXNlIHVzZSBlaXRoZXIgOm1ldGg6YHBlcm1pc3Npb25zX2luYCBvcgogICAgICAgIDptZXRoOmBhYmMuR3VpbGRDaGFubmVsLnBlcm1pc3Npb25zX2ZvcmAuCgogICAgICAgIFRoaXMgZG9lcyB0YWtlIGludG8gY29uc2lkZXJhdGlvbiBndWlsZCBvd25lcnNoaXAgYW5kIHRoZQogICAgICAgIGFkbWluaXN0cmF0b3IgaW1wbGljYXRpb24uCiAgICAgICAgIiIiCgogICAgICAgIGlmIHNlbGYuZ3VpbGQub3duZXJfaWQgPT0gc2VsZi5pZDoKICAgICAgICAgICAgcmV0dXJuIFBlcm1pc3Npb25zLmFsbCgpCgogICAgICAgIGJhc2UgPSBQZXJtaXNzaW9ucy5ub25lKCkKICAgICAgICBmb3IgciBpbiBzZWxmLnJvbGVzOgogICAgICAgICAgICBiYXNlLnZhbHVlIHw9IHIucGVybWlzc2lvbnMudmFsdWUKCiAgICAgICAgaWYgYmFzZS5hZG1pbmlzdHJhdG9yOgogICAgICAgICAgICByZXR1cm4gUGVybWlzc2lvbnMuYWxsKCkKCiAgICAgICAgcmV0dXJuIGJhc2UKCiAgICBAcHJvcGVydHkKICAgIGRlZiB2b2ljZShzZWxmKToKICAgICAgICAiIiJPcHRpb25hbFs6Y2xhc3M6YFZvaWNlU3RhdGVgXTogUmV0dXJucyB0aGUgbWVtYmVyJ3MgY3VycmVudCB2b2ljZSBzdGF0ZS4iIiIKICAgICAgICByZXR1cm4gc2VsZi5ndWlsZC5fdm9pY2Vfc3RhdGVfZm9yKHNlbGYuX3VzZXIuaWQpCgogICAgYXN5bmMgZGVmIGJhbihzZWxmLCAqKmt3YXJncyk6CiAgICAgICAgIiIifGNvcm98CgogICAgICAgIEJhbnMgdGhpcyBtZW1iZXIuIEVxdWl2YWxlbnQgdG8gOm1ldGg6YEd1aWxkLmJhbmAuCiAgICAgICAgIiIiCiAgICAgICAgYXdhaXQgc2VsZi5ndWlsZC5iYW4oc2VsZiwgKiprd2FyZ3MpCgogICAgYXN5bmMgZGVmIHVuYmFuKHNlbGYsICosIHJlYXNvbj1Ob25lKToKICAgICAgICAiIiJ8Y29yb3wKCiAgICAgICAgVW5iYW5zIHRoaXMgbWVtYmVyLiBFcXVpdmFsZW50IHRvIDptZXRoOmBHdWlsZC51bmJhbmAuCiAgICAgICAgIiIiCiAgICAgICAgYXdhaXQgc2VsZi5ndWlsZC51bmJhbihzZWxmLCByZWFzb249cmVhc29uKQoKICAgIGFzeW5jIGRlZiBraWNrKHNlbGYsICosIHJlYXNvbj1Ob25lKToKICAgICAgICAiIiJ8Y29yb3wKCiAgICAgICAgS2lja3MgdGhpcyBtZW1iZXIuIEVxdWl2YWxlbnQgdG8gOm1ldGg6YEd1aWxkLmtpY2tgLgogICAgICAgICIiIgogICAgICAgIGF3YWl0IHNlbGYuZ3VpbGQua2ljayhzZWxmLCByZWFzb249cmVhc29uKQoKICAgIGFzeW5jIGRlZiBlZGl0KHNlbGYsICosIHJlYXNvbj1Ob25lLCAqKmZpZWxkcyk6CiAgICAgICAgIiIifGNvcm98CgogICAgICAgIEVkaXRzIHRoZSBtZW1iZXIncyBkYXRhLgoKICAgICAgICBEZXBlbmRpbmcgb24gdGhlIHBhcmFtZXRlciBwYXNzZWQsIHRoaXMgcmVxdWlyZXMgZGlmZmVyZW50IHBlcm1pc3Npb25zIGxpc3RlZCBiZWxvdzoKCiAgICAgICAgKy0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKICAgICAgICB8ICAgUGFyYW1ldGVyICAgfCAgICAgICAgICAgICAgUGVybWlzc2lvbiAgICAgICAgICAgICAgfAogICAgICAgICstLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rCiAgICAgICAgfCBuaWNrICAgICAgICAgIHwgOmF0dHI6YFBlcm1pc3Npb25zLm1hbmFnZV9uaWNrbmFtZXNgIHwKICAgICAgICArLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgICAgIHwgbXV0ZSAgICAgICAgICB8IDphdHRyOmBQZXJtaXNzaW9ucy5tdXRlX21lbWJlcnNgICAgICB8CiAgICAgICAgKy0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKICAgICAgICB8IGRlYWZlbiAgICAgICAgfCA6YXR0cjpgUGVybWlzc2lvbnMuZGVhZmVuX21lbWJlcnNgICAgfAogICAgICAgICstLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rCiAgICAgICAgfCByb2xlcyAgICAgICAgIHwgOmF0dHI6YFBlcm1pc3Npb25zLm1hbmFnZV9yb2xlc2AgICAgIHwKICAgICAgICArLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgICAgIHwgdm9pY2VfY2hhbm5lbCB8IDphdHRyOmBQZXJtaXNzaW9ucy5tb3ZlX21lbWJlcnNgICAgICB8CiAgICAgICAgKy0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKCiAgICAgICAgQWxsIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLgoKICAgICAgICAuLiB2ZXJzaW9uY2hhbmdlZDo6IDEuMQogICAgICAgICAgICBDYW4gbm93IHBhc3MgYGBOb25lYGAgdG8gYGB2b2ljZV9jaGFubmVsYGAgdG8ga2ljayBhIG1lbWJlciBmcm9tIHZvaWNlLgoKICAgICAgICBQYXJhbWV0ZXJzCiAgICAgICAgLS0tLS0tLS0tLS0KICAgICAgICBuaWNrOiBPcHRpb25hbFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgICAgIFRoZSBtZW1iZXIncyBuZXcgbmlja25hbWUuIFVzZSBgYE5vbmVgYCB0byByZW1vdmUgdGhlIG5pY2tuYW1lLgogICAgICAgIG11dGU6IDpjbGFzczpgYm9vbGAKICAgICAgICAgICAgSW5kaWNhdGVzIGlmIHRoZSBtZW1iZXIgc2hvdWxkIGJlIGd1aWxkIG11dGVkIG9yIHVuLW11dGVkLgogICAgICAgIGRlYWZlbjogOmNsYXNzOmBib29sYAogICAgICAgICAgICBJbmRpY2F0ZXMgaWYgdGhlIG1lbWJlciBzaG91bGQgYmUgZ3VpbGQgZGVhZmVuZWQgb3IgdW4tZGVhZmVuZWQuCiAgICAgICAgc3VwcHJlc3M6IDpjbGFzczpgYm9vbGAKICAgICAgICAgICAgSW5kaWNhdGVzIGlmIHRoZSBtZW1iZXIgc2hvdWxkIGJlIHN1cHByZXNzZWQgaW4gc3RhZ2UgY2hhbm5lbHMuCgogICAgICAgICAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjcKCiAgICAgICAgcm9sZXM6IE9wdGlvbmFsW0xpc3RbOmNsYXNzOmBSb2xlYF1dCiAgICAgICAgICAgIFRoZSBtZW1iZXIncyBuZXcgbGlzdCBvZiByb2xlcy4gVGhpcyAqcmVwbGFjZXMqIHRoZSByb2xlcy4KICAgICAgICB2b2ljZV9jaGFubmVsOiBPcHRpb25hbFs6Y2xhc3M6YFZvaWNlQ2hhbm5lbGBdCiAgICAgICAgICAgIFRoZSB2b2ljZSBjaGFubmVsIHRvIG1vdmUgdGhlIG1lbWJlciB0by4KICAgICAgICAgICAgUGFzcyBgYE5vbmVgYCB0byBraWNrIHRoZW0gZnJvbSB2b2ljZS4KICAgICAgICByZWFzb246IE9wdGlvbmFsWzpjbGFzczpgc3RyYF0KICAgICAgICAgICAgVGhlIHJlYXNvbiBmb3IgZWRpdGluZyB0aGlzIG1lbWJlci4gU2hvd3MgdXAgb24gdGhlIGF1ZGl0IGxvZy4KCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tLQogICAgICAgIEZvcmJpZGRlbgogICAgICAgICAgICBZb3UgZG8gbm90IGhhdmUgdGhlIHByb3BlciBwZXJtaXNzaW9ucyB0byB0aGUgYWN0aW9uIHJlcXVlc3RlZC4KICAgICAgICBIVFRQRXhjZXB0aW9uCiAgICAgICAgICAgIFRoZSBvcGVyYXRpb24gZmFpbGVkLgogICAgICAgICIiIgogICAgICAgIGh0dHAgPSBzZWxmLl9zdGF0ZS5odHRwCiAgICAgICAgZ3VpbGRfaWQgPSBzZWxmLmd1aWxkLmlkCiAgICAgICAgbWUgPSBzZWxmLl9zdGF0ZS5zZWxmX2lkID09IHNlbGYuaWQKICAgICAgICBwYXlsb2FkID0ge30KCiAgICAgICAgdHJ5OgogICAgICAgICAgICBuaWNrID0gZmllbGRzWyduaWNrJ10KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICMgbmljayBub3QgcHJlc2VudCBzby4uLgogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbmljayA9IG5pY2sgb3IgJycKICAgICAgICAgICAgaWYgbWU6CiAgICAgICAgICAgICAgICBhd2FpdCBodHRwLmNoYW5nZV9teV9uaWNrbmFtZShndWlsZF9pZCwgbmljaywgcmVhc29uPXJlYXNvbikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHBheWxvYWRbJ25pY2snXSA9IG5pY2sKCiAgICAgICAgZGVhZmVuID0gZmllbGRzLmdldCgnZGVhZmVuJykKICAgICAgICBpZiBkZWFmZW4gaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHBheWxvYWRbJ2RlYWYnXSA9IGRlYWZlbgoKICAgICAgICBtdXRlID0gZmllbGRzLmdldCgnbXV0ZScpCiAgICAgICAgaWYgbXV0ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcGF5bG9hZFsnbXV0ZSddID0gbXV0ZQoKICAgICAgICBzdXBwcmVzcyA9IGZpZWxkcy5nZXQoJ3N1cHByZXNzJykKICAgICAgICBpZiBzdXBwcmVzcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgdm9pY2Vfc3RhdGVfcGF5bG9hZCA9IHsKICAgICAgICAgICAgICAgICdjaGFubmVsX2lkJzogc2VsZi52b2ljZS5jaGFubmVsLmlkLAogICAgICAgICAgICAgICAgJ3N1cHByZXNzJzogc3VwcHJlc3MsCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIHN1cHByZXNzIG9yIHNlbGYuYm90OgogICAgICAgICAgICAgICAgdm9pY2Vfc3RhdGVfcGF5bG9hZFsncmVxdWVzdF90b19zcGVha190aW1lc3RhbXAnXSA9IE5vbmUKCiAgICAgICAgICAgIGlmIG1lOgogICAgICAgICAgICAgICAgYXdhaXQgaHR0cC5lZGl0X215X3ZvaWNlX3N0YXRlKGd1aWxkX2lkLCB2b2ljZV9zdGF0ZV9wYXlsb2FkKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgbm90IHN1cHByZXNzOgogICAgICAgICAgICAgICAgICAgIHZvaWNlX3N0YXRlX3BheWxvYWRbJ3JlcXVlc3RfdG9fc3BlYWtfdGltZXN0YW1wJ10gPSBkYXRldGltZS5kYXRldGltZS51dGNub3coKS5pc29mb3JtYXQoKQogICAgICAgICAgICAgICAgYXdhaXQgaHR0cC5lZGl0X3ZvaWNlX3N0YXRlKGd1aWxkX2lkLCBzZWxmLmlkLCB2b2ljZV9zdGF0ZV9wYXlsb2FkKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZjID0gZmllbGRzWyd2b2ljZV9jaGFubmVsJ10KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICBwYXlsb2FkWydjaGFubmVsX2lkJ10gPSB2YyBhbmQgdmMuaWQKCiAgICAgICAgdHJ5OgogICAgICAgICAgICByb2xlcyA9IGZpZWxkc1sncm9sZXMnXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHBheWxvYWRbJ3JvbGVzJ10gPSB0dXBsZShyLmlkIGZvciByIGluIHJvbGVzKQoKICAgICAgICBpZiBwYXlsb2FkOgogICAgICAgICAgICBhd2FpdCBodHRwLmVkaXRfbWVtYmVyKGd1aWxkX2lkLCBzZWxmLmlkLCByZWFzb249cmVhc29uLCAqKnBheWxvYWQpCgogICAgICAgICMgVE9ETzogd2FpdCBmb3IgV1MgZXZlbnQgZm9yIG1vZGlmeS1pbi1wbGFjZSBiZWhhdmlvdXIKCiAgICBhc3luYyBkZWYgcmVxdWVzdF90b19zcGVhayhzZWxmKToKICAgICAgICAiIiJ8Y29yb3wKCiAgICAgICAgUmVxdWVzdCB0byBzcGVhayBpbiB0aGUgY29ubmVjdGVkIGNoYW5uZWwuCgogICAgICAgIE9ubHkgYXBwbGllcyB0byBzdGFnZSBjaGFubmVscy4KCiAgICAgICAgLi4gbm90ZTo6CgogICAgICAgICAgICBSZXF1ZXN0aW5nIG1lbWJlcnMgdGhhdCBhcmUgbm90IHRoZSBjbGllbnQgaXMgZXF1aXZhbGVudAogICAgICAgICAgICB0byA6YXR0cjpgLmVkaXRgIHByb3ZpZGluZyBgYHN1cHByZXNzYGAgYXMgYGBGYWxzZWBgLgoKICAgICAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjcKCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tLQogICAgICAgIEZvcmJpZGRlbgogICAgICAgICAgICBZb3UgZG8gbm90IGhhdmUgdGhlIHByb3BlciBwZXJtaXNzaW9ucyB0byB0aGUgYWN0aW9uIHJlcXVlc3RlZC4KICAgICAgICBIVFRQRXhjZXB0aW9uCiAgICAgICAgICAgIFRoZSBvcGVyYXRpb24gZmFpbGVkLgogICAgICAgICIiIgogICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICdjaGFubmVsX2lkJzogc2VsZi52b2ljZS5jaGFubmVsLmlkLAogICAgICAgICAgICAncmVxdWVzdF90b19zcGVha190aW1lc3RhbXAnOiBkYXRldGltZS5kYXRldGltZS51dGNub3coKS5pc29mb3JtYXQoKSwKICAgICAgICB9CgogICAgICAgIGlmIHNlbGYuX3N0YXRlLnNlbGZfaWQgIT0gc2VsZi5pZDoKICAgICAgICAgICAgcGF5bG9hZFsnc3VwcHJlc3MnXSA9IEZhbHNlCiAgICAgICAgICAgIGF3YWl0IHNlbGYuX3N0YXRlLmh0dHAuZWRpdF92b2ljZV9zdGF0ZShzZWxmLmd1aWxkLmlkLCBzZWxmLmlkLCBwYXlsb2FkKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGF3YWl0IHNlbGYuX3N0YXRlLmh0dHAuZWRpdF9teV92b2ljZV9zdGF0ZShzZWxmLmd1aWxkLmlkLCBwYXlsb2FkKQoKICAgIGFzeW5jIGRlZiBtb3ZlX3RvKHNlbGYsIGNoYW5uZWwsICosIHJlYXNvbj1Ob25lKToKICAgICAgICAiIiJ8Y29yb3wKCiAgICAgICAgTW92ZXMgYSBtZW1iZXIgdG8gYSBuZXcgdm9pY2UgY2hhbm5lbCAodGhleSBtdXN0IGJlIGNvbm5lY3RlZCBmaXJzdCkuCgogICAgICAgIFlvdSBtdXN0IGhhdmUgdGhlIDphdHRyOmB+UGVybWlzc2lvbnMubW92ZV9tZW1iZXJzYCBwZXJtaXNzaW9uIHRvCiAgICAgICAgdXNlIHRoaXMuCgogICAgICAgIFRoaXMgcmFpc2VzIHRoZSBzYW1lIGV4Y2VwdGlvbnMgYXMgOm1ldGg6YGVkaXRgLgoKICAgICAgICAuLiB2ZXJzaW9uY2hhbmdlZDo6IDEuMQogICAgICAgICAgICBDYW4gbm93IHBhc3MgYGBOb25lYGAgdG8ga2ljayBhIG1lbWJlciBmcm9tIHZvaWNlLgoKICAgICAgICBQYXJhbWV0ZXJzCiAgICAgICAgLS0tLS0tLS0tLS0KICAgICAgICBjaGFubmVsOiBPcHRpb25hbFs6Y2xhc3M6YFZvaWNlQ2hhbm5lbGBdCiAgICAgICAgICAgIFRoZSBuZXcgdm9pY2UgY2hhbm5lbCB0byBtb3ZlIHRoZSBtZW1iZXIgdG8uCiAgICAgICAgICAgIFBhc3MgYGBOb25lYGAgdG8ga2ljayB0aGVtIGZyb20gdm9pY2UuCiAgICAgICAgcmVhc29uOiBPcHRpb25hbFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgICAgIFRoZSByZWFzb24gZm9yIGRvaW5nIHRoaXMgYWN0aW9uLiBTaG93cyB1cCBvbiB0aGUgYXVkaXQgbG9nLgogICAgICAgICIiIgogICAgICAgIGF3YWl0IHNlbGYuZWRpdCh2b2ljZV9jaGFubmVsPWNoYW5uZWwsIHJlYXNvbj1yZWFzb24pCgogICAgYXN5bmMgZGVmIGFkZF9yb2xlcyhzZWxmLCAqcm9sZXMsIHJlYXNvbj1Ob25lLCBhdG9taWM9VHJ1ZSk6CiAgICAgICAgciIiInxjb3JvfAoKICAgICAgICBHaXZlcyB0aGUgbWVtYmVyIGEgbnVtYmVyIG9mIDpjbGFzczpgUm9sZWBccy4KCiAgICAgICAgWW91IG11c3QgaGF2ZSB0aGUgOmF0dHI6YH5QZXJtaXNzaW9ucy5tYW5hZ2Vfcm9sZXNgIHBlcm1pc3Npb24gdG8KICAgICAgICB1c2UgdGhpcywgYW5kIHRoZSBhZGRlZCA6Y2xhc3M6YFJvbGVgXHMgbXVzdCBhcHBlYXIgbG93ZXIgaW4gdGhlIGxpc3QKICAgICAgICBvZiByb2xlcyB0aGFuIHRoZSBoaWdoZXN0IHJvbGUgb2YgdGhlIG1lbWJlci4KCiAgICAgICAgUGFyYW1ldGVycwogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgXCpyb2xlczogOmNsYXNzOmBhYmMuU25vd2ZsYWtlYAogICAgICAgICAgICBBbiBhcmd1bWVudCBsaXN0IG9mIDpjbGFzczpgYWJjLlNub3dmbGFrZWAgcmVwcmVzZW50aW5nIGEgOmNsYXNzOmBSb2xlYAogICAgICAgICAgICB0byBnaXZlIHRvIHRoZSBtZW1iZXIuCiAgICAgICAgcmVhc29uOiBPcHRpb25hbFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgICAgIFRoZSByZWFzb24gZm9yIGFkZGluZyB0aGVzZSByb2xlcy4gU2hvd3MgdXAgb24gdGhlIGF1ZGl0IGxvZy4KICAgICAgICBhdG9taWM6IDpjbGFzczpgYm9vbGAKICAgICAgICAgICAgV2hldGhlciB0byBhdG9taWNhbGx5IGFkZCByb2xlcy4gVGhpcyB3aWxsIGVuc3VyZSB0aGF0IG11bHRpcGxlCiAgICAgICAgICAgIG9wZXJhdGlvbnMgd2lsbCBhbHdheXMgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIHRoZSBjdXJyZW50CiAgICAgICAgICAgIHN0YXRlIG9mIHRoZSBjYWNoZS4KCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tLQogICAgICAgIEZvcmJpZGRlbgogICAgICAgICAgICBZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbnMgdG8gYWRkIHRoZXNlIHJvbGVzLgogICAgICAgIEhUVFBFeGNlcHRpb24KICAgICAgICAgICAgQWRkaW5nIHJvbGVzIGZhaWxlZC4KICAgICAgICAiIiIKCiAgICAgICAgaWYgbm90IGF0b21pYzoKICAgICAgICAgICAgbmV3X3JvbGVzID0gdXRpbHMuX3VuaXF1ZShPYmplY3QoaWQ9ci5pZCkgZm9yIHMgaW4gKHNlbGYucm9sZXNbMTpdLCByb2xlcykgZm9yIHIgaW4gcykKICAgICAgICAgICAgYXdhaXQgc2VsZi5lZGl0KHJvbGVzPW5ld19yb2xlcywgcmVhc29uPXJlYXNvbikKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXEgPSBzZWxmLl9zdGF0ZS5odHRwLmFkZF9yb2xlCiAgICAgICAgICAgIGd1aWxkX2lkID0gc2VsZi5ndWlsZC5pZAogICAgICAgICAgICB1c2VyX2lkID0gc2VsZi5pZAogICAgICAgICAgICBmb3Igcm9sZSBpbiByb2xlczoKICAgICAgICAgICAgICAgIGF3YWl0IHJlcShndWlsZF9pZCwgdXNlcl9pZCwgcm9sZS5pZCwgcmVhc29uPXJlYXNvbikKCiAgICBhc3luYyBkZWYgcmVtb3ZlX3JvbGVzKHNlbGYsICpyb2xlcywgcmVhc29uPU5vbmUsIGF0b21pYz1UcnVlKToKICAgICAgICByIiIifGNvcm98CgogICAgICAgIFJlbW92ZXMgOmNsYXNzOmBSb2xlYFxzIGZyb20gdGhpcyBtZW1iZXIuCgogICAgICAgIFlvdSBtdXN0IGhhdmUgdGhlIDphdHRyOmB+UGVybWlzc2lvbnMubWFuYWdlX3JvbGVzYCBwZXJtaXNzaW9uIHRvCiAgICAgICAgdXNlIHRoaXMsIGFuZCB0aGUgcmVtb3ZlZCA6Y2xhc3M6YFJvbGVgXHMgbXVzdCBhcHBlYXIgbG93ZXIgaW4gdGhlIGxpc3QKICAgICAgICBvZiByb2xlcyB0aGFuIHRoZSBoaWdoZXN0IHJvbGUgb2YgdGhlIG1lbWJlci4KCiAgICAgICAgUGFyYW1ldGVycwogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgXCpyb2xlczogOmNsYXNzOmBhYmMuU25vd2ZsYWtlYAogICAgICAgICAgICBBbiBhcmd1bWVudCBsaXN0IG9mIDpjbGFzczpgYWJjLlNub3dmbGFrZWAgcmVwcmVzZW50aW5nIGEgOmNsYXNzOmBSb2xlYAogICAgICAgICAgICB0byByZW1vdmUgZnJvbSB0aGUgbWVtYmVyLgogICAgICAgIHJlYXNvbjogT3B0aW9uYWxbOmNsYXNzOmBzdHJgXQogICAgICAgICAgICBUaGUgcmVhc29uIGZvciByZW1vdmluZyB0aGVzZSByb2xlcy4gU2hvd3MgdXAgb24gdGhlIGF1ZGl0IGxvZy4KICAgICAgICBhdG9taWM6IDpjbGFzczpgYm9vbGAKICAgICAgICAgICAgV2hldGhlciB0byBhdG9taWNhbGx5IHJlbW92ZSByb2xlcy4gVGhpcyB3aWxsIGVuc3VyZSB0aGF0IG11bHRpcGxlCiAgICAgICAgICAgIG9wZXJhdGlvbnMgd2lsbCBhbHdheXMgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIHRoZSBjdXJyZW50CiAgICAgICAgICAgIHN0YXRlIG9mIHRoZSBjYWNoZS4KCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tLQogICAgICAgIEZvcmJpZGRlbgogICAgICAgICAgICBZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbnMgdG8gcmVtb3ZlIHRoZXNlIHJvbGVzLgogICAgICAgIEhUVFBFeGNlcHRpb24KICAgICAgICAgICAgUmVtb3ZpbmcgdGhlIHJvbGVzIGZhaWxlZC4KICAgICAgICAiIiIKCiAgICAgICAgaWYgbm90IGF0b21pYzoKICAgICAgICAgICAgbmV3X3JvbGVzID0gW09iamVjdChpZD1yLmlkKSBmb3IgciBpbiBzZWxmLnJvbGVzWzE6XV0gIyByZW1vdmUgQGV2ZXJ5b25lCiAgICAgICAgICAgIGZvciByb2xlIGluIHJvbGVzOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG5ld19yb2xlcy5yZW1vdmUoT2JqZWN0KGlkPXJvbGUuaWQpKQogICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAgICAgYXdhaXQgc2VsZi5lZGl0KHJvbGVzPW5ld19yb2xlcywgcmVhc29uPXJlYXNvbikKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXEgPSBzZWxmLl9zdGF0ZS5odHRwLnJlbW92ZV9yb2xlCiAgICAgICAgICAgIGd1aWxkX2lkID0gc2VsZi5ndWlsZC5pZAogICAgICAgICAgICB1c2VyX2lkID0gc2VsZi5pZAogICAgICAgICAgICBmb3Igcm9sZSBpbiByb2xlczoKICAgICAgICAgICAgICAgIGF3YWl0IHJlcShndWlsZF9pZCwgdXNlcl9pZCwgcm9sZS5pZCwgcmVhc29uPXJlYXNvbikK
