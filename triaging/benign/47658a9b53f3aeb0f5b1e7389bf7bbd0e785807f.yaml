statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/relationship.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-

      """
      The MIT License (MIT)

      Copyright (c) 2015-present Rapptz

      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the "Software"),
      to deal in the Software without restriction, including without limitation
      the rights to use, copy, modify, merge, publish, distribute, sublicense,
      and/or sell copies of the Software, and to permit persons to whom the
      Software is furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE SOFTWARE.
      """

      from .enums import RelationshipType, try_enum
      from . import utils

      class Relationship:
          """Represents a relationship in Discord.

          A relationship is like a friendship, a person who is blocked, etc.
          Only non-bot accounts can have relationships.

          .. deprecated:: 1.7

          Attributes
          -----------
          user: :class:`User`
              The user you have the relationship with.
          type: :class:`RelationshipType`
              The type of relationship you have.
          """

          __slots__ = ('type', 'user', '_state')

          def __init__(self, *, state, data):
              self._state = state
              self.type = try_enum(RelationshipType, data['type'])
              self.user = state.store_user(data['user'])

          def __repr__(self):
              return '<Relationship user={0.user!r} type={0.type!r}>'.format(self)

          @utils.deprecated()
          async def delete(self):
              """|coro|

              Deletes the relationship.

              .. deprecated:: 1.7

              Raises
              ------
              HTTPException
                  Deleting the relationship failed.
              """

              await self._state.http.remove_relationship(self.user.id)

          @utils.deprecated()
          async def accept(self):
              """|coro|

              Accepts the relationship request. e.g. accepting a
              friend request.

              .. deprecated:: 1.7

              Raises
              -------
              HTTPException
                  Accepting the relationship failed.
              """

              await self._state.http.add_relationship(self.user.id)
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ load_const INTEGER load_const import_name enums import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH import_from try_enum store_name try_enum pop_top load_const INTEGER load_const import_name import_from utils store_name utils pop_top push_null load_build_class load_const OBJECT make_function load_const Relationship call store_name Relationship return_const None
    hash: eb505c2beb0e196bb5a491be8f54e0764c79146f103e5fab24d6eba6e53e2405
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/relationship.py
  : IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgpmcm9tIC5lbnVtcyBpbXBvcnQgUmVsYXRpb25zaGlwVHlwZSwgdHJ5X2VudW0KZnJvbSAuIGltcG9ydCB1dGlscwoKY2xhc3MgUmVsYXRpb25zaGlwOgogICAgIiIiUmVwcmVzZW50cyBhIHJlbGF0aW9uc2hpcCBpbiBEaXNjb3JkLgoKICAgIEEgcmVsYXRpb25zaGlwIGlzIGxpa2UgYSBmcmllbmRzaGlwLCBhIHBlcnNvbiB3aG8gaXMgYmxvY2tlZCwgZXRjLgogICAgT25seSBub24tYm90IGFjY291bnRzIGNhbiBoYXZlIHJlbGF0aW9uc2hpcHMuCgogICAgLi4gZGVwcmVjYXRlZDo6IDEuNwoKICAgIEF0dHJpYnV0ZXMKICAgIC0tLS0tLS0tLS0tCiAgICB1c2VyOiA6Y2xhc3M6YFVzZXJgCiAgICAgICAgVGhlIHVzZXIgeW91IGhhdmUgdGhlIHJlbGF0aW9uc2hpcCB3aXRoLgogICAgdHlwZTogOmNsYXNzOmBSZWxhdGlvbnNoaXBUeXBlYAogICAgICAgIFRoZSB0eXBlIG9mIHJlbGF0aW9uc2hpcCB5b3UgaGF2ZS4KICAgICIiIgoKICAgIF9fc2xvdHNfXyA9ICgndHlwZScsICd1c2VyJywgJ19zdGF0ZScpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICosIHN0YXRlLCBkYXRhKToKICAgICAgICBzZWxmLl9zdGF0ZSA9IHN0YXRlCiAgICAgICAgc2VsZi50eXBlID0gdHJ5X2VudW0oUmVsYXRpb25zaGlwVHlwZSwgZGF0YVsndHlwZSddKQogICAgICAgIHNlbGYudXNlciA9IHN0YXRlLnN0b3JlX3VzZXIoZGF0YVsndXNlciddKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzxSZWxhdGlvbnNoaXAgdXNlcj17MC51c2VyIXJ9IHR5cGU9ezAudHlwZSFyfT4nLmZvcm1hdChzZWxmKQoKICAgIEB1dGlscy5kZXByZWNhdGVkKCkKICAgIGFzeW5jIGRlZiBkZWxldGUoc2VsZik6CiAgICAgICAgIiIifGNvcm98CgogICAgICAgIERlbGV0ZXMgdGhlIHJlbGF0aW9uc2hpcC4KCiAgICAgICAgLi4gZGVwcmVjYXRlZDo6IDEuNwoKICAgICAgICBSYWlzZXMKICAgICAgICAtLS0tLS0KICAgICAgICBIVFRQRXhjZXB0aW9uCiAgICAgICAgICAgIERlbGV0aW5nIHRoZSByZWxhdGlvbnNoaXAgZmFpbGVkLgogICAgICAgICIiIgoKICAgICAgICBhd2FpdCBzZWxmLl9zdGF0ZS5odHRwLnJlbW92ZV9yZWxhdGlvbnNoaXAoc2VsZi51c2VyLmlkKQoKICAgIEB1dGlscy5kZXByZWNhdGVkKCkKICAgIGFzeW5jIGRlZiBhY2NlcHQoc2VsZik6CiAgICAgICAgIiIifGNvcm98CgogICAgICAgIEFjY2VwdHMgdGhlIHJlbGF0aW9uc2hpcCByZXF1ZXN0LiBlLmcuIGFjY2VwdGluZyBhCiAgICAgICAgZnJpZW5kIHJlcXVlc3QuCgogICAgICAgIC4uIGRlcHJlY2F0ZWQ6OiAxLjcKCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tLQogICAgICAgIEhUVFBFeGNlcHRpb24KICAgICAgICAgICAgQWNjZXB0aW5nIHRoZSByZWxhdGlvbnNoaXAgZmFpbGVkLgogICAgICAgICIiIgoKICAgICAgICBhd2FpdCBzZWxmLl9zdGF0ZS5odHRwLmFkZF9yZWxhdGlvbnNoaXAoc2VsZi51c2VyLmlkKQo=
