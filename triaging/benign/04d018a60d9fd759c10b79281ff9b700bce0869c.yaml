statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/connectionpool.py
  contents:
  - name: HTTPConnectionPool.__init__
    score: 0.0
    code: |-
      def __init__(self, host, port=None, strict=False,
                       timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False,
                       headers=None, retries=None,
                       _proxy=None, _proxy_headers=None,
                       **conn_kw):
              ConnectionPool.__init__(self, host, port)
              RequestMethods.__init__(self, headers)

              self.strict = strict

              if not isinstance(timeout, Timeout):
                  timeout = Timeout.from_float(timeout)

              if retries is None:
                  retries = Retry.DEFAULT

              self.timeout = timeout
              self.retries = retries

              self.pool = self.QueueCls(maxsize)
              self.block = block

              self.proxy = _proxy
              self.proxy_headers = _proxy_headers or {}

              # Fill the queue up so that doing get() on it will block properly
              for _ in xrange(maxsize):
                  self.pool.put(None)

              # These are mostly for testing and debugging purposes.
              self.num_connections = 0
              self.num_requests = 0
              self.conn_kw = conn_kw

              if self.proxy:
                  # Enable Nagle's algorithm for proxies, to avoid packet fragmentation.
                  # We cannot know if the user has added default socket options, so we cannot replace the
                  # list.
                  self.conn_kw.setdefault('socket_options', [])
    tokens: resume load_global ConnectionPool load_attr __init__ load_fast self load_fast host load_fast port call pop_top load_global RequestMethods load_attr __init__ load_fast self load_fast headers call pop_top load_fast strict load_fast self store_attr strict load_global isinstance load_fast timeout load_global Timeout call pop_jump_if_true TO_NUMBER load_global Timeout load_attr from_float load_fast timeout call store_fast timeout load_fast retries pop_jump_if_not_none TO_NUMBER load_global Retry load_attr DEFAULT store_fast retries load_fast timeout load_fast self store_attr timeout load_fast retries load_fast self store_attr retries load_fast self load_attr QueueCls load_fast maxsize call load_fast self store_attr pool load_fast block load_fast self store_attr block load_fast _proxy load_fast self store_attr proxy load_fast _proxy_headers copy pop_jump_if_true TO_NUMBER pop_top build_map load_fast self store_attr proxy_headers load_global xrange load_fast maxsize call get_iter for_iter TO_NUMBER store_fast _ load_fast self load_attr pool load_attr put load_const call pop_top jump_backward TO_NUMBER end_for load_const INTEGER load_fast self store_attr num_connections load_const INTEGER load_fast self store_attr num_requests load_fast conn_kw load_fast self store_attr conn_kw load_fast self load_attr proxy pop_jump_if_false TO_NUMBER load_fast self load_attr conn_kw load_attr setdefault load_const socket_options build_list call pop_top return_const None return_const None
    hash: 9e6bb83c3a334693655f82cc7b3b0367d57b0c1c55727153780df6dc1b6f389d
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/connectionpool.py
  : 
