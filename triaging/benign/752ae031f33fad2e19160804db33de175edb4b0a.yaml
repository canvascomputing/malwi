statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/colored-upgrade/0.0.1/colored-upgrade-0.0.1/colored-upgrade-0.0.1/colored/colored.py
  contents:
  - name: back_rgb
    score: 0.0
    code: |-
      def back_rgb(r: int | str, g: int | str, b: int | str) -> str:
          """ Combination with text returns color background with text.

          Args:
              r: Red color.
              g: Green color.
              b: Blue color.

          Returns:
              str: Background RGB code.
          """
          utils = Utilities()
          r, g, b = utils.is_percentage((r, g, b))
          return f'{Library.BACKGROUND_RGB}{r};{g};{b}{Library.END}'
    tokens: resume load_global Utilities call store_fast utils load_fast utils load_attr is_percentage load_fast r load_fast g load_fast b build_tuple call unpack_sequence store_fast r store_fast g store_fast b load_global Library load_attr BACKGROUND_RGB format_value INTEGER load_fast r format_value INTEGER load_const ; load_fast g format_value INTEGER load_const ; load_fast b format_value INTEGER load_global Library load_attr END format_value INTEGER build_string return_value
    hash: e65ae44f014f4c3f53eab098dff168cd63063e18c0aca491f3b3fe84b9c1248b
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/colored-upgrade/0.0.1/colored-upgrade-0.0.1/colored-upgrade-0.0.1/colored/colored.py
  : 
