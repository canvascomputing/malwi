statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/message.py
  contents:
  - name: PartialMessage.__init__
    score: 0.0
    code: |-
      def __init__(self, *, channel, id):
              if channel.type not in (ChannelType.text, ChannelType.news, ChannelType.private):
                  raise TypeError('Expected TextChannel or DMChannel not %r' % type(channel))

              self.channel = channel
              self._state = channel._state
              self.id = id
    tokens: resume load_fast channel load_attr type load_global ChannelType load_attr text load_global ChannelType load_attr news load_global ChannelType load_attr private build_tuple contains_op pop_jump_if_false TO_NUMBER load_global TypeError load_const STRING_LEN_S_ENT_HIGH load_global type load_fast channel call binary_op % call raise_varargs load_fast channel load_fast self store_attr channel load_fast channel load_attr _state load_fast self store_attr _state load_fast id load_fast self store_attr id return_const None
    hash: d801147607b53334a53984d3924fd07d83fc1e8241d09c32f6b679a9584ed0d9
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/message.py: 
