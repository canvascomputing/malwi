statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/asset.py
  contents:
  - name: Asset.__init__
    score: 0.0
    code: |-
      def __init__(self, state, url=None):
              self._state = state
              self._url = url
    tokens: resume load_fast state load_fast self store_attr _state load_fast url load_fast self store_attr _url return_const None
    hash: 37985d8b181bb0533e2a614642fff088d53e8b6348e2082c946e0569fab69b3d
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/asset.py: IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgppbXBvcnQgaW8KZnJvbSAuZXJyb3JzIGltcG9ydCBEaXNjb3JkRXhjZXB0aW9uCmZyb20gLmVycm9ycyBpbXBvcnQgSW52YWxpZEFyZ3VtZW50CmZyb20gLiBpbXBvcnQgdXRpbHMKClZBTElEX1NUQVRJQ19GT1JNQVRTID0gZnJvemVuc2V0KHsianBlZyIsICJqcGciLCAid2VicCIsICJwbmcifSkKVkFMSURfQVZBVEFSX0ZPUk1BVFMgPSBWQUxJRF9TVEFUSUNfRk9STUFUUyB8IHsiZ2lmIn0KCmNsYXNzIEFzc2V0OgogICAgIiIiUmVwcmVzZW50cyBhIENETiBhc3NldCBvbiBEaXNjb3JkLgoKICAgIC4uIGNvbnRhaW5lcjo6IG9wZXJhdGlvbnMKCiAgICAgICAgLi4gZGVzY3JpYmU6OiBzdHIoeCkKCiAgICAgICAgICAgIFJldHVybnMgdGhlIFVSTCBvZiB0aGUgQ0ROIGFzc2V0LgoKICAgICAgICAuLiBkZXNjcmliZTo6IGxlbih4KQoKICAgICAgICAgICAgUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBDRE4gYXNzZXQncyBVUkwuCgogICAgICAgIC4uIGRlc2NyaWJlOjogYm9vbCh4KQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHRoZSBBc3NldCBoYXMgYSBVUkwuCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCA9PSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdGhlIGFzc2V0IGlzIGVxdWFsIHRvIGFub3RoZXIgYXNzZXQuCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCAhPSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdGhlIGFzc2V0IGlzIG5vdCBlcXVhbCB0byBhbm90aGVyIGFzc2V0LgoKICAgICAgICAuLiBkZXNjcmliZTo6IGhhc2goeCkKCiAgICAgICAgICAgIFJldHVybnMgdGhlIGhhc2ggb2YgdGhlIGFzc2V0LgogICAgIiIiCiAgICBfX3Nsb3RzX18gPSAoJ19zdGF0ZScsICdfdXJsJykKCiAgICBCQVNFID0gJ2h0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tJwoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzdGF0ZSwgdXJsPU5vbmUpOgogICAgICAgIHNlbGYuX3N0YXRlID0gc3RhdGUKICAgICAgICBzZWxmLl91cmwgPSB1cmwKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBfZnJvbV9hdmF0YXIoY2xzLCBzdGF0ZSwgdXNlciwgKiwgZm9ybWF0PU5vbmUsIHN0YXRpY19mb3JtYXQ9J3dlYnAnLCBzaXplPTEwMjQpOgogICAgICAgIGlmIG5vdCB1dGlscy52YWxpZF9pY29uX3NpemUoc2l6ZSk6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgic2l6ZSBtdXN0IGJlIGEgcG93ZXIgb2YgMiBiZXR3ZWVuIDE2IGFuZCA0MDk2IikKICAgICAgICBpZiBmb3JtYXQgaXMgbm90IE5vbmUgYW5kIGZvcm1hdCBub3QgaW4gVkFMSURfQVZBVEFSX0ZPUk1BVFM6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgiZm9ybWF0IG11c3QgYmUgTm9uZSBvciBvbmUgb2Yge30iLmZvcm1hdChWQUxJRF9BVkFUQVJfRk9STUFUUykpCiAgICAgICAgaWYgZm9ybWF0ID09ICJnaWYiIGFuZCBub3QgdXNlci5pc19hdmF0YXJfYW5pbWF0ZWQoKToKICAgICAgICAgICAgcmFpc2UgSW52YWxpZEFyZ3VtZW50KCJub24gYW5pbWF0ZWQgYXZhdGFycyBkbyBub3Qgc3VwcG9ydCBnaWYgZm9ybWF0IikKICAgICAgICBpZiBzdGF0aWNfZm9ybWF0IG5vdCBpbiBWQUxJRF9TVEFUSUNfRk9STUFUUzoKICAgICAgICAgICAgcmFpc2UgSW52YWxpZEFyZ3VtZW50KCJzdGF0aWNfZm9ybWF0IG11c3QgYmUgb25lIG9mIHt9Ii5mb3JtYXQoVkFMSURfU1RBVElDX0ZPUk1BVFMpKQoKICAgICAgICBpZiB1c2VyLmF2YXRhciBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gdXNlci5kZWZhdWx0X2F2YXRhcl91cmwKCiAgICAgICAgaWYgZm9ybWF0IGlzIE5vbmU6CiAgICAgICAgICAgIGZvcm1hdCA9ICdnaWYnIGlmIHVzZXIuaXNfYXZhdGFyX2FuaW1hdGVkKCkgZWxzZSBzdGF0aWNfZm9ybWF0CgogICAgICAgIHJldHVybiBjbHMoc3RhdGUsICcvYXZhdGFycy97MC5pZH0vezAuYXZhdGFyfS57MX0/c2l6ZT17Mn0nLmZvcm1hdCh1c2VyLCBmb3JtYXQsIHNpemUpKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9mcm9tX2ljb24oY2xzLCBzdGF0ZSwgb2JqZWN0LCBwYXRoLCAqLCBmb3JtYXQ9J3dlYnAnLCBzaXplPTEwMjQpOgogICAgICAgIGlmIG9iamVjdC5pY29uIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBjbHMoc3RhdGUpCgogICAgICAgIGlmIG5vdCB1dGlscy52YWxpZF9pY29uX3NpemUoc2l6ZSk6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgic2l6ZSBtdXN0IGJlIGEgcG93ZXIgb2YgMiBiZXR3ZWVuIDE2IGFuZCA0MDk2IikKICAgICAgICBpZiBmb3JtYXQgbm90IGluIFZBTElEX1NUQVRJQ19GT1JNQVRTOgogICAgICAgICAgICByYWlzZSBJbnZhbGlkQXJndW1lbnQoImZvcm1hdCBtdXN0IGJlIE5vbmUgb3Igb25lIG9mIHt9Ii5mb3JtYXQoVkFMSURfU1RBVElDX0ZPUk1BVFMpKQoKICAgICAgICB1cmwgPSAnL3swfS1pY29ucy97MS5pZH0vezEuaWNvbn0uezJ9P3NpemU9ezN9Jy5mb3JtYXQocGF0aCwgb2JqZWN0LCBmb3JtYXQsIHNpemUpCiAgICAgICAgcmV0dXJuIGNscyhzdGF0ZSwgdXJsKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9mcm9tX2NvdmVyX2ltYWdlKGNscywgc3RhdGUsIG9iaiwgKiwgZm9ybWF0PSd3ZWJwJywgc2l6ZT0xMDI0KToKICAgICAgICBpZiBvYmouY292ZXJfaW1hZ2UgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNscyhzdGF0ZSkKCiAgICAgICAgaWYgbm90IHV0aWxzLnZhbGlkX2ljb25fc2l6ZShzaXplKToKICAgICAgICAgICAgcmFpc2UgSW52YWxpZEFyZ3VtZW50KCJzaXplIG11c3QgYmUgYSBwb3dlciBvZiAyIGJldHdlZW4gMTYgYW5kIDQwOTYiKQogICAgICAgIGlmIGZvcm1hdCBub3QgaW4gVkFMSURfU1RBVElDX0ZPUk1BVFM6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgiZm9ybWF0IG11c3QgYmUgTm9uZSBvciBvbmUgb2Yge30iLmZvcm1hdChWQUxJRF9TVEFUSUNfRk9STUFUUykpCgogICAgICAgIHVybCA9ICcvYXBwLWFzc2V0cy97MC5pZH0vc3RvcmUvezAuY292ZXJfaW1hZ2V9LnsxfT9zaXplPXsyfScuZm9ybWF0KG9iaiwgZm9ybWF0LCBzaXplKQogICAgICAgIHJldHVybiBjbHMoc3RhdGUsIHVybCkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBfZnJvbV9ndWlsZF9pbWFnZShjbHMsIHN0YXRlLCBpZCwgaGFzaCwga2V5LCAqLCBmb3JtYXQ9J3dlYnAnLCBzaXplPTEwMjQpOgogICAgICAgIGlmIG5vdCB1dGlscy52YWxpZF9pY29uX3NpemUoc2l6ZSk6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgic2l6ZSBtdXN0IGJlIGEgcG93ZXIgb2YgMiBiZXR3ZWVuIDE2IGFuZCA0MDk2IikKICAgICAgICBpZiBmb3JtYXQgbm90IGluIFZBTElEX1NUQVRJQ19GT1JNQVRTOgogICAgICAgICAgICByYWlzZSBJbnZhbGlkQXJndW1lbnQoImZvcm1hdCBtdXN0IGJlIG9uZSBvZiB7fSIuZm9ybWF0KFZBTElEX1NUQVRJQ19GT1JNQVRTKSkKCiAgICAgICAgaWYgaGFzaCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2xzKHN0YXRlKQoKICAgICAgICB1cmwgPSAnL3trZXl9L3swfS97MX0uezJ9P3NpemU9ezN9JwogICAgICAgIHJldHVybiBjbHMoc3RhdGUsIHVybC5mb3JtYXQoaWQsIGhhc2gsIGZvcm1hdCwgc2l6ZSwga2V5PWtleSkpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX2Zyb21fZ3VpbGRfaWNvbihjbHMsIHN0YXRlLCBndWlsZCwgKiwgZm9ybWF0PU5vbmUsIHN0YXRpY19mb3JtYXQ9J3dlYnAnLCBzaXplPTEwMjQpOgogICAgICAgIGlmIG5vdCB1dGlscy52YWxpZF9pY29uX3NpemUoc2l6ZSk6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgic2l6ZSBtdXN0IGJlIGEgcG93ZXIgb2YgMiBiZXR3ZWVuIDE2IGFuZCA0MDk2IikKICAgICAgICBpZiBmb3JtYXQgaXMgbm90IE5vbmUgYW5kIGZvcm1hdCBub3QgaW4gVkFMSURfQVZBVEFSX0ZPUk1BVFM6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgiZm9ybWF0IG11c3QgYmUgb25lIG9mIHt9Ii5mb3JtYXQoVkFMSURfQVZBVEFSX0ZPUk1BVFMpKQogICAgICAgIGlmIGZvcm1hdCA9PSAiZ2lmIiBhbmQgbm90IGd1aWxkLmlzX2ljb25fYW5pbWF0ZWQoKToKICAgICAgICAgICAgcmFpc2UgSW52YWxpZEFyZ3VtZW50KCJub24gYW5pbWF0ZWQgZ3VpbGQgaWNvbnMgZG8gbm90IHN1cHBvcnQgZ2lmIGZvcm1hdCIpCiAgICAgICAgaWYgc3RhdGljX2Zvcm1hdCBub3QgaW4gVkFMSURfU1RBVElDX0ZPUk1BVFM6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgic3RhdGljX2Zvcm1hdCBtdXN0IGJlIG9uZSBvZiB7fSIuZm9ybWF0KFZBTElEX1NUQVRJQ19GT1JNQVRTKSkKCiAgICAgICAgaWYgZ3VpbGQuaWNvbiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gY2xzKHN0YXRlKQoKICAgICAgICBpZiBmb3JtYXQgaXMgTm9uZToKICAgICAgICAgICAgZm9ybWF0ID0gJ2dpZicgaWYgZ3VpbGQuaXNfaWNvbl9hbmltYXRlZCgpIGVsc2Ugc3RhdGljX2Zvcm1hdAoKICAgICAgICByZXR1cm4gY2xzKHN0YXRlLCAnL2ljb25zL3swLmlkfS97MC5pY29ufS57MX0/c2l6ZT17Mn0nLmZvcm1hdChndWlsZCwgZm9ybWF0LCBzaXplKSkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBfZnJvbV9zdGlja2VyX3VybChjbHMsIHN0YXRlLCBzdGlja2VyLCAqLCBzaXplPTEwMjQpOgogICAgICAgIGlmIG5vdCB1dGlscy52YWxpZF9pY29uX3NpemUoc2l6ZSk6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgic2l6ZSBtdXN0IGJlIGEgcG93ZXIgb2YgMiBiZXR3ZWVuIDE2IGFuZCA0MDk2IikKCiAgICAgICAgcmV0dXJuIGNscyhzdGF0ZSwgJy9zdGlja2Vycy97MC5pZH0vezAuaW1hZ2V9LnBuZz9zaXplPXsyfScuZm9ybWF0KHN0aWNrZXIsIGZvcm1hdCwgc2l6ZSkpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX2Zyb21fZW1vamkoY2xzLCBzdGF0ZSwgZW1vamksICosIGZvcm1hdD1Ob25lLCBzdGF0aWNfZm9ybWF0PSdwbmcnKToKICAgICAgICBpZiBmb3JtYXQgaXMgbm90IE5vbmUgYW5kIGZvcm1hdCBub3QgaW4gVkFMSURfQVZBVEFSX0ZPUk1BVFM6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgiZm9ybWF0IG11c3QgYmUgTm9uZSBvciBvbmUgb2Yge30iLmZvcm1hdChWQUxJRF9BVkFUQVJfRk9STUFUUykpCiAgICAgICAgaWYgZm9ybWF0ID09ICJnaWYiIGFuZCBub3QgZW1vamkuYW5pbWF0ZWQ6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgibm9uIGFuaW1hdGVkIGVtb2ppJ3MgZG8gbm90IHN1cHBvcnQgZ2lmIGZvcm1hdCIpCiAgICAgICAgaWYgc3RhdGljX2Zvcm1hdCBub3QgaW4gVkFMSURfU1RBVElDX0ZPUk1BVFM6CiAgICAgICAgICAgIHJhaXNlIEludmFsaWRBcmd1bWVudCgic3RhdGljX2Zvcm1hdCBtdXN0IGJlIG9uZSBvZiB7fSIuZm9ybWF0KFZBTElEX1NUQVRJQ19GT1JNQVRTKSkKICAgICAgICBpZiBmb3JtYXQgaXMgTm9uZToKICAgICAgICAgICAgZm9ybWF0ID0gJ2dpZicgaWYgZW1vamkuYW5pbWF0ZWQgZWxzZSBzdGF0aWNfZm9ybWF0CgogICAgICAgIHJldHVybiBjbHMoc3RhdGUsICcvZW1vamlzL3swLmlkfS57MX0nLmZvcm1hdChlbW9qaSwgZm9ybWF0KSkKCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5CQVNFICsgc2VsZi5fdXJsIGlmIHNlbGYuX3VybCBpcyBub3QgTm9uZSBlbHNlICcnCgogICAgZGVmIF9fbGVuX18oc2VsZik6CiAgICAgICAgaWYgc2VsZi5fdXJsOgogICAgICAgICAgICByZXR1cm4gbGVuKHNlbGYuQkFTRSArIHNlbGYuX3VybCkKICAgICAgICByZXR1cm4gMAoKICAgIGRlZiBfX2Jvb2xfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fdXJsIGlzIG5vdCBOb25lCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIHJldHVybiAnPEFzc2V0IHVybD17MC5fdXJsIXJ9PicuZm9ybWF0KHNlbGYpCgogICAgZGVmIF9fZXFfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIGlzaW5zdGFuY2Uob3RoZXIsIEFzc2V0KSBhbmQgc2VsZi5fdXJsID09IG90aGVyLl91cmwKCiAgICBkZWYgX19uZV9fKHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gbm90IHNlbGYuX19lcV9fKG90aGVyKQoKICAgIGRlZiBfX2hhc2hfXyhzZWxmKToKICAgICAgICByZXR1cm4gaGFzaChzZWxmLl91cmwpCgogICAgYXN5bmMgZGVmIHJlYWQoc2VsZik6CiAgICAgICAgIiIifGNvcm98CgogICAgICAgIFJldHJpZXZlcyB0aGUgY29udGVudCBvZiB0aGlzIGFzc2V0IGFzIGEgOmNsYXNzOmBieXRlc2Agb2JqZWN0LgoKICAgICAgICAuLiB3YXJuaW5nOjoKCiAgICAgICAgICAgIDpjbGFzczpgUGFydGlhbEVtb2ppYCB3b24ndCBoYXZlIGEgY29ubmVjdGlvbiBzdGF0ZSBpZiB1c2VyIGNyZWF0ZWQsCiAgICAgICAgICAgIGFuZCBhIFVSTCB3b24ndCBiZSBwcmVzZW50IGlmIGEgY3VzdG9tIGltYWdlIGlzbid0IGFzc29jaWF0ZWQgd2l0aAogICAgICAgICAgICB0aGUgYXNzZXQsIGUuZy4gYSBndWlsZCB3aXRoIG5vIGN1c3RvbSBpY29uLgoKICAgICAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjEKCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tCiAgICAgICAgRGlzY29yZEV4Y2VwdGlvbgogICAgICAgICAgICBUaGVyZSB3YXMgbm8gdmFsaWQgVVJMIG9yIGludGVybmFsIGNvbm5lY3Rpb24gc3RhdGUuCiAgICAgICAgSFRUUEV4Y2VwdGlvbgogICAgICAgICAgICBEb3dubG9hZGluZyB0aGUgYXNzZXQgZmFpbGVkLgogICAgICAgIE5vdEZvdW5kCiAgICAgICAgICAgIFRoZSBhc3NldCB3YXMgZGVsZXRlZC4KCiAgICAgICAgUmV0dXJucwogICAgICAgIC0tLS0tLS0KICAgICAgICA6Y2xhc3M6YGJ5dGVzYAogICAgICAgICAgICBUaGUgY29udGVudCBvZiB0aGUgYXNzZXQuCiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IHNlbGYuX3VybDoKICAgICAgICAgICAgcmFpc2UgRGlzY29yZEV4Y2VwdGlvbignSW52YWxpZCBhc3NldCAobm8gVVJMIHByb3ZpZGVkKScpCgogICAgICAgIGlmIHNlbGYuX3N0YXRlIGlzIE5vbmU6CiAgICAgICAgICAgIHJhaXNlIERpc2NvcmRFeGNlcHRpb24oJ0ludmFsaWQgc3RhdGUgKG5vIENvbm5lY3Rpb25TdGF0ZSBwcm92aWRlZCknKQoKICAgICAgICByZXR1cm4gYXdhaXQgc2VsZi5fc3RhdGUuaHR0cC5nZXRfZnJvbV9jZG4oc2VsZi5CQVNFICsgc2VsZi5fdXJsKQoKICAgIGFzeW5jIGRlZiBzYXZlKHNlbGYsIGZwLCAqLCBzZWVrX2JlZ2luPVRydWUpOgogICAgICAgICIiInxjb3JvfAoKICAgICAgICBTYXZlcyB0aGlzIGFzc2V0IGludG8gYSBmaWxlLWxpa2Ugb2JqZWN0LgoKICAgICAgICBQYXJhbWV0ZXJzCiAgICAgICAgLS0tLS0tLS0tLQogICAgICAgIGZwOiBVbmlvbltCaW5hcnlJTywgOmNsYXNzOmBvcy5QYXRoTGlrZWBdCiAgICAgICAgICAgIFNhbWUgYXMgaW4gOm1ldGg6YEF0dGFjaG1lbnQuc2F2ZWAuCiAgICAgICAgc2Vla19iZWdpbjogOmNsYXNzOmBib29sYAogICAgICAgICAgICBTYW1lIGFzIGluIDptZXRoOmBBdHRhY2htZW50LnNhdmVgLgoKICAgICAgICBSYWlzZXMKICAgICAgICAtLS0tLS0KICAgICAgICBEaXNjb3JkRXhjZXB0aW9uCiAgICAgICAgICAgIFRoZXJlIHdhcyBubyB2YWxpZCBVUkwgb3IgaW50ZXJuYWwgY29ubmVjdGlvbiBzdGF0ZS4KICAgICAgICBIVFRQRXhjZXB0aW9uCiAgICAgICAgICAgIERvd25sb2FkaW5nIHRoZSBhc3NldCBmYWlsZWQuCiAgICAgICAgTm90Rm91bmQKICAgICAgICAgICAgVGhlIGFzc2V0IHdhcyBkZWxldGVkLgoKICAgICAgICBSZXR1cm5zCiAgICAgICAgLS0tLS0tLS0KICAgICAgICA6Y2xhc3M6YGludGAKICAgICAgICAgICAgVGhlIG51bWJlciBvZiBieXRlcyB3cml0dGVuLgogICAgICAgICIiIgoKICAgICAgICBkYXRhID0gYXdhaXQgc2VsZi5yZWFkKCkKICAgICAgICBpZiBpc2luc3RhbmNlKGZwLCBpby5JT0Jhc2UpIGFuZCBmcC53cml0YWJsZSgpOgogICAgICAgICAgICB3cml0dGVuID0gZnAud3JpdGUoZGF0YSkKICAgICAgICAgICAgaWYgc2Vla19iZWdpbjoKICAgICAgICAgICAgICAgIGZwLnNlZWsoMCkKICAgICAgICAgICAgcmV0dXJuIHdyaXR0ZW4KICAgICAgICBlbHNlOgogICAgICAgICAgICB3aXRoIG9wZW4oZnAsICd3YicpIGFzIGY6CiAgICAgICAgICAgICAgICByZXR1cm4gZi53cml0ZShkYXRhKQo=
