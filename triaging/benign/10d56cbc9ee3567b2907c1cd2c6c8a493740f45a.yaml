statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_connectionpool.py
  contents:
  - name: TestFileBodiesOnRetryOrRedirect.test_redirect_put_file
    score: 0.0
    code: |-
      def test_redirect_put_file(self):
              """PUT with file object should work with a redirection response"""
              retry = Retry(total=3, status_forcelist=[418])
              # httplib reads in 8k chunks; use a larger content length
              content_length = 65535
              data = b'A' * content_length
              uploaded_file = io.BytesIO(data)
              headers = {'test-name': 'test_redirect_put_file',
                         'Content-Length': str(content_length)}
              url = '/redirect?target=/echo&status=307'
              resp = self.pool.urlopen('PUT', url,
                                       headers=headers,
                                       retries=retry,
                                       body=uploaded_file,
                                       assert_same_host=False, redirect=True)
              self.assertEqual(resp.status, 200)
              self.assertEqual(resp.data, data)
    tokens: resume load_global Retry load_const INTEGER load_const INTEGER build_list kw_names status_forcelist total call store_fast retry load_const INTEGER store_fast content_length load_const load_fast content_length binary_op * store_fast data load_global io load_attr BytesIO load_fast data call store_fast uploaded_file load_const STRING_LEN_S_ENT_HIGH load_global str load_fast content_length call load_const build_const_key_map store_fast headers load_const STRING_FILE_PATH store_fast url load_fast self load_attr pool load_attr NETWORK_HTTP_REQUEST load_const PUT load_fast url load_fast headers load_fast retry load_fast uploaded_file load_const INTEGER load_const INTEGER kw_names assert_same_host body headers redirect retries call store_fast resp load_fast self load_attr assertEqual load_fast resp load_attr status load_const INTEGER call pop_top load_fast self load_attr assertEqual load_fast resp load_attr data load_fast data call pop_top return_const None
    hash: 7873ea9c4e8ca0fda101a3c5210473c8990ad45b2e53e1fe8503a08ceb4d1569
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_connectionpool.py
  : 
