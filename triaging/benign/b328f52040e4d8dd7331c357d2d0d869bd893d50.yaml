statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_win/asymmetric.py
  contents:
  - name: Certificate.self_signed
    score: 0.0
    code: |-
      @property
          def self_signed(self):
              """
              :return:
                  A boolean - if the certificate is self-signed
              """

              if self._self_signed is None:
                  self._self_signed = False
                  if self.asn1.self_signed in set(['yes', 'maybe']):

                      signature_algo = self.asn1['signature_algorithm'].signature_algo
                      hash_algo = self.asn1['signature_algorithm'].hash_algo

                      if signature_algo == 'rsassa_pkcs1v15':
                          verify_func = rsa_pkcs1v15_verify
                      elif signature_algo == 'rsassa_pss':
                          verify_func = rsa_pss_verify
                      elif signature_algo == 'dsa':
                          verify_func = dsa_verify
                      elif signature_algo == 'ecdsa':
                          verify_func = ecdsa_verify
                      else:
                          raise OSError(pretty_message(
                              '''
                              Unable to verify the signature of the certificate since
                              it uses the unsupported algorithm %s
                              ''',
                              signature_algo
                          ))

                      try:
                          verify_func(
                              self,
                              self.asn1['signature_value'].native,
                              self.asn1['tbs_certificate'].dump(),
                              hash_algo
                          )
                          self._self_signed = True
                      except (SignatureError):
                          pass

              return self._self_signed
    tokens: resume load_fast self load_attr _self_signed pop_jump_if_not_none TO_NUMBER load_const INTEGER load_fast self store_attr _self_signed load_fast self load_attr asn1 load_attr self_signed load_global set load_const yes load_const maybe build_list call contains_op pop_jump_if_false TO_NUMBER load_fast self load_attr asn1 load_const STRING_LEN_S_ENT_HIGH binary_subscr load_attr signature_algo store_fast signature_algo load_fast self load_attr asn1 load_const STRING_LEN_S_ENT_HIGH binary_subscr load_attr hash_algo store_fast hash_algo load_fast signature_algo load_const rsassa_pkcs1v15 compare_op == pop_jump_if_false TO_NUMBER load_global STRING_LEN_S_ENT_HIGH store_fast verify_func jump_forward TO_NUMBER load_fast signature_algo load_const rsassa_pss compare_op == pop_jump_if_false TO_NUMBER load_global rsa_pss_verify store_fast verify_func jump_forward TO_NUMBER load_fast signature_algo load_const dsa compare_op == pop_jump_if_false TO_NUMBER load_global dsa_verify store_fast verify_func jump_forward TO_NUMBER load_fast signature_algo load_const ecdsa compare_op == pop_jump_if_false TO_NUMBER load_global ecdsa_verify store_fast verify_func jump_forward TO_NUMBER load_global OSError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_fast signature_algo call call raise_varargs nop push_null load_fast verify_func load_fast self load_fast self load_attr asn1 load_const signature_value binary_subscr load_attr native load_fast self load_attr asn1 load_const tbs_certificate binary_subscr load_attr dump call load_fast hash_algo call pop_top load_const INTEGER load_fast self store_attr _self_signed load_fast self load_attr _self_signed return_value load_fast self load_attr _self_signed return_value push_exc_info load_global SignatureError check_exc_match pop_jump_if_false TO_NUMBER pop_top pop_except load_fast self load_attr _self_signed return_value reraise copy pop_except reraise
    hash: 1be558e000c73e6c68b84d995c778fac31270556e2eb465a453f0340fb4058dd
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_win/asymmetric.py
  : 
