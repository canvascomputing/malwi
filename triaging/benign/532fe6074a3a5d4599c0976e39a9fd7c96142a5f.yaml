statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/player.py
  contents:
  - name: AudioPlayer.resume
    score: 0.0
    code: |-
      def resume(self, *, update_speaking=True):
              self.loops = 0
              self._start = time.perf_counter()
              self._resumed.set()
              if update_speaking:
                  self._speak(True)
    tokens: resume load_const INTEGER load_fast self store_attr loops load_global time load_attr perf_counter call load_fast self store_attr _start load_fast self load_attr _resumed load_attr set call pop_top load_fast update_speaking pop_jump_if_false TO_NUMBER load_fast self load_attr _speak load_const INTEGER call pop_top return_const None return_const None
    hash: d00a816da10460c99c7277101f4b3a4207133992f9ddf6d45b259bce166cba75
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/player.py: 
