statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/chardet/universaldetector.py
  contents:
  - name: UniversalDetector.__init__
    score: 0.0
    code: |-
      def __init__(self, lang_filter=LanguageFilter.ALL):
              self._esc_charset_prober = None
              self._charset_probers = []
              self.result = None
              self.done = None
              self._got_data = None
              self._input_state = None
              self._last_char = None
              self.lang_filter = lang_filter
              self.logger = logging.getLogger(__name__)
              self._has_win_bytes = None
              self.reset()
    tokens: resume load_const load_fast self store_attr STRING_LEN_S_ENT_HIGH build_list load_fast self store_attr STRING_LEN_S_ENT_HIGH load_const load_fast self store_attr result load_const load_fast self store_attr done load_const load_fast self store_attr _got_data load_const load_fast self store_attr _input_state load_const load_fast self store_attr _last_char load_fast lang_filter load_fast self store_attr lang_filter load_global logging load_attr getLogger load_global __name__ call load_fast self store_attr logger load_const load_fast self store_attr _has_win_bytes load_fast self load_attr reset call pop_top return_const None
    hash: fa3757f9c3103f82fc623951f1ed34c2f56142293e929ff86b70cf02bce76e24
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/chardet/universaldetector.py
  : 
