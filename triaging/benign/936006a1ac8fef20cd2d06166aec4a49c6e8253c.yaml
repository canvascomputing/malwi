statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/poolmanager.py
  contents:
  - name: PoolManager._new_pool
    score: 0.0
    code: |-
      def _new_pool(self, scheme, host, port, request_context=None):
              """
              Create a new :class:`ConnectionPool` based on host, port, scheme, and
              any additional pool keyword arguments.

              If ``request_context`` is provided, it is provided as keyword arguments
              to the pool class used. This method is used to actually create the
              connection pools handed out by :meth:`connection_from_url` and
              companion methods. It is intended to be overridden for customization.
              """
              pool_cls = self.pool_classes_by_scheme[scheme]
              if request_context is None:
                  request_context = self.connection_pool_kw.copy()

              # Although the context has everything necessary to create the pool,
              # this function has historically only used the scheme, host, and port
              # in the positional args. When an API change is acceptable these can
              # be removed.
              for key in ('scheme', 'host', 'port'):
                  request_context.pop(key, None)

              if scheme == 'http':
                  for kw in SSL_KEYWORDS:
                      request_context.pop(kw, None)

              return pool_cls(host, port, **request_context)
    tokens: resume load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast scheme binary_subscr store_fast pool_cls load_fast request_context pop_jump_if_not_none TO_NUMBER load_fast self load_attr STRING_LEN_S_ENT_HIGH load_attr copy call store_fast request_context load_const get_iter for_iter TO_NUMBER store_fast key load_fast request_context load_attr pop load_fast key load_const call pop_top jump_backward TO_NUMBER end_for load_fast scheme load_const http compare_op == pop_jump_if_false TO_NUMBER load_global SSL_KEYWORDS get_iter for_iter TO_NUMBER store_fast kw load_fast request_context load_attr pop load_fast kw load_const call pop_top jump_backward TO_NUMBER end_for push_null load_fast pool_cls load_fast host load_fast port build_tuple build_map load_fast request_context dict_merge call_function_ex return_value
    hash: 3f05fa29b5477066b47b90f67d491bacf352693d833228b6d7fe6070f6a93ef0
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/poolmanager.py
  : ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKaW1wb3J0IGNvbGxlY3Rpb25zCmltcG9ydCBmdW5jdG9vbHMKaW1wb3J0IGxvZ2dpbmcKCmZyb20gLl9jb2xsZWN0aW9ucyBpbXBvcnQgUmVjZW50bHlVc2VkQ29udGFpbmVyCmZyb20gLmNvbm5lY3Rpb25wb29sIGltcG9ydCBIVFRQQ29ubmVjdGlvblBvb2wsIEhUVFBTQ29ubmVjdGlvblBvb2wKZnJvbSAuY29ubmVjdGlvbnBvb2wgaW1wb3J0IHBvcnRfYnlfc2NoZW1lCmZyb20gLmV4Y2VwdGlvbnMgaW1wb3J0IExvY2F0aW9uVmFsdWVFcnJvciwgTWF4UmV0cnlFcnJvciwgUHJveHlTY2hlbWVVbmtub3duCmZyb20gLnBhY2thZ2VzIGltcG9ydCBzaXgKZnJvbSAucGFja2FnZXMuc2l4Lm1vdmVzLnVybGxpYi5wYXJzZSBpbXBvcnQgdXJsam9pbgpmcm9tIC5yZXF1ZXN0IGltcG9ydCBSZXF1ZXN0TWV0aG9kcwpmcm9tIC51dGlsLnVybCBpbXBvcnQgcGFyc2VfdXJsCmZyb20gLnV0aWwucmV0cnkgaW1wb3J0IFJldHJ5CgoKX19hbGxfXyA9IFsnUG9vbE1hbmFnZXInLCAnUHJveHlNYW5hZ2VyJywgJ3Byb3h5X2Zyb21fdXJsJ10KCgpsb2cgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKClNTTF9LRVlXT1JEUyA9ICgna2V5X2ZpbGUnLCAnY2VydF9maWxlJywgJ2NlcnRfcmVxcycsICdjYV9jZXJ0cycsCiAgICAgICAgICAgICAgICAnc3NsX3ZlcnNpb24nLCAnY2FfY2VydF9kaXInLCAnc3NsX2NvbnRleHQnKQoKIyBBbGwga25vd24ga2V5d29yZCBhcmd1bWVudHMgdGhhdCBjb3VsZCBiZSBwcm92aWRlZCB0byB0aGUgcG9vbCBtYW5hZ2VyLCBpdHMKIyBwb29scywgb3IgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbnMuIFRoaXMgaXMgdXNlZCB0byBjb25zdHJ1Y3QgYSBwb29sIGtleS4KX2tleV9maWVsZHMgPSAoCiAgICAna2V5X3NjaGVtZScsICAjIHN0cgogICAgJ2tleV9ob3N0JywgICMgc3RyCiAgICAna2V5X3BvcnQnLCAgIyBpbnQKICAgICdrZXlfdGltZW91dCcsICAjIGludCBvciBmbG9hdCBvciBUaW1lb3V0CiAgICAna2V5X3JldHJpZXMnLCAgIyBpbnQgb3IgUmV0cnkKICAgICdrZXlfc3RyaWN0JywgICMgYm9vbAogICAgJ2tleV9ibG9jaycsICAjIGJvb2wKICAgICdrZXlfc291cmNlX2FkZHJlc3MnLCAgIyBzdHIKICAgICdrZXlfa2V5X2ZpbGUnLCAgIyBzdHIKICAgICdrZXlfY2VydF9maWxlJywgICMgc3RyCiAgICAna2V5X2NlcnRfcmVxcycsICAjIHN0cgogICAgJ2tleV9jYV9jZXJ0cycsICAjIHN0cgogICAgJ2tleV9zc2xfdmVyc2lvbicsICAjIHN0cgogICAgJ2tleV9jYV9jZXJ0X2RpcicsICAjIHN0cgogICAgJ2tleV9zc2xfY29udGV4dCcsICAjIGluc3RhbmNlIG9mIHNzbC5TU0xDb250ZXh0IG9yIHVybGxpYjMudXRpbC5zc2xfLlNTTENvbnRleHQKICAgICdrZXlfbWF4c2l6ZScsICAjIGludAogICAgJ2tleV9oZWFkZXJzJywgICMgZGljdAogICAgJ2tleV9fcHJveHknLCAgIyBwYXJzZWQgcHJveHkgdXJsCiAgICAna2V5X19wcm94eV9oZWFkZXJzJywgICMgZGljdAogICAgJ2tleV9zb2NrZXRfb3B0aW9ucycsICAjIGxpc3Qgb2YgKGxldmVsIChpbnQpLCBvcHRuYW1lIChpbnQpLCB2YWx1ZSAoaW50IG9yIHN0cikpIHR1cGxlcwogICAgJ2tleV9fc29ja3Nfb3B0aW9ucycsICAjIGRpY3QKICAgICdrZXlfYXNzZXJ0X2hvc3RuYW1lJywgICMgYm9vbCBvciBzdHJpbmcKICAgICdrZXlfYXNzZXJ0X2ZpbmdlcnByaW50JywgICMgc3RyCiAgICAna2V5X3NlcnZlcl9ob3N0bmFtZScsICAjIHN0cgopCgojOiBUaGUgbmFtZWR0dXBsZSBjbGFzcyB1c2VkIHRvIGNvbnN0cnVjdCBrZXlzIGZvciB0aGUgY29ubmVjdGlvbiBwb29sLgojOiBBbGwgY3VzdG9tIGtleSBzY2hlbWVzIHNob3VsZCBpbmNsdWRlIHRoZSBmaWVsZHMgaW4gdGhpcyBrZXkgYXQgYSBtaW5pbXVtLgpQb29sS2V5ID0gY29sbGVjdGlvbnMubmFtZWR0dXBsZSgnUG9vbEtleScsIF9rZXlfZmllbGRzKQoKCmRlZiBfZGVmYXVsdF9rZXlfbm9ybWFsaXplcihrZXlfY2xhc3MsIHJlcXVlc3RfY29udGV4dCk6CiAgICAiIiIKICAgIENyZWF0ZSBhIHBvb2wga2V5IG91dCBvZiBhIHJlcXVlc3QgY29udGV4dCBkaWN0aW9uYXJ5LgoKICAgIEFjY29yZGluZyB0byBSRkMgMzk4NiwgYm90aCB0aGUgc2NoZW1lIGFuZCBob3N0IGFyZSBjYXNlLWluc2Vuc2l0aXZlLgogICAgVGhlcmVmb3JlLCB0aGlzIGZ1bmN0aW9uIG5vcm1hbGl6ZXMgYm90aCBiZWZvcmUgY29uc3RydWN0aW5nIHRoZSBwb29sCiAgICBrZXkgZm9yIGFuIEhUVFBTIHJlcXVlc3QuIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGlzIGJlaGF2aW91ciwgcHJvdmlkZQogICAgYWx0ZXJuYXRlIGNhbGxhYmxlcyB0byBgYGtleV9mbl9ieV9zY2hlbWVgYC4KCiAgICA6cGFyYW0ga2V5X2NsYXNzOgogICAgICAgIFRoZSBjbGFzcyB0byB1c2Ugd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIGtleS4gVGhpcyBzaG91bGQgYmUgYSBuYW1lZHR1cGxlCiAgICAgICAgd2l0aCB0aGUgYGBzY2hlbWVgYCBhbmQgYGBob3N0YGAga2V5cyBhdCBhIG1pbmltdW0uCiAgICA6dHlwZSAga2V5X2NsYXNzOiBuYW1lZHR1cGxlCiAgICA6cGFyYW0gcmVxdWVzdF9jb250ZXh0OgogICAgICAgIEEgZGljdGlvbmFyeS1saWtlIG9iamVjdCB0aGF0IGNvbnRhaW4gdGhlIGNvbnRleHQgZm9yIGEgcmVxdWVzdC4KICAgIDp0eXBlICByZXF1ZXN0X2NvbnRleHQ6IGRpY3QKCiAgICA6cmV0dXJuOiBBIG5hbWVkdHVwbGUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIGNvbm5lY3Rpb24gcG9vbCBrZXkuCiAgICA6cnR5cGU6ICBQb29sS2V5CiAgICAiIiIKICAgICMgU2luY2Ugd2UgbXV0YXRlIHRoZSBkaWN0aW9uYXJ5LCBtYWtlIGEgY29weSBmaXJzdAogICAgY29udGV4dCA9IHJlcXVlc3RfY29udGV4dC5jb3B5KCkKICAgIGNvbnRleHRbJ3NjaGVtZSddID0gY29udGV4dFsnc2NoZW1lJ10ubG93ZXIoKQogICAgY29udGV4dFsnaG9zdCddID0gY29udGV4dFsnaG9zdCddLmxvd2VyKCkKCiAgICAjIFRoZXNlIGFyZSBib3RoIGRpY3Rpb25hcmllcyBhbmQgbmVlZCB0byBiZSB0cmFuc2Zvcm1lZCBpbnRvIGZyb3plbnNldHMKICAgIGZvciBrZXkgaW4gKCdoZWFkZXJzJywgJ19wcm94eV9oZWFkZXJzJywgJ19zb2Nrc19vcHRpb25zJyk6CiAgICAgICAgaWYga2V5IGluIGNvbnRleHQgYW5kIGNvbnRleHRba2V5XSBpcyBub3QgTm9uZToKICAgICAgICAgICAgY29udGV4dFtrZXldID0gZnJvemVuc2V0KGNvbnRleHRba2V5XS5pdGVtcygpKQoKICAgICMgVGhlIHNvY2tldF9vcHRpb25zIGtleSBtYXkgYmUgYSBsaXN0IGFuZCBuZWVkcyB0byBiZSB0cmFuc2Zvcm1lZCBpbnRvIGEKICAgICMgdHVwbGUuCiAgICBzb2NrZXRfb3B0cyA9IGNvbnRleHQuZ2V0KCdzb2NrZXRfb3B0aW9ucycpCiAgICBpZiBzb2NrZXRfb3B0cyBpcyBub3QgTm9uZToKICAgICAgICBjb250ZXh0Wydzb2NrZXRfb3B0aW9ucyddID0gdHVwbGUoc29ja2V0X29wdHMpCgogICAgIyBNYXAgdGhlIGt3YXJncyB0byB0aGUgbmFtZXMgaW4gdGhlIG5hbWVkdHVwbGUgLSB0aGlzIGlzIG5lY2Vzc2FyeSBzaW5jZQogICAgIyBuYW1lZHR1cGxlcyBjYW4ndCBoYXZlIGZpZWxkcyBzdGFydGluZyB3aXRoICdfJy4KICAgIGZvciBrZXkgaW4gbGlzdChjb250ZXh0LmtleXMoKSk6CiAgICAgICAgY29udGV4dFsna2V5XycgKyBrZXldID0gY29udGV4dC5wb3Aoa2V5KQoKICAgICMgRGVmYXVsdCB0byBgYE5vbmVgYCBmb3Iga2V5cyBtaXNzaW5nIGZyb20gdGhlIGNvbnRleHQKICAgIGZvciBmaWVsZCBpbiBrZXlfY2xhc3MuX2ZpZWxkczoKICAgICAgICBpZiBmaWVsZCBub3QgaW4gY29udGV4dDoKICAgICAgICAgICAgY29udGV4dFtmaWVsZF0gPSBOb25lCgogICAgcmV0dXJuIGtleV9jbGFzcygqKmNvbnRleHQpCgoKIzogQSBkaWN0aW9uYXJ5IHRoYXQgbWFwcyBhIHNjaGVtZSB0byBhIGNhbGxhYmxlIHRoYXQgY3JlYXRlcyBhIHBvb2wga2V5LgojOiBUaGlzIGNhbiBiZSB1c2VkIHRvIGFsdGVyIHRoZSB3YXkgcG9vbCBrZXlzIGFyZSBjb25zdHJ1Y3RlZCwgaWYgZGVzaXJlZC4KIzogRWFjaCBQb29sTWFuYWdlciBtYWtlcyBhIGNvcHkgb2YgdGhpcyBkaWN0aW9uYXJ5IHNvIHRoZXkgY2FuIGJlIGNvbmZpZ3VyZWQKIzogZ2xvYmFsbHkgaGVyZSwgb3IgaW5kaXZpZHVhbGx5IG9uIHRoZSBpbnN0YW5jZS4Ka2V5X2ZuX2J5X3NjaGVtZSA9IHsKICAgICdodHRwJzogZnVuY3Rvb2xzLnBhcnRpYWwoX2RlZmF1bHRfa2V5X25vcm1hbGl6ZXIsIFBvb2xLZXkpLAogICAgJ2h0dHBzJzogZnVuY3Rvb2xzLnBhcnRpYWwoX2RlZmF1bHRfa2V5X25vcm1hbGl6ZXIsIFBvb2xLZXkpLAp9Cgpwb29sX2NsYXNzZXNfYnlfc2NoZW1lID0gewogICAgJ2h0dHAnOiBIVFRQQ29ubmVjdGlvblBvb2wsCiAgICAnaHR0cHMnOiBIVFRQU0Nvbm5lY3Rpb25Qb29sLAp9CgoKY2xhc3MgUG9vbE1hbmFnZXIoUmVxdWVzdE1ldGhvZHMpOgogICAgIiIiCiAgICBBbGxvd3MgZm9yIGFyYml0cmFyeSByZXF1ZXN0cyB3aGlsZSB0cmFuc3BhcmVudGx5IGtlZXBpbmcgdHJhY2sgb2YKICAgIG5lY2Vzc2FyeSBjb25uZWN0aW9uIHBvb2xzIGZvciB5b3UuCgogICAgOnBhcmFtIG51bV9wb29sczoKICAgICAgICBOdW1iZXIgb2YgY29ubmVjdGlvbiBwb29scyB0byBjYWNoZSBiZWZvcmUgZGlzY2FyZGluZyB0aGUgbGVhc3QKICAgICAgICByZWNlbnRseSB1c2VkIHBvb2wuCgogICAgOnBhcmFtIGhlYWRlcnM6CiAgICAgICAgSGVhZGVycyB0byBpbmNsdWRlIHdpdGggYWxsIHJlcXVlc3RzLCB1bmxlc3Mgb3RoZXIgaGVhZGVycyBhcmUgZ2l2ZW4KICAgICAgICBleHBsaWNpdGx5LgoKICAgIDpwYXJhbSBcXCoqY29ubmVjdGlvbl9wb29sX2t3OgogICAgICAgIEFkZGl0aW9uYWwgcGFyYW1ldGVycyBhcmUgdXNlZCB0byBjcmVhdGUgZnJlc2gKICAgICAgICA6Y2xhc3M6YHVybGxpYjMuY29ubmVjdGlvbnBvb2wuQ29ubmVjdGlvblBvb2xgIGluc3RhbmNlcy4KCiAgICBFeGFtcGxlOjoKCiAgICAgICAgPj4+IG1hbmFnZXIgPSBQb29sTWFuYWdlcihudW1fcG9vbHM9MikKICAgICAgICA+Pj4gciA9IG1hbmFnZXIucmVxdWVzdCgnR0VUJywgJ2h0dHA6Ly9nb29nbGUuY29tLycpCiAgICAgICAgPj4+IHIgPSBtYW5hZ2VyLnJlcXVlc3QoJ0dFVCcsICdodHRwOi8vZ29vZ2xlLmNvbS9tYWlsJykKICAgICAgICA+Pj4gciA9IG1hbmFnZXIucmVxdWVzdCgnR0VUJywgJ2h0dHA6Ly95YWhvby5jb20vJykKICAgICAgICA+Pj4gbGVuKG1hbmFnZXIucG9vbHMpCiAgICAgICAgMgoKICAgICIiIgoKICAgIHByb3h5ID0gTm9uZQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBudW1fcG9vbHM9MTAsIGhlYWRlcnM9Tm9uZSwgKipjb25uZWN0aW9uX3Bvb2xfa3cpOgogICAgICAgIFJlcXVlc3RNZXRob2RzLl9faW5pdF9fKHNlbGYsIGhlYWRlcnMpCiAgICAgICAgc2VsZi5jb25uZWN0aW9uX3Bvb2xfa3cgPSBjb25uZWN0aW9uX3Bvb2xfa3cKICAgICAgICBzZWxmLnBvb2xzID0gUmVjZW50bHlVc2VkQ29udGFpbmVyKG51bV9wb29scywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VfZnVuYz1sYW1iZGEgcDogcC5jbG9zZSgpKQoKICAgICAgICAjIExvY2FsbHkgc2V0IHRoZSBwb29sIGNsYXNzZXMgYW5kIGtleXMgc28gb3RoZXIgUG9vbE1hbmFnZXJzIGNhbgogICAgICAgICMgb3ZlcnJpZGUgdGhlbS4KICAgICAgICBzZWxmLnBvb2xfY2xhc3Nlc19ieV9zY2hlbWUgPSBwb29sX2NsYXNzZXNfYnlfc2NoZW1lCiAgICAgICAgc2VsZi5rZXlfZm5fYnlfc2NoZW1lID0ga2V5X2ZuX2J5X3NjaGVtZS5jb3B5KCkKCiAgICBkZWYgX19lbnRlcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGV4Y190eXBlLCBleGNfdmFsLCBleGNfdGIpOgogICAgICAgIHNlbGYuY2xlYXIoKQogICAgICAgICMgUmV0dXJuIEZhbHNlIHRvIHJlLXJhaXNlIGFueSBwb3RlbnRpYWwgZXhjZXB0aW9ucwogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfbmV3X3Bvb2woc2VsZiwgc2NoZW1lLCBob3N0LCBwb3J0LCByZXF1ZXN0X2NvbnRleHQ9Tm9uZSk6CiAgICAgICAgIiIiCiAgICAgICAgQ3JlYXRlIGEgbmV3IDpjbGFzczpgQ29ubmVjdGlvblBvb2xgIGJhc2VkIG9uIGhvc3QsIHBvcnQsIHNjaGVtZSwgYW5kCiAgICAgICAgYW55IGFkZGl0aW9uYWwgcG9vbCBrZXl3b3JkIGFyZ3VtZW50cy4KCiAgICAgICAgSWYgYGByZXF1ZXN0X2NvbnRleHRgYCBpcyBwcm92aWRlZCwgaXQgaXMgcHJvdmlkZWQgYXMga2V5d29yZCBhcmd1bWVudHMKICAgICAgICB0byB0aGUgcG9vbCBjbGFzcyB1c2VkLiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGFjdHVhbGx5IGNyZWF0ZSB0aGUKICAgICAgICBjb25uZWN0aW9uIHBvb2xzIGhhbmRlZCBvdXQgYnkgOm1ldGg6YGNvbm5lY3Rpb25fZnJvbV91cmxgIGFuZAogICAgICAgIGNvbXBhbmlvbiBtZXRob2RzLiBJdCBpcyBpbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuIGZvciBjdXN0b21pemF0aW9uLgogICAgICAgICIiIgogICAgICAgIHBvb2xfY2xzID0gc2VsZi5wb29sX2NsYXNzZXNfYnlfc2NoZW1lW3NjaGVtZV0KICAgICAgICBpZiByZXF1ZXN0X2NvbnRleHQgaXMgTm9uZToKICAgICAgICAgICAgcmVxdWVzdF9jb250ZXh0ID0gc2VsZi5jb25uZWN0aW9uX3Bvb2xfa3cuY29weSgpCgogICAgICAgICMgQWx0aG91Z2ggdGhlIGNvbnRleHQgaGFzIGV2ZXJ5dGhpbmcgbmVjZXNzYXJ5IHRvIGNyZWF0ZSB0aGUgcG9vbCwKICAgICAgICAjIHRoaXMgZnVuY3Rpb24gaGFzIGhpc3RvcmljYWxseSBvbmx5IHVzZWQgdGhlIHNjaGVtZSwgaG9zdCwgYW5kIHBvcnQKICAgICAgICAjIGluIHRoZSBwb3NpdGlvbmFsIGFyZ3MuIFdoZW4gYW4gQVBJIGNoYW5nZSBpcyBhY2NlcHRhYmxlIHRoZXNlIGNhbgogICAgICAgICMgYmUgcmVtb3ZlZC4KICAgICAgICBmb3Iga2V5IGluICgnc2NoZW1lJywgJ2hvc3QnLCAncG9ydCcpOgogICAgICAgICAgICByZXF1ZXN0X2NvbnRleHQucG9wKGtleSwgTm9uZSkKCiAgICAgICAgaWYgc2NoZW1lID09ICdodHRwJzoKICAgICAgICAgICAgZm9yIGt3IGluIFNTTF9LRVlXT1JEUzoKICAgICAgICAgICAgICAgIHJlcXVlc3RfY29udGV4dC5wb3Aoa3csIE5vbmUpCgogICAgICAgIHJldHVybiBwb29sX2Nscyhob3N0LCBwb3J0LCAqKnJlcXVlc3RfY29udGV4dCkKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgRW1wdHkgb3VyIHN0b3JlIG9mIHBvb2xzIGFuZCBkaXJlY3QgdGhlbSBhbGwgdG8gY2xvc2UuCgogICAgICAgIFRoaXMgd2lsbCBub3QgYWZmZWN0IGluLWZsaWdodCBjb25uZWN0aW9ucywgYnV0IHRoZXkgd2lsbCBub3QgYmUKICAgICAgICByZS11c2VkIGFmdGVyIGNvbXBsZXRpb24uCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5wb29scy5jbGVhcigpCgogICAgZGVmIGNvbm5lY3Rpb25fZnJvbV9ob3N0KHNlbGYsIGhvc3QsIHBvcnQ9Tm9uZSwgc2NoZW1lPSdodHRwJywgcG9vbF9rd2FyZ3M9Tm9uZSk6CiAgICAgICAgIiIiCiAgICAgICAgR2V0IGEgOmNsYXNzOmBDb25uZWN0aW9uUG9vbGAgYmFzZWQgb24gdGhlIGhvc3QsIHBvcnQsIGFuZCBzY2hlbWUuCgogICAgICAgIElmIGBgcG9ydGBgIGlzbid0IGdpdmVuLCBpdCB3aWxsIGJlIGRlcml2ZWQgZnJvbSB0aGUgYGBzY2hlbWVgYCB1c2luZwogICAgICAgIGBgdXJsbGliMy5jb25uZWN0aW9ucG9vbC5wb3J0X2J5X3NjaGVtZWBgLiBJZiBgYHBvb2xfa3dhcmdzYGAgaXMKICAgICAgICBwcm92aWRlZCwgaXQgaXMgbWVyZ2VkIHdpdGggdGhlIGluc3RhbmNlJ3MgYGBjb25uZWN0aW9uX3Bvb2xfa3dgYAogICAgICAgIHZhcmlhYmxlIGFuZCB1c2VkIHRvIGNyZWF0ZSB0aGUgbmV3IGNvbm5lY3Rpb24gcG9vbCwgaWYgb25lIGlzCiAgICAgICAgbmVlZGVkLgogICAgICAgICIiIgoKICAgICAgICBpZiBub3QgaG9zdDoKICAgICAgICAgICAgcmFpc2UgTG9jYXRpb25WYWx1ZUVycm9yKCJObyBob3N0IHNwZWNpZmllZC4iKQoKICAgICAgICByZXF1ZXN0X2NvbnRleHQgPSBzZWxmLl9tZXJnZV9wb29sX2t3YXJncyhwb29sX2t3YXJncykKICAgICAgICByZXF1ZXN0X2NvbnRleHRbJ3NjaGVtZSddID0gc2NoZW1lIG9yICdodHRwJwogICAgICAgIGlmIG5vdCBwb3J0OgogICAgICAgICAgICBwb3J0ID0gcG9ydF9ieV9zY2hlbWUuZ2V0KHJlcXVlc3RfY29udGV4dFsnc2NoZW1lJ10ubG93ZXIoKSwgODApCiAgICAgICAgcmVxdWVzdF9jb250ZXh0Wydwb3J0J10gPSBwb3J0CiAgICAgICAgcmVxdWVzdF9jb250ZXh0Wydob3N0J10gPSBob3N0CgogICAgICAgIHJldHVybiBzZWxmLmNvbm5lY3Rpb25fZnJvbV9jb250ZXh0KHJlcXVlc3RfY29udGV4dCkKCiAgICBkZWYgY29ubmVjdGlvbl9mcm9tX2NvbnRleHQoc2VsZiwgcmVxdWVzdF9jb250ZXh0KToKICAgICAgICAiIiIKICAgICAgICBHZXQgYSA6Y2xhc3M6YENvbm5lY3Rpb25Qb29sYCBiYXNlZCBvbiB0aGUgcmVxdWVzdCBjb250ZXh0LgoKICAgICAgICBgYHJlcXVlc3RfY29udGV4dGBgIG11c3QgYXQgbGVhc3QgY29udGFpbiB0aGUgYGBzY2hlbWVgYCBrZXkgYW5kIGl0cwogICAgICAgIHZhbHVlIG11c3QgYmUgYSBrZXkgaW4gYGBrZXlfZm5fYnlfc2NoZW1lYGAgaW5zdGFuY2UgdmFyaWFibGUuCiAgICAgICAgIiIiCiAgICAgICAgc2NoZW1lID0gcmVxdWVzdF9jb250ZXh0WydzY2hlbWUnXS5sb3dlcigpCiAgICAgICAgcG9vbF9rZXlfY29uc3RydWN0b3IgPSBzZWxmLmtleV9mbl9ieV9zY2hlbWVbc2NoZW1lXQogICAgICAgIHBvb2xfa2V5ID0gcG9vbF9rZXlfY29uc3RydWN0b3IocmVxdWVzdF9jb250ZXh0KQoKICAgICAgICByZXR1cm4gc2VsZi5jb25uZWN0aW9uX2Zyb21fcG9vbF9rZXkocG9vbF9rZXksIHJlcXVlc3RfY29udGV4dD1yZXF1ZXN0X2NvbnRleHQpCgogICAgZGVmIGNvbm5lY3Rpb25fZnJvbV9wb29sX2tleShzZWxmLCBwb29sX2tleSwgcmVxdWVzdF9jb250ZXh0PU5vbmUpOgogICAgICAgICIiIgogICAgICAgIEdldCBhIDpjbGFzczpgQ29ubmVjdGlvblBvb2xgIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBwb29sIGtleS4KCiAgICAgICAgYGBwb29sX2tleWBgIHNob3VsZCBiZSBhIG5hbWVkdHVwbGUgdGhhdCBvbmx5IGNvbnRhaW5zIGltbXV0YWJsZQogICAgICAgIG9iamVjdHMuIEF0IGEgbWluaW11bSBpdCBtdXN0IGhhdmUgdGhlIGBgc2NoZW1lYGAsIGBgaG9zdGBgLCBhbmQKICAgICAgICBgYHBvcnRgYCBmaWVsZHMuCiAgICAgICAgIiIiCiAgICAgICAgd2l0aCBzZWxmLnBvb2xzLmxvY2s6CiAgICAgICAgICAgICMgSWYgdGhlIHNjaGVtZSwgaG9zdCwgb3IgcG9ydCBkb2Vzbid0IG1hdGNoIGV4aXN0aW5nIG9wZW4KICAgICAgICAgICAgIyBjb25uZWN0aW9ucywgb3BlbiBhIG5ldyBDb25uZWN0aW9uUG9vbC4KICAgICAgICAgICAgcG9vbCA9IHNlbGYucG9vbHMuZ2V0KHBvb2xfa2V5KQogICAgICAgICAgICBpZiBwb29sOgogICAgICAgICAgICAgICAgcmV0dXJuIHBvb2wKCiAgICAgICAgICAgICMgTWFrZSBhIGZyZXNoIENvbm5lY3Rpb25Qb29sIG9mIHRoZSBkZXNpcmVkIHR5cGUKICAgICAgICAgICAgc2NoZW1lID0gcmVxdWVzdF9jb250ZXh0WydzY2hlbWUnXQogICAgICAgICAgICBob3N0ID0gcmVxdWVzdF9jb250ZXh0Wydob3N0J10KICAgICAgICAgICAgcG9ydCA9IHJlcXVlc3RfY29udGV4dFsncG9ydCddCiAgICAgICAgICAgIHBvb2wgPSBzZWxmLl9uZXdfcG9vbChzY2hlbWUsIGhvc3QsIHBvcnQsIHJlcXVlc3RfY29udGV4dD1yZXF1ZXN0X2NvbnRleHQpCiAgICAgICAgICAgIHNlbGYucG9vbHNbcG9vbF9rZXldID0gcG9vbAoKICAgICAgICByZXR1cm4gcG9vbAoKICAgIGRlZiBjb25uZWN0aW9uX2Zyb21fdXJsKHNlbGYsIHVybCwgcG9vbF9rd2FyZ3M9Tm9uZSk6CiAgICAgICAgIiIiCiAgICAgICAgU2ltaWxhciB0byA6ZnVuYzpgdXJsbGliMy5jb25uZWN0aW9ucG9vbC5jb25uZWN0aW9uX2Zyb21fdXJsYC4KCiAgICAgICAgSWYgYGBwb29sX2t3YXJnc2BgIGlzIG5vdCBwcm92aWRlZCBhbmQgYSBuZXcgcG9vbCBuZWVkcyB0byBiZQogICAgICAgIGNvbnN0cnVjdGVkLCBgYHNlbGYuY29ubmVjdGlvbl9wb29sX2t3YGAgaXMgdXNlZCB0byBpbml0aWFsaXplCiAgICAgICAgdGhlIDpjbGFzczpgdXJsbGliMy5jb25uZWN0aW9ucG9vbC5Db25uZWN0aW9uUG9vbGAuIElmIGBgcG9vbF9rd2FyZ3NgYAogICAgICAgIGlzIHByb3ZpZGVkLCBpdCBpcyB1c2VkIGluc3RlYWQuIE5vdGUgdGhhdCBpZiBhIG5ldyBwb29sIGRvZXMgbm90CiAgICAgICAgbmVlZCB0byBiZSBjcmVhdGVkIGZvciB0aGUgcmVxdWVzdCwgdGhlIHByb3ZpZGVkIGBgcG9vbF9rd2FyZ3NgYCBhcmUKICAgICAgICBub3QgdXNlZC4KICAgICAgICAiIiIKICAgICAgICB1ID0gcGFyc2VfdXJsKHVybCkKICAgICAgICByZXR1cm4gc2VsZi5jb25uZWN0aW9uX2Zyb21faG9zdCh1Lmhvc3QsIHBvcnQ9dS5wb3J0LCBzY2hlbWU9dS5zY2hlbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9vbF9rd2FyZ3M9cG9vbF9rd2FyZ3MpCgogICAgZGVmIF9tZXJnZV9wb29sX2t3YXJncyhzZWxmLCBvdmVycmlkZSk6CiAgICAgICAgIiIiCiAgICAgICAgTWVyZ2UgYSBkaWN0aW9uYXJ5IG9mIG92ZXJyaWRlIHZhbHVlcyBmb3Igc2VsZi5jb25uZWN0aW9uX3Bvb2xfa3cuCgogICAgICAgIFRoaXMgZG9lcyBub3QgbW9kaWZ5IHNlbGYuY29ubmVjdGlvbl9wb29sX2t3IGFuZCByZXR1cm5zIGEgbmV3IGRpY3QuCiAgICAgICAgQW55IGtleXMgaW4gdGhlIG92ZXJyaWRlIGRpY3Rpb25hcnkgd2l0aCBhIHZhbHVlIG9mIGBgTm9uZWBgIGFyZQogICAgICAgIHJlbW92ZWQgZnJvbSB0aGUgbWVyZ2VkIGRpY3Rpb25hcnkuCiAgICAgICAgIiIiCiAgICAgICAgYmFzZV9wb29sX2t3YXJncyA9IHNlbGYuY29ubmVjdGlvbl9wb29sX2t3LmNvcHkoKQogICAgICAgIGlmIG92ZXJyaWRlOgogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBvdmVycmlkZS5pdGVtcygpOgogICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbCBiYXNlX3Bvb2xfa3dhcmdzW2tleV0KICAgICAgICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgYmFzZV9wb29sX2t3YXJnc1trZXldID0gdmFsdWUKICAgICAgICByZXR1cm4gYmFzZV9wb29sX2t3YXJncwoKICAgIGRlZiB1cmxvcGVuKHNlbGYsIG1ldGhvZCwgdXJsLCByZWRpcmVjdD1UcnVlLCAqKmt3KToKICAgICAgICAiIiIKICAgICAgICBTYW1lIGFzIDptZXRoOmB1cmxsaWIzLmNvbm5lY3Rpb25wb29sLkhUVFBDb25uZWN0aW9uUG9vbC51cmxvcGVuYAogICAgICAgIHdpdGggY3VzdG9tIGNyb3NzLWhvc3QgcmVkaXJlY3QgbG9naWMgYW5kIG9ubHkgc2VuZHMgdGhlIHJlcXVlc3QtdXJpCiAgICAgICAgcG9ydGlvbiBvZiB0aGUgYGB1cmxgYC4KCiAgICAgICAgVGhlIGdpdmVuIGBgdXJsYGAgcGFyYW1ldGVyIG11c3QgYmUgYWJzb2x1dGUsIHN1Y2ggdGhhdCBhbiBhcHByb3ByaWF0ZQogICAgICAgIDpjbGFzczpgdXJsbGliMy5jb25uZWN0aW9ucG9vbC5Db25uZWN0aW9uUG9vbGAgY2FuIGJlIGNob3NlbiBmb3IgaXQuCiAgICAgICAgIiIiCiAgICAgICAgdSA9IHBhcnNlX3VybCh1cmwpCiAgICAgICAgY29ubiA9IHNlbGYuY29ubmVjdGlvbl9mcm9tX2hvc3QodS5ob3N0LCBwb3J0PXUucG9ydCwgc2NoZW1lPXUuc2NoZW1lKQoKICAgICAgICBrd1snYXNzZXJ0X3NhbWVfaG9zdCddID0gRmFsc2UKICAgICAgICBrd1sncmVkaXJlY3QnXSA9IEZhbHNlCgogICAgICAgIGlmICdoZWFkZXJzJyBub3QgaW4ga3c6CiAgICAgICAgICAgIGt3WydoZWFkZXJzJ10gPSBzZWxmLmhlYWRlcnMuY29weSgpCgogICAgICAgIGlmIHNlbGYucHJveHkgaXMgbm90IE5vbmUgYW5kIHUuc2NoZW1lID09ICJodHRwIjoKICAgICAgICAgICAgcmVzcG9uc2UgPSBjb25uLnVybG9wZW4obWV0aG9kLCB1cmwsICoqa3cpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzcG9uc2UgPSBjb25uLnVybG9wZW4obWV0aG9kLCB1LnJlcXVlc3RfdXJpLCAqKmt3KQoKICAgICAgICByZWRpcmVjdF9sb2NhdGlvbiA9IHJlZGlyZWN0IGFuZCByZXNwb25zZS5nZXRfcmVkaXJlY3RfbG9jYXRpb24oKQogICAgICAgIGlmIG5vdCByZWRpcmVjdF9sb2NhdGlvbjoKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlCgogICAgICAgICMgU3VwcG9ydCByZWxhdGl2ZSBVUkxzIGZvciByZWRpcmVjdGluZy4KICAgICAgICByZWRpcmVjdF9sb2NhdGlvbiA9IHVybGpvaW4odXJsLCByZWRpcmVjdF9sb2NhdGlvbikKCiAgICAgICAgIyBSRkMgNzIzMSwgU2VjdGlvbiA2LjQuNAogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1cyA9PSAzMDM6CiAgICAgICAgICAgIG1ldGhvZCA9ICdHRVQnCgogICAgICAgIHJldHJpZXMgPSBrdy5nZXQoJ3JldHJpZXMnKQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHJldHJpZXMsIFJldHJ5KToKICAgICAgICAgICAgcmV0cmllcyA9IFJldHJ5LmZyb21faW50KHJldHJpZXMsIHJlZGlyZWN0PXJlZGlyZWN0KQoKICAgICAgICAjIFN0cmlwIGhlYWRlcnMgbWFya2VkIGFzIHVuc2FmZSB0byBmb3J3YXJkIHRvIHRoZSByZWRpcmVjdGVkIGxvY2F0aW9uLgogICAgICAgICMgQ2hlY2sgcmVtb3ZlX2hlYWRlcnNfb25fcmVkaXJlY3QgdG8gYXZvaWQgYSBwb3RlbnRpYWwgbmV0d29yayBjYWxsIHdpdGhpbgogICAgICAgICMgY29ubi5pc19zYW1lX2hvc3QoKSB3aGljaCBtYXkgdXNlIHNvY2tldC5nZXRob3N0YnluYW1lKCkgaW4gdGhlIGZ1dHVyZS4KICAgICAgICBpZiAocmV0cmllcy5yZW1vdmVfaGVhZGVyc19vbl9yZWRpcmVjdAogICAgICAgICAgICAgICAgYW5kIG5vdCBjb25uLmlzX3NhbWVfaG9zdChyZWRpcmVjdF9sb2NhdGlvbikpOgogICAgICAgICAgICBoZWFkZXJzID0gbGlzdChzaXguaXRlcmtleXMoa3dbJ2hlYWRlcnMnXSkpCiAgICAgICAgICAgIGZvciBoZWFkZXIgaW4gaGVhZGVyczoKICAgICAgICAgICAgICAgIGlmIGhlYWRlci5sb3dlcigpIGluIHJldHJpZXMucmVtb3ZlX2hlYWRlcnNfb25fcmVkaXJlY3Q6CiAgICAgICAgICAgICAgICAgICAga3dbJ2hlYWRlcnMnXS5wb3AoaGVhZGVyLCBOb25lKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHJpZXMgPSByZXRyaWVzLmluY3JlbWVudChtZXRob2QsIHVybCwgcmVzcG9uc2U9cmVzcG9uc2UsIF9wb29sPWNvbm4pCiAgICAgICAgZXhjZXB0IE1heFJldHJ5RXJyb3I6CiAgICAgICAgICAgIGlmIHJldHJpZXMucmFpc2Vfb25fcmVkaXJlY3Q6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UKCiAgICAgICAga3dbJ3JldHJpZXMnXSA9IHJldHJpZXMKICAgICAgICBrd1sncmVkaXJlY3QnXSA9IHJlZGlyZWN0CgogICAgICAgIGxvZy5pbmZvKCJSZWRpcmVjdGluZyAlcyAtPiAlcyIsIHVybCwgcmVkaXJlY3RfbG9jYXRpb24pCiAgICAgICAgcmV0dXJuIHNlbGYudXJsb3BlbihtZXRob2QsIHJlZGlyZWN0X2xvY2F0aW9uLCAqKmt3KQoKCmNsYXNzIFByb3h5TWFuYWdlcihQb29sTWFuYWdlcik6CiAgICAiIiIKICAgIEJlaGF2ZXMganVzdCBsaWtlIDpjbGFzczpgUG9vbE1hbmFnZXJgLCBidXQgc2VuZHMgYWxsIHJlcXVlc3RzIHRocm91Z2gKICAgIHRoZSBkZWZpbmVkIHByb3h5LCB1c2luZyB0aGUgQ09OTkVDVCBtZXRob2QgZm9yIEhUVFBTIFVSTHMuCgogICAgOnBhcmFtIHByb3h5X3VybDoKICAgICAgICBUaGUgVVJMIG9mIHRoZSBwcm94eSB0byBiZSB1c2VkLgoKICAgIDpwYXJhbSBwcm94eV9oZWFkZXJzOgogICAgICAgIEEgZGljdGlvbmFyeSBjb250YWluaW5nIGhlYWRlcnMgdGhhdCB3aWxsIGJlIHNlbnQgdG8gdGhlIHByb3h5LiBJbiBjYXNlCiAgICAgICAgb2YgSFRUUCB0aGV5IGFyZSBiZWluZyBzZW50IHdpdGggZWFjaCByZXF1ZXN0LCB3aGlsZSBpbiB0aGUKICAgICAgICBIVFRQUy9DT05ORUNUIGNhc2UgdGhleSBhcmUgc2VudCBvbmx5IG9uY2UuIENvdWxkIGJlIHVzZWQgZm9yIHByb3h5CiAgICAgICAgYXV0aGVudGljYXRpb24uCgogICAgRXhhbXBsZToKICAgICAgICA+Pj4gcHJveHkgPSB1cmxsaWIzLlByb3h5TWFuYWdlcignaHR0cDovL2xvY2FsaG9zdDozMTI4LycpCiAgICAgICAgPj4+IHIxID0gcHJveHkucmVxdWVzdCgnR0VUJywgJ2h0dHA6Ly9nb29nbGUuY29tLycpCiAgICAgICAgPj4+IHIyID0gcHJveHkucmVxdWVzdCgnR0VUJywgJ2h0dHA6Ly9odHRwYmluLm9yZy8nKQogICAgICAgID4+PiBsZW4ocHJveHkucG9vbHMpCiAgICAgICAgMQogICAgICAgID4+PiByMyA9IHByb3h5LnJlcXVlc3QoJ0dFVCcsICdodHRwczovL2h0dHBiaW4ub3JnLycpCiAgICAgICAgPj4+IHI0ID0gcHJveHkucmVxdWVzdCgnR0VUJywgJ2h0dHBzOi8vdHdpdHRlci5jb20vJykKICAgICAgICA+Pj4gbGVuKHByb3h5LnBvb2xzKQogICAgICAgIDMKCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcHJveHlfdXJsLCBudW1fcG9vbHM9MTAsIGhlYWRlcnM9Tm9uZSwKICAgICAgICAgICAgICAgICBwcm94eV9oZWFkZXJzPU5vbmUsICoqY29ubmVjdGlvbl9wb29sX2t3KToKCiAgICAgICAgaWYgaXNpbnN0YW5jZShwcm94eV91cmwsIEhUVFBDb25uZWN0aW9uUG9vbCk6CiAgICAgICAgICAgIHByb3h5X3VybCA9ICclczovLyVzOiVpJyAlIChwcm94eV91cmwuc2NoZW1lLCBwcm94eV91cmwuaG9zdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5X3VybC5wb3J0KQogICAgICAgIHByb3h5ID0gcGFyc2VfdXJsKHByb3h5X3VybCkKICAgICAgICBpZiBub3QgcHJveHkucG9ydDoKICAgICAgICAgICAgcG9ydCA9IHBvcnRfYnlfc2NoZW1lLmdldChwcm94eS5zY2hlbWUsIDgwKQogICAgICAgICAgICBwcm94eSA9IHByb3h5Ll9yZXBsYWNlKHBvcnQ9cG9ydCkKCiAgICAgICAgaWYgcHJveHkuc2NoZW1lIG5vdCBpbiAoImh0dHAiLCAiaHR0cHMiKToKICAgICAgICAgICAgcmFpc2UgUHJveHlTY2hlbWVVbmtub3duKHByb3h5LnNjaGVtZSkKCiAgICAgICAgc2VsZi5wcm94eSA9IHByb3h5CiAgICAgICAgc2VsZi5wcm94eV9oZWFkZXJzID0gcHJveHlfaGVhZGVycyBvciB7fQoKICAgICAgICBjb25uZWN0aW9uX3Bvb2xfa3dbJ19wcm94eSddID0gc2VsZi5wcm94eQogICAgICAgIGNvbm5lY3Rpb25fcG9vbF9rd1snX3Byb3h5X2hlYWRlcnMnXSA9IHNlbGYucHJveHlfaGVhZGVycwoKICAgICAgICBzdXBlcihQcm94eU1hbmFnZXIsIHNlbGYpLl9faW5pdF9fKAogICAgICAgICAgICBudW1fcG9vbHMsIGhlYWRlcnMsICoqY29ubmVjdGlvbl9wb29sX2t3KQoKICAgIGRlZiBjb25uZWN0aW9uX2Zyb21faG9zdChzZWxmLCBob3N0LCBwb3J0PU5vbmUsIHNjaGVtZT0naHR0cCcsIHBvb2xfa3dhcmdzPU5vbmUpOgogICAgICAgIGlmIHNjaGVtZSA9PSAiaHR0cHMiOgogICAgICAgICAgICByZXR1cm4gc3VwZXIoUHJveHlNYW5hZ2VyLCBzZWxmKS5jb25uZWN0aW9uX2Zyb21faG9zdCgKICAgICAgICAgICAgICAgIGhvc3QsIHBvcnQsIHNjaGVtZSwgcG9vbF9rd2FyZ3M9cG9vbF9rd2FyZ3MpCgogICAgICAgIHJldHVybiBzdXBlcihQcm94eU1hbmFnZXIsIHNlbGYpLmNvbm5lY3Rpb25fZnJvbV9ob3N0KAogICAgICAgICAgICBzZWxmLnByb3h5Lmhvc3QsIHNlbGYucHJveHkucG9ydCwgc2VsZi5wcm94eS5zY2hlbWUsIHBvb2xfa3dhcmdzPXBvb2xfa3dhcmdzKQoKICAgIGRlZiBfc2V0X3Byb3h5X2hlYWRlcnMoc2VsZiwgdXJsLCBoZWFkZXJzPU5vbmUpOgogICAgICAgICIiIgogICAgICAgIFNldHMgaGVhZGVycyBuZWVkZWQgYnkgcHJveGllczogc3BlY2lmaWNhbGx5LCB0aGUgQWNjZXB0IGFuZCBIb3N0CiAgICAgICAgaGVhZGVycy4gT25seSBzZXRzIGhlYWRlcnMgbm90IHByb3ZpZGVkIGJ5IHRoZSB1c2VyLgogICAgICAgICIiIgogICAgICAgIGhlYWRlcnNfID0geydBY2NlcHQnOiAnKi8qJ30KCiAgICAgICAgbmV0bG9jID0gcGFyc2VfdXJsKHVybCkubmV0bG9jCiAgICAgICAgaWYgbmV0bG9jOgogICAgICAgICAgICBoZWFkZXJzX1snSG9zdCddID0gbmV0bG9jCgogICAgICAgIGlmIGhlYWRlcnM6CiAgICAgICAgICAgIGhlYWRlcnNfLnVwZGF0ZShoZWFkZXJzKQogICAgICAgIHJldHVybiBoZWFkZXJzXwoKICAgIGRlZiB1cmxvcGVuKHNlbGYsIG1ldGhvZCwgdXJsLCByZWRpcmVjdD1UcnVlLCAqKmt3KToKICAgICAgICAiU2FtZSBhcyBIVFRQKFMpQ29ubmVjdGlvblBvb2wudXJsb3BlbiwgYGB1cmxgYCBtdXN0IGJlIGFic29sdXRlLiIKICAgICAgICB1ID0gcGFyc2VfdXJsKHVybCkKCiAgICAgICAgaWYgdS5zY2hlbWUgPT0gImh0dHAiOgogICAgICAgICAgICAjIEZvciBwcm94aWVkIEhUVFBTIHJlcXVlc3RzLCBodHRwbGliIHNldHMgdGhlIG5lY2Vzc2FyeSBoZWFkZXJzCiAgICAgICAgICAgICMgb24gdGhlIENPTk5FQ1QgdG8gdGhlIHByb3h5LiBGb3IgSFRUUCwgd2UnbGwgZGVmaW5pdGVseQogICAgICAgICAgICAjIG5lZWQgdG8gc2V0ICdIb3N0JyBhdCB0aGUgdmVyeSBsZWFzdC4KICAgICAgICAgICAgaGVhZGVycyA9IGt3LmdldCgnaGVhZGVycycsIHNlbGYuaGVhZGVycykKICAgICAgICAgICAga3dbJ2hlYWRlcnMnXSA9IHNlbGYuX3NldF9wcm94eV9oZWFkZXJzKHVybCwgaGVhZGVycykKCiAgICAgICAgcmV0dXJuIHN1cGVyKFByb3h5TWFuYWdlciwgc2VsZikudXJsb3BlbihtZXRob2QsIHVybCwgcmVkaXJlY3Q9cmVkaXJlY3QsICoqa3cpCgoKZGVmIHByb3h5X2Zyb21fdXJsKHVybCwgKiprdyk6CiAgICByZXR1cm4gUHJveHlNYW5hZ2VyKHByb3h5X3VybD11cmwsICoqa3cpCg==
