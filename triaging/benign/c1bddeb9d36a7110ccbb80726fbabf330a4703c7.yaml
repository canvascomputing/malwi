statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/reaction.py
  contents:
  - name: Reaction.__str__
    score: 0.0
    code: |-
      def __str__(self):
              return str(self.emoji)
    tokens: resume load_global str load_fast self load_attr emoji call return_value
    hash: 803a253aa94183a88f5569af955c2ed4168cfa2b32ab02b32b4b322a83b4380f
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/reaction.py: 
