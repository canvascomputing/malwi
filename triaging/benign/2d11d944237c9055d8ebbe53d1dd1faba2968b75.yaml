statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/contrib/test_gae_manager.py
  contents:
  - name: TestGAERetry.test_retry_return_in_response
    score: 0.0
    code: |-
      def test_retry_return_in_response(self):
              headers = {'test-name': 'test_retry_return_in_response'}
              retry = Retry(total=2, status_forcelist=[418])
              resp = self.pool.request('GET', '/successful_retry',
                                       headers=headers, retries=retry)
              self.assertEqual(resp.status, 200)
              self.assertEqual(resp.retries.total, 1)
              # URLFetch use absolute urls.
              self.assertEqual(resp.retries.history,
                               (RequestHistory('GET',
                                               self.pool._absolute_url('/successful_retry'),
                                               None, 418, None),))
    tokens: resume load_const test-name load_const STRING_LEN_S_ENT_HIGH build_map store_fast headers load_global Retry load_const INTEGER load_const INTEGER build_list kw_names status_forcelist total call store_fast retry load_fast self load_attr pool load_attr request load_const GET load_const STRING_FILE_PATH load_fast headers load_fast retry kw_names headers retries call store_fast resp load_fast self load_attr assertEqual load_fast resp load_attr status load_const INTEGER call pop_top load_fast self load_attr assertEqual load_fast resp load_attr retries load_attr total load_const INTEGER call pop_top load_fast self load_attr assertEqual load_fast resp load_attr retries load_attr history load_global RequestHistory load_const GET load_fast self load_attr pool load_attr _absolute_url load_const STRING_FILE_PATH call load_const load_const INTEGER load_const call build_tuple call pop_top return_const None
    hash: 3bc6011678f6c8a67f7d4a43ba276d20032a0ae3156ba022c0c73d6d8b71cd3c
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/contrib/test_gae_manager.py: 
