statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/typesutil/1.9.4/typesutil-1.9.4/typesutil-1.9.4/typesutil/western.py
  contents:
  - name: WesternTimeDelta.days
    score: 0.0
    code: |-
      @property
          def days(self):
              return self._days
    tokens: resume load_fast self load_attr _days return_value
    hash: aace2645c1a84a752c26fd0992c29e9a1cb57777ed0e5fad5e386fc92b5df092
sources:
  .repo_cache/malicious_repos/pypi_malregistry/typesutil/1.9.4/typesutil-1.9.4/typesutil-1.9.4/typesutil/western.py: 
