statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/rrequests/2.27.1/rrequests-2.27.1/rrequests-2.27.1/requests/adapters.py
  contents:
  - name: HTTPAdapter.send
    score: 0.0
    code: |-
      def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
              """Sends PreparedRequest object. Returns Response object.

              :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
              :param stream: (optional) Whether to stream the request content.
              :param timeout: (optional) How long to wait for the server to send
                  data before giving up, as a float, or a :ref:`(connect timeout,
                  read timeout) <timeouts>` tuple.
              :type timeout: float or tuple or urllib3 Timeout object
              :param verify: (optional) Either a boolean, in which case it controls whether
                  we verify the server's TLS certificate, or a string, in which case it
                  must be a path to a CA bundle to use
              :param cert: (optional) Any user-provided SSL certificate to be trusted.
              :param proxies: (optional) The proxies dictionary to apply to the request.
              :rtype: requests.Response
              """

              try:
                  conn = self.get_connection(request.url, proxies)
              except LocationValueError as e:
                  raise InvalidURL(e, request=request)

              self.cert_verify(conn, request.url, verify, cert)
              url = self.request_url(request, proxies)
              self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)

              chunked = not (request.body is None or 'Content-Length' in request.headers)

              if isinstance(timeout, tuple):
                  try:
                      connect, read = timeout
                      timeout = TimeoutSauce(connect=connect, read=read)
                  except ValueError as e:
                      # this may raise a string formatting error.
                      err = ("Invalid timeout {}. Pass a (connect, read) "
                             "timeout tuple, or a single float to set "
                             "both timeouts to the same value".format(timeout))
                      raise ValueError(err)
              elif isinstance(timeout, TimeoutSauce):
                  pass
              else:
                  timeout = TimeoutSauce(connect=timeout, read=timeout)

              try:
                  if not chunked:
                      resp = conn.urlopen(
                          method=request.method,
                          url=url,
                          body=request.body,
                          headers=request.headers,
                          redirect=False,
                          assert_same_host=False,
                          preload_content=False,
                          decode_content=False,
                          retries=self.max_retries,
                          timeout=timeout
                      )

                  # Send the request.
                  else:
                      if hasattr(conn, 'proxy_pool'):
                          conn = conn.proxy_pool

                      low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)

                      try:
                          skip_host = 'Host' in request.headers
                          low_conn.putrequest(request.method,
                                              url,
                                              skip_accept_encoding=True,
                                              skip_host=skip_host)

                          for header, value in request.headers.items():
                              low_conn.putheader(header, value)

                          low_conn.endheaders()

                          for i in request.body:
                              low_conn.send(hex(len(i))[2:].encode('utf-8'))
                              low_conn.send(b'\r\n')
                              low_conn.send(i)
                              low_conn.send(b'\r\n')
                          low_conn.send(b'0\r\n\r\n')

                          # Receive the response from the server
                          try:
                              # For Python 2.7, use buffering of HTTP responses
                              r = low_conn.getresponse(buffering=True)
                          except TypeError:
                              # For compatibility with Python 3.3+
                              r = low_conn.getresponse()

                          resp = HTTPResponse.from_httplib(
                              r,
                              pool=conn,
                              connection=low_conn,
                              preload_content=False,
                              decode_content=False
                          )
                      except:
                          # If we hit any problems here, clean up the connection.
                          # Then, reraise so that we can handle the actual exception.
                          low_conn.close()
                          raise

              except (ProtocolError, socket.error) as err:
                  raise ConnectionError(err, request=request)

              except MaxRetryError as e:
                  if isinstance(e.reason, ConnectTimeoutError):
                      # TODO: Remove this in 3.0.0: see #2811
                      if not isinstance(e.reason, NewConnectionError):
                          raise ConnectTimeout(e, request=request)

                  if isinstance(e.reason, ResponseError):
                      raise RetryError(e, request=request)

                  if isinstance(e.reason, _ProxyError):
                      raise ProxyError(e, request=request)

                  if isinstance(e.reason, _SSLError):
                      # This branch is for urllib3 v1.22 and later.
                      raise SSLError(e, request=request)

                  raise ConnectionError(e, request=request)

              except ClosedPoolError as e:
                  raise ConnectionError(e, request=request)

              except _ProxyError as e:
                  raise ProxyError(e)

              except (_SSLError, _HTTPError) as e:
                  if isinstance(e, _SSLError):
                      # This branch is for urllib3 versions earlier than v1.22
                      raise SSLError(e, request=request)
                  elif isinstance(e, ReadTimeoutError):
                      raise ReadTimeout(e, request=request)
                  elif isinstance(e, _InvalidHeader):
                      raise InvalidHeader(e, request=request)
                  else:
                      raise

              return self.build_response(request, resp)
    tokens: resume nop load_fast self load_attr get_connection load_fast request load_attr url load_fast proxies call store_fast conn load_fast self load_attr cert_verify load_fast conn load_fast request load_attr url load_fast verify load_fast cert call pop_top load_fast self load_attr request_url load_fast request load_fast proxies call store_fast url load_fast self load_attr add_headers load_fast request load_fast stream load_fast timeout load_fast verify load_fast cert load_fast proxies kw_names cert proxies stream timeout verify call pop_top load_fast request load_attr body load_const is_op copy pop_jump_if_true TO_NUMBER pop_top load_const Content-Length load_fast request load_attr headers contains_op unary_not store_fast chunked load_global isinstance load_fast timeout load_global tuple call pop_jump_if_false TO_NUMBER nop load_fast timeout unpack_sequence store_fast connect store_fast read load_global TimeoutSauce load_fast connect load_fast read kw_names connect read call store_fast timeout jump_forward TO_NUMBER load_global isinstance load_fast timeout load_global TimeoutSauce call pop_jump_if_false TO_NUMBER jump_forward TO_NUMBER load_global TimeoutSauce load_fast timeout load_fast timeout kw_names connect read call store_fast timeout nop load_fast chunked pop_jump_if_true TO_NUMBER load_fast conn load_attr NETWORK_HTTP_REQUEST load_fast request load_attr method load_fast url load_fast request load_attr body load_fast request load_attr headers load_const INTEGER load_const INTEGER load_const INTEGER load_const INTEGER load_fast self load_attr max_retries load_fast timeout kw_names assert_same_host body decode_content headers method preload_content redirect retries timeout url call store_fast resp extended_arg jump_forward TO_NUMBER load_global REFLECTION_DYNAMIC_READ load_fast conn load_const proxy_pool call pop_jump_if_false TO_NUMBER load_fast conn load_attr proxy_pool store_fast conn load_fast conn load_attr _get_conn load_global STRING_LEN_S_ENT_HIGH kw_names timeout call store_fast low_conn nop load_const Host load_fast request load_attr headers contains_op store_fast skip_host load_fast low_conn load_attr putrequest load_fast request load_attr method load_fast url load_const INTEGER load_fast skip_host kw_names skip_accept_encoding skip_host call pop_top load_fast request load_attr headers load_attr items call get_iter for_iter TO_NUMBER unpack_sequence store_fast header store_fast value load_fast low_conn load_attr putheader load_fast header load_fast value call pop_top jump_backward TO_NUMBER end_for load_fast low_conn load_attr endheaders call pop_top load_fast request load_attr body get_iter for_iter TO_NUMBER store_fast i load_fast low_conn load_attr send load_global ENCODING_DECODING load_global len load_fast i call call load_const INTEGER load_const binary_slice load_attr ENCODING_DECODING load_const utf-8 call call pop_top load_fast low_conn load_attr send load_const call pop_top load_fast low_conn load_attr send load_fast i call pop_top load_fast low_conn load_attr send load_const call pop_top jump_backward TO_NUMBER end_for load_fast low_conn load_attr send load_const call pop_top nop load_fast low_conn load_attr getresponse load_const INTEGER kw_names buffering call store_fast r load_global HTTPResponse load_attr from_httplib load_fast r load_fast conn load_fast low_conn load_const INTEGER load_const INTEGER kw_names connection decode_content pool preload_content call store_fast resp load_fast self load_attr build_response load_fast request load_fast resp call return_value push_exc_info load_global STRING_LEN_S_ENT_HIGH check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global InvalidURL load_fast e load_fast request kw_names request call raise_varargs load_const store_fast e delete_fast e reraise reraise copy pop_except reraise push_exc_info load_global ValueError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_const STRING_LEN_M_ENT_HIGH load_attr format load_fast timeout call store_fast err load_global ValueError load_fast err call raise_varargs load_const store_fast e delete_fast e reraise reraise copy pop_except reraise push_exc_info load_global TypeError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_fast low_conn load_attr getresponse call store_fast r pop_except jump_backward TO_NUMBER reraise copy pop_except reraise push_exc_info pop_top load_fast low_conn load_attr close call pop_top raise_varargs copy pop_except reraise push_exc_info load_global ProtocolError load_global socket load_attr error build_tuple check_exc_match pop_jump_if_false TO_NUMBER store_fast err load_global ConnectionError load_fast err load_fast request kw_names request call raise_varargs load_const store_fast err delete_fast err reraise load_global MaxRetryError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global isinstance load_fast e load_attr reason load_global STRING_LEN_S_ENT_HIGH call pop_jump_if_false TO_NUMBER load_global isinstance load_fast e load_attr reason load_global STRING_LEN_S_ENT_HIGH call pop_jump_if_true TO_NUMBER load_global ConnectTimeout load_fast e load_fast request kw_names request call raise_varargs load_global isinstance load_fast e load_attr reason load_global ResponseError call pop_jump_if_false TO_NUMBER load_global RetryError load_fast e load_fast request kw_names request call raise_varargs load_global isinstance load_fast e load_attr reason load_global _ProxyError call pop_jump_if_false TO_NUMBER load_global ProxyError load_fast e load_fast request kw_names request call raise_varargs load_global isinstance load_fast e load_attr reason load_global _SSLError call pop_jump_if_false TO_NUMBER load_global SSLError load_fast e load_fast request kw_names request call raise_varargs load_global ConnectionError load_fast e load_fast request kw_names request call raise_varargs load_const store_fast e delete_fast e reraise load_global ClosedPoolError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global ConnectionError load_fast e load_fast request kw_names request call raise_varargs load_const store_fast e delete_fast e reraise load_global _ProxyError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global ProxyError load_fast e call raise_varargs load_const store_fast e delete_fast e reraise load_global _SSLError load_global _HTTPError build_tuple check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global isinstance load_fast e load_global _SSLError call pop_jump_if_false TO_NUMBER load_global SSLError load_fast e load_fast request kw_names request call raise_varargs load_global isinstance load_fast e load_global STRING_BASE64_LEN_S_ENT_HIGH call pop_jump_if_false TO_NUMBER load_global ReadTimeout load_fast e load_fast request kw_names request call raise_varargs load_global isinstance load_fast e load_global _InvalidHeader call pop_jump_if_false TO_NUMBER load_global InvalidHeader load_fast e load_fast request kw_names request call raise_varargs raise_varargs load_const store_fast e delete_fast e reraise reraise copy pop_except reraise
    hash: 8c82c418535fd2e9b5aff01ed0738610d9a76491f9da24445ab8c9a75c22499a
sources:
  .repo_cache/malicious_repos/pypi_malregistry/rrequests/2.27.1/rrequests-2.27.1/rrequests-2.27.1/requests/adapters.py: 
