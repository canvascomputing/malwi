statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/socks.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-
      """
      This module contains provisional support for SOCKS proxies from within
      urllib3. This module supports SOCKS4 (specifically the SOCKS4A variant) and
      SOCKS5. To enable its functionality, either install PySocks or install this
      module with the ``socks`` extra.

      The SOCKS implementation supports the full range of urllib3 features. It also
      supports the following SOCKS features:

      - SOCKS4
      - SOCKS4a
      - SOCKS5
      - Usernames and passwords for the SOCKS proxy

      Known Limitations:

      - Currently PySocks does not support contacting remote websites via literal
        IPv6 addresses. Any such connection attempt will fail. You must use a domain
        name.
      - Currently PySocks does not support IPv6 connections to the SOCKS proxy. Any
        such connection attempt will fail.
      """
      from __future__ import absolute_import

      try:
          import socks
      except ImportError:
          import warnings
          from ..exceptions import DependencyWarning

          warnings.warn((
              'SOCKS support in urllib3 requires the installation of optional '
              'dependencies: specifically, PySocks.  For more information, see '
              'https://urllib3.readthedocs.io/en/latest/contrib.html#socks-proxies'
              ),
              DependencyWarning
          )
          raise

      from socket import error as SocketError, timeout as SocketTimeout

      from ..connection import (
          HTTPConnection, HTTPSConnection
      )
      from ..connectionpool import (
          HTTPConnectionPool, HTTPSConnectionPool
      )
      from ..exceptions import ConnectTimeoutError, NewConnectionError
      from ..poolmanager import PoolManager
      from ..util.url import parse_url

      try:
          import ssl
      except ImportError:
          ssl = None


      class SOCKSConnection(HTTPConnection):
          """
          A plain-text HTTP connection that connects via a SOCKS proxy.
          """
          def __init__(self, *args, **kwargs):
              self._socks_options = kwargs.pop('_socks_options')
              super(SOCKSConnection, self).__init__(*args, **kwargs)

          def _new_conn(self):
              """
              Establish a new connection via the SOCKS proxy.
              """
              extra_kw = {}
              if self.source_address:
                  extra_kw['source_address'] = self.source_address

              if self.socket_options:
                  extra_kw['socket_options'] = self.socket_options

              try:
                  conn = socks.create_connection(
                      (self.host, self.port),
                      proxy_type=self._socks_options['socks_version'],
                      proxy_addr=self._socks_options['proxy_host'],
                      proxy_port=self._socks_options['proxy_port'],
                      proxy_username=self._socks_options['username'],
                      proxy_password=self._socks_options['password'],
                      proxy_rdns=self._socks_options['rdns'],
                      timeout=self.timeout,
                      **extra_kw
                  )

              except SocketTimeout as e:
                  raise ConnectTimeoutError(
                      self, "Connection to %s timed out. (connect timeout=%s)" %
                      (self.host, self.timeout))

              except socks.ProxyError as e:
                  # This is fragile as hell, but it seems to be the only way to raise
                  # useful errors here.
                  if e.socket_err:
                      error = e.socket_err
                      if isinstance(error, SocketTimeout):
                          raise ConnectTimeoutError(
                              self,
                              "Connection to %s timed out. (connect timeout=%s)" %
                              (self.host, self.timeout)
                          )
                      else:
                          raise NewConnectionError(
                              self,
                              "Failed to establish a new connection: %s" % error
                          )
                  else:
                      raise NewConnectionError(
                          self,
                          "Failed to establish a new connection: %s" % e
                      )

              except SocketError as e:  # Defensive: PySocks should catch all these.
                  raise NewConnectionError(
                      self, "Failed to establish a new connection: %s" % e)

              return conn
    tokens: resume load_const STRING_LEN_M_ENT_HIGH store_name __doc__ load_const INTEGER load_const import_name __future__ import_from absolute_import store_name absolute_import pop_top nop load_const INTEGER load_const import_name socks store_name socks load_const INTEGER load_const import_name socket import_from error store_name SocketError import_from timeout store_name SocketTimeout pop_top load_const INTEGER load_const import_name connection import_from HTTPConnection store_name HTTPConnection import_from HTTPSConnection store_name HTTPSConnection pop_top load_const INTEGER load_const import_name connectionpool import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name exceptions import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name poolmanager import_from PoolManager store_name PoolManager pop_top load_const INTEGER load_const import_name util.url import_from parse_url store_name parse_url pop_top nop load_const INTEGER load_const import_name ssl store_name ssl push_null load_build_class load_const OBJECT make_function load_const SOCKSConnection load_name HTTPConnection call store_name SOCKSConnection push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name SOCKSConnection load_name HTTPSConnection call store_name STRING_BASE64_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name STRING_LEN_S_ENT_HIGH call store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name STRING_LEN_S_ENT_HIGH call store_name STRING_BASE64_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name PoolManager call store_name STRING_LEN_S_ENT_HIGH return_const None push_exc_info load_name ImportError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const INTEGER load_const import_name warnings store_name warnings load_const INTEGER load_const import_name exceptions import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_name warnings load_attr warn load_const STRING_FILE_PATH load_name STRING_LEN_S_ENT_HIGH call pop_top raise_varargs reraise copy pop_except reraise push_exc_info load_name ImportError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const store_name ssl pop_except jump_backward TO_NUMBER reraise copy pop_except reraise
    hash: e592793c87ad8dc1b204f50eebbe14ea8e169e30a796160916b1b24fb080aea0
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/socks.py: 
