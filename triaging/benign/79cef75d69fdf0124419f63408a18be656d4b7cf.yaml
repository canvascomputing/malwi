statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/colorsmecs/0.6.7/colorsmecs-0.6.7/colorsmecs-0.6.7/colorsmecs/winterm.py
  contents:
  - name: WinTerm
    score: 0.0
    code: |-
      # Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.
      from . import win32


      # from wincon.h
      class WinColor(object):
          BLACK   = 0
          BLUE    = 1
          GREEN   = 2
          CYAN    = 3
          RED     = 4
          MAGENTA = 5
          YELLOW  = 6
          GREY    = 7
    tokens: resume load_name __name__ store_name __module__ load_const WinTerm store_name __qualname__ load_const OBJECT make_function store_name __init__ load_const OBJECT make_function store_name get_attrs load_const OBJECT make_function store_name set_attrs load_const load_const OBJECT make_function defaults store_name reset_all load_const load_const OBJECT make_function defaults store_name fore load_const load_const OBJECT make_function defaults store_name back load_const load_const OBJECT make_function defaults store_name style load_const load_const OBJECT make_function defaults store_name set_console load_const OBJECT make_function store_name get_position load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const load_const OBJECT make_function defaults store_name cursor_adjust load_const load_const OBJECT make_function defaults store_name erase_screen load_const load_const OBJECT make_function defaults store_name erase_line load_const OBJECT make_function store_name set_title return_const None
    hash: acb812b7a5b36f5917ec52718ac8d6cc10ed073fee88a790b3fe123049257ef0
sources:
  .repo_cache/malicious_repos/pypi_malregistry/colorsmecs/0.6.7/colorsmecs-0.6.7/colorsmecs-0.6.7/colorsmecs/winterm.py: 
