statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_pkcs1.py
  contents:
  - name: remove_pkcs1v15_signature_padding
    score: 0.0
    code: |-
      def remove_pkcs1v15_signature_padding(key_length, data):
          """
          Removes PKCS#1 v1.5 padding from a signed message using constant time
          operations

          :param key_length:
              An integer of the number of bytes in the key

          :param data:
              A byte string to unpad

          :return:
              The unpadded data as a byte string
          """

          if _backend != 'winlegacy':
              raise SystemError(pretty_message(
                  '''
                  Pure-python RSA PKCSv1.5 signature padding removal code is only for
                  Windows XP/2003
                  '''
              ))

          return _remove_pkcs1v15_padding(key_length, data, 'verifying')
    tokens: resume load_global _backend load_const winlegacy compare_op != pop_jump_if_false TO_NUMBER load_global SystemError load_global pretty_message load_const STRING_FILE_PATH call call raise_varargs load_global STRING_LEN_S_ENT_HIGH load_fast key_length load_fast data load_const verifying call return_value
    hash: 350583dfff4e216cd9fbd28ef3e2e0f80d794e3e65641100ce57ece24098caf4
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_pkcs1.py: 
