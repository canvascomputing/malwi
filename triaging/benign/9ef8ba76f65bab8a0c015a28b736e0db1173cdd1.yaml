statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/voice_client.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-

      """
      The MIT License (MIT)

      Copyright (c) 2015-present Rapptz

      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the "Software"),
      to deal in the Software without restriction, including without limitation
      the rights to use, copy, modify, merge, publish, distribute, sublicense,
      and/or sell copies of the Software, and to permit persons to whom the
      Software is furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE SOFTWARE.
      """

      """Some documentation to refer to:

      - Our main web socket (mWS) sends opcode 4 with a guild ID and channel ID.
      - The mWS receives VOICE_STATE_UPDATE and VOICE_SERVER_UPDATE.
      - We pull the session_id from VOICE_STATE_UPDATE.
      - We pull the token, endpoint and server_id from VOICE_SERVER_UPDATE.
      - Then we initiate the voice web socket (vWS) pointing to the endpoint.
      - We send opcode 0 with the user_id, server_id, session_id and token using the vWS.
      - The vWS sends back opcode 2 with an ssrc, port, modes(array) and hearbeat_interval.
      - We send a UDP discovery packet to endpoint:port and receive our IP and our port in LE.
      - Then we send our IP and port via vWS with opcode 1.
      - When that's all done, we receive opcode 4 from the vWS.
      - Finally we can transmit data to endpoint:port.
      """

      import asyncio
      import socket
      import logging
      import struct
      import threading

      from . import opus, utils
      from .backoff import ExponentialBackoff
      from .gateway import *
      from .errors import ClientException, ConnectionClosed
      from .player import AudioPlayer, AudioSource

      try:
          import nacl.secret
          has_nacl = True
      except ImportError:
          has_nacl = False

      log = logging.getLogger(__name__)

      class VoiceProtocol:
          """A class that represents the Discord voice protocol.

          This is an abstract class. The library provides a concrete implementation
          under :class:`VoiceClient`.

          This class allows you to implement a protocol to allow for an external
          method of sending voice, such as Lavalink_ or a native library implementation.

          These classes are passed to :meth:`abc.Connectable.connect`.

          .. _Lavalink: https://github.com/freyacodes/Lavalink

          Parameters
          ------------
          client: :class:`Client`
              The client (or its subclasses) that started the connection request.
          channel: :class:`abc.Connectable`
              The voice channel that is being connected to.
          """

          def __init__(self, client, channel):
              self.client = client
              self.channel = channel

          async def on_voice_state_update(self, data):
              """|coro|

              An abstract method that is called when the client's voice state
              has changed. This corresponds to ``VOICE_STATE_UPDATE``.

              Parameters
              ------------
              data: :class:`dict`
                  The raw `voice state payload`__.

                  .. _voice_state_update_payload: https://discord.com/developers/docs/resources/voice#voice-state-object

                  __ voice_state_update_payload_
              """
              raise NotImplementedError

          async def on_voice_server_update(self, data):
              """|coro|

              An abstract method that is called when initially connecting to voice.
              This corresponds to ``VOICE_SERVER_UPDATE``.

              Parameters
              ------------
              data: :class:`dict`
                  The raw `voice server update payload`__.

                  .. _voice_server_update_payload: https://discord.com/developers/docs/topics/gateway#voice-server-update-voice-server-update-event-fields

                  __ voice_server_update_payload_
              """
              raise NotImplementedError

          async def connect(self, *, timeout, reconnect):
              """|coro|

              An abstract method called when the client initiates the connection request.

              When a connection is requested initially, the library calls the constructor
              under ``__init__`` and then calls :meth:`connect`. If :meth:`connect` fails at
              some point then :meth:`disconnect` is called.

              Within this method, to start the voice connection flow it is recommended to
              use :meth:`Guild.change_voice_state` to start the flow. After which,
              :meth:`on_voice_server_update` and :meth:`on_voice_state_update` will be called.
              The order that these two are called is unspecified.

              Parameters
              ------------
              timeout: :class:`float`
                  The timeout for the connection.
              reconnect: :class:`bool`
                  Whether reconnection is expected.
              """
              raise NotImplementedError

          async def disconnect(self, *, force):
              """|coro|

              An abstract method called when the client terminates the connection.

              See :meth:`cleanup`.

              Parameters
              ------------
              force: :class:`bool`
                  Whether the disconnection was forced.
              """
              raise NotImplementedError

          def cleanup(self):
              """This method *must* be called to ensure proper clean-up during a disconnect.

              It is advisable to call this from within :meth:`disconnect` when you are
              completely done with the voice protocol instance.

              This method removes it from the internal state cache that keeps track of
              currently alive voice clients. Failure to clean-up will cause subsequent
              connections to report that it's still connected.
              """
              key_id, _ = self.channel._get_voice_client_key()
              self.client._connection._remove_voice_client(key_id)
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ nop load_const INTEGER load_const import_name asyncio store_name asyncio load_const INTEGER load_const import_name socket store_name socket load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name struct store_name struct load_const INTEGER load_const import_name threading store_name threading load_const INTEGER load_const import_name import_from opus store_name opus import_from utils store_name utils pop_top load_const INTEGER load_const import_name backoff import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name gateway call_intrinsic_1 INTRINSIC_IMPORT_STAR pop_top load_const INTEGER load_const import_name errors import_from ClientException store_name ClientException import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name player import_from AudioPlayer store_name AudioPlayer import_from AudioSource store_name AudioSource pop_top nop load_const INTEGER load_const import_name nacl.secret store_name nacl load_const INTEGER store_name has_nacl push_null load_name logging load_attr getLogger load_name __name__ call store_name log push_null load_build_class load_const OBJECT make_function load_const VoiceProtocol call store_name VoiceProtocol push_null load_build_class load_const OBJECT make_function load_const VoiceClient load_name VoiceProtocol call store_name VoiceClient return_const None push_exc_info load_name ImportError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const INTEGER store_name has_nacl pop_except jump_backward TO_NUMBER reraise copy pop_except reraise
    hash: e0e25878901cc4983de26811ab495f422558401a58777de6ad730a141b144efc
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/voice_client.py
  : 
