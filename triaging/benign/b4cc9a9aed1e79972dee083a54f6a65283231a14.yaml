statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/invite.py
  contents:
  - name: PartialInviteGuild.splash_url_as
    score: 0.0
    code: |-
      def splash_url_as(self, *, format='webp', size=2048):
              """The same operation as :meth:`Guild.splash_url_as`.

              Returns
              --------
              :class:`Asset`
                  The resulting CDN asset.
              """
              return Asset._from_guild_image(self._state, self.id, self.splash, 'splashes', format=format, size=size)
    tokens: resume load_global Asset load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr _state load_fast self load_attr id load_fast self load_attr splash load_const splashes load_fast format load_fast size kw_names format size call return_value
    hash: 974790ec10da18e283bb6868cde436d67a7a20157bcd88da845473c7fddbfa85
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/invite.py: 
