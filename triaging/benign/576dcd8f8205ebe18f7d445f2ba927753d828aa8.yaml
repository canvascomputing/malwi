statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/connection.py
  contents:
  - name: HTTPSConnection
    score: 0.0
    code: |-
      def request_chunked(self, method, url, body=None, headers=None):
              """
              Alternative to the common request method, which sends the
              body with chunked encoding and not as one block
              """
              headers = HTTPHeaderDict(headers if headers is not None else {})
              skip_accept_encoding = 'accept-encoding' in headers
              skip_host = 'host' in headers
              self.putrequest(
                  method,
                  url,
                  skip_accept_encoding=skip_accept_encoding,
                  skip_host=skip_host
              )
              for header, value in headers.items():
                  self.putheader(header, value)
              if 'transfer-encoding' not in headers:
                  self.putheader('Transfer-Encoding', 'chunked')
              self.endheaders()

              if body is not None:
                  stringish_types = six.string_types + (six.binary_type,)
                  if isinstance(body, stringish_types):
                      body = (body,)
                  for chunk in body:
                      if not chunk:
                          continue
                      if not isinstance(chunk, six.binary_type):
                          chunk = chunk.encode('utf8')
                      len_str = hex(len(chunk))[2:]
                      self.send(len_str.encode('utf-8'))
                      self.send(b'\r\n')
                      self.send(chunk)
                      self.send(b'\r\n')

              # After the if clause, to always have a closed body
              self.send(b'0\r\n\r\n')
    tokens: resume load_name __name__ store_name __module__ load_const HTTPSConnection store_name __qualname__ load_name port_by_scheme load_const https binary_subscr store_name default_port load_const store_name ssl_version load_const load_const load_const load_const load_name socket load_attr STRING_LEN_S_ENT_HIGH load_const build_tuple load_const OBJECT make_function defaults store_name __init__ load_const OBJECT make_function store_name connect return_const None
    hash: 5f0fa11558c575ad286a27b013a6b5ebecd11717f0aeea3e0cab0692b67316fc
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/connection.py: ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBsb2dnaW5nCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCBzb2NrZXQKZnJvbSBzb2NrZXQgaW1wb3J0IGVycm9yIGFzIFNvY2tldEVycm9yLCB0aW1lb3V0IGFzIFNvY2tldFRpbWVvdXQKaW1wb3J0IHdhcm5pbmdzCmZyb20gLnBhY2thZ2VzIGltcG9ydCBzaXgKZnJvbSAucGFja2FnZXMuc2l4Lm1vdmVzLmh0dHBfY2xpZW50IGltcG9ydCBIVFRQQ29ubmVjdGlvbiBhcyBfSFRUUENvbm5lY3Rpb24KZnJvbSAucGFja2FnZXMuc2l4Lm1vdmVzLmh0dHBfY2xpZW50IGltcG9ydCBIVFRQRXhjZXB0aW9uICAjIG5vcWE6IEY0MDEKCnRyeTogICMgQ29tcGlsZWQgd2l0aCBTU0w/CiAgICBpbXBvcnQgc3NsCiAgICBCYXNlU1NMRXJyb3IgPSBzc2wuU1NMRXJyb3IKZXhjZXB0IChJbXBvcnRFcnJvciwgQXR0cmlidXRlRXJyb3IpOiAgIyBQbGF0Zm9ybS1zcGVjaWZpYzogTm8gU1NMLgogICAgc3NsID0gTm9uZQoKICAgIGNsYXNzIEJhc2VTU0xFcnJvcihCYXNlRXhjZXB0aW9uKToKICAgICAgICBwYXNzCgoKdHJ5OiAgIyBQeXRob24gMzoKICAgICMgTm90IGEgbm8tb3AsIHdlJ3JlIGFkZGluZyB0aGlzIHRvIHRoZSBuYW1lc3BhY2Ugc28gaXQgY2FuIGJlIGltcG9ydGVkLgogICAgQ29ubmVjdGlvbkVycm9yID0gQ29ubmVjdGlvbkVycm9yCmV4Y2VwdCBOYW1lRXJyb3I6ICAjIFB5dGhvbiAyOgogICAgY2xhc3MgQ29ubmVjdGlvbkVycm9yKEV4Y2VwdGlvbik6CiAgICAgICAgcGFzcwoKCmZyb20gLmV4Y2VwdGlvbnMgaW1wb3J0ICgKICAgIE5ld0Nvbm5lY3Rpb25FcnJvciwKICAgIENvbm5lY3RUaW1lb3V0RXJyb3IsCiAgICBTdWJqZWN0QWx0TmFtZVdhcm5pbmcsCiAgICBTeXN0ZW1UaW1lV2FybmluZywKKQpmcm9tIC5wYWNrYWdlcy5zc2xfbWF0Y2hfaG9zdG5hbWUgaW1wb3J0IG1hdGNoX2hvc3RuYW1lLCBDZXJ0aWZpY2F0ZUVycm9yCgpmcm9tIC51dGlsLnNzbF8gaW1wb3J0ICgKICAgIHJlc29sdmVfY2VydF9yZXFzLAogICAgcmVzb2x2ZV9zc2xfdmVyc2lvbiwKICAgIGFzc2VydF9maW5nZXJwcmludCwKICAgIGNyZWF0ZV91cmxsaWIzX2NvbnRleHQsCiAgICBzc2xfd3JhcF9zb2NrZXQKKQoKCmZyb20gLnV0aWwgaW1wb3J0IGNvbm5lY3Rpb24KCmZyb20gLl9jb2xsZWN0aW9ucyBpbXBvcnQgSFRUUEhlYWRlckRpY3QKCmxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKcG9ydF9ieV9zY2hlbWUgPSB7CiAgICAnaHR0cCc6IDgwLAogICAgJ2h0dHBzJzogNDQzLAp9CgojIFdoZW4gdXBkYXRpbmcgUkVDRU5UX0RBVEUsIG1vdmUgaXQgdG8KIyB3aXRoaW4gdHdvIHllYXJzIG9mIHRoZSBjdXJyZW50IGRhdGUsIGFuZCBubwojIGVhcmxpZXIgdGhhbiA2IG1vbnRocyBhZ28uClJFQ0VOVF9EQVRFID0gZGF0ZXRpbWUuZGF0ZSgyMDE2LCAxLCAxKQoKCmNsYXNzIER1bW15Q29ubmVjdGlvbihvYmplY3QpOgogICAgIiIiVXNlZCB0byBkZXRlY3QgYSBmYWlsZWQgQ29ubmVjdGlvbkNscyBpbXBvcnQuIiIiCiAgICBwYXNzCgoKY2xhc3MgSFRUUENvbm5lY3Rpb24oX0hUVFBDb25uZWN0aW9uLCBvYmplY3QpOgogICAgIiIiCiAgICBCYXNlZCBvbiBodHRwbGliLkhUVFBDb25uZWN0aW9uIGJ1dCBwcm92aWRlcyBhbiBleHRyYSBjb25zdHJ1Y3RvcgogICAgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgbGF5ZXIgYmV0d2VlbiBvbGRlciBhbmQgbmV3ZXIgUHl0aG9ucy4KCiAgICBBZGRpdGlvbmFsIGtleXdvcmQgcGFyYW1ldGVycyBhcmUgdXNlZCB0byBjb25maWd1cmUgYXR0cmlidXRlcyBvZiB0aGUgY29ubmVjdGlvbi4KICAgIEFjY2VwdGVkIHBhcmFtZXRlcnMgaW5jbHVkZToKCiAgICAgIC0gYGBzdHJpY3RgYDogU2VlIHRoZSBkb2N1bWVudGF0aW9uIG9uIDpjbGFzczpgdXJsbGliMy5jb25uZWN0aW9ucG9vbC5IVFRQQ29ubmVjdGlvblBvb2xgCiAgICAgIC0gYGBzb3VyY2VfYWRkcmVzc2BgOiBTZXQgdGhlIHNvdXJjZSBhZGRyZXNzIGZvciB0aGUgY3VycmVudCBjb25uZWN0aW9uLgoKICAgICAgICAuLiBub3RlOjogVGhpcyBpcyBpZ25vcmVkIGZvciBQeXRob24gMi42LiBJdCBpcyBvbmx5IGFwcGxpZWQgZm9yIDIuNyBhbmQgMy54CgogICAgICAtIGBgc29ja2V0X29wdGlvbnNgYDogU2V0IHNwZWNpZmljIG9wdGlvbnMgb24gdGhlIHVuZGVybHlpbmcgc29ja2V0LiBJZiBub3Qgc3BlY2lmaWVkLCB0aGVuCiAgICAgICAgZGVmYXVsdHMgYXJlIGxvYWRlZCBmcm9tIGBgSFRUUENvbm5lY3Rpb24uZGVmYXVsdF9zb2NrZXRfb3B0aW9uc2BgIHdoaWNoIGluY2x1ZGVzIGRpc2FibGluZwogICAgICAgIE5hZ2xlJ3MgYWxnb3JpdGhtIChzZXRzIFRDUF9OT0RFTEFZIHRvIDEpIHVubGVzcyB0aGUgY29ubmVjdGlvbiBpcyBiZWhpbmQgYSBwcm94eS4KCiAgICAgICAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3aXNoIHRvIGVuYWJsZSBUQ1AgS2VlcCBBbGl2ZSBpbiBhZGRpdGlvbiB0byB0aGUgZGVmYXVsdHMsCiAgICAgICAgeW91IG1pZ2h0IHBhc3M6OgoKICAgICAgICAgICAgSFRUUENvbm5lY3Rpb24uZGVmYXVsdF9zb2NrZXRfb3B0aW9ucyArIFsKICAgICAgICAgICAgICAgIChzb2NrZXQuU09MX1NPQ0tFVCwgc29ja2V0LlNPX0tFRVBBTElWRSwgMSksCiAgICAgICAgICAgIF0KCiAgICAgICAgT3IgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIGRlZmF1bHRzIGJ5IHBhc3NpbmcgYW4gZW1wdHkgbGlzdCAoZS5nLiwgYGBbXWBgKS4KICAgICIiIgoKICAgIGRlZmF1bHRfcG9ydCA9IHBvcnRfYnlfc2NoZW1lWydodHRwJ10KCiAgICAjOiBEaXNhYmxlIE5hZ2xlJ3MgYWxnb3JpdGhtIGJ5IGRlZmF1bHQuCiAgICAjOiBgYFsoc29ja2V0LklQUFJPVE9fVENQLCBzb2NrZXQuVENQX05PREVMQVksIDEpXWBgCiAgICBkZWZhdWx0X3NvY2tldF9vcHRpb25zID0gWyhzb2NrZXQuSVBQUk9UT19UQ1AsIHNvY2tldC5UQ1BfTk9ERUxBWSwgMSldCgogICAgIzogV2hldGhlciB0aGlzIGNvbm5lY3Rpb24gdmVyaWZpZXMgdGhlIGhvc3QncyBjZXJ0aWZpY2F0ZS4KICAgIGlzX3ZlcmlmaWVkID0gRmFsc2UKCiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3cpOgogICAgICAgIGlmIHNpeC5QWTM6ICAjIFB5dGhvbiAzCiAgICAgICAgICAgIGt3LnBvcCgnc3RyaWN0JywgTm9uZSkKCiAgICAgICAgIyBQcmUtc2V0IHNvdXJjZV9hZGRyZXNzIGluIGNhc2Ugd2UgaGF2ZSBhbiBvbGRlciBQeXRob24gbGlrZSAyLjYuCiAgICAgICAgc2VsZi5zb3VyY2VfYWRkcmVzcyA9IGt3LmdldCgnc291cmNlX2FkZHJlc3MnKQoKICAgICAgICBpZiBzeXMudmVyc2lvbl9pbmZvIDwgKDIsIDcpOiAgIyBQeXRob24gMi42CiAgICAgICAgICAgICMgX0hUVFBDb25uZWN0aW9uIG9uIFB5dGhvbiAyLjYgd2lsbCBiYWxrIGF0IHRoaXMga2V5d29yZCBhcmcsIGJ1dAogICAgICAgICAgICAjIG5vdCBuZXdlciB2ZXJzaW9ucy4gV2UgY2FuIHN0aWxsIHVzZSBpdCB3aGVuIGNyZWF0aW5nIGEKICAgICAgICAgICAgIyBjb25uZWN0aW9uIHRob3VnaCwgc28gd2UgcG9wIGl0ICphZnRlciogd2UgaGF2ZSBzYXZlZCBpdCBhcwogICAgICAgICAgICAjIHNlbGYuc291cmNlX2FkZHJlc3MuCiAgICAgICAgICAgIGt3LnBvcCgnc291cmNlX2FkZHJlc3MnLCBOb25lKQoKICAgICAgICAjOiBUaGUgc29ja2V0IG9wdGlvbnMgcHJvdmlkZWQgYnkgdGhlIHVzZXIuIElmIG5vIG9wdGlvbnMgYXJlCiAgICAgICAgIzogcHJvdmlkZWQsIHdlIHVzZSB0aGUgZGVmYXVsdCBvcHRpb25zLgogICAgICAgIHNlbGYuc29ja2V0X29wdGlvbnMgPSBrdy5wb3AoJ3NvY2tldF9vcHRpb25zJywgc2VsZi5kZWZhdWx0X3NvY2tldF9vcHRpb25zKQoKICAgICAgICAjIFN1cGVyY2xhc3MgYWxzbyBzZXRzIHNlbGYuc291cmNlX2FkZHJlc3MgaW4gUHl0aG9uIDIuNysuCiAgICAgICAgX0hUVFBDb25uZWN0aW9uLl9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3KQoKICAgIGRlZiBfbmV3X2Nvbm4oc2VsZik6CiAgICAgICAgIiIiIEVzdGFibGlzaCBhIHNvY2tldCBjb25uZWN0aW9uIGFuZCBzZXQgbm9kZWxheSBzZXR0aW5ncyBvbiBpdC4KCiAgICAgICAgOnJldHVybjogTmV3IHNvY2tldCBjb25uZWN0aW9uLgogICAgICAgICIiIgogICAgICAgIGV4dHJhX2t3ID0ge30KICAgICAgICBpZiBzZWxmLnNvdXJjZV9hZGRyZXNzOgogICAgICAgICAgICBleHRyYV9rd1snc291cmNlX2FkZHJlc3MnXSA9IHNlbGYuc291cmNlX2FkZHJlc3MKCiAgICAgICAgaWYgc2VsZi5zb2NrZXRfb3B0aW9uczoKICAgICAgICAgICAgZXh0cmFfa3dbJ3NvY2tldF9vcHRpb25zJ10gPSBzZWxmLnNvY2tldF9vcHRpb25zCgogICAgICAgIHRyeToKICAgICAgICAgICAgY29ubiA9IGNvbm5lY3Rpb24uY3JlYXRlX2Nvbm5lY3Rpb24oCiAgICAgICAgICAgICAgICAoc2VsZi5ob3N0LCBzZWxmLnBvcnQpLCBzZWxmLnRpbWVvdXQsICoqZXh0cmFfa3cpCgogICAgICAgIGV4Y2VwdCBTb2NrZXRUaW1lb3V0IGFzIGU6CiAgICAgICAgICAgIHJhaXNlIENvbm5lY3RUaW1lb3V0RXJyb3IoCiAgICAgICAgICAgICAgICBzZWxmLCAiQ29ubmVjdGlvbiB0byAlcyB0aW1lZCBvdXQuIChjb25uZWN0IHRpbWVvdXQ9JXMpIiAlCiAgICAgICAgICAgICAgICAoc2VsZi5ob3N0LCBzZWxmLnRpbWVvdXQpKQoKICAgICAgICBleGNlcHQgU29ja2V0RXJyb3IgYXMgZToKICAgICAgICAgICAgcmFpc2UgTmV3Q29ubmVjdGlvbkVycm9yKAogICAgICAgICAgICAgICAgc2VsZiwgIkZhaWxlZCB0byBlc3RhYmxpc2ggYSBuZXcgY29ubmVjdGlvbjogJXMiICUgZSkKCiAgICAgICAgcmV0dXJuIGNvbm4KCiAgICBkZWYgX3ByZXBhcmVfY29ubihzZWxmLCBjb25uKToKICAgICAgICBzZWxmLnNvY2sgPSBjb25uCiAgICAgICAgIyB0aGUgX3R1bm5lbF9ob3N0IGF0dHJpYnV0ZSB3YXMgYWRkZWQgaW4gcHl0aG9uIDIuNi4zICh2aWEKICAgICAgICAjIGh0dHA6Ly9oZy5weXRob24ub3JnL2NweXRob24vcmV2LzBmNTdiMzBhMTUyZikgc28gcHl0aG9ucyAyLjYoMC0yKSBkbwogICAgICAgICMgbm90IGhhdmUgdGhlbS4KICAgICAgICBpZiBnZXRhdHRyKHNlbGYsICdfdHVubmVsX2hvc3QnLCBOb25lKToKICAgICAgICAgICAgIyBUT0RPOiBGaXggdHVubmVsIHNvIGl0IGRvZXNuJ3QgZGVwZW5kIG9uIHNlbGYuc29jayBzdGF0ZS4KICAgICAgICAgICAgc2VsZi5fdHVubmVsKCkKICAgICAgICAgICAgIyBNYXJrIHRoaXMgY29ubmVjdGlvbiBhcyBub3QgcmV1c2FibGUKICAgICAgICAgICAgc2VsZi5hdXRvX29wZW4gPSAwCgogICAgZGVmIGNvbm5lY3Qoc2VsZik6CiAgICAgICAgY29ubiA9IHNlbGYuX25ld19jb25uKCkKICAgICAgICBzZWxmLl9wcmVwYXJlX2Nvbm4oY29ubikKCiAgICBkZWYgcmVxdWVzdF9jaHVua2VkKHNlbGYsIG1ldGhvZCwgdXJsLCBib2R5PU5vbmUsIGhlYWRlcnM9Tm9uZSk6CiAgICAgICAgIiIiCiAgICAgICAgQWx0ZXJuYXRpdmUgdG8gdGhlIGNvbW1vbiByZXF1ZXN0IG1ldGhvZCwgd2hpY2ggc2VuZHMgdGhlCiAgICAgICAgYm9keSB3aXRoIGNodW5rZWQgZW5jb2RpbmcgYW5kIG5vdCBhcyBvbmUgYmxvY2sKICAgICAgICAiIiIKICAgICAgICBoZWFkZXJzID0gSFRUUEhlYWRlckRpY3QoaGVhZGVycyBpZiBoZWFkZXJzIGlzIG5vdCBOb25lIGVsc2Uge30pCiAgICAgICAgc2tpcF9hY2NlcHRfZW5jb2RpbmcgPSAnYWNjZXB0LWVuY29kaW5nJyBpbiBoZWFkZXJzCiAgICAgICAgc2tpcF9ob3N0ID0gJ2hvc3QnIGluIGhlYWRlcnMKICAgICAgICBzZWxmLnB1dHJlcXVlc3QoCiAgICAgICAgICAgIG1ldGhvZCwKICAgICAgICAgICAgdXJsLAogICAgICAgICAgICBza2lwX2FjY2VwdF9lbmNvZGluZz1za2lwX2FjY2VwdF9lbmNvZGluZywKICAgICAgICAgICAgc2tpcF9ob3N0PXNraXBfaG9zdAogICAgICAgICkKICAgICAgICBmb3IgaGVhZGVyLCB2YWx1ZSBpbiBoZWFkZXJzLml0ZW1zKCk6CiAgICAgICAgICAgIHNlbGYucHV0aGVhZGVyKGhlYWRlciwgdmFsdWUpCiAgICAgICAgaWYgJ3RyYW5zZmVyLWVuY29kaW5nJyBub3QgaW4gaGVhZGVyczoKICAgICAgICAgICAgc2VsZi5wdXRoZWFkZXIoJ1RyYW5zZmVyLUVuY29kaW5nJywgJ2NodW5rZWQnKQogICAgICAgIHNlbGYuZW5kaGVhZGVycygpCgogICAgICAgIGlmIGJvZHkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHN0cmluZ2lzaF90eXBlcyA9IHNpeC5zdHJpbmdfdHlwZXMgKyAoc2l4LmJpbmFyeV90eXBlLCkKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShib2R5LCBzdHJpbmdpc2hfdHlwZXMpOgogICAgICAgICAgICAgICAgYm9keSA9IChib2R5LCkKICAgICAgICAgICAgZm9yIGNodW5rIGluIGJvZHk6CiAgICAgICAgICAgICAgICBpZiBub3QgY2h1bms6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGNodW5rLCBzaXguYmluYXJ5X3R5cGUpOgogICAgICAgICAgICAgICAgICAgIGNodW5rID0gY2h1bmsuZW5jb2RlKCd1dGY4JykKICAgICAgICAgICAgICAgIGxlbl9zdHIgPSBoZXgobGVuKGNodW5rKSlbMjpdCiAgICAgICAgICAgICAgICBzZWxmLnNlbmQobGVuX3N0ci5lbmNvZGUoJ3V0Zi04JykpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmQoYidcclxuJykKICAgICAgICAgICAgICAgIHNlbGYuc2VuZChjaHVuaykKICAgICAgICAgICAgICAgIHNlbGYuc2VuZChiJ1xyXG4nKQoKICAgICAgICAjIEFmdGVyIHRoZSBpZiBjbGF1c2UsIHRvIGFsd2F5cyBoYXZlIGEgY2xvc2VkIGJvZHkKICAgICAgICBzZWxmLnNlbmQoYicwXHJcblxyXG4nKQoKCmNsYXNzIEhUVFBTQ29ubmVjdGlvbihIVFRQQ29ubmVjdGlvbik6CiAgICBkZWZhdWx0X3BvcnQgPSBwb3J0X2J5X3NjaGVtZVsnaHR0cHMnXQoKICAgIHNzbF92ZXJzaW9uID0gTm9uZQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBob3N0LCBwb3J0PU5vbmUsIGtleV9maWxlPU5vbmUsIGNlcnRfZmlsZT1Ob25lLAogICAgICAgICAgICAgICAgIHN0cmljdD1Ob25lLCB0aW1lb3V0PXNvY2tldC5fR0xPQkFMX0RFRkFVTFRfVElNRU9VVCwKICAgICAgICAgICAgICAgICBzc2xfY29udGV4dD1Ob25lLCAqKmt3KToKCiAgICAgICAgSFRUUENvbm5lY3Rpb24uX19pbml0X18oc2VsZiwgaG9zdCwgcG9ydCwgc3RyaWN0PXN0cmljdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PXRpbWVvdXQsICoqa3cpCgogICAgICAgIHNlbGYua2V5X2ZpbGUgPSBrZXlfZmlsZQogICAgICAgIHNlbGYuY2VydF9maWxlID0gY2VydF9maWxlCiAgICAgICAgc2VsZi5zc2xfY29udGV4dCA9IHNzbF9jb250ZXh0CgogICAgICAgICMgUmVxdWlyZWQgcHJvcGVydHkgZm9yIEdvb2dsZSBBcHBFbmdpbmUgMS45LjAgd2hpY2ggb3RoZXJ3aXNlIGNhdXNlcwogICAgICAgICMgSFRUUFMgcmVxdWVzdHMgdG8gZ28gb3V0IGFzIEhUVFAuIChTZWUgSXNzdWUgIzM1NikKICAgICAgICBzZWxmLl9wcm90b2NvbCA9ICdodHRwcycKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBjb25uID0gc2VsZi5fbmV3X2Nvbm4oKQogICAgICAgIHNlbGYuX3ByZXBhcmVfY29ubihjb25uKQoKICAgICAgICBpZiBzZWxmLnNzbF9jb250ZXh0IGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuc3NsX2NvbnRleHQgPSBjcmVhdGVfdXJsbGliM19jb250ZXh0KAogICAgICAgICAgICAgICAgc3NsX3ZlcnNpb249cmVzb2x2ZV9zc2xfdmVyc2lvbihOb25lKSwKICAgICAgICAgICAgICAgIGNlcnRfcmVxcz1yZXNvbHZlX2NlcnRfcmVxcyhOb25lKSwKICAgICAgICAgICAgKQoKICAgICAgICBzZWxmLnNvY2sgPSBzc2xfd3JhcF9zb2NrZXQoCiAgICAgICAgICAgIHNvY2s9Y29ubiwKICAgICAgICAgICAga2V5ZmlsZT1zZWxmLmtleV9maWxlLAogICAgICAgICAgICBjZXJ0ZmlsZT1zZWxmLmNlcnRfZmlsZSwKICAgICAgICAgICAgc3NsX2NvbnRleHQ9c2VsZi5zc2xfY29udGV4dCwKICAgICAgICApCgoKY2xhc3MgVmVyaWZpZWRIVFRQU0Nvbm5lY3Rpb24oSFRUUFNDb25uZWN0aW9uKToKICAgICIiIgogICAgQmFzZWQgb24gaHR0cGxpYi5IVFRQU0Nvbm5lY3Rpb24gYnV0IHdyYXBzIHRoZSBzb2NrZXQgd2l0aAogICAgU1NMIGNlcnRpZmljYXRpb24uCiAgICAiIiIKICAgIGNlcnRfcmVxcyA9IE5vbmUKICAgIGNhX2NlcnRzID0gTm9uZQogICAgY2FfY2VydF9kaXIgPSBOb25lCiAgICBzc2xfdmVyc2lvbiA9IE5vbmUKICAgIGFzc2VydF9maW5nZXJwcmludCA9IE5vbmUKCiAgICBkZWYgc2V0X2NlcnQoc2VsZiwga2V5X2ZpbGU9Tm9uZSwgY2VydF9maWxlPU5vbmUsCiAgICAgICAgICAgICAgICAgY2VydF9yZXFzPU5vbmUsIGNhX2NlcnRzPU5vbmUsCiAgICAgICAgICAgICAgICAgYXNzZXJ0X2hvc3RuYW1lPU5vbmUsIGFzc2VydF9maW5nZXJwcmludD1Ob25lLAogICAgICAgICAgICAgICAgIGNhX2NlcnRfZGlyPU5vbmUpOgogICAgICAgICIiIgogICAgICAgIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlLCBiZWZvcmUgdGhlIGNvbm5lY3Rpb24gaXMgdXNlZC4KICAgICAgICAiIiIKICAgICAgICAjIElmIGNlcnRfcmVxcyBpcyBub3QgcHJvdmlkZWQsIHdlIGNhbiB0cnkgdG8gZ3Vlc3MuIElmIHRoZSB1c2VyIGdhdmUKICAgICAgICAjIHVzIGEgY2VydCBkYXRhYmFzZSwgd2UgYXNzdW1lIHRoZXkgd2FudCB0byB1c2UgaXQ6IG90aGVyd2lzZSwgaWYKICAgICAgICAjIHRoZXkgZ2F2ZSB1cyBhbiBTU0wgQ29udGV4dCBvYmplY3Qgd2Ugc2hvdWxkIHVzZSB3aGF0ZXZlciBpcyBzZXQgZm9yCiAgICAgICAgIyBpdC4KICAgICAgICBpZiBjZXJ0X3JlcXMgaXMgTm9uZToKICAgICAgICAgICAgaWYgY2FfY2VydHMgb3IgY2FfY2VydF9kaXI6CiAgICAgICAgICAgICAgICBjZXJ0X3JlcXMgPSAnQ0VSVF9SRVFVSVJFRCcKICAgICAgICAgICAgZWxpZiBzZWxmLnNzbF9jb250ZXh0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgY2VydF9yZXFzID0gc2VsZi5zc2xfY29udGV4dC52ZXJpZnlfbW9kZQoKICAgICAgICBzZWxmLmtleV9maWxlID0ga2V5X2ZpbGUKICAgICAgICBzZWxmLmNlcnRfZmlsZSA9IGNlcnRfZmlsZQogICAgICAgIHNlbGYuY2VydF9yZXFzID0gY2VydF9yZXFzCiAgICAgICAgc2VsZi5hc3NlcnRfaG9zdG5hbWUgPSBhc3NlcnRfaG9zdG5hbWUKICAgICAgICBzZWxmLmFzc2VydF9maW5nZXJwcmludCA9IGFzc2VydF9maW5nZXJwcmludAogICAgICAgIHNlbGYuY2FfY2VydHMgPSBjYV9jZXJ0cyBhbmQgb3MucGF0aC5leHBhbmR1c2VyKGNhX2NlcnRzKQogICAgICAgIHNlbGYuY2FfY2VydF9kaXIgPSBjYV9jZXJ0X2RpciBhbmQgb3MucGF0aC5leHBhbmR1c2VyKGNhX2NlcnRfZGlyKQoKICAgIGRlZiBjb25uZWN0KHNlbGYpOgogICAgICAgICMgQWRkIGNlcnRpZmljYXRlIHZlcmlmaWNhdGlvbgogICAgICAgIGNvbm4gPSBzZWxmLl9uZXdfY29ubigpCgogICAgICAgIGhvc3RuYW1lID0gc2VsZi5ob3N0CiAgICAgICAgaWYgZ2V0YXR0cihzZWxmLCAnX3R1bm5lbF9ob3N0JywgTm9uZSk6CiAgICAgICAgICAgICMgX3R1bm5lbF9ob3N0IHdhcyBhZGRlZCBpbiBQeXRob24gMi42LjMKICAgICAgICAgICAgIyAoU2VlOiBodHRwOi8vaGcucHl0aG9uLm9yZy9jcHl0aG9uL3Jldi8wZjU3YjMwYTE1MmYpCgogICAgICAgICAgICBzZWxmLnNvY2sgPSBjb25uCiAgICAgICAgICAgICMgQ2FsbHMgc2VsZi5fc2V0X2hvc3Rwb3J0KCksIHNvIHNlbGYuaG9zdCBpcwogICAgICAgICAgICAjIHNlbGYuX3R1bm5lbF9ob3N0IGJlbG93LgogICAgICAgICAgICBzZWxmLl90dW5uZWwoKQogICAgICAgICAgICAjIE1hcmsgdGhpcyBjb25uZWN0aW9uIGFzIG5vdCByZXVzYWJsZQogICAgICAgICAgICBzZWxmLmF1dG9fb3BlbiA9IDAKCiAgICAgICAgICAgICMgT3ZlcnJpZGUgdGhlIGhvc3Qgd2l0aCB0aGUgb25lIHdlJ3JlIHJlcXVlc3RpbmcgZGF0YSBmcm9tLgogICAgICAgICAgICBob3N0bmFtZSA9IHNlbGYuX3R1bm5lbF9ob3N0CgogICAgICAgIGlzX3RpbWVfb2ZmID0gZGF0ZXRpbWUuZGF0ZS50b2RheSgpIDwgUkVDRU5UX0RBVEUKICAgICAgICBpZiBpc190aW1lX29mZjoKICAgICAgICAgICAgd2FybmluZ3Mud2FybigoCiAgICAgICAgICAgICAgICAnU3lzdGVtIHRpbWUgaXMgd2F5IG9mZiAoYmVmb3JlIHswfSkuIFRoaXMgd2lsbCBwcm9iYWJseSAnCiAgICAgICAgICAgICAgICAnbGVhZCB0byBTU0wgdmVyaWZpY2F0aW9uIGVycm9ycycpLmZvcm1hdChSRUNFTlRfREFURSksCiAgICAgICAgICAgICAgICBTeXN0ZW1UaW1lV2FybmluZwogICAgICAgICAgICApCgogICAgICAgICMgV3JhcCBzb2NrZXQgdXNpbmcgdmVyaWZpY2F0aW9uIHdpdGggdGhlIHJvb3QgY2VydHMgaW4KICAgICAgICAjIHRydXN0ZWRfcm9vdF9jZXJ0cwogICAgICAgIGlmIHNlbGYuc3NsX2NvbnRleHQgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5zc2xfY29udGV4dCA9IGNyZWF0ZV91cmxsaWIzX2NvbnRleHQoCiAgICAgICAgICAgICAgICBzc2xfdmVyc2lvbj1yZXNvbHZlX3NzbF92ZXJzaW9uKHNlbGYuc3NsX3ZlcnNpb24pLAogICAgICAgICAgICAgICAgY2VydF9yZXFzPXJlc29sdmVfY2VydF9yZXFzKHNlbGYuY2VydF9yZXFzKSwKICAgICAgICAgICAgKQoKICAgICAgICBjb250ZXh0ID0gc2VsZi5zc2xfY29udGV4dAogICAgICAgIGNvbnRleHQudmVyaWZ5X21vZGUgPSByZXNvbHZlX2NlcnRfcmVxcyhzZWxmLmNlcnRfcmVxcykKICAgICAgICBzZWxmLnNvY2sgPSBzc2xfd3JhcF9zb2NrZXQoCiAgICAgICAgICAgIHNvY2s9Y29ubiwKICAgICAgICAgICAga2V5ZmlsZT1zZWxmLmtleV9maWxlLAogICAgICAgICAgICBjZXJ0ZmlsZT1zZWxmLmNlcnRfZmlsZSwKICAgICAgICAgICAgY2FfY2VydHM9c2VsZi5jYV9jZXJ0cywKICAgICAgICAgICAgY2FfY2VydF9kaXI9c2VsZi5jYV9jZXJ0X2RpciwKICAgICAgICAgICAgc2VydmVyX2hvc3RuYW1lPWhvc3RuYW1lLAogICAgICAgICAgICBzc2xfY29udGV4dD1jb250ZXh0KQoKICAgICAgICBpZiBzZWxmLmFzc2VydF9maW5nZXJwcmludDoKICAgICAgICAgICAgYXNzZXJ0X2ZpbmdlcnByaW50KHNlbGYuc29jay5nZXRwZWVyY2VydChiaW5hcnlfZm9ybT1UcnVlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0X2ZpbmdlcnByaW50KQogICAgICAgIGVsaWYgY29udGV4dC52ZXJpZnlfbW9kZSAhPSBzc2wuQ0VSVF9OT05FIFwKICAgICAgICAgICAgICAgIGFuZCBub3QgZ2V0YXR0cihjb250ZXh0LCAnY2hlY2tfaG9zdG5hbWUnLCBGYWxzZSkgXAogICAgICAgICAgICAgICAgYW5kIHNlbGYuYXNzZXJ0X2hvc3RuYW1lIGlzIG5vdCBGYWxzZToKICAgICAgICAgICAgIyBXaGlsZSB1cmxsaWIzIGF0dGVtcHRzIHRvIGFsd2F5cyB0dXJuIG9mZiBob3N0bmFtZSBtYXRjaGluZyBmcm9tCiAgICAgICAgICAgICMgdGhlIFRMUyBsaWJyYXJ5LCB0aGlzIGNhbm5vdCBhbHdheXMgYmUgZG9uZS4gU28gd2UgY2hlY2sgd2hldGhlcgogICAgICAgICAgICAjIHRoZSBUTFMgTGlicmFyeSBzdGlsbCB0aGlua3MgaXQncyBtYXRjaGluZyBob3N0bmFtZXMuCiAgICAgICAgICAgIGNlcnQgPSBzZWxmLnNvY2suZ2V0cGVlcmNlcnQoKQogICAgICAgICAgICBpZiBub3QgY2VydC5nZXQoJ3N1YmplY3RBbHROYW1lJywgKCkpOgogICAgICAgICAgICAgICAgd2FybmluZ3Mud2FybigoCiAgICAgICAgICAgICAgICAgICAgJ0NlcnRpZmljYXRlIGZvciB7MH0gaGFzIG5vIGBzdWJqZWN0QWx0TmFtZWAsIGZhbGxpbmcgYmFjayB0byBjaGVjayBmb3IgYSAnCiAgICAgICAgICAgICAgICAgICAgJ2Bjb21tb25OYW1lYCBmb3Igbm93LiBUaGlzIGZlYXR1cmUgaXMgYmVpbmcgcmVtb3ZlZCBieSBtYWpvciBicm93c2VycyBhbmQgJwogICAgICAgICAgICAgICAgICAgICdkZXByZWNhdGVkIGJ5IFJGQyAyODE4LiAoU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zaGF6b3cvdXJsbGliMy9pc3N1ZXMvNDk3ICcKICAgICAgICAgICAgICAgICAgICAnZm9yIGRldGFpbHMuKScuZm9ybWF0KGhvc3RuYW1lKSksCiAgICAgICAgICAgICAgICAgICAgU3ViamVjdEFsdE5hbWVXYXJuaW5nCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIF9tYXRjaF9ob3N0bmFtZShjZXJ0LCBzZWxmLmFzc2VydF9ob3N0bmFtZSBvciBob3N0bmFtZSkKCiAgICAgICAgc2VsZi5pc192ZXJpZmllZCA9ICgKICAgICAgICAgICAgY29udGV4dC52ZXJpZnlfbW9kZSA9PSBzc2wuQ0VSVF9SRVFVSVJFRCBvcgogICAgICAgICAgICBzZWxmLmFzc2VydF9maW5nZXJwcmludCBpcyBub3QgTm9uZQogICAgICAgICkKCgpkZWYgX21hdGNoX2hvc3RuYW1lKGNlcnQsIGFzc2VydGVkX2hvc3RuYW1lKToKICAgIHRyeToKICAgICAgICBtYXRjaF9ob3N0bmFtZShjZXJ0LCBhc3NlcnRlZF9ob3N0bmFtZSkKICAgIGV4Y2VwdCBDZXJ0aWZpY2F0ZUVycm9yIGFzIGU6CiAgICAgICAgbG9nLmVycm9yKAogICAgICAgICAgICAnQ2VydGlmaWNhdGUgZGlkIG5vdCBtYXRjaCBleHBlY3RlZCBob3N0bmFtZTogJXMuICcKICAgICAgICAgICAgJ0NlcnRpZmljYXRlOiAlcycsIGFzc2VydGVkX2hvc3RuYW1lLCBjZXJ0CiAgICAgICAgKQogICAgICAgICMgQWRkIGNlcnQgdG8gZXhjZXB0aW9uIGFuZCByZXJhaXNlIHNvIGNsaWVudCBjb2RlIGNhbiBpbnNwZWN0CiAgICAgICAgIyB0aGUgY2VydCB3aGVuIGNhdGNoaW5nIHRoZSBleGNlcHRpb24sIGlmIHRoZXkgd2FudCB0bwogICAgICAgIGUuX3BlZXJfY2VydCA9IGNlcnQKICAgICAgICByYWlzZQoKCmlmIHNzbDoKICAgICMgTWFrZSBhIGNvcHkgZm9yIHRlc3RpbmcuCiAgICBVbnZlcmlmaWVkSFRUUFNDb25uZWN0aW9uID0gSFRUUFNDb25uZWN0aW9uCiAgICBIVFRQU0Nvbm5lY3Rpb24gPSBWZXJpZmllZEhUVFBTQ29ubmVjdGlvbgplbHNlOgogICAgSFRUUFNDb25uZWN0aW9uID0gRHVtbXlDb25uZWN0aW9uCg==
