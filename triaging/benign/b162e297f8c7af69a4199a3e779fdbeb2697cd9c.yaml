statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/integrations.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-

      """
      The MIT License (MIT)

      Copyright (c) 2015-present Rapptz

      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the "Software"),
      to deal in the Software without restriction, including without limitation
      the rights to use, copy, modify, merge, publish, distribute, sublicense,
      and/or sell copies of the Software, and to permit persons to whom the
      Software is furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE SOFTWARE.
      """

      import datetime
      from .utils import _get_as_snowflake, get, parse_time
      from .user import User
      from .errors import InvalidArgument
      from .enums import try_enum, ExpireBehaviour

      class IntegrationAccount:
          """Represents an integration account.

          .. versionadded:: 1.4

          Attributes
          -----------
          id: :class:`int`
              The account ID.
          name: :class:`str`
              The account name.
          """

          __slots__ = ('id', 'name')

          def __init__(self, **kwargs):
              self.id = kwargs.pop('id')
              self.name = kwargs.pop('name')

          def __repr__(self):
              return '<IntegrationAccount id={0.id} name={0.name!r}>'.format(self)
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ load_const INTEGER load_const import_name datetime store_name datetime load_const INTEGER load_const import_name utils import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from get store_name get import_from parse_time store_name parse_time pop_top load_const INTEGER load_const import_name user import_from User store_name User pop_top load_const INTEGER load_const import_name errors import_from InvalidArgument store_name InvalidArgument pop_top load_const INTEGER load_const import_name enums import_from try_enum store_name try_enum import_from ExpireBehaviour store_name ExpireBehaviour pop_top push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH call store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const Integration call store_name Integration return_const None
    hash: 4536620872b16be1e417ddd4cd82e6377b1a938d99c559406f161f4e016802d8
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/integrations.py
  : 
