statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/channel.py
  contents:
  - name: GroupChannel.permissions_for
    score: 0.0
    code: |-
      def permissions_for(self, user):
              """Handles permission resolution for a :class:`User`.

              This function is there for compatibility with other channel types.

              Actual direct messages do not really have the concept of permissions.

              This returns all the Text related permissions set to ``True`` except:

              - :attr:`~Permissions.send_tts_messages`: You cannot send TTS messages in a DM.
              - :attr:`~Permissions.manage_messages`: You cannot delete others messages in a DM.

              This also checks the kick_members permission if the user is the owner.

              Parameters
              -----------
              user: :class:`User`
                  The user to check permissions for.

              Returns
              --------
              :class:`Permissions`
                  The resolved permissions for the user.
              """

              base = Permissions.text()
              base.read_messages = True
              base.send_tts_messages = False
              base.manage_messages = False
              base.mention_everyone = True

              if user.id == self.owner.id:
                  base.kick_members = True

              return base
    tokens: resume load_global Permissions load_attr text call store_fast base load_const INTEGER load_fast base store_attr read_messages load_const INTEGER load_fast base store_attr STRING_LEN_S_ENT_HIGH load_const INTEGER load_fast base store_attr manage_messages load_const INTEGER load_fast base store_attr STRING_LEN_S_ENT_HIGH load_fast user load_attr id load_fast self load_attr owner load_attr id compare_op == pop_jump_if_false TO_NUMBER load_const INTEGER load_fast base store_attr kick_members load_fast base return_value
    hash: 3efebf7a4581569411c2015bc41e03c6fa7dfdccc9e9587defc14e23107336e2
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/channel.py: 
