statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3uploader.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2012-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # http://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.

      import hashlib
      import logging
      import threading
      import os
      import sys

      import botocore
      import botocore.exceptions
      from s3transfer.manager import TransferManager
      from s3transfer.subscribers import BaseSubscriber

      from awscli.compat import collections_abc

      LOG = logging.getLogger(__name__)


      class NoSuchBucketError(Exception):
          def __init__(self, **kwargs):
              msg = self.fmt.format(**kwargs)
              Exception.__init__(self, msg)
              self.kwargs = kwargs


          fmt = ("S3 Bucket does not exist. "
                 "Execute the command to create a new bucket"
                 "\n"
                 "aws s3 mb s3://{bucket_name}")
    tokens: resume load_const INTEGER load_const import_name hashlib store_name hashlib load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name threading store_name threading load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name sys store_name sys load_const INTEGER load_const import_name botocore store_name botocore load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH store_name botocore load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from TransferManager store_name TransferManager pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from BaseSubscriber store_name BaseSubscriber pop_top load_const INTEGER load_const import_name awscli.compat import_from collections_abc store_name collections_abc pop_top push_null load_name logging load_attr getLogger load_name __name__ call store_name LOG push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name Exception call store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const S3Uploader load_name object call store_name S3Uploader push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name BaseSubscriber call store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: 4a6e20f807cd8bd801ecd5009c1b2193688ad5296b63d49226757fb4eac2f0d0
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3uploader.py: 
