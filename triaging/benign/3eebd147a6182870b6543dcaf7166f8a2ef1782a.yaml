statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_connectionpool.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      from __future__ import absolute_import

      import sys

      from urllib3.connectionpool import (
          connection_from_url,
          HTTPConnection,
          HTTPConnectionPool,
          HTTPSConnectionPool,
      )
      from urllib3.response import httplib, HTTPResponse
      from urllib3.util.timeout import Timeout
      from urllib3.packages.six.moves.http_client import HTTPException
      from urllib3.packages.six.moves.queue import Empty
      from urllib3.packages.ssl_match_hostname import CertificateError
      from urllib3.exceptions import (
          ClosedPoolError,
          EmptyPoolError,
          HostChangedError,
          LocationValueError,
          MaxRetryError,
          ProtocolError,
          SSLError,
          TimeoutError,
      )
      from urllib3._collections import HTTPHeaderDict
      from .test_response import MockChunkedEncodingResponse, MockSock

      from socket import error as SocketError
      from ssl import SSLError as BaseSSLError

      from dummyserver.server import DEFAULT_CA

      if sys.version_info >= (2, 7):
          import unittest
      else:
          import unittest2 as unittest


      class TestConnectionPool(unittest.TestCase):
          """
          Tests in this suite should exercise the ConnectionPool functionality
          without actually making any network requests or connections.
          """
          def test_same_host(self):
              same_host = [
                  ('http://google.com/', '/'),
                  ('http://google.com/', 'http://google.com/'),
                  ('http://google.com/', 'http://google.com'),
                  ('http://google.com/', 'http://google.com/abra/cadabra'),
                  ('http://google.com:42/', 'http://google.com:42/abracadabra'),
                  # Test comparison using default ports
                  ('http://google.com:80/', 'http://google.com/abracadabra'),
                  ('http://google.com/', 'http://google.com:80/abracadabra'),
                  ('https://google.com:443/', 'https://google.com/abracadabra'),
                  ('https://google.com/', 'https://google.com:443/abracadabra'),
                  ('http://[2607:f8b0:4005:805::200e%25eth0]/',
                   'http://[2607:f8b0:4005:805::200e%eth0]/'),
                  ('https://[2607:f8b0:4005:805::200e%25eth0]:443/',
                   'https://[2607:f8b0:4005:805::200e%eth0]:443/'),
                  ('http://[::1]/', 'http://[::1]'),
                  ('http://[2001:558:fc00:200:f816:3eff:fef9:b954%lo]/',
                   'http://[2001:558:fc00:200:f816:3eff:fef9:b954%25lo]')
              ]

              for a, b in same_host:
                  c = connection_from_url(a)
                  self.addCleanup(c.close)
                  self.assertTrue(c.is_same_host(b), "%s =? %s" % (a, b))

              not_same_host = [
                  ('https://google.com/', 'http://google.com/'),
                  ('http://google.com/', 'https://google.com/'),
                  ('http://yahoo.com/', 'http://google.com/'),
                  ('http://google.com:42', 'https://google.com/abracadabra'),
                  ('http://google.com', 'https://google.net/'),
                  # Test comparison with default ports
                  ('http://google.com:42', 'http://google.com'),
                  ('https://google.com:42', 'https://google.com'),
                  ('http://google.com:443', 'http://google.com'),
                  ('https://google.com:80', 'https://google.com'),
                  ('http://google.com:443', 'https://google.com'),
                  ('https://google.com:80', 'http://google.com'),
                  ('https://google.com:443', 'http://google.com'),
                  ('http://google.com:80', 'https://google.com'),
                  # Zone identifiers are unique connection end points and should
                  # never be equivalent.
                  ('http://[dead::beef]', 'https://[dead::beef%en5]/'),
              ]

              for a, b in not_same_host:
                  c = connection_from_url(a)
                  self.addCleanup(c.close)
                  self.assertFalse(c.is_same_host(b), "%s =? %s" % (a, b))
                  c = connection_from_url(b)
                  self.addCleanup(c.close)
                  self.assertFalse(c.is_same_host(a), "%s =? %s" % (b, a))

          def test_same_host_no_port(self):
              # This test was introduced in #801 to deal with the fact that urllib3
              # never initializes ConnectionPool objects with port=None.
              same_host_http = [
                  ('google.com', '/'),
                  ('google.com', 'http://google.com/'),
                  ('google.com', 'http://google.com'),
                  ('google.com', 'http://google.com/abra/cadabra'),
                  # Test comparison using default ports
                  ('google.com', 'http://google.com:80/abracadabra'),
              ]
              same_host_https = [
                  ('google.com', '/'),
                  ('google.com', 'https://google.com/'),
                  ('google.com', 'https://google.com'),
                  ('google.com', 'https://google.com/abra/cadabra'),
                  # Test comparison using default ports
                  ('google.com', 'https://google.com:443/abracadabra'),
              ]

              for a, b in same_host_http:
                  c = HTTPConnectionPool(a)
                  self.addCleanup(c.close)
                  self.assertTrue(c.is_same_host(b), "%s =? %s" % (a, b))
              for a, b in same_host_https:
                  c = HTTPSConnectionPool(a)
                  self.addCleanup(c.close)
                  self.assertTrue(c.is_same_host(b), "%s =? %s" % (a, b))

              not_same_host_http = [
                  ('google.com', 'https://google.com/'),
                  ('yahoo.com', 'http://google.com/'),
                  ('google.com', 'https://google.net/'),
              ]
              not_same_host_https = [
                  ('google.com', 'http://google.com/'),
                  ('yahoo.com', 'https://google.com/'),
                  ('google.com', 'https://google.net/'),
              ]

              for a, b in not_same_host_http:
                  c = HTTPConnectionPool(a)
                  self.addCleanup(c.close)
                  self.assertFalse(c.is_same_host(b), "%s =? %s" % (a, b))
                  c = HTTPConnectionPool(b)
                  self.addCleanup(c.close)
                  self.assertFalse(c.is_same_host(a), "%s =? %s" % (b, a))
              for a, b in not_same_host_https:
                  c = HTTPSConnectionPool(a)
                  self.addCleanup(c.close)
                  self.assertFalse(c.is_same_host(b), "%s =? %s" % (a, b))
                  c = HTTPSConnectionPool(b)
                  self.addCleanup(c.close)
                  self.assertFalse(c.is_same_host(a), "%s =? %s" % (b, a))

          def test_max_connections(self):
              pool = HTTPConnectionPool(host='localhost', maxsize=1, block=True)
              self.addCleanup(pool.close)

              pool._get_conn(timeout=0.01)

              try:
                  pool._get_conn(timeout=0.01)
                  self.fail("Managed to get a connection without EmptyPoolError")
              except EmptyPoolError:
                  pass

              try:
                  pool.request('GET', '/', pool_timeout=0.01)
                  self.fail("Managed to get a connection without EmptyPoolError")
              except EmptyPoolError:
                  pass

              self.assertEqual(pool.num_connections, 1)

          def test_pool_edgecases(self):
              pool = HTTPConnectionPool(host='localhost', maxsize=1, block=False)
              self.addCleanup(pool.close)

              conn1 = pool._get_conn()
              conn2 = pool._get_conn()  # New because block=False

              pool._put_conn(conn1)
              pool._put_conn(conn2)  # Should be discarded

              self.assertEqual(conn1, pool._get_conn())
              self.assertNotEqual(conn2, pool._get_conn())

              self.assertEqual(pool.num_connections, 3)

          def test_exception_str(self):
              self.assertEqual(
                  str(EmptyPoolError(HTTPConnectionPool(host='localhost'), "Test.")),
                  "HTTPConnectionPool(host='localhost', port=None): Test.")

          def test_retry_exception_str(self):
              self.assertEqual(
                  str(MaxRetryError(
                      HTTPConnectionPool(host='localhost'), "Test.", None)),
                  "HTTPConnectionPool(host='localhost', port=None): "
                  "Max retries exceeded with url: Test. (Caused by None)")

              err = SocketError("Test")

              # using err.__class__ here, as socket.error is an alias for OSError
              # since Py3.3 and gets printed as this
              self.assertEqual(
                  str(MaxRetryError(
                      HTTPConnectionPool(host='localhost'), "Test.", err)),
                  "HTTPConnectionPool(host='localhost', port=None): "
                  "Max retries exceeded with url: Test. "
                  "(Caused by %r)" % err)

          def test_pool_size(self):
              POOL_SIZE = 1
              pool = HTTPConnectionPool(host='localhost', maxsize=POOL_SIZE, block=True)
              self.addCleanup(pool.close)

              def _raise(ex):
                  raise ex()

              def _test(exception, expect):
                  pool._make_request = lambda *args, **kwargs: _raise(exception)
                  self.assertRaises(expect, pool.request, 'GET', '/')

                  self.assertEqual(pool.pool.qsize(), POOL_SIZE)

              # Make sure that all of the exceptions return the connection to the pool
              _test(Empty, EmptyPoolError)
              _test(BaseSSLError, SSLError)
              _test(CertificateError, SSLError)

              # The pool should never be empty, and with these two exceptions being raised,
              # a retry will be triggered, but that retry will fail, eventually raising
              # MaxRetryError, not EmptyPoolError
              # See: https://github.com/shazow/urllib3/issues/76
              pool._make_request = lambda *args, **kwargs: _raise(HTTPException)
              self.assertRaises(MaxRetryError, pool.request,
                                'GET', '/', retries=1, pool_timeout=0.01)
              self.assertEqual(pool.pool.qsize(), POOL_SIZE)

          def test_assert_same_host(self):
              c = connection_from_url('http://google.com:80')
              self.addCleanup(c.close)

              self.assertRaises(HostChangedError, c.request,
                                'GET', 'http://yahoo.com:80', assert_same_host=True)

          def test_pool_close(self):
              pool = connection_from_url('http://google.com:80')

              # Populate with some connections
              conn1 = pool._get_conn()
              conn2 = pool._get_conn()
              conn3 = pool._get_conn()
              pool._put_conn(conn1)
              pool._put_conn(conn2)

              old_pool_queue = pool.pool

              pool.close()
              self.assertEqual(pool.pool, None)

              self.assertRaises(ClosedPoolError, pool._get_conn)

              pool._put_conn(conn3)

              self.assertRaises(ClosedPoolError, pool._get_conn)

              self.assertRaises(Empty, old_pool_queue.get, block=False)

          def test_pool_timeouts(self):
              pool = HTTPConnectionPool(host='localhost')
              self.addCleanup(pool.close)
              conn = pool._new_conn()
              self.assertEqual(conn.__class__, HTTPConnection)
              self.assertEqual(pool.timeout.__class__, Timeout)
              self.assertEqual(pool.timeout._read, Timeout.DEFAULT_TIMEOUT)
              self.assertEqual(pool.timeout._connect, Timeout.DEFAULT_TIMEOUT)
              self.assertEqual(pool.timeout.total, None)

              pool = HTTPConnectionPool(host='localhost', timeout=3)
              self.assertEqual(pool.timeout._read, 3)
              self.assertEqual(pool.timeout._connect, 3)
              self.assertEqual(pool.timeout.total, None)

          def test_no_host(self):
              self.assertRaises(LocationValueError, HTTPConnectionPool, None)

          def test_contextmanager(self):
              with connection_from_url('http://google.com:80') as pool:
                  # Populate with some connections
                  conn1 = pool._get_conn()
                  conn2 = pool._get_conn()
                  conn3 = pool._get_conn()
                  pool._put_conn(conn1)
                  pool._put_conn(conn2)

                  old_pool_queue = pool.pool

              self.assertEqual(pool.pool, None)
              self.assertRaises(ClosedPoolError, pool._get_conn)

              pool._put_conn(conn3)
              self.assertRaises(ClosedPoolError, pool._get_conn)
              self.assertRaises(Empty, old_pool_queue.get, block=False)

          def test_absolute_url(self):
              c = connection_from_url('http://google.com:80')
              self.addCleanup(c.close)
              self.assertEqual(
                      'http://google.com:80/path?query=foo',
                      c._absolute_url('path?query=foo'))

          def test_ca_certs_default_cert_required(self):
              with connection_from_url('https://google.com:80', ca_certs=DEFAULT_CA) as pool:
                  conn = pool._get_conn()
                  self.assertEqual(conn.cert_reqs, 'CERT_REQUIRED')

          def test_cleanup_on_extreme_connection_error(self):
              """
              This test validates that we clean up properly even on exceptions that
              we'd not otherwise catch, i.e. those that inherit from BaseException
              like KeyboardInterrupt or gevent.Timeout. See #805 for more details.
              """
              class RealBad(BaseException):
                  pass

              def kaboom(*args, **kwargs):
                  raise RealBad()

              c = connection_from_url('http://localhost:80')
              self.addCleanup(c.close)
              c._make_request = kaboom

              initial_pool_size = c.pool.qsize()

              try:
                  # We need to release_conn this way or we'd put it away regardless.
                  c.urlopen('GET', '/', release_conn=False)
              except RealBad:
                  pass

              new_pool_size = c.pool.qsize()
              self.assertEqual(initial_pool_size, new_pool_size)

          def test_release_conn_param_is_respected_after_http_error_retry(self):
              """For successful ```urlopen(release_conn=False)```,
              the connection isn't released, even after a retry.

              This is a regression test for issue #651 [1], where the connection
              would be released if the initial request failed, even if a retry
              succeeded.

              [1] <https://github.com/shazow/urllib3/issues/651>
              """

              class _raise_once_make_request_function(object):
                  """Callable that can mimic `_make_request()`.

                  Raises the given exception on its first call, but returns a
                  successful response on subsequent calls.
                  """
                  def __init__(self, ex):
                      super(_raise_once_make_request_function, self).__init__()
                      self._ex = ex

                  def __call__(self, *args, **kwargs):
                      if self._ex:
                          ex, self._ex = self._ex, None
                          raise ex()
                      response = httplib.HTTPResponse(MockSock)
                      response.fp = MockChunkedEncodingResponse([b'f', b'o', b'o'])
                      response.headers = response.msg = HTTPHeaderDict()
                      return response

              def _test(exception):
                  pool = HTTPConnectionPool(host='localhost', maxsize=1, block=True)
                  self.addCleanup(pool.close)

                  # Verify that the request succeeds after two attempts, and that the
                  # connection is left on the response object, instead of being
                  # released back into the pool.
                  pool._make_request = _raise_once_make_request_function(exception)
                  response = pool.urlopen('GET', '/', retries=1,
                                          release_conn=False, preload_content=False,
                                          chunked=True)
                  self.assertEqual(pool.pool.qsize(), 0)
                  self.assertEqual(pool.num_connections, 2)
                  self.assertTrue(response.connection is not None)

                  response.release_conn()
                  self.assertEqual(pool.pool.qsize(), 1)
                  self.assertTrue(response.connection is None)

              # Run the test case for all the retriable exceptions.
              _test(TimeoutError)
              _test(HTTPException)
              _test(SocketError)
              _test(ProtocolError)

          def test_custom_http_response_class(self):

              class CustomHTTPResponse(HTTPResponse):
                  pass

              class CustomConnectionPool(HTTPConnectionPool):
                  ResponseCls = CustomHTTPResponse

                  def _make_request(self, *args, **kwargs):
                      httplib_response = httplib.HTTPResponse(MockSock)
                      httplib_response.fp = MockChunkedEncodingResponse([b'f', b'o', b'o'])
                      httplib_response.headers = httplib_response.msg = HTTPHeaderDict()
                      return httplib_response

              pool = CustomConnectionPool(host='localhost', maxsize=1, block=True)
              self.addCleanup(pool.close)
              response = pool.request('GET', '/', retries=False, chunked=True,
                                      preload_content=False)
              self.assertTrue(isinstance(response, CustomHTTPResponse))
    tokens: resume load_const INTEGER load_const import_name __future__ import_from absolute_import store_name absolute_import pop_top load_const INTEGER load_const import_name sys store_name sys load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from HTTPConnection store_name HTTPConnection import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from httplib store_name httplib import_from HTTPResponse store_name HTTPResponse pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from Timeout store_name Timeout pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from HTTPException store_name HTTPException pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from Empty store_name Empty pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from ClosedPoolError store_name ClosedPoolError import_from EmptyPoolError store_name EmptyPoolError import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from MaxRetryError store_name MaxRetryError import_from ProtocolError store_name ProtocolError import_from SSLError store_name SSLError import_from TimeoutError store_name TimeoutError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from HTTPHeaderDict store_name HTTPHeaderDict pop_top load_const INTEGER load_const import_name test_response import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from MockSock store_name MockSock pop_top load_const INTEGER load_const import_name socket import_from error store_name SocketError pop_top load_const INTEGER load_const import_name ssl import_from SSLError store_name BaseSSLError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from DEFAULT_CA store_name DEFAULT_CA pop_top load_name sys load_attr version_info load_const compare_op >= pop_jump_if_false TO_NUMBER load_const INTEGER load_const import_name unittest store_name unittest jump_forward TO_NUMBER load_const INTEGER load_const import_name unittest2 store_name unittest push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name unittest load_attr TestCase call store_name STRING_LEN_S_ENT_HIGH load_name __name__ load_const __main__ compare_op == pop_jump_if_false TO_NUMBER push_null load_name unittest load_attr main call pop_top return_const None return_const None
    hash: 1de3671fdeb0eb71ad234ea689ad8bd5b0a8412e698426c91c7901b6cc72dc57
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_connectionpool.py: 
