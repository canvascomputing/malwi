statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_response.py
  contents:
  - name: TestResponse.test_io
    score: 0.0
    code: |-
      def test_io(self):
              fp = BytesIO(b'foo')
              resp = HTTPResponse(fp, preload_content=False)

              self.assertEqual(resp.closed, False)
              self.assertEqual(resp.readable(), True)
              self.assertEqual(resp.writable(), False)
              self.assertRaises(IOError, resp.fileno)

              resp.close()
              self.assertEqual(resp.closed, True)

              # Try closing with an `httplib.HTTPResponse`, because it has an
              # `isclosed` method.
              hlr = httplib.HTTPResponse(socket.socket())
              resp2 = HTTPResponse(hlr, preload_content=False)
              self.assertEqual(resp2.closed, False)
              resp2.close()
              self.assertEqual(resp2.closed, True)

              # also try when only data is present.
              resp3 = HTTPResponse('foodata')
              self.assertRaises(IOError, resp3.fileno)

              resp3._fp = 2
              # A corner case where _fp is present but doesn't have `closed`,
              # `isclosed`, or `fileno`.  Unlikely, but possible.
              self.assertEqual(resp3.closed, True)
              self.assertRaises(IOError, resp3.fileno)
    tokens: resume load_global BytesIO load_const call store_fast fp load_global HTTPResponse load_fast fp load_const INTEGER kw_names preload_content call store_fast resp load_fast self load_attr assertEqual load_fast resp load_attr closed load_const INTEGER call pop_top load_fast self load_attr assertEqual load_fast resp load_attr readable call load_const INTEGER call pop_top load_fast self load_attr assertEqual load_fast resp load_attr writable call load_const INTEGER call pop_top load_fast self load_attr assertRaises load_global IOError load_fast resp load_attr fileno call pop_top load_fast resp load_attr close call pop_top load_fast self load_attr assertEqual load_fast resp load_attr closed load_const INTEGER call pop_top load_global httplib load_attr HTTPResponse load_global socket load_attr socket call call store_fast hlr load_global HTTPResponse load_fast hlr load_const INTEGER kw_names preload_content call store_fast resp2 load_fast self load_attr assertEqual load_fast resp2 load_attr closed load_const INTEGER call pop_top load_fast resp2 load_attr close call pop_top load_fast self load_attr assertEqual load_fast resp2 load_attr closed load_const INTEGER call pop_top load_global HTTPResponse load_const foodata call store_fast resp3 load_fast self load_attr assertRaises load_global IOError load_fast resp3 load_attr fileno call pop_top load_const INTEGER load_fast resp3 store_attr _fp load_fast self load_attr assertEqual load_fast resp3 load_attr closed load_const INTEGER call pop_top load_fast self load_attr assertRaises load_global IOError load_fast resp3 load_attr fileno call pop_top return_const None
    hash: c5c2912571e38a5a33b367d2e74b329ce77cd6e496d8d4f62250e6fc99eaa939
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_response.py: 
