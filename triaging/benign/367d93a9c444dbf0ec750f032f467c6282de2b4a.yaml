statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/_core_foundation_cffi.py
  contents:
  - name: CFHelpers.cf_dictionary_from_pairs
    score: 0.0
    code: |-
      @staticmethod
          def cf_dictionary_from_pairs(pairs):
              """
              Creates a CFDictionaryRef object from a list of 2-element tuples
              representing the key and value. Each key should be a CFStringRef and each
              value some sort of CF* type.

              :param pairs:
                  A list of 2-element tuples

              :return:
                  A CFDictionaryRef
              """

              length = len(pairs)
              keys = []
              values = []
              for pair in pairs:
                  key, value = pair
                  keys.append(key)
                  values.append(value)
              return CoreFoundation.CFDictionaryCreate(
                  CoreFoundation.kCFAllocatorDefault,
                  keys,
                  values,
                  length,
                  ffi.addressof(CoreFoundation.kCFTypeDictionaryKeyCallBacks),
                  ffi.addressof(CoreFoundation.kCFTypeDictionaryValueCallBacks)
              )
    tokens: resume load_global len load_fast pairs call store_fast length build_list store_fast keys build_list store_fast values load_fast pairs get_iter for_iter TO_NUMBER store_fast pair load_fast pair unpack_sequence store_fast key store_fast value load_fast keys load_attr append load_fast key call pop_top load_fast values load_attr append load_fast value call pop_top jump_backward TO_NUMBER end_for load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH load_fast keys load_fast values load_fast length load_global ffi load_attr addressof load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH call load_global ffi load_attr addressof load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH call call return_value
    hash: ffb3c196a974bc3184531d26ca51a424c476dd31e917377664340c34b8b4babe
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/_core_foundation_cffi.py
  : 
