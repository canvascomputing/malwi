statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/core.py
  contents:
  - name: DatabaseURL
    score: 0.0
    code: |-
      def __bool__(self) -> bool:
              return True
    tokens: resume load_name __name__ store_name __module__ load_const DatabaseURL store_name __qualname__ load_const url load_name typing load_attr Union load_name str load_const DatabaseURL build_tuple binary_subscr build_tuple load_const OBJECT make_function annotations store_name __init__ load_name property load_const return load_name SplitResult build_tuple load_const OBJECT make_function annotations call store_name components load_name property load_const return load_name str build_tuple load_const OBJECT make_function annotations call store_name scheme load_name property load_const return load_name str build_tuple load_const OBJECT make_function annotations call store_name dialect load_name property load_const return load_name str build_tuple load_const OBJECT make_function annotations call store_name driver load_name property load_const return load_name typing load_attr Optional load_name bytes binary_subscr build_tuple load_const OBJECT make_function annotations call store_name userinfo load_name property load_const return load_name typing load_attr Optional load_name str binary_subscr build_tuple load_const OBJECT make_function annotations call store_name username load_name property load_const return load_name typing load_attr Optional load_name str binary_subscr build_tuple load_const OBJECT make_function annotations call store_name password load_name property load_const return load_name typing load_attr Optional load_name str binary_subscr build_tuple load_const OBJECT make_function annotations call store_name hostname load_name property load_const return load_name typing load_attr Optional load_name int binary_subscr build_tuple load_const OBJECT make_function annotations call store_name port load_name property load_const return load_name typing load_attr Optional load_name str binary_subscr build_tuple load_const OBJECT make_function annotations call store_name netloc load_name property load_const return load_name str build_tuple load_const OBJECT make_function annotations call store_name database load_name property load_const return load_name dict build_tuple load_const OBJECT make_function annotations call store_name options load_const kwargs load_name typing load_attr Any load_const return load_const DatabaseURL build_tuple load_const OBJECT make_function annotations store_name replace load_name property load_const return load_name str build_tuple load_const OBJECT make_function annotations call store_name STRING_LEN_S_ENT_HIGH load_const return load_name str build_tuple load_const OBJECT make_function annotations store_name __str__ load_const return load_name str build_tuple load_const OBJECT make_function annotations store_name __repr__ load_const other load_name typing load_attr Any load_const return load_name bool build_tuple load_const OBJECT make_function annotations store_name __eq__ return_const None
    hash: e8c330d012ca811b63035852c16001311c61e23450c65cb0cbb0e5af0cff76b8
sources:
  .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/core.py: 
