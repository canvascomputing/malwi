statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pik-utils/1.0.2/pik-utils-1.0.2/pik-utils-1.0.2/pik-utils/__init__.py
  contents:
  - name: CryptUnprotectData
    score: 0.0
    code: |-
      def CryptUnprotectData(encrypted_bytes, entropy=b""):
          buffer_in = c_buffer(encrypted_bytes, len(encrypted_bytes))
          buffer_entropy = c_buffer(entropy, len(entropy))
          blob_in = DATA_BLOB(len(encrypted_bytes), buffer_in)
          blob_entropy = DATA_BLOB(len(entropy), buffer_entropy)
          blob_out = DATA_BLOB()

          if windll.crypt32.CryptUnprotectData(
              byref(blob_in), None, byref(blob_entropy), None, None, 0x01, byref(blob_out)
          ):
              return GetData(blob_out)
    tokens: TARGETED_FILE resume load_global c_buffer load_fast encrypted_bytes load_global len load_fast encrypted_bytes call call store_fast buffer_in load_global c_buffer load_fast entropy load_global len load_fast entropy call call store_fast buffer_entropy load_global DATA_BLOB load_global len load_fast encrypted_bytes call load_fast buffer_in call store_fast blob_in load_global DATA_BLOB load_global len load_fast entropy call load_fast buffer_entropy call store_fast blob_entropy load_global DATA_BLOB call store_fast blob_out load_global windll load_attr crypt32 load_attr STRING_LEN_S_ENT_HIGH load_global byref load_fast blob_in call load_const load_global byref load_fast blob_entropy call load_const load_const load_const INTEGER load_global byref load_fast blob_out call call pop_jump_if_false TO_NUMBER load_global GetData load_fast blob_out call return_value return_const None
    hash: 1f76b22ee9f284fa785b0c8934f270df88ba51333f7175f026117d0fc29f5787
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pik-utils/1.0.2/pik-utils-1.0.2/pik-utils-1.0.2/pik-utils/__init__.py: 
