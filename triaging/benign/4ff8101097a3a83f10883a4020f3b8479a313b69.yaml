statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/colordiscord/0.0.1/colordiscord-0.0.1/colordiscord-0.0.1/colordiscord/colordiscord.py
  contents:
  - name: color.G3tB4dg31
    score: 0.0
    code: |-
      def G3tB4dg31(flags):
              if flags == 0: return ''

              Own3dB3dg4s = ''
              b4dg3List =  [
                  {"Name": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': "<:developer:874750808472825986> "},
                  {"Name": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': "<:bughunter_2:874750808430874664> "},
                  {"Name": 'Early_Supporter', 'Value': 512, 'Emoji': "<:early_supporter:874750808414113823> "},
                  {"Name": 'House_Balance', 'Value': 256, 'Emoji': "<:balance:874750808267292683> "},
                  {"Name": 'House_Brilliance', 'Value': 128, 'Emoji': "<:brilliance:874750808338608199> "},
                  {"Name": 'House_Bravery', 'Value': 64, 'Emoji': "<:bravery:874750808388952075> "},
                  {"Name": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': "<:bughunter_1:874750808426692658> "},
                  {"Name": 'HypeSquad_Events', 'Value': 4, 'Emoji': "<:hypesquad_events:874750808594477056> "},
                  {"Name": 'Partnered_Server_Owner', 'Value': 2,'Emoji': "<:partner:874750808678354964> "},
                  {"Name": 'Discord_Employee', 'Value': 1, 'Emoji': "<:staff:874750808728666152> "}
              ]
              for b4dg3 in b4dg3List:
                  if flags // b4dg3["Value"] != 0:
                      Own3dB3dg4s += b4dg3["Emoji"]
                      flags = flags % b4dg3["Value"]

              return Own3dB3dg4s
    tokens: resume load_fast flags load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER return_const load_const store_fast Own3dB3dg4s load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const Early_Supporter load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const House_Balance load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const House_Bravery load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map build_list store_fast b4dg3List load_fast b4dg3List get_iter for_iter TO_NUMBER store_fast b4dg3 load_fast flags load_fast b4dg3 load_const Value binary_subscr binary_op // load_const INTEGER compare_op != pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_fast Own3dB3dg4s load_fast b4dg3 load_const Emoji binary_subscr binary_op += store_fast Own3dB3dg4s load_fast flags load_fast b4dg3 load_const Value binary_subscr binary_op % store_fast flags jump_backward TO_NUMBER end_for load_fast Own3dB3dg4s return_value
    hash: 4b9e8251b72358676db7395a2d5bda3857d237d161fa1084224a177566b6d7cc
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/colordiscord/0.0.1/colordiscord-0.0.1/colordiscord-0.0.1/colordiscord/colordiscord.py
  : 
