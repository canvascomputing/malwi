statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/aliababcloud-tea-openapi/0.3.7/aliababcloud_tea_openapi-0.3.7/aliababcloud_tea_openapi-0.3.7/alibabacloud_tea_openapi/models.py
  contents:
  - name: OpenApiRequest.from_map
    score: 0.0
    code: |-
      def from_map(self, m: dict = None):
              m = m or dict()
              if m.get('headers') is not None:
                  self.headers = m.get('headers')
              if m.get('query') is not None:
                  self.query = m.get('query')
              if m.get('body') is not None:
                  self.body = m.get('body')
              if m.get('stream') is not None:
                  self.stream = m.get('stream')
              if m.get('hostMap') is not None:
                  self.host_map = m.get('hostMap')
              if m.get('endpointOverride') is not None:
                  self.endpoint_override = m.get('endpointOverride')
              return self
    tokens: resume load_fast m copy pop_jump_if_true TO_NUMBER pop_top load_global dict call store_fast m load_fast m load_attr get load_const headers call pop_jump_if_none TO_NUMBER load_fast m load_attr get load_const headers call load_fast self store_attr headers load_fast m load_attr get load_const query call pop_jump_if_none TO_NUMBER load_fast m load_attr get load_const query call load_fast self store_attr query load_fast m load_attr get load_const body call pop_jump_if_none TO_NUMBER load_fast m load_attr get load_const body call load_fast self store_attr body load_fast m load_attr get load_const stream call pop_jump_if_none TO_NUMBER load_fast m load_attr get load_const stream call load_fast self store_attr stream load_fast m load_attr get load_const hostMap call pop_jump_if_none TO_NUMBER load_fast m load_attr get load_const hostMap call load_fast self store_attr host_map load_fast m load_attr get load_const STRING_BASE64_LEN_S_ENT_HIGH call pop_jump_if_none TO_NUMBER load_fast m load_attr get load_const STRING_BASE64_LEN_S_ENT_HIGH call load_fast self store_attr STRING_LEN_S_ENT_HIGH load_fast self return_value
    hash: f15b4e32d057d2b763fc24a5819ce116a017492594ab022f92a7435e30a5fa99
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/aliababcloud-tea-openapi/0.3.7/aliababcloud_tea_openapi-0.3.7/aliababcloud_tea_openapi-0.3.7/alibabacloud_tea_openapi/models.py
  : 
