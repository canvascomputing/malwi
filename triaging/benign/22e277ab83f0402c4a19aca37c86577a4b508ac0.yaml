statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/s3/transfer.py
  contents:
  - name: S3Transfer.upload_file
    score: 0.0
    code: |-
      def upload_file(self, filename, bucket, key,
                          callback=None, extra_args=None):
              """Upload a file to an S3 object.

              Variants have also been injected into S3 client, Bucket and Object.
              You don't have to use S3Transfer.upload_file() directly.

              .. seealso::
                  :py:meth:`S3.Client.upload_file`
                  :py:meth:`S3.Client.upload_fileobj`
              """
              if not isinstance(filename, six.string_types):
                  raise ValueError('Filename must be a string')

              subscribers = self._get_subscribers(callback)
              future = self._manager.upload(
                  filename, bucket, key, extra_args, subscribers)
              try:
                  future.result()
              # If a client error was raised, add the backwards compatibility layer
              # that raises a S3UploadFailedError. These specific errors were only
              # ever thrown for upload_parts but now can be thrown for any related
              # client error.
              except ClientError as e:
                  raise S3UploadFailedError(
                      "Failed to upload %s to %s: %s" % (
                          filename, '/'.join([bucket, key]), e))
    tokens: 'resume load_global isinstance load_fast filename load_global six load_attr string_types call pop_jump_if_true TO_NUMBER load_global ValueError load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast callback call store_fast subscribers load_fast self load_attr _manager load_attr upload load_fast filename load_fast bucket load_fast key load_fast extra_args load_fast subscribers call store_fast future nop load_fast future load_attr result call pop_top return_const None push_exc_info load_global ClientError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_fast filename format_value INTEGER load_const to load_const / load_attr join load_fast bucket load_fast key build_list call format_value INTEGER load_const : load_fast e format_value INTEGER build_string call raise_varargs load_const store_fast e delete_fast e reraise reraise copy pop_except reraise'
    hash: 1005b1460c796ca995b2f7766b42f1a49c2944acda2a7805d4f7bc465b381cd0
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/s3/transfer.py: 
