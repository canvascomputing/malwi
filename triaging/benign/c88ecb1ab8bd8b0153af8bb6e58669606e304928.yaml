statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_https.py
  contents:
  - name: TestHTTPS.test_https_timeout
    score: 0.0
    code: |-
      @requires_network
          def test_https_timeout(self):
              timeout = Timeout(connect=0.001)
              https_pool = HTTPSConnectionPool(TARPIT_HOST, self.port,
                                               timeout=timeout, retries=False,
                                               cert_reqs='CERT_REQUIRED')
              self.addCleanup(https_pool.close)

              timeout = Timeout(total=None, connect=0.001)
              https_pool = HTTPSConnectionPool(TARPIT_HOST, self.port,
                                               timeout=timeout, retries=False,
                                               cert_reqs='CERT_REQUIRED')
              self.addCleanup(https_pool.close)
              self.assertRaises(ConnectTimeoutError, https_pool.request, 'GET', '/')

              timeout = Timeout(read=0.001)
              https_pool = HTTPSConnectionPool(self.host, self.port,
                                               timeout=timeout, retries=False,
                                               cert_reqs='CERT_REQUIRED')
              self.addCleanup(https_pool.close)
              https_pool.ca_certs = DEFAULT_CA
              https_pool.assert_fingerprint = '92:81:FE:85:F7:0C:26:60:EC:D6:B3:' \
                                              'BF:93:CF:F9:71:CC:07:7D:0A'

              timeout = Timeout(total=None)
              https_pool = HTTPSConnectionPool(self.host, self.port, timeout=timeout,
                                               cert_reqs='CERT_NONE')
              self.addCleanup(https_pool.close)
              https_pool.request('GET', '/')
    tokens: resume load_global Timeout load_const FLOAT kw_names connect call store_fast timeout load_global STRING_LEN_S_ENT_HIGH load_global TARPIT_HOST load_fast self load_attr port load_fast timeout load_const INTEGER load_const CERT_REQUIRED kw_names cert_reqs retries timeout call store_fast https_pool load_fast self load_attr addCleanup load_fast https_pool load_attr close call pop_top load_global Timeout load_const load_const FLOAT kw_names connect total call store_fast timeout load_global STRING_LEN_S_ENT_HIGH load_global TARPIT_HOST load_fast self load_attr port load_fast timeout load_const INTEGER load_const CERT_REQUIRED kw_names cert_reqs retries timeout call store_fast https_pool load_fast self load_attr addCleanup load_fast https_pool load_attr close call pop_top load_fast self load_attr assertRaises load_global STRING_LEN_S_ENT_HIGH load_fast https_pool load_attr request load_const GET load_const / call pop_top load_global Timeout load_const FLOAT kw_names read call store_fast timeout load_global STRING_LEN_S_ENT_HIGH load_fast self load_attr host load_fast self load_attr port load_fast timeout load_const INTEGER load_const CERT_REQUIRED kw_names cert_reqs retries timeout call store_fast https_pool load_fast self load_attr addCleanup load_fast https_pool load_attr close call pop_top load_global DEFAULT_CA load_fast https_pool store_attr ca_certs load_const STRING_LEN_S_ENT_HIGH load_fast https_pool store_attr STRING_LEN_S_ENT_HIGH load_global Timeout load_const kw_names total call store_fast timeout load_global STRING_LEN_S_ENT_HIGH load_fast self load_attr host load_fast self load_attr port load_fast timeout load_const CERT_NONE kw_names cert_reqs timeout call store_fast https_pool load_fast self load_attr addCleanup load_fast https_pool load_attr close call pop_top load_fast https_pool load_attr request load_const GET load_const / call pop_top return_const None
    hash: 3f2ab46b90459b8cdcc1aaf48f688053940ec55f6e4895f31652092b6434a36a
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_https.py: 
