statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/adapters.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-

      """
      requests.adapters
      ~~~~~~~~~~~~~~~~~

      This module contains the transport adapters that Requests uses to define
      and maintain connections.
      """

      import os.path
      import socket

      from .packages.urllib3.poolmanager import PoolManager, proxy_from_url
      from .packages.urllib3.response import HTTPResponse
      from .packages.urllib3.util import Timeout as TimeoutSauce
      from .packages.urllib3.util.retry import Retry
      from .packages.urllib3.exceptions import ClosedPoolError
      from .packages.urllib3.exceptions import ConnectTimeoutError
      from .packages.urllib3.exceptions import HTTPError as _HTTPError
      from .packages.urllib3.exceptions import MaxRetryError
      from .packages.urllib3.exceptions import NewConnectionError
      from .packages.urllib3.exceptions import ProxyError as _ProxyError
      from .packages.urllib3.exceptions import ProtocolError
      from .packages.urllib3.exceptions import ReadTimeoutError
      from .packages.urllib3.exceptions import SSLError as _SSLError
      from .packages.urllib3.exceptions import ResponseError

      from .models import Response
      from .compat import urlparse, basestring
      from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,
                          prepend_scheme_if_needed, get_auth_from_url, urldefragauth,
                          select_proxy)
      from .structures import CaseInsensitiveDict
      from .cookies import extract_cookies_to_jar
      from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,
                               ProxyError, RetryError, InvalidSchema)
      from .auth import _basic_auth_str

      try:
          from .packages.urllib3.contrib.socks import SOCKSProxyManager
      except ImportError:
          def SOCKSProxyManager(*args, **kwargs):
              raise InvalidSchema("Missing dependencies for SOCKS support.")
    tokens: resume load_const STRING_LEN_M_ENT_HIGH store_name __doc__ load_const INTEGER load_const import_name os.path store_name os load_const INTEGER load_const import_name socket store_name socket load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from PoolManager store_name PoolManager import_from proxy_from_url store_name proxy_from_url pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from HTTPResponse store_name HTTPResponse pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from Timeout store_name TimeoutSauce pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from Retry store_name Retry pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from ClosedPoolError store_name ClosedPoolError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from HTTPError store_name _HTTPError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from MaxRetryError store_name MaxRetryError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from ProxyError store_name _ProxyError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from ProtocolError store_name ProtocolError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from SSLError store_name _SSLError pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from ResponseError store_name ResponseError pop_top load_const INTEGER load_const import_name models import_from Response store_name Response pop_top load_const INTEGER load_const import_name compat import_from urlparse store_name urlparse import_from basestring store_name basestring pop_top load_const INTEGER load_const import_name utils import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from urldefragauth store_name urldefragauth import_from select_proxy store_name select_proxy pop_top load_const INTEGER load_const import_name structures import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name cookies import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name exceptions import_from ConnectionError store_name ConnectionError import_from ConnectTimeout store_name ConnectTimeout import_from ReadTimeout store_name ReadTimeout import_from SSLError store_name SSLError import_from ProxyError store_name ProxyError import_from RetryError store_name RetryError import_from InvalidSchema store_name InvalidSchema pop_top load_const INTEGER load_const import_name auth import_from _basic_auth_str store_name _basic_auth_str pop_top nop load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER store_name STRING_LEN_S_ENT_HIGH load_const INTEGER store_name STRING_LEN_S_ENT_HIGH load_const INTEGER store_name DEFAULT_RETRIES load_const store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const BaseAdapter load_name object call store_name BaseAdapter push_null load_build_class load_const OBJECT make_function load_const HTTPAdapter load_name BaseAdapter call store_name HTTPAdapter return_const None push_exc_info load_name ImportError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH pop_except jump_backward TO_NUMBER reraise copy pop_except reraise
    hash: f9bc89a0f66af60d957900953a5e1b21664ff5033cba537c4263c10cecfb5f70
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/adapters.py
  : 
