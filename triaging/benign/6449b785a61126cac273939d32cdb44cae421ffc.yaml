statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_win/symmetric.py
  contents:
  - name: tripledes_cbc_pkcs5_encrypt
    score: 0.0
    code: |-
      def tripledes_cbc_pkcs5_encrypt(key, data, iv):
          """
          Encrypts plaintext using 3DES in either 2 or 3 key mode

          :param key:
              The encryption key - a byte string 16 or 24 bytes long (2 or 3 key mode)

          :param data:
              The plaintext - a byte string

          :param iv:
              The 8-byte initialization vector to use - a byte string - set as None
              to generate an appropriate one

          :raises:
              ValueError - when any of the parameters contain an invalid value
              TypeError - when any of the parameters are of the wrong type
              OSError - when an error is returned by the OS crypto library

          :return:
              A tuple of two byte strings (iv, ciphertext)
          """

          if len(key) != 16 and len(key) != 24:
              raise ValueError(pretty_message(
                  '''
                  key must be 16 bytes (2 key) or 24 bytes (3 key) long - is %s
                  ''',
                  len(key)
              ))

          if not iv:
              iv = rand_bytes(8)
          elif len(iv) != 8:
              raise ValueError(pretty_message(
                  '''
                  iv must be 8 bytes long - is %s
                  ''',
                  len(iv)
              ))

          cipher = 'tripledes_3key'
          if len(key) == 16:
              cipher = 'tripledes_2key'

          return (iv, _encrypt(cipher, key, data, iv, True))
    tokens: resume load_global len load_fast key call load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_global len load_fast key call load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_global ValueError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_global len load_fast key call call call raise_varargs load_fast iv pop_jump_if_true TO_NUMBER load_global rand_bytes load_const INTEGER call store_fast iv jump_forward TO_NUMBER load_global len load_fast iv call load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_global ValueError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_global len load_fast iv call call call raise_varargs load_const tripledes_3key store_fast cipher load_global len load_fast key call load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_const tripledes_2key store_fast cipher load_fast iv load_global _encrypt load_fast cipher load_fast key load_fast data load_fast iv load_const INTEGER call build_tuple return_value
    hash: 86a8b3788aacbb82081d0d5148b1671fbe594d4a7c599226cbcd4a0c72f543f9
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_win/symmetric.py
  : 
