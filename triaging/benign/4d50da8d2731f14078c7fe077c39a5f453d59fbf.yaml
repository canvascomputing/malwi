statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/contrib/_securetransport/low_level.py
  contents:
  - name: _is_identity
    score: 0.0
    code: |-
      def _is_identity(item):
          """
          Returns True if a given CFTypeRef is an identity.
          """
          expected = Security.SecIdentityGetTypeID()
          return CoreFoundation.CFGetTypeID(item) == expected
    tokens: resume load_global Security load_attr STRING_BASE64_LEN_S_ENT_HIGH call store_fast expected load_global CoreFoundation load_attr CFGetTypeID load_fast item call load_fast expected compare_op == return_value
    hash: 47149bf26761b057eb25bf01b4c64e0cdd28c6d4895b80e480cad78a178a627a
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/contrib/_securetransport/low_level.py
  : 
