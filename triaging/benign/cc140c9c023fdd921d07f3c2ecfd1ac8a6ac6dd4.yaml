statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/bcdoc/style.py
  contents:
  - name: BaseStyle.indentation
    score: 0.0
    code: |-
      @property
          def indentation(self):
              return self._indent
    tokens: resume load_fast self load_attr _indent return_value
    hash: 97d1358d509dcd6d193683fda207415bcead5c60d8910d2b5e953b6164b54895
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/bcdoc/style.py: 
