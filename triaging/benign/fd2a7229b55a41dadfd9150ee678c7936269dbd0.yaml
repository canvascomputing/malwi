statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3/results.py
  contents:
  - name: DownloadResultSubscriber
    score: 0.0
    code: |-
      def _get_src(self, fileobj):
              return '-'
    tokens: resume load_name __name__ store_name __module__ load_const STRING_BASE64_LEN_S_ENT_HIGH store_name __qualname__ load_const download store_name TRANSFER_TYPE load_const OBJECT make_function store_name _get_src_dest load_const OBJECT make_function store_name _get_dest return_const None
    hash: 8af1cbd2896e165fd6dd00dd8b7711feb211fbd71d59f535c01105754ea8d341
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3/results.py: 
