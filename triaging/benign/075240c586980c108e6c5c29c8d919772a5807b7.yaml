statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_socketlevel.py
  contents:
  - name: TestSocketClosing.test_https_connection_read_timeout
    score: 0.0
    code: |-
      def test_https_connection_read_timeout(self):
              """ Handshake timeouts should fail with a Timeout"""
              timed_out = Event()

              def socket_handler(listener):
                  sock = listener.accept()[0]
                  while not sock.recv(65536):
                      pass

                  timed_out.wait()
                  sock.close()

              self._start_server(socket_handler)
              pool = HTTPSConnectionPool(self.host, self.port, timeout=0.001, retries=False)
              self.addCleanup(pool.close)
              try:
                  self.assertRaises(ReadTimeoutError, pool.request, 'GET', '/')
              finally:
                  timed_out.set()
    tokens: make_cell timed_out resume load_global Event call store_deref timed_out load_closure timed_out build_tuple load_const OBJECT make_function closure store_fast socket_handler load_fast self load_attr _start_server load_fast socket_handler call pop_top load_global STRING_LEN_S_ENT_HIGH load_fast self load_attr host load_fast self load_attr port load_const FLOAT load_const INTEGER kw_names retries timeout call store_fast pool load_fast self load_attr addCleanup load_fast pool load_attr close call pop_top nop load_fast self load_attr assertRaises load_global STRING_BASE64_LEN_S_ENT_HIGH load_fast pool load_attr request load_const GET load_const / call pop_top load_deref timed_out load_attr set call pop_top return_const None push_exc_info load_deref timed_out load_attr set call pop_top reraise copy pop_except reraise
    hash: 3c6482cd306ebc4eabbb3dbee0df5fa68cfc65dc2f34761fc844dcfdbc27ff94
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/with_dummyserver/test_socketlevel.py
  : 
