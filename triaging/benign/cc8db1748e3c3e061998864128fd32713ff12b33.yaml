statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/tests/test_trust_list.py
  contents:
  - name: TrustListTests.test_get_list_mutate
    score: 0.0
    code: |-
      def test_get_list_mutate(self):
              trust_list.clear_cache()

              certs = trust_list.get_list()
              certs2 = trust_list.get_list()

              with open(digicert_ca_path, 'rb') as f:
                  _, _, digicert_ca_bytes = pem.unarmor(f.read())
                  digicert_ca_cert = x509.Certificate.load(digicert_ca_bytes)
              certs.append(digicert_ca_cert)

              self.assertNotEqual(certs2, certs)
    tokens: resume load_global trust_list load_attr clear_cache call pop_top load_global trust_list load_attr get_list call store_fast certs load_global trust_list load_attr get_list call store_fast certs2 load_global FILESYSTEM_ACCESS load_global STRING_LEN_S_ENT_HIGH load_const rb call before_with store_fast f load_global pem load_attr unarmor load_fast f load_attr read call call unpack_sequence store_fast _ store_fast _ store_fast STRING_LEN_S_ENT_HIGH load_global x509 load_attr Certificate load_attr load load_fast STRING_LEN_S_ENT_HIGH call store_fast STRING_LEN_S_ENT_HIGH load_const load_const load_const call pop_top load_fast certs load_attr append load_fast_check STRING_LEN_S_ENT_HIGH call pop_top load_fast self load_attr assertNotEqual load_fast certs2 load_fast certs call pop_top return_const None push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top jump_backward TO_NUMBER copy pop_except reraise
    hash: 03b10a678175ea65a3563db2377f45494662c58fe687b2c2e5e659e2f1783fdd
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/tests/test_trust_list.py
  : IyBjb2Rpbmc6IHV0Zi04CmZyb20gX19mdXR1cmVfXyBpbXBvcnQgdW5pY29kZV9saXRlcmFscywgZGl2aXNpb24sIGFic29sdXRlX2ltcG9ydCwgcHJpbnRfZnVuY3Rpb24KCmltcG9ydCBoYXNobGliCmltcG9ydCBvcwppbXBvcnQgdW5pdHRlc3QKaW1wb3J0IHN5cwoKZnJvbSBvc2NyeXB0byBpbXBvcnQgdHJ1c3RfbGlzdApmcm9tIGFzbjFjcnlwdG8gaW1wb3J0IHg1MDksIHBlbQoKZnJvbSAuX3VuaXR0ZXN0X2NvbXBhdCBpbXBvcnQgcGF0Y2gKCnBhdGNoKCkKCmlmIHN5cy52ZXJzaW9uX2luZm8gPCAoMywpOgogICAgc3RyX2NscyA9IHVuaWNvZGUgICMgbm9xYQogICAgYnl0ZV9jbHMgPSBzdHIKZWxzZToKICAgIHN0cl9jbHMgPSBzdHIKICAgIGJ5dGVfY2xzID0gYnl0ZXMKCgp0ZXN0c19yb290ID0gb3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKQpmaXh0dXJlc19kaXIgPSBvcy5wYXRoLmpvaW4odGVzdHNfcm9vdCwgJ2ZpeHR1cmVzJykKCmRpZ2ljZXJ0X2NhX3BhdGggPSBvcy5wYXRoLmpvaW4oZml4dHVyZXNfZGlyLCAnZGlnaWNlcnRfY2EuY3J0JykKCgpjbGFzcyBUcnVzdExpc3RUZXN0cyh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3RfZ2V0X2xpc3Qoc2VsZik6CiAgICAgICAgdHJ1c3RfbGlzdC5jbGVhcl9jYWNoZSgpCgogICAgICAgIGNlcnRzID0gdHJ1c3RfbGlzdC5nZXRfbGlzdCgpCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGNlcnRzLCBsaXN0KQogICAgICAgIHNlbGYuYXNzZXJ0TGVzcygxMCwgbGVuKGNlcnRzKSkKICAgICAgICBmb3IgY2VydCwgdHJ1c3Rfb2lkcywgcmVqZWN0X29pZHMgaW4gY2VydHM6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShjZXJ0LCB4NTA5LkNlcnRpZmljYXRlKQogICAgICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UodHJ1c3Rfb2lkcywgc2V0KQogICAgICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UocmVqZWN0X29pZHMsIHNldCkKICAgICAgICAgICAgY2VydC5uYXRpdmUKCiAgICBkZWYgdGVzdF9nZXRfbGlzdF9jYWxsYmFjayhzZWxmKToKICAgICAgICB0cnVzdF9saXN0LmNsZWFyX2NhY2hlKCkKCiAgICAgICAgbGFtYmRhX2RhdGEgPSB7J2NhbGxzJzogMCwgJ3JlYXNvbnMnOiAwLCAnY2VydHMnOiB7fX0KCiAgICAgICAgZGVmIGNiKGNlcnQsIHJlYXNvbik6CiAgICAgICAgICAgIGlmIHJlYXNvbiBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShyZWFzb24sIHN0cl9jbHMpCiAgICAgICAgICAgICAgICBsYW1iZGFfZGF0YVsncmVhc29ucyddICs9IDEKICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGNlcnQsIHg1MDkuQ2VydGlmaWNhdGUpCiAgICAgICAgICAgIHNoYTEgPSBoYXNobGliLnNoYTEoY2VydC5kdW1wKCkpLmRpZ2VzdCgpCiAgICAgICAgICAgIG1lc3NhZ2UgPSBOb25lCiAgICAgICAgICAgIGlmIHNoYTEgaW4gbGFtYmRhX2RhdGFbJ2NlcnRzJ106CiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ0NlcnRpZmljYXRlICglcykgYWxyZWFkeSBwYXNzZWQgdG8gY2FsbGJhY2snICUgY2VydC5zdWJqZWN0Lmh1bWFuX2ZyaWVuZGx5CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90SW4oc2hhMSwgbGFtYmRhX2RhdGFbJ2NlcnRzJ10sIG1lc3NhZ2UpCiAgICAgICAgICAgIGxhbWJkYV9kYXRhWydjZXJ0cyddW3NoYTFdID0gVHJ1ZQogICAgICAgICAgICBsYW1iZGFfZGF0YVsnY2FsbHMnXSArPSAxCgogICAgICAgIGNlcnRzID0gdHJ1c3RfbGlzdC5nZXRfbGlzdChjZXJ0X2NhbGxiYWNrPWNiKQogICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShjZXJ0cywgbGlzdCkKICAgICAgICBzZWxmLmFzc2VydExlc3MoMTAsIGxlbihjZXJ0cykpCiAgICAgICAgc2VsZi5hc3NlcnRMZXNzRXF1YWwobGVuKGNlcnRzKSwgbGFtYmRhX2RhdGFbJ2NhbGxzJ10pCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsYW1iZGFfZGF0YVsnY2FsbHMnXSAtIGxlbihjZXJ0cyksIGxhbWJkYV9kYXRhWydyZWFzb25zJ10pCiAgICAgICAgZm9yIGNlcnQsIHRydXN0X29pZHMsIHJlamVjdF9vaWRzIGluIGNlcnRzOgogICAgICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UoY2VydCwgeDUwOS5DZXJ0aWZpY2F0ZSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHRydXN0X29pZHMsIHNldCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHJlamVjdF9vaWRzLCBzZXQpCiAgICAgICAgICAgIGNlcnQubmF0aXZlCgogICAgZGVmIHRlc3RfZ2V0X2xpc3RfbXV0YXRlKHNlbGYpOgogICAgICAgIHRydXN0X2xpc3QuY2xlYXJfY2FjaGUoKQoKICAgICAgICBjZXJ0cyA9IHRydXN0X2xpc3QuZ2V0X2xpc3QoKQogICAgICAgIGNlcnRzMiA9IHRydXN0X2xpc3QuZ2V0X2xpc3QoKQoKICAgICAgICB3aXRoIG9wZW4oZGlnaWNlcnRfY2FfcGF0aCwgJ3JiJykgYXMgZjoKICAgICAgICAgICAgXywgXywgZGlnaWNlcnRfY2FfYnl0ZXMgPSBwZW0udW5hcm1vcihmLnJlYWQoKSkKICAgICAgICAgICAgZGlnaWNlcnRfY2FfY2VydCA9IHg1MDkuQ2VydGlmaWNhdGUubG9hZChkaWdpY2VydF9jYV9ieXRlcykKICAgICAgICBjZXJ0cy5hcHBlbmQoZGlnaWNlcnRfY2FfY2VydCkKCiAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChjZXJ0czIsIGNlcnRzKQoKICAgIGRlZiB0ZXN0X2dldF9wYXRoKHNlbGYpOgogICAgICAgIHRydXN0X2xpc3QuY2xlYXJfY2FjaGUoKQoKICAgICAgICBjZXJ0cyA9IHRydXN0X2xpc3QuZ2V0X3BhdGgoKQogICAgICAgIHdpdGggb3BlbihjZXJ0cywgJ3JiJykgYXMgZjoKICAgICAgICAgICAgY2VydF9kYXRhID0gZi5yZWFkKCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChUcnVlLCBwZW0uZGV0ZWN0KGNlcnRfZGF0YSkpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0TGVzcygxMDI0MCwgbGVuKGNlcnRfZGF0YSkpCg==
