statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_asymmetric.py
  contents:
  - name: _CertificateBase.bit_size
    score: 0.0
    code: |-
      @property
          def bit_size(self):
              """
              :return:
                  The number of bits in the public key, as an integer
              """

              return self.public_key.bit_size
    tokens: resume load_fast self load_attr public_key load_attr bit_size return_value
    hash: 85aedba7f562742f8fa513d5591b9db60610c322d961999e70eceaa744c218ad
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_asymmetric.py
  : 
