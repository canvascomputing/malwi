statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/securetransport.py
  contents:
  - name: _read_callback
    score: 0.0
    code: |-
      def _read_callback(connection_id, data_buffer, data_length_pointer):
          """
          SecureTransport read callback. This is called by ST to request that data
          be returned from the socket.
          """
          wrapped_socket = None
          try:
              wrapped_socket = _connection_refs.get(connection_id)
              if wrapped_socket is None:
                  return SecurityConst.errSSLInternal
              base_socket = wrapped_socket.socket

              requested_length = data_length_pointer[0]

              timeout = wrapped_socket.gettimeout()
              error = None
              read_count = 0
              buffer = (ctypes.c_char * requested_length).from_address(data_buffer)
              buffer_view = memoryview(buffer)

              try:
                  while read_count < requested_length:
                      if timeout is None or timeout >= 0:
                          readables = util.wait_for_read([base_socket], timeout)
                          if not readables:
                              raise socket.error(errno.EAGAIN, 'timed out')

                      # We need to tell ctypes that we have a buffer that can be
                      # written to. Upsettingly, we do that like this:
                      chunk_size = base_socket.recv_into(
                          buffer_view[read_count:requested_length]
                      )
                      read_count += chunk_size
                      if not chunk_size:
                          if not read_count:
                              return SecurityConst.errSSLClosedGraceful
                          break
              except (socket.error) as e:
                  error = e.errno

                  if error is not None and error != errno.EAGAIN:
                      if error == errno.ECONNRESET:
                          return SecurityConst.errSSLClosedAbort
                      raise

              data_length_pointer[0] = read_count

              if read_count != requested_length:
                  return SecurityConst.errSSLWouldBlock

              return 0
          except Exception as e:
              if wrapped_socket is not None:
                  wrapped_socket._exception = e
              return SecurityConst.errSSLInternal
    tokens: resume load_const store_fast wrapped_socket nop load_global STRING_LEN_S_ENT_HIGH load_attr get load_fast connection_id call store_fast wrapped_socket load_fast wrapped_socket pop_jump_if_not_none TO_NUMBER load_global SecurityConst load_attr errSSLInternal return_value load_fast wrapped_socket load_attr socket store_fast base_socket load_fast STRING_LEN_S_ENT_HIGH load_const INTEGER binary_subscr store_fast STRING_LEN_S_ENT_HIGH load_fast wrapped_socket load_attr gettimeout call store_fast timeout load_const store_fast error load_const INTEGER store_fast read_count load_global ctypes load_attr c_char load_fast STRING_LEN_S_ENT_HIGH binary_op * load_attr from_address load_fast data_buffer call store_fast buffer load_global memoryview load_fast buffer call store_fast buffer_view nop load_fast read_count load_fast STRING_LEN_S_ENT_HIGH compare_op < pop_jump_if_false TO_NUMBER load_fast timeout pop_jump_if_none TO_NUMBER load_fast timeout load_const INTEGER compare_op >= pop_jump_if_false TO_NUMBER load_global util load_attr wait_for_read load_fast base_socket build_list load_fast timeout call store_fast readables load_fast readables pop_jump_if_true TO_NUMBER load_global socket load_attr error load_global errno load_attr EAGAIN load_const timed out call raise_varargs load_fast base_socket load_attr recv_into load_fast buffer_view load_fast read_count load_fast STRING_LEN_S_ENT_HIGH binary_slice call store_fast chunk_size load_fast read_count load_fast chunk_size binary_op += store_fast read_count load_fast chunk_size pop_jump_if_true TO_NUMBER load_fast read_count pop_jump_if_true TO_NUMBER load_global SecurityConst load_attr STRING_BASE64_LEN_S_ENT_HIGH return_value jump_forward TO_NUMBER load_fast read_count load_fast STRING_LEN_S_ENT_HIGH compare_op < pop_jump_if_false TO_NUMBER jump_backward TO_NUMBER load_fast read_count load_fast STRING_LEN_S_ENT_HIGH load_const INTEGER store_subscr load_fast read_count load_fast STRING_LEN_S_ENT_HIGH compare_op != pop_jump_if_false TO_NUMBER load_global SecurityConst load_attr STRING_BASE64_LEN_S_ENT_HIGH return_value return_const 0 push_exc_info load_global socket load_attr error check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_fast e load_attr errno store_fast error load_fast error pop_jump_if_none TO_NUMBER load_fast error load_global errno load_attr EAGAIN compare_op != pop_jump_if_false TO_NUMBER load_fast error load_global errno load_attr ECONNRESET compare_op == pop_jump_if_false TO_NUMBER load_global SecurityConst load_attr STRING_LEN_S_ENT_HIGH swap pop_except load_const store_fast e delete_fast e return_value raise_varargs pop_except load_const store_fast e delete_fast e jump_backward TO_NUMBER load_const store_fast e delete_fast e reraise reraise copy pop_except reraise push_exc_info load_global Exception check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_fast wrapped_socket pop_jump_if_none TO_NUMBER load_fast e load_fast wrapped_socket store_attr _exception load_global SecurityConst load_attr errSSLInternal swap pop_except load_const store_fast e delete_fast e return_value load_const store_fast e delete_fast e reraise reraise copy pop_except reraise
    hash: e3a6097d3dce48d3566396b053b5a4536905d2b0e95781b68d9e601e34f35373
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/securetransport.py: 
