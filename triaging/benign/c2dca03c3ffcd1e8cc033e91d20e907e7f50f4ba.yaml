statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3/utils.py
  contents:
  - name: RequestParamsMapper._set_request_payer_param
    score: 0.0
    code: |-
      @classmethod
          def _set_request_payer_param(cls, request_params, cli_params):
              if cli_params.get('request_payer'):
                  request_params['RequestPayer'] = cli_params['request_payer']
    tokens: resume load_fast cli_params load_attr get load_const request_payer call pop_jump_if_false TO_NUMBER load_fast cli_params load_const request_payer binary_subscr load_fast request_params load_const RequestPayer store_subscr return_const None return_const None
    hash: 2c0ac42fd4746d33bbf25837b7237ec73db536963c29ad6adfd143c63dbc4a85
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3/utils.py: 
