statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/user.py
  contents:
  - name: User.remove_friend
    score: 0.0
    code: |-
      @deprecated()
          async def remove_friend(self):
              """|coro|

              Removes the user as a friend.

              .. deprecated:: 1.7

              .. note::

                  This can only be used by non-bot accounts.

              Raises
              -------
              Forbidden
                  Not allowed to remove this user as a friend.
              HTTPException
                  Removing the user as a friend failed.
              """
              await self._state.http.remove_relationship(self.id)
    tokens: return_generator pop_top resume load_fast self load_attr _state load_attr http load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr id call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_const None cleanup_throw jump_backward TO_NUMBER call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: 95a32f1430ec3f58dc28fa3829c1e3efde6010bebe512171fc0b939245ab4cfd
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/user.py: 
