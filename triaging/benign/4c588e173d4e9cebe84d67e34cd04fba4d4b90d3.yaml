statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/aliababcloud-tea-openapi/0.3.7/aliababcloud_tea_openapi-0.3.7/aliababcloud_tea_openapi-0.3.7/alibabacloud_tea_openapi/client.py
  contents:
  - name: Client.get_access_key_id_async
    score: 0.0
    code: |-
      async def get_access_key_id_async(self) -> str:
              """
              Get accesskey id by using credential
              @return: accesskey id
              """
              if UtilClient.is_unset(self._credential):
                  return ''
              access_key_id = await self._credential.get_access_key_id_async()
              return access_key_id
    tokens: return_generator pop_top resume load_global UtilClient load_attr is_unset load_fast self load_attr _credential call pop_jump_if_false TO_NUMBER return_const load_fast self load_attr _credential load_attr STRING_LEN_S_ENT_HIGH call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast access_key_id load_fast access_key_id return_value cleanup_throw jump_backward TO_NUMBER call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: ba3984ee7e16bed25672dcde57de2fce9c1963375eded20d318dd531a5f72ae1
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/aliababcloud-tea-openapi/0.3.7/aliababcloud_tea_openapi-0.3.7/aliababcloud_tea_openapi-0.3.7/alibabacloud_tea_openapi/client.py
  : 
