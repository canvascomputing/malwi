statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/dummyserver/server.py
  contents:
  - name: _has_ipv6
    score: 0.0
    code: |-
      def _has_ipv6(host):
          """ Returns True if the system can bind an IPv6 address. """
          sock = None
          has_ipv6 = False

          if socket.has_ipv6:
              # has_ipv6 returns true if cPython was compiled with IPv6 support.
              # It does not tell us if the system has IPv6 support enabled. To
              # determine that we must bind to an IPv6 address.
              # https://github.com/shazow/urllib3/pull/611
              # https://bugs.python.org/issue658327
              try:
                  sock = socket.socket(socket.AF_INET6)
                  sock.bind((host, 0))
                  has_ipv6 = True
              except:
                  pass

          if sock:
              sock.close()
          return has_ipv6
    tokens: resume load_const store_fast sock load_const INTEGER store_fast has_ipv6 load_global socket load_attr has_ipv6 pop_jump_if_false TO_NUMBER nop load_global socket load_attr socket load_global socket load_attr AF_INET6 call store_fast sock load_fast sock load_attr bind load_fast host load_const INTEGER build_tuple call pop_top load_const INTEGER store_fast has_ipv6 load_fast sock pop_jump_if_false TO_NUMBER load_fast sock load_attr close call pop_top load_fast has_ipv6 return_value push_exc_info pop_top pop_except jump_backward TO_NUMBER copy pop_except reraise
    hash: 92ca01e750ee713cad04bdb62b63436afbb8a1c8c329cbce348c4c3ad2142109
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/dummyserver/server.py: 
