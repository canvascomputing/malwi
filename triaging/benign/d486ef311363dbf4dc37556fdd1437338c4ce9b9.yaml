statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/arguments.py
  contents:
  - name: CustomArgument.synopsis
    score: null
    code: |-
      @property
          def synopsis(self):
              return self._synopsis
    tokens: resume load_fast self load_attr _synopsis return_value
    hash: d3b87d45ee626a019bdef9a4d7bc4cdcf37ec08fc624a6be6da8d858572ad376
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/arguments.py: 
