statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/partial_emoji.py
  contents:
  - name: PartialEmoji.from_dict
    score: 0.0
    code: |-
      @classmethod
          def from_dict(cls, data):
              return cls(
                  animated=data.get('animated', False),
                  id=utils._get_as_snowflake(data, 'id'),
                  name=data.get('name'),
              )
    tokens: resume push_null load_fast cls load_fast data load_attr get load_const animated load_const INTEGER call load_global utils load_attr STRING_LEN_S_ENT_HIGH load_fast data load_const id call load_fast data load_attr get load_const name call kw_names animated id name call return_value
    hash: c6dca405c0af367f8df64f8d726ade341ebb4298a88e307639491c586038bc6c
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/partial_emoji.py
  : IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgpmcm9tIC5hc3NldCBpbXBvcnQgQXNzZXQKZnJvbSAuIGltcG9ydCB1dGlscwoKCmNsYXNzIF9FbW9qaVRhZzoKICAgIF9fc2xvdHNfXyA9ICgpCgpjbGFzcyBQYXJ0aWFsRW1vamkoX0Vtb2ppVGFnKToKICAgICIiIlJlcHJlc2VudHMgYSAicGFydGlhbCIgZW1vamkuCgogICAgVGhpcyBtb2RlbCB3aWxsIGJlIGdpdmVuIGluIHR3byBzY2VuYXJpb3M6CgogICAgLSAiUmF3IiBkYXRhIGV2ZW50cyBzdWNoIGFzIDpmdW5jOmBvbl9yYXdfcmVhY3Rpb25fYWRkYAogICAgLSBDdXN0b20gZW1vamkgdGhhdCB0aGUgYm90IGNhbm5vdCBzZWUgZnJvbSBlLmcuIDphdHRyOmBNZXNzYWdlLnJlYWN0aW9uc2AKCiAgICAuLiBjb250YWluZXI6OiBvcGVyYXRpb25zCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCA9PSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIGVtb2ppIGFyZSB0aGUgc2FtZS4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiB4ICE9IHkKCiAgICAgICAgICAgIENoZWNrcyBpZiB0d28gZW1vamkgYXJlIG5vdCB0aGUgc2FtZS4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiBoYXNoKHgpCgogICAgICAgICAgICBSZXR1cm4gdGhlIGVtb2ppJ3MgaGFzaC4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiBzdHIoeCkKCiAgICAgICAgICAgIFJldHVybnMgdGhlIGVtb2ppIHJlbmRlcmVkIGZvciBkaXNjb3JkLgoKICAgIEF0dHJpYnV0ZXMKICAgIC0tLS0tLS0tLS0tCiAgICBuYW1lOiBPcHRpb25hbFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgVGhlIGN1c3RvbSBlbW9qaSBuYW1lLCBpZiBhcHBsaWNhYmxlLCBvciB0aGUgdW5pY29kZSBjb2RlcG9pbnQKICAgICAgICBvZiB0aGUgbm9uLWN1c3RvbSBlbW9qaS4gVGhpcyBjYW4gYmUgYGBOb25lYGAgaWYgdGhlIGVtb2ppCiAgICAgICAgZ290IGRlbGV0ZWQgKGUuZy4gcmVtb3ZpbmcgYSByZWFjdGlvbiB3aXRoIGEgZGVsZXRlZCBlbW9qaSkuCiAgICBhbmltYXRlZDogOmNsYXNzOmBib29sYAogICAgICAgIFdoZXRoZXIgdGhlIGVtb2ppIGlzIGFuaW1hdGVkIG9yIG5vdC4KICAgIGlkOiBPcHRpb25hbFs6Y2xhc3M6YGludGBdCiAgICAgICAgVGhlIElEIG9mIHRoZSBjdXN0b20gZW1vamksIGlmIGFwcGxpY2FibGUuCiAgICAiIiIKCiAgICBfX3Nsb3RzX18gPSAoJ2FuaW1hdGVkJywgJ25hbWUnLCAnaWQnLCAnX3N0YXRlJykKCiAgICBkZWYgX19pbml0X18oc2VsZiwgKiwgbmFtZSwgYW5pbWF0ZWQ9RmFsc2UsIGlkPU5vbmUpOgogICAgICAgIHNlbGYuYW5pbWF0ZWQgPSBhbmltYXRlZAogICAgICAgIHNlbGYubmFtZSA9IG5hbWUKICAgICAgICBzZWxmLmlkID0gaWQKICAgICAgICBzZWxmLl9zdGF0ZSA9IE5vbmUKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX2RpY3QoY2xzLCBkYXRhKToKICAgICAgICByZXR1cm4gY2xzKAogICAgICAgICAgICBhbmltYXRlZD1kYXRhLmdldCgnYW5pbWF0ZWQnLCBGYWxzZSksCiAgICAgICAgICAgIGlkPXV0aWxzLl9nZXRfYXNfc25vd2ZsYWtlKGRhdGEsICdpZCcpLAogICAgICAgICAgICBuYW1lPWRhdGEuZ2V0KCduYW1lJyksCiAgICAgICAgKQoKICAgIGRlZiB0b19kaWN0KHNlbGYpOgogICAgICAgIG8gPSB7ICduYW1lJzogc2VsZi5uYW1lIH0KICAgICAgICBpZiBzZWxmLmlkOgogICAgICAgICAgICBvWydpZCddID0gc2VsZi5pZAogICAgICAgIGlmIHNlbGYuYW5pbWF0ZWQ6CiAgICAgICAgICAgIG9bJ2FuaW1hdGVkJ10gPSBzZWxmLmFuaW1hdGVkCiAgICAgICAgcmV0dXJuIG8KCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiB3aXRoX3N0YXRlKGNscywgc3RhdGUsICosIG5hbWUsIGFuaW1hdGVkPUZhbHNlLCBpZD1Ob25lKToKICAgICAgICBzZWxmID0gY2xzKG5hbWU9bmFtZSwgYW5pbWF0ZWQ9YW5pbWF0ZWQsIGlkPWlkKQogICAgICAgIHNlbGYuX3N0YXRlID0gc3RhdGUKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgIGlmIHNlbGYuaWQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYubmFtZQogICAgICAgIGlmIHNlbGYuYW5pbWF0ZWQ6CiAgICAgICAgICAgIHJldHVybiAnPGE6JXM6JXM+JyAlIChzZWxmLm5hbWUsIHNlbGYuaWQpCiAgICAgICAgcmV0dXJuICc8OiVzOiVzPicgJSAoc2VsZi5uYW1lLCBzZWxmLmlkKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzx7MC5fX2NsYXNzX18uX19uYW1lX199IGFuaW1hdGVkPXswLmFuaW1hdGVkfSBuYW1lPXswLm5hbWUhcn0gaWQ9ezAuaWR9PicuZm9ybWF0KHNlbGYpCgogICAgZGVmIF9fZXFfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgc2VsZi5pc191bmljb2RlX2Vtb2ppKCk6CiAgICAgICAgICAgIHJldHVybiBpc2luc3RhbmNlKG90aGVyLCBQYXJ0aWFsRW1vamkpIGFuZCBzZWxmLm5hbWUgPT0gb3RoZXIubmFtZQoKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBfRW1vamlUYWcpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5pZCA9PSBvdGhlci5pZAogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3Qgc2VsZi5fX2VxX18ob3RoZXIpCgogICAgZGVmIF9faGFzaF9fKHNlbGYpOgogICAgICAgIHJldHVybiBoYXNoKChzZWxmLmlkLCBzZWxmLm5hbWUpKQoKICAgIGRlZiBpc19jdXN0b21fZW1vamkoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogQ2hlY2tzIGlmIHRoaXMgaXMgYSBjdXN0b20gbm9uLVVuaWNvZGUgZW1vamkuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuaWQgaXMgbm90IE5vbmUKCiAgICBkZWYgaXNfdW5pY29kZV9lbW9qaShzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBDaGVja3MgaWYgdGhpcyBpcyBhIFVuaWNvZGUgZW1vamkuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuaWQgaXMgTm9uZQoKICAgIGRlZiBfYXNfcmVhY3Rpb24oc2VsZik6CiAgICAgICAgaWYgc2VsZi5pZCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZi5uYW1lCiAgICAgICAgcmV0dXJuICclczolcycgJSAoc2VsZi5uYW1lLCBzZWxmLmlkKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGNyZWF0ZWRfYXQoc2VsZik6CiAgICAgICAgIiIiT3B0aW9uYWxbOmNsYXNzOmBkYXRldGltZS5kYXRldGltZWBdOiBSZXR1cm5zIHRoZSBlbW9qaSdzIGNyZWF0aW9uIHRpbWUgaW4gVVRDLCBvciBOb25lIGlmIFVuaWNvZGUgZW1vamkuCgogICAgICAgIC4uIHZlcnNpb25hZGRlZDo6IDEuNgogICAgICAgICIiIgogICAgICAgIGlmIHNlbGYuaXNfdW5pY29kZV9lbW9qaSgpOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICByZXR1cm4gdXRpbHMuc25vd2ZsYWtlX3RpbWUoc2VsZi5pZCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiB1cmwoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBBc3NldGA6IFJldHVybnMgdGhlIGFzc2V0IG9mIHRoZSBlbW9qaSwgaWYgaXQgaXMgY3VzdG9tLgoKICAgICAgICBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZyA6bWV0aDpgdXJsX2FzYCB3aXRoCiAgICAgICAgdGhlIGRlZmF1bHQgcGFyYW1ldGVycyAoaS5lLiBwbmcvZ2lmIGRldGVjdGlvbikuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYudXJsX2FzKGZvcm1hdD1Ob25lKQoKICAgIGRlZiB1cmxfYXMoc2VsZiwgKiwgZm9ybWF0PU5vbmUsIHN0YXRpY19mb3JtYXQ9InBuZyIpOgogICAgICAgICIiIlJldHVybnMgYW4gOmNsYXNzOmBBc3NldGAgZm9yIHRoZSBlbW9qaSdzIHVybCwgaWYgaXQgaXMgY3VzdG9tLgoKICAgICAgICBUaGUgZm9ybWF0IG11c3QgYmUgb25lIG9mICd3ZWJwJywgJ2pwZWcnLCAnanBnJywgJ3BuZycgb3IgJ2dpZicuCiAgICAgICAgJ2dpZicgaXMgb25seSB2YWxpZCBmb3IgYW5pbWF0ZWQgZW1vamlzLgoKICAgICAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjcKCiAgICAgICAgUGFyYW1ldGVycwogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgZm9ybWF0OiBPcHRpb25hbFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgICAgIFRoZSBmb3JtYXQgdG8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSBlbW9qaXMgdG8uCiAgICAgICAgICAgIElmIHRoZSBmb3JtYXQgaXMgYGBOb25lYGAsIHRoZW4gaXQgaXMgYXV0b21hdGljYWxseQogICAgICAgICAgICBkZXRlY3RlZCBhcyBlaXRoZXIgJ2dpZicgb3Igc3RhdGljX2Zvcm1hdCwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlCiAgICAgICAgICAgIGVtb2ppIGlzIGFuaW1hdGVkIG9yIG5vdC4KICAgICAgICBzdGF0aWNfZm9ybWF0OiBPcHRpb25hbFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgICAgIEZvcm1hdCB0byBhdHRlbXB0IHRvIGNvbnZlcnQgb25seSBub24tYW5pbWF0ZWQgZW1vamkncyB0by4KICAgICAgICAgICAgRGVmYXVsdHMgdG8gJ3BuZycKCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tLQogICAgICAgIEludmFsaWRBcmd1bWVudAogICAgICAgICAgICBCYWQgaW1hZ2UgZm9ybWF0IHBhc3NlZCB0byBgYGZvcm1hdGBgIG9yIGBgc3RhdGljX2Zvcm1hdGBgLgoKICAgICAgICBSZXR1cm5zCiAgICAgICAgLS0tLS0tLS0KICAgICAgICA6Y2xhc3M6YEFzc2V0YAogICAgICAgICAgICBUaGUgcmVzdWx0aW5nIENETiBhc3NldC4KICAgICAgICAiIiIKICAgICAgICBpZiBzZWxmLmlzX3VuaWNvZGVfZW1vamkoKToKICAgICAgICAgICAgcmV0dXJuIEFzc2V0KHNlbGYuX3N0YXRlKQoKICAgICAgICByZXR1cm4gQXNzZXQuX2Zyb21fZW1vamkoc2VsZi5fc3RhdGUsIHNlbGYsIGZvcm1hdD1mb3JtYXQsIHN0YXRpY19mb3JtYXQ9c3RhdGljX2Zvcm1hdCkK
