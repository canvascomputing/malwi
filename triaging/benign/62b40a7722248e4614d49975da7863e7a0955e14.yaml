statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/__init__.py
  contents:
  - name: use_ctypes
    score: 0.0
    code: |-
      def use_ctypes():
          """
          Forces use of ctypes instead of cffi for the FFI layer

          :raises:
              RuntimeError - when this function is called after another part of oscrypto has been imported
          """

          with _backend_lock:
              if _module_values['ffi'] == 'ctypes':
                  return

              if _module_values['backend'] is not None:
                  raise RuntimeError(
                      'Another part of oscrypto has already been imported, unable to force use of ctypes'
                  )

              _module_values['ffi'] = 'ctypes'
    tokens: TARGETED_FILE resume load_global _backend_lock before_with pop_top load_global _module_values load_const ffi binary_subscr load_const ctypes compare_op == pop_jump_if_false TO_NUMBER nop load_const load_const load_const call pop_top return_const None load_global _module_values load_const backend binary_subscr pop_jump_if_none TO_NUMBER load_global RuntimeError load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_const ctypes load_global _module_values load_const ffi store_subscr load_const load_const load_const call pop_top return_const None push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top return_const None copy pop_except reraise
    hash: f55cc2fa4cde98f16d0cabb67986d5b15fce0124ad333e84b7e9dbc7a90ff61e
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/__init__.py: 
