statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/utils.py
  contents:
  - name: resolve_invite
    score: 0.0
    code: |-
      def resolve_invite(invite):
          """
          Resolves an invite from a :class:`~discord.Invite`, URL or code.

          Parameters
          -----------
          invite: Union[:class:`~discord.Invite`, :class:`str`]
              The invite.

          Returns
          --------
          :class:`str`
              The invite code.
          """
          from .invite import Invite  # circular import
          if isinstance(invite, Invite):
              return invite.code
          else:
              rx = r'(?:https?\:\/\/)?discord(?:\.gg|(?:app)?\.com\/invite)\/(.+)'
              m = re.match(rx, invite)
              if m:
                  return m.group(1)
          return invite
    tokens: resume load_const INTEGER load_const import_name invite import_from Invite store_fast Invite pop_top load_global isinstance load_fast invite load_fast Invite call pop_jump_if_false TO_NUMBER load_fast invite load_attr code return_value load_const STRING_FILE_PATH store_fast rx load_global re load_attr match load_fast rx load_fast invite call store_fast m load_fast m pop_jump_if_false TO_NUMBER load_fast m load_attr group load_const INTEGER call return_value load_fast invite return_value
    hash: 24286a9619a3ef79d7b3151e6d7e7d58ddf30dafc5a1c64e871026292ce4889b
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/utils.py: IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgppbXBvcnQgYXJyYXkKaW1wb3J0IGFzeW5jaW8KaW1wb3J0IGNvbGxlY3Rpb25zLmFiYwppbXBvcnQgdW5pY29kZWRhdGEKZnJvbSBiYXNlNjQgaW1wb3J0IGI2NGVuY29kZQpmcm9tIGJpc2VjdCBpbXBvcnQgYmlzZWN0X2xlZnQKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBmdW5jdG9vbHMKZnJvbSBpbnNwZWN0IGltcG9ydCBpc2F3YWl0YWJsZSBhcyBfaXNhd2FpdGFibGUsIHNpZ25hdHVyZSBhcyBfc2lnbmF0dXJlCmZyb20gb3BlcmF0b3IgaW1wb3J0IGF0dHJnZXR0ZXIKaW1wb3J0IGpzb24KaW1wb3J0IHJlCmltcG9ydCB3YXJuaW5ncwoKZnJvbSAuZXJyb3JzIGltcG9ydCBJbnZhbGlkQXJndW1lbnQKCkRJU0NPUkRfRVBPQ0ggPSAxNDIwMDcwNDAwMDAwCk1BWF9BU1lOQ0lPX1NFQ09ORFMgPSAzNDU2MDAwCgpjbGFzcyBjYWNoZWRfcHJvcGVydHk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZnVuY3Rpb24pOgogICAgICAgIHNlbGYuZnVuY3Rpb24gPSBmdW5jdGlvbgogICAgICAgIHNlbGYuX19kb2NfXyA9IGdldGF0dHIoZnVuY3Rpb24sICdfX2RvY19fJykKCiAgICBkZWYgX19nZXRfXyhzZWxmLCBpbnN0YW5jZSwgb3duZXIpOgogICAgICAgIGlmIGluc3RhbmNlIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmCgogICAgICAgIHZhbHVlID0gc2VsZi5mdW5jdGlvbihpbnN0YW5jZSkKICAgICAgICBzZXRhdHRyKGluc3RhbmNlLCBzZWxmLmZ1bmN0aW9uLl9fbmFtZV9fLCB2YWx1ZSkKCiAgICAgICAgcmV0dXJuIHZhbHVlCgpjbGFzcyBDYWNoZWRTbG90UHJvcGVydHk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSwgZnVuY3Rpb24pOgogICAgICAgIHNlbGYubmFtZSA9IG5hbWUKICAgICAgICBzZWxmLmZ1bmN0aW9uID0gZnVuY3Rpb24KICAgICAgICBzZWxmLl9fZG9jX18gPSBnZXRhdHRyKGZ1bmN0aW9uLCAnX19kb2NfXycpCgogICAgZGVmIF9fZ2V0X18oc2VsZiwgaW5zdGFuY2UsIG93bmVyKToKICAgICAgICBpZiBpbnN0YW5jZSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZgoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBnZXRhdHRyKGluc3RhbmNlLCBzZWxmLm5hbWUpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICB2YWx1ZSA9IHNlbGYuZnVuY3Rpb24oaW5zdGFuY2UpCiAgICAgICAgICAgIHNldGF0dHIoaW5zdGFuY2UsIHNlbGYubmFtZSwgdmFsdWUpCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQoKZGVmIGNhY2hlZF9zbG90X3Byb3BlcnR5KG5hbWUpOgogICAgZGVmIGRlY29yYXRvcihmdW5jKToKICAgICAgICByZXR1cm4gQ2FjaGVkU2xvdFByb3BlcnR5KG5hbWUsIGZ1bmMpCiAgICByZXR1cm4gZGVjb3JhdG9yCgpjbGFzcyBTZXF1ZW5jZVByb3h5KGNvbGxlY3Rpb25zLmFiYy5TZXF1ZW5jZSk6CiAgICAiIiJSZWFkLW9ubHkgcHJveHkgb2YgYSBTZXF1ZW5jZS4iIiIKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwcm94aWVkKToKICAgICAgICBzZWxmLl9fcHJveGllZCA9IHByb3hpZWQKCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwgaWR4KToKICAgICAgICByZXR1cm4gc2VsZi5fX3Byb3hpZWRbaWR4XQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2VsZi5fX3Byb3hpZWQpCgogICAgZGVmIF9fY29udGFpbnNfXyhzZWxmLCBpdGVtKToKICAgICAgICByZXR1cm4gaXRlbSBpbiBzZWxmLl9fcHJveGllZAoKICAgIGRlZiBfX2l0ZXJfXyhzZWxmKToKICAgICAgICByZXR1cm4gaXRlcihzZWxmLl9fcHJveGllZCkKCiAgICBkZWYgX19yZXZlcnNlZF9fKHNlbGYpOgogICAgICAgIHJldHVybiByZXZlcnNlZChzZWxmLl9fcHJveGllZCkKCiAgICBkZWYgaW5kZXgoc2VsZiwgdmFsdWUsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcmV0dXJuIHNlbGYuX19wcm94aWVkLmluZGV4KHZhbHVlLCAqYXJncywgKiprd2FyZ3MpCgogICAgZGVmIGNvdW50KHNlbGYsIHZhbHVlKToKICAgICAgICByZXR1cm4gc2VsZi5fX3Byb3hpZWQuY291bnQodmFsdWUpCgpkZWYgcGFyc2VfdGltZSh0aW1lc3RhbXApOgogICAgaWYgdGltZXN0YW1wOgogICAgICAgIHJldHVybiBkYXRldGltZS5kYXRldGltZSgqbWFwKGludCwgcmUuc3BsaXQocidbXlxkXScsIHRpbWVzdGFtcC5yZXBsYWNlKCcrMDA6MDAnLCAnJykpKSkKICAgIHJldHVybiBOb25lCgpkZWYgY29weV9kb2Mob3JpZ2luYWwpOgogICAgZGVmIGRlY29yYXRvcihvdmVycmlkZW4pOgogICAgICAgIG92ZXJyaWRlbi5fX2RvY19fID0gb3JpZ2luYWwuX19kb2NfXwogICAgICAgIG92ZXJyaWRlbi5fX3NpZ25hdHVyZV9fID0gX3NpZ25hdHVyZShvcmlnaW5hbCkKICAgICAgICByZXR1cm4gb3ZlcnJpZGVuCiAgICByZXR1cm4gZGVjb3JhdG9yCgpkZWYgZGVwcmVjYXRlZChpbnN0ZWFkPU5vbmUpOgogICAgZGVmIGFjdHVhbF9kZWNvcmF0b3IoZnVuYyk6CiAgICAgICAgQGZ1bmN0b29scy53cmFwcyhmdW5jKQogICAgICAgIGRlZiBkZWNvcmF0ZWQoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAgICAgd2FybmluZ3Muc2ltcGxlZmlsdGVyKCdhbHdheXMnLCBEZXByZWNhdGlvbldhcm5pbmcpICMgdHVybiBvZmYgZmlsdGVyCiAgICAgICAgICAgIGlmIGluc3RlYWQ6CiAgICAgICAgICAgICAgICBmbXQgPSAiezAuX19uYW1lX199IGlzIGRlcHJlY2F0ZWQsIHVzZSB7MX0gaW5zdGVhZC4iCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBmbXQgPSAnezAuX19uYW1lX199IGlzIGRlcHJlY2F0ZWQuJwoKICAgICAgICAgICAgd2FybmluZ3Mud2FybihmbXQuZm9ybWF0KGZ1bmMsIGluc3RlYWQpLCBzdGFja2xldmVsPTMsIGNhdGVnb3J5PURlcHJlY2F0aW9uV2FybmluZykKICAgICAgICAgICAgd2FybmluZ3Muc2ltcGxlZmlsdGVyKCdkZWZhdWx0JywgRGVwcmVjYXRpb25XYXJuaW5nKSAjIHJlc2V0IGZpbHRlcgogICAgICAgICAgICByZXR1cm4gZnVuYygqYXJncywgKiprd2FyZ3MpCiAgICAgICAgcmV0dXJuIGRlY29yYXRlZAogICAgcmV0dXJuIGFjdHVhbF9kZWNvcmF0b3IKCmRlZiBvYXV0aF91cmwoY2xpZW50X2lkLCBwZXJtaXNzaW9ucz1Ob25lLCBndWlsZD1Ob25lLCByZWRpcmVjdF91cmk9Tm9uZSwgc2NvcGVzPU5vbmUpOgogICAgIiIiQSBoZWxwZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBPQXV0aDIgVVJMIGZvciBpbnZpdGluZyB0aGUgYm90CiAgICBpbnRvIGd1aWxkcy4KCiAgICBQYXJhbWV0ZXJzCiAgICAtLS0tLS0tLS0tLQogICAgY2xpZW50X2lkOiA6Y2xhc3M6YHN0cmAKICAgICAgICBUaGUgY2xpZW50IElEIGZvciB5b3VyIGJvdC4KICAgIHBlcm1pc3Npb25zOiA6Y2xhc3M6YH5kaXNjb3JkLlBlcm1pc3Npb25zYAogICAgICAgIFRoZSBwZXJtaXNzaW9ucyB5b3UncmUgcmVxdWVzdGluZy4gSWYgbm90IGdpdmVuIHRoZW4geW91IHdvbid0IGJlIHJlcXVlc3RpbmcgYW55CiAgICAgICAgcGVybWlzc2lvbnMuCiAgICBndWlsZDogOmNsYXNzOmB+ZGlzY29yZC5HdWlsZGAKICAgICAgICBUaGUgZ3VpbGQgdG8gcHJlLXNlbGVjdCBpbiB0aGUgYXV0aG9yaXphdGlvbiBzY3JlZW4sIGlmIGF2YWlsYWJsZS4KICAgIHJlZGlyZWN0X3VyaTogOmNsYXNzOmBzdHJgCiAgICAgICAgQW4gb3B0aW9uYWwgdmFsaWQgcmVkaXJlY3QgVVJJLgogICAgc2NvcGVzOiBJdGVyYWJsZVs6Y2xhc3M6YHN0cmBdCiAgICAgICAgQW4gb3B0aW9uYWwgdmFsaWQgbGlzdCBvZiBzY29wZXMuIERlZmF1bHRzIHRvIGBgKCdib3QnLClgYC4KCiAgICAgICAgLi4gdmVyc2lvbmFkZGVkOjogMS43CgogICAgUmV0dXJucwogICAgLS0tLS0tLS0KICAgIDpjbGFzczpgc3RyYAogICAgICAgIFRoZSBPQXV0aDIgVVJMIGZvciBpbnZpdGluZyB0aGUgYm90IGludG8gZ3VpbGRzLgogICAgIiIiCiAgICB1cmwgPSAnaHR0cHM6Ly9kaXNjb3JkLmNvbS9vYXV0aDIvYXV0aG9yaXplP2NsaWVudF9pZD17fScuZm9ybWF0KGNsaWVudF9pZCkKICAgIHVybCA9IHVybCArICcmc2NvcGU9JyArICcrJy5qb2luKHNjb3BlcyBvciAoJ2JvdCcsKSkKICAgIGlmIHBlcm1pc3Npb25zIGlzIG5vdCBOb25lOgogICAgICAgIHVybCA9IHVybCArICcmcGVybWlzc2lvbnM9JyArIHN0cihwZXJtaXNzaW9ucy52YWx1ZSkKICAgIGlmIGd1aWxkIGlzIG5vdCBOb25lOgogICAgICAgIHVybCA9IHVybCArICImZ3VpbGRfaWQ9IiArIHN0cihndWlsZC5pZCkKICAgIGlmIHJlZGlyZWN0X3VyaSBpcyBub3QgTm9uZToKICAgICAgICBmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgdXJsZW5jb2RlCiAgICAgICAgdXJsID0gdXJsICsgIiZyZXNwb25zZV90eXBlPWNvZGUmIiArIHVybGVuY29kZSh7J3JlZGlyZWN0X3VyaSc6IHJlZGlyZWN0X3VyaX0pCiAgICByZXR1cm4gdXJsCgoKZGVmIHNub3dmbGFrZV90aW1lKGlkKToKICAgICIiIgogICAgUGFyYW1ldGVycwogICAgLS0tLS0tLS0tLS0KICAgIGlkOiA6Y2xhc3M6YGludGAKICAgICAgICBUaGUgc25vd2ZsYWtlIElELgoKICAgIFJldHVybnMKICAgIC0tLS0tLS0tCiAgICA6Y2xhc3M6YGRhdGV0aW1lLmRhdGV0aW1lYAogICAgICAgIFRoZSBjcmVhdGlvbiBkYXRlIGluIFVUQyBvZiBhIERpc2NvcmQgc25vd2ZsYWtlIElELiIiIgogICAgcmV0dXJuIGRhdGV0aW1lLmRhdGV0aW1lLnV0Y2Zyb210aW1lc3RhbXAoKChpZCA+PiAyMikgKyBESVNDT1JEX0VQT0NIKSAvIDEwMDApCgpkZWYgdGltZV9zbm93Zmxha2UoZGF0ZXRpbWVfb2JqLCBoaWdoPUZhbHNlKToKICAgICIiIlJldHVybnMgYSBudW1lcmljIHNub3dmbGFrZSBwcmV0ZW5kaW5nIHRvIGJlIGNyZWF0ZWQgYXQgdGhlIGdpdmVuIGRhdGUuCgogICAgV2hlbiB1c2luZyBhcyB0aGUgbG93ZXIgZW5kIG9mIGEgcmFuZ2UsIHVzZSBgYHRpbWVfc25vd2ZsYWtlKGhpZ2g9RmFsc2UpIC0gMWBgIHRvIGJlIGluY2x1c2l2ZSwgYGBoaWdoPVRydWVgYCB0byBiZSBleGNsdXNpdmUKICAgIFdoZW4gdXNpbmcgYXMgdGhlIGhpZ2hlciBlbmQgb2YgYSByYW5nZSwgdXNlIGBgdGltZV9zbm93Zmxha2UoaGlnaD1UcnVlKWBgICsgMSB0byBiZSBpbmNsdXNpdmUsIGBgaGlnaD1GYWxzZWBgIHRvIGJlIGV4Y2x1c2l2ZQoKICAgIFBhcmFtZXRlcnMKICAgIC0tLS0tLS0tLS0tCiAgICBkYXRldGltZV9vYmo6IDpjbGFzczpgZGF0ZXRpbWUuZGF0ZXRpbWVgCiAgICAgICAgQSB0aW1lem9uZS1uYWl2ZSBkYXRldGltZSBvYmplY3QgcmVwcmVzZW50aW5nIFVUQyB0aW1lLgogICAgaGlnaDogOmNsYXNzOmBib29sYAogICAgICAgIFdoZXRoZXIgb3Igbm90IHRvIHNldCB0aGUgbG93ZXIgMjIgYml0IHRvIGhpZ2ggb3IgbG93LgogICAgIiIiCiAgICB1bml4X3NlY29uZHMgPSAoZGF0ZXRpbWVfb2JqIC0gdHlwZShkYXRldGltZV9vYmopKDE5NzAsIDEsIDEpKS50b3RhbF9zZWNvbmRzKCkKICAgIGRpc2NvcmRfbWlsbGlzID0gaW50KHVuaXhfc2Vjb25kcyAqIDEwMDAgLSBESVNDT1JEX0VQT0NIKQoKICAgIHJldHVybiAoZGlzY29yZF9taWxsaXMgPDwgMjIpICsgKDIqKjIyLTEgaWYgaGlnaCBlbHNlIDApCgpkZWYgZmluZChwcmVkaWNhdGUsIHNlcSk6CiAgICAiIiJBIGhlbHBlciB0byByZXR1cm4gdGhlIGZpcnN0IGVsZW1lbnQgZm91bmQgaW4gdGhlIHNlcXVlbmNlCiAgICB0aGF0IG1lZXRzIHRoZSBwcmVkaWNhdGUuIEZvciBleGFtcGxlOiA6OgoKICAgICAgICBtZW1iZXIgPSBkaXNjb3JkLnV0aWxzLmZpbmQobGFtYmRhIG06IG0ubmFtZSA9PSAnTWlnaHR5JywgY2hhbm5lbC5ndWlsZC5tZW1iZXJzKQoKICAgIHdvdWxkIGZpbmQgdGhlIGZpcnN0IDpjbGFzczpgfmRpc2NvcmQuTWVtYmVyYCB3aG9zZSBuYW1lIGlzICdNaWdodHknIGFuZCByZXR1cm4gaXQuCiAgICBJZiBhbiBlbnRyeSBpcyBub3QgZm91bmQsIHRoZW4gYGBOb25lYGAgaXMgcmV0dXJuZWQuCgogICAgVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSA6ZnVuYzpgcHk6ZmlsdGVyYCBkdWUgdG8gdGhlIGZhY3QgaXQgc3RvcHMgdGhlIG1vbWVudCBpdCBmaW5kcwogICAgYSB2YWxpZCBlbnRyeS4KCiAgICBQYXJhbWV0ZXJzCiAgICAtLS0tLS0tLS0tLQogICAgcHJlZGljYXRlCiAgICAgICAgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBib29sZWFuLWxpa2UgcmVzdWx0LgogICAgc2VxOiBpdGVyYWJsZQogICAgICAgIFRoZSBpdGVyYWJsZSB0byBzZWFyY2ggdGhyb3VnaC4KICAgICIiIgoKICAgIGZvciBlbGVtZW50IGluIHNlcToKICAgICAgICBpZiBwcmVkaWNhdGUoZWxlbWVudCk6CiAgICAgICAgICAgIHJldHVybiBlbGVtZW50CiAgICByZXR1cm4gTm9uZQoKZGVmIGdldChpdGVyYWJsZSwgKiphdHRycyk6CiAgICByIiIiQSBoZWxwZXIgdGhhdCByZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBpdGVyYWJsZSB0aGF0IG1lZXRzCiAgICBhbGwgdGhlIHRyYWl0cyBwYXNzZWQgaW4gYGBhdHRyc2BgLiBUaGlzIGlzIGFuIGFsdGVybmF0aXZlIGZvcgogICAgOmZ1bmM6YH5kaXNjb3JkLnV0aWxzLmZpbmRgLgoKICAgIFdoZW4gbXVsdGlwbGUgYXR0cmlidXRlcyBhcmUgc3BlY2lmaWVkLCB0aGV5IGFyZSBjaGVja2VkIHVzaW5nCiAgICBsb2dpY2FsIEFORCwgbm90IGxvZ2ljYWwgT1IuIE1lYW5pbmcgdGhleSBoYXZlIHRvIG1lZXQgZXZlcnkKICAgIGF0dHJpYnV0ZSBwYXNzZWQgaW4gYW5kIG5vdCBvbmUgb2YgdGhlbS4KCiAgICBUbyBoYXZlIGEgbmVzdGVkIGF0dHJpYnV0ZSBzZWFyY2ggKGkuZS4gc2VhcmNoIGJ5IGBgeC55YGApIHRoZW4KICAgIHBhc3MgaW4gYGB4X195YGAgYXMgdGhlIGtleXdvcmQgYXJndW1lbnQuCgogICAgSWYgbm90aGluZyBpcyBmb3VuZCB0aGF0IG1hdGNoZXMgdGhlIGF0dHJpYnV0ZXMgcGFzc2VkLCB0aGVuCiAgICBgYE5vbmVgYCBpcyByZXR1cm5lZC4KCiAgICBFeGFtcGxlcwogICAgLS0tLS0tLS0tCgogICAgQmFzaWMgdXNhZ2U6CgogICAgLi4gY29kZS1ibG9jazo6IHB5dGhvbjMKCiAgICAgICAgbWVtYmVyID0gZGlzY29yZC51dGlscy5nZXQobWVzc2FnZS5ndWlsZC5tZW1iZXJzLCBuYW1lPSdGb28nKQoKICAgIE11bHRpcGxlIGF0dHJpYnV0ZSBtYXRjaGluZzoKCiAgICAuLiBjb2RlLWJsb2NrOjogcHl0aG9uMwoKICAgICAgICBjaGFubmVsID0gZGlzY29yZC51dGlscy5nZXQoZ3VpbGQudm9pY2VfY2hhbm5lbHMsIG5hbWU9J0ZvbycsIGJpdHJhdGU9NjQwMDApCgogICAgTmVzdGVkIGF0dHJpYnV0ZSBtYXRjaGluZzoKCiAgICAuLiBjb2RlLWJsb2NrOjogcHl0aG9uMwoKICAgICAgICBjaGFubmVsID0gZGlzY29yZC51dGlscy5nZXQoY2xpZW50LmdldF9hbGxfY2hhbm5lbHMoKSwgZ3VpbGRfX25hbWU9J0Nvb2wnLCBuYW1lPSdnZW5lcmFsJykKCiAgICBQYXJhbWV0ZXJzCiAgICAtLS0tLS0tLS0tLQogICAgaXRlcmFibGUKICAgICAgICBBbiBpdGVyYWJsZSB0byBzZWFyY2ggdGhyb3VnaC4KICAgIFwqXCphdHRycwogICAgICAgIEtleXdvcmQgYXJndW1lbnRzIHRoYXQgZGVub3RlIGF0dHJpYnV0ZXMgdG8gc2VhcmNoIHdpdGguCiAgICAiIiIKCiAgICAjIGdsb2JhbCAtPiBsb2NhbAogICAgX2FsbCA9IGFsbAogICAgYXR0cmdldCA9IGF0dHJnZXR0ZXIKCiAgICAjIFNwZWNpYWwgY2FzZSB0aGUgc2luZ2xlIGVsZW1lbnQgY2FsbAogICAgaWYgbGVuKGF0dHJzKSA9PSAxOgogICAgICAgIGssIHYgPSBhdHRycy5wb3BpdGVtKCkKICAgICAgICBwcmVkID0gYXR0cmdldChrLnJlcGxhY2UoJ19fJywgJy4nKSkKICAgICAgICBmb3IgZWxlbSBpbiBpdGVyYWJsZToKICAgICAgICAgICAgaWYgcHJlZChlbGVtKSA9PSB2OgogICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0KICAgICAgICByZXR1cm4gTm9uZQoKICAgIGNvbnZlcnRlZCA9IFsKICAgICAgICAoYXR0cmdldChhdHRyLnJlcGxhY2UoJ19fJywgJy4nKSksIHZhbHVlKQogICAgICAgIGZvciBhdHRyLCB2YWx1ZSBpbiBhdHRycy5pdGVtcygpCiAgICBdCgogICAgZm9yIGVsZW0gaW4gaXRlcmFibGU6CiAgICAgICAgaWYgX2FsbChwcmVkKGVsZW0pID09IHZhbHVlIGZvciBwcmVkLCB2YWx1ZSBpbiBjb252ZXJ0ZWQpOgogICAgICAgICAgICByZXR1cm4gZWxlbQogICAgcmV0dXJuIE5vbmUKCmRlZiBfdW5pcXVlKGl0ZXJhYmxlKToKICAgIHNlZW4gPSBzZXQoKQogICAgYWRkZXIgPSBzZWVuLmFkZAogICAgcmV0dXJuIFt4IGZvciB4IGluIGl0ZXJhYmxlIGlmIG5vdCAoeCBpbiBzZWVuIG9yIGFkZGVyKHgpKV0KCmRlZiBfZ2V0X2FzX3Nub3dmbGFrZShkYXRhLCBrZXkpOgogICAgdHJ5OgogICAgICAgIHZhbHVlID0gZGF0YVtrZXldCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgcmV0dXJuIE5vbmUKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIHZhbHVlIGFuZCBpbnQodmFsdWUpCgpkZWYgX2dldF9taW1lX3R5cGVfZm9yX2ltYWdlKGRhdGEpOgogICAgaWYgZGF0YS5zdGFydHN3aXRoKGInXHg4OVx4NTBceDRFXHg0N1x4MERceDBBXHgxQVx4MEEnKToKICAgICAgICByZXR1cm4gJ2ltYWdlL3BuZycKICAgIGVsaWYgZGF0YVswOjNdID09IGInXHhmZlx4ZDhceGZmJyBvciBkYXRhWzY6MTBdIGluIChiJ0pGSUYnLCBiJ0V4aWYnKToKICAgICAgICByZXR1cm4gJ2ltYWdlL2pwZWcnCiAgICBlbGlmIGRhdGEuc3RhcnRzd2l0aCgoYidceDQ3XHg0OVx4NDZceDM4XHgzN1x4NjEnLCBiJ1x4NDdceDQ5XHg0Nlx4MzhceDM5XHg2MScpKToKICAgICAgICByZXR1cm4gJ2ltYWdlL2dpZicKICAgIGVsaWYgZGF0YS5zdGFydHN3aXRoKGInUklGRicpIGFuZCBkYXRhWzg6MTJdID09IGInV0VCUCc6CiAgICAgICAgcmV0dXJuICdpbWFnZS93ZWJwJwogICAgZWxzZToKICAgICAgICByYWlzZSBJbnZhbGlkQXJndW1lbnQoJ1Vuc3VwcG9ydGVkIGltYWdlIHR5cGUgZ2l2ZW4nKQoKZGVmIF9ieXRlc190b19iYXNlNjRfZGF0YShkYXRhKToKICAgIGZtdCA9ICdkYXRhOnttaW1lfTtiYXNlNjQse2RhdGF9JwogICAgbWltZSA9IF9nZXRfbWltZV90eXBlX2Zvcl9pbWFnZShkYXRhKQogICAgYjY0ID0gYjY0ZW5jb2RlKGRhdGEpLmRlY29kZSgnYXNjaWknKQogICAgcmV0dXJuIGZtdC5mb3JtYXQobWltZT1taW1lLCBkYXRhPWI2NCkKCmRlZiB0b19qc29uKG9iaik6CiAgICByZXR1cm4ganNvbi5kdW1wcyhvYmosIHNlcGFyYXRvcnM9KCcsJywgJzonKSwgZW5zdXJlX2FzY2lpPVRydWUpCgpkZWYgX3BhcnNlX3JhdGVsaW1pdF9oZWFkZXIocmVxdWVzdCwgKiwgdXNlX2Nsb2NrPUZhbHNlKToKICAgIHJlc2V0X2FmdGVyID0gcmVxdWVzdC5oZWFkZXJzLmdldCgnWC1SYXRlbGltaXQtUmVzZXQtQWZ0ZXInKQogICAgaWYgdXNlX2Nsb2NrIG9yIG5vdCByZXNldF9hZnRlcjoKICAgICAgICB1dGMgPSBkYXRldGltZS50aW1lem9uZS51dGMKICAgICAgICBub3cgPSBkYXRldGltZS5kYXRldGltZS5ub3codXRjKQogICAgICAgIHJlc2V0ID0gZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbXRpbWVzdGFtcChmbG9hdChyZXF1ZXN0LmhlYWRlcnNbJ1gtUmF0ZWxpbWl0LVJlc2V0J10pLCB1dGMpCiAgICAgICAgcmV0dXJuIChyZXNldCAtIG5vdykudG90YWxfc2Vjb25kcygpCiAgICBlbHNlOgogICAgICAgIHJldHVybiBmbG9hdChyZXNldF9hZnRlcikKCmFzeW5jIGRlZiBtYXliZV9jb3JvdXRpbmUoZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgIHZhbHVlID0gZigqYXJncywgKiprd2FyZ3MpCiAgICBpZiBfaXNhd2FpdGFibGUodmFsdWUpOgogICAgICAgIHJldHVybiBhd2FpdCB2YWx1ZQogICAgZWxzZToKICAgICAgICByZXR1cm4gdmFsdWUKCmFzeW5jIGRlZiBhc3luY19hbGwoZ2VuLCAqLCBjaGVjaz1faXNhd2FpdGFibGUpOgogICAgZm9yIGVsZW0gaW4gZ2VuOgogICAgICAgIGlmIGNoZWNrKGVsZW0pOgogICAgICAgICAgICBlbGVtID0gYXdhaXQgZWxlbQogICAgICAgIGlmIG5vdCBlbGVtOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIHJldHVybiBUcnVlCgphc3luYyBkZWYgc2FuZV93YWl0X2ZvcihmdXR1cmVzLCAqLCB0aW1lb3V0KToKICAgIGVuc3VyZWQgPSBbCiAgICAgICAgYXN5bmNpby5lbnN1cmVfZnV0dXJlKGZ1dCkgZm9yIGZ1dCBpbiBmdXR1cmVzCiAgICBdCiAgICBkb25lLCBwZW5kaW5nID0gYXdhaXQgYXN5bmNpby53YWl0KGVuc3VyZWQsIHRpbWVvdXQ9dGltZW91dCwgcmV0dXJuX3doZW49YXN5bmNpby5BTExfQ09NUExFVEVEKQoKICAgIGlmIGxlbihwZW5kaW5nKSAhPSAwOgogICAgICAgIHJhaXNlIGFzeW5jaW8uVGltZW91dEVycm9yKCkKCiAgICByZXR1cm4gZG9uZQoKYXN5bmMgZGVmIHNsZWVwX3VudGlsKHdoZW4sIHJlc3VsdD1Ob25lKToKICAgICIiInxjb3JvfAoKICAgIFNsZWVwIHVudGlsIGEgc3BlY2lmaWVkIHRpbWUuCgogICAgSWYgdGhlIHRpbWUgc3VwcGxpZWQgaXMgaW4gdGhlIHBhc3QgdGhpcyBmdW5jdGlvbiB3aWxsIHlpZWxkIGluc3RhbnRseS4KCiAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjMKCiAgICBQYXJhbWV0ZXJzCiAgICAtLS0tLS0tLS0tLQogICAgd2hlbjogOmNsYXNzOmBkYXRldGltZS5kYXRldGltZWAKICAgICAgICBUaGUgdGltZXN0YW1wIGluIHdoaWNoIHRvIHNsZWVwIHVudGlsLiBJZiB0aGUgZGF0ZXRpbWUgaXMgbmFpdmUgdGhlbgogICAgICAgIGl0IGlzIGFzc3VtZWQgdG8gYmUgaW4gVVRDLgogICAgcmVzdWx0OiBBbnkKICAgICAgICBJZiBwcm92aWRlZCBpcyByZXR1cm5lZCB0byB0aGUgY2FsbGVyIHdoZW4gdGhlIGNvcm91dGluZSBjb21wbGV0ZXMuCiAgICAiIiIKICAgIGlmIHdoZW4udHppbmZvIGlzIE5vbmU6CiAgICAgICAgd2hlbiA9IHdoZW4ucmVwbGFjZSh0emluZm89ZGF0ZXRpbWUudGltZXpvbmUudXRjKQogICAgbm93ID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KGRhdGV0aW1lLnRpbWV6b25lLnV0YykKICAgIGRlbHRhID0gKHdoZW4gLSBub3cpLnRvdGFsX3NlY29uZHMoKQogICAgd2hpbGUgZGVsdGEgPiBNQVhfQVNZTkNJT19TRUNPTkRTOgogICAgICAgIGF3YWl0IGFzeW5jaW8uc2xlZXAoTUFYX0FTWU5DSU9fU0VDT05EUykKICAgICAgICBkZWx0YSAtPSBNQVhfQVNZTkNJT19TRUNPTkRTCiAgICByZXR1cm4gYXdhaXQgYXN5bmNpby5zbGVlcChtYXgoZGVsdGEsIDApLCByZXN1bHQpCgpkZWYgdmFsaWRfaWNvbl9zaXplKHNpemUpOgogICAgIiIiSWNvbnMgbXVzdCBiZSBwb3dlciBvZiAyIHdpdGhpbiBbMTYsIDQwOTZdLiIiIgogICAgcmV0dXJuIG5vdCBzaXplICYgKHNpemUgLSAxKSBhbmQgc2l6ZSBpbiByYW5nZSgxNiwgNDA5NykKCmNsYXNzIFNub3dmbGFrZUxpc3QoYXJyYXkuYXJyYXkpOgogICAgIiIiSW50ZXJuYWwgZGF0YSBzdG9yYWdlIGNsYXNzIHRvIGVmZmljaWVudGx5IHN0b3JlIGEgbGlzdCBvZiBzbm93Zmxha2VzLgoKICAgIFRoaXMgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXJpc3RpY3M6CgogICAgLSBMb3cgbWVtb3J5IHVzYWdlCiAgICAtIE8obikgaXRlcmF0aW9uIChvYnZpb3VzbHkpCiAgICAtIE8obiBsb2cgbikgaW5pdGlhbCBjcmVhdGlvbiBpZiBkYXRhIGlzIHVuc29ydGVkCiAgICAtIE8obG9nIG4pIHNlYXJjaCBhbmQgaW5kZXhpbmcKICAgIC0gTyhuKSBpbnNlcnRpb24KICAgICIiIgoKICAgIF9fc2xvdHNfXyA9ICgpCgogICAgZGVmIF9fbmV3X18oY2xzLCBkYXRhLCAqLCBpc19zb3J0ZWQ9RmFsc2UpOgogICAgICAgIHJldHVybiBhcnJheS5hcnJheS5fX25ld19fKGNscywgJ1EnLCBkYXRhIGlmIGlzX3NvcnRlZCBlbHNlIHNvcnRlZChkYXRhKSkKCiAgICBkZWYgYWRkKHNlbGYsIGVsZW1lbnQpOgogICAgICAgIGkgPSBiaXNlY3RfbGVmdChzZWxmLCBlbGVtZW50KQogICAgICAgIHNlbGYuaW5zZXJ0KGksIGVsZW1lbnQpCgogICAgZGVmIGdldChzZWxmLCBlbGVtZW50KToKICAgICAgICBpID0gYmlzZWN0X2xlZnQoc2VsZiwgZWxlbWVudCkKICAgICAgICByZXR1cm4gc2VsZltpXSBpZiBpICE9IGxlbihzZWxmKSBhbmQgc2VsZltpXSA9PSBlbGVtZW50IGVsc2UgTm9uZQoKICAgIGRlZiBoYXMoc2VsZiwgZWxlbWVudCk6CiAgICAgICAgaSA9IGJpc2VjdF9sZWZ0KHNlbGYsIGVsZW1lbnQpCiAgICAgICAgcmV0dXJuIGkgIT0gbGVuKHNlbGYpIGFuZCBzZWxmW2ldID09IGVsZW1lbnQKCl9JU19BU0NJSSA9IHJlLmNvbXBpbGUocideW1x4MDAtXHg3Zl0rJCcpCgpkZWYgX3N0cmluZ193aWR0aChzdHJpbmcsICosIF9JU19BU0NJST1fSVNfQVNDSUkpOgogICAgIiIiUmV0dXJucyBzdHJpbmcncyB3aWR0aC4iIiIKICAgIG1hdGNoID0gX0lTX0FTQ0lJLm1hdGNoKHN0cmluZykKICAgIGlmIG1hdGNoOgogICAgICAgIHJldHVybiBtYXRjaC5lbmRwb3MKCiAgICBVTklDT0RFX1dJREVfQ0hBUl9UWVBFID0gJ1dGQScKICAgIGZ1bmMgPSB1bmljb2RlZGF0YS5lYXN0X2FzaWFuX3dpZHRoCiAgICByZXR1cm4gc3VtKDIgaWYgZnVuYyhjaGFyKSBpbiBVTklDT0RFX1dJREVfQ0hBUl9UWVBFIGVsc2UgMSBmb3IgY2hhciBpbiBzdHJpbmcpCgpkZWYgcmVzb2x2ZV9pbnZpdGUoaW52aXRlKToKICAgICIiIgogICAgUmVzb2x2ZXMgYW4gaW52aXRlIGZyb20gYSA6Y2xhc3M6YH5kaXNjb3JkLkludml0ZWAsIFVSTCBvciBjb2RlLgoKICAgIFBhcmFtZXRlcnMKICAgIC0tLS0tLS0tLS0tCiAgICBpbnZpdGU6IFVuaW9uWzpjbGFzczpgfmRpc2NvcmQuSW52aXRlYCwgOmNsYXNzOmBzdHJgXQogICAgICAgIFRoZSBpbnZpdGUuCgogICAgUmV0dXJucwogICAgLS0tLS0tLS0KICAgIDpjbGFzczpgc3RyYAogICAgICAgIFRoZSBpbnZpdGUgY29kZS4KICAgICIiIgogICAgZnJvbSAuaW52aXRlIGltcG9ydCBJbnZpdGUgICMgY2lyY3VsYXIgaW1wb3J0CiAgICBpZiBpc2luc3RhbmNlKGludml0ZSwgSW52aXRlKToKICAgICAgICByZXR1cm4gaW52aXRlLmNvZGUKICAgIGVsc2U6CiAgICAgICAgcnggPSByJyg/Omh0dHBzP1w6XC9cLyk/ZGlzY29yZCg/OlwuZ2d8KD86YXBwKT9cLmNvbVwvaW52aXRlKVwvKC4rKScKICAgICAgICBtID0gcmUubWF0Y2gocngsIGludml0ZSkKICAgICAgICBpZiBtOgogICAgICAgICAgICByZXR1cm4gbS5ncm91cCgxKQogICAgcmV0dXJuIGludml0ZQoKZGVmIHJlc29sdmVfdGVtcGxhdGUoY29kZSk6CiAgICAiIiIKICAgIFJlc29sdmVzIGEgdGVtcGxhdGUgY29kZSBmcm9tIGEgOmNsYXNzOmB+ZGlzY29yZC5UZW1wbGF0ZWAsIFVSTCBvciBjb2RlLgoKICAgIC4uIHZlcnNpb25hZGRlZDo6IDEuNAoKICAgIFBhcmFtZXRlcnMKICAgIC0tLS0tLS0tLS0tCiAgICBjb2RlOiBVbmlvbls6Y2xhc3M6YH5kaXNjb3JkLlRlbXBsYXRlYCwgOmNsYXNzOmBzdHJgXQogICAgICAgIFRoZSBjb2RlLgoKICAgIFJldHVybnMKICAgIC0tLS0tLS0tCiAgICA6Y2xhc3M6YHN0cmAKICAgICAgICBUaGUgdGVtcGxhdGUgY29kZS4KICAgICIiIgogICAgZnJvbSAudGVtcGxhdGUgaW1wb3J0IFRlbXBsYXRlICMgY2lyY3VsYXIgaW1wb3J0CiAgICBpZiBpc2luc3RhbmNlKGNvZGUsIFRlbXBsYXRlKToKICAgICAgICByZXR1cm4gY29kZS5jb2RlCiAgICBlbHNlOgogICAgICAgIHJ4ID0gcicoPzpodHRwcz9cOlwvXC8pP2Rpc2NvcmQoPzpcLm5ld3woPzphcHApP1wuY29tXC90ZW1wbGF0ZSlcLyguKyknCiAgICAgICAgbSA9IHJlLm1hdGNoKHJ4LCBjb2RlKQogICAgICAgIGlmIG06CiAgICAgICAgICAgIHJldHVybiBtLmdyb3VwKDEpCiAgICByZXR1cm4gY29kZQoKX01BUktET1dOX0VTQ0FQRV9TVUJSRUdFWCA9ICd8Jy5qb2luKHInXHswfSg/PShbXHNcU10qKCg/PCFcezB9KVx7MH0pKSknLmZvcm1hdChjKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGMgaW4gKCcqJywgJ2AnLCAnXycsICd+JywgJ3wnKSkKCl9NQVJLRE9XTl9FU0NBUEVfQ09NTU9OID0gcidePig/Oj4+KT9cc3xcWy4rXF1cKC4rXCknCgpfTUFSS0RPV05fRVNDQVBFX1JFR0VYID0gcmUuY29tcGlsZShyJyg/UDxtYXJrZG93bj4lc3wlcyknICUgKF9NQVJLRE9XTl9FU0NBUEVfU1VCUkVHRVgsIF9NQVJLRE9XTl9FU0NBUEVfQ09NTU9OKSwgcmUuTVVMVElMSU5FKQoKX1VSTF9SRUdFWCA9IHInKD9QPHVybD48W146ID5dKzpcL1teID5dKz58KD86aHR0cHM/fHN0ZWFtKTpcL1wvW15cczxdK1tePC4sOjtcIlwnXF1cc10pJwoKX01BUktET1dOX1NUT0NLX1JFR0VYID0gcicoP1A8bWFya2Rvd24+W19cXH58XCpgXXwlcyknICUgX01BUktET1dOX0VTQ0FQRV9DT01NT04KCmRlZiByZW1vdmVfbWFya2Rvd24odGV4dCwgKiwgaWdub3JlX2xpbmtzPVRydWUpOgogICAgIiIiQSBoZWxwZXIgZnVuY3Rpb24gdGhhdCByZW1vdmVzIG1hcmtkb3duIGNoYXJhY3RlcnMuCgogICAgLi4gdmVyc2lvbmFkZGVkOjogMS43CiAgICAKICAgIC4uIG5vdGU6OgogICAgICAgICAgICBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBtYXJrZG93biBhd2FyZSBhbmQgbWF5IHJlbW92ZSBtZWFuaW5nIGZyb20gdGhlIG9yaWdpbmFsIHRleHQuIEZvciBleGFtcGxlLAogICAgICAgICAgICBpZiB0aGUgaW5wdXQgY29udGFpbnMgYGAxMCAqIDVgYCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIGludG8gYGAxMCAgNWBgLgogICAgCiAgICBQYXJhbWV0ZXJzCiAgICAtLS0tLS0tLS0tLQogICAgdGV4dDogOmNsYXNzOmBzdHJgCiAgICAgICAgVGhlIHRleHQgdG8gcmVtb3ZlIG1hcmtkb3duIGZyb20uCiAgICBpZ25vcmVfbGlua3M6IDpjbGFzczpgYm9vbGAKICAgICAgICBXaGV0aGVyIHRvIGxlYXZlIGxpbmtzIGFsb25lIHdoZW4gcmVtb3ZpbmcgbWFya2Rvd24uIEZvciBleGFtcGxlLAogICAgICAgIGlmIGEgVVJMIGluIHRoZSB0ZXh0IGNvbnRhaW5zIGNoYXJhY3RlcnMgc3VjaCBhcyBgYF9gYCB0aGVuIGl0IHdpbGwKICAgICAgICBiZSBsZWZ0IGFsb25lLiBEZWZhdWx0cyB0byBgYFRydWVgYC4KCiAgICBSZXR1cm5zCiAgICAtLS0tLS0tLQogICAgOmNsYXNzOmBzdHJgCiAgICAgICAgVGhlIHRleHQgd2l0aCB0aGUgbWFya2Rvd24gc3BlY2lhbCBjaGFyYWN0ZXJzIHJlbW92ZWQuCiAgICAiIiIKCiAgICBkZWYgcmVwbGFjZW1lbnQobWF0Y2gpOgogICAgICAgIGdyb3VwZGljdCA9IG1hdGNoLmdyb3VwZGljdCgpCiAgICAgICAgcmV0dXJuIGdyb3VwZGljdC5nZXQoJ3VybCcsICcnKQoKICAgIHJlZ2V4ID0gX01BUktET1dOX1NUT0NLX1JFR0VYCiAgICBpZiBpZ25vcmVfbGlua3M6CiAgICAgICAgcmVnZXggPSAnKD86JXN8JXMpJyAlIChfVVJMX1JFR0VYLCByZWdleCkKICAgIHJldHVybiByZS5zdWIocmVnZXgsIHJlcGxhY2VtZW50LCB0ZXh0LCAwLCByZS5NVUxUSUxJTkUpCgpkZWYgZXNjYXBlX21hcmtkb3duKHRleHQsICosIGFzX25lZWRlZD1GYWxzZSwgaWdub3JlX2xpbmtzPVRydWUpOgogICAgciIiIkEgaGVscGVyIGZ1bmN0aW9uIHRoYXQgZXNjYXBlcyBEaXNjb3JkJ3MgbWFya2Rvd24uCgogICAgUGFyYW1ldGVycwogICAgLS0tLS0tLS0tLS0KICAgIHRleHQ6IDpjbGFzczpgc3RyYAogICAgICAgIFRoZSB0ZXh0IHRvIGVzY2FwZSBtYXJrZG93biBmcm9tLgogICAgYXNfbmVlZGVkOiA6Y2xhc3M6YGJvb2xgCiAgICAgICAgV2hldGhlciB0byBlc2NhcGUgdGhlIG1hcmtkb3duIGNoYXJhY3RlcnMgYXMgbmVlZGVkLiBUaGlzCiAgICAgICAgbWVhbnMgdGhhdCBpdCBkb2VzIG5vdCBlc2NhcGUgZXh0cmFuZW91cyBjaGFyYWN0ZXJzIGlmIGl0J3MKICAgICAgICBub3QgbmVjZXNzYXJ5LCBlLmcuIGBgKipoZWxsbyoqYGAgaXMgZXNjYXBlZCBpbnRvIGBgXCpcKmhlbGxvKipgYAogICAgICAgIGluc3RlYWQgb2YgYGBcKlwqaGVsbG9cKlwqYGAuIE5vdGUgaG93ZXZlciB0aGF0IHRoaXMgY2FuIG9wZW4KICAgICAgICB5b3UgdXAgdG8gc29tZSBjbGV2ZXIgc3ludGF4IGFidXNlLiBEZWZhdWx0cyB0byBgYEZhbHNlYGAuCiAgICBpZ25vcmVfbGlua3M6IDpjbGFzczpgYm9vbGAKICAgICAgICBXaGV0aGVyIHRvIGxlYXZlIGxpbmtzIGFsb25lIHdoZW4gZXNjYXBpbmcgbWFya2Rvd24uIEZvciBleGFtcGxlLAogICAgICAgIGlmIGEgVVJMIGluIHRoZSB0ZXh0IGNvbnRhaW5zIGNoYXJhY3RlcnMgc3VjaCBhcyBgYF9gYCB0aGVuIGl0IHdpbGwKICAgICAgICBiZSBsZWZ0IGFsb25lLiBUaGlzIG9wdGlvbiBpcyBub3Qgc3VwcG9ydGVkIHdpdGggYGBhc19uZWVkZWRgYC4KICAgICAgICBEZWZhdWx0cyB0byBgYFRydWVgYC4KCiAgICBSZXR1cm5zCiAgICAtLS0tLS0tLQogICAgOmNsYXNzOmBzdHJgCiAgICAgICAgVGhlIHRleHQgd2l0aCB0aGUgbWFya2Rvd24gc3BlY2lhbCBjaGFyYWN0ZXJzIGVzY2FwZWQgd2l0aCBhIHNsYXNoLgogICAgIiIiCgogICAgaWYgbm90IGFzX25lZWRlZDoKICAgICAgICBkZWYgcmVwbGFjZW1lbnQobWF0Y2gpOgogICAgICAgICAgICBncm91cGRpY3QgPSBtYXRjaC5ncm91cGRpY3QoKQogICAgICAgICAgICBpc191cmwgPSBncm91cGRpY3QuZ2V0KCd1cmwnKQogICAgICAgICAgICBpZiBpc191cmw6CiAgICAgICAgICAgICAgICByZXR1cm4gaXNfdXJsCiAgICAgICAgICAgIHJldHVybiAnXFwnICsgZ3JvdXBkaWN0WydtYXJrZG93biddCgogICAgICAgIHJlZ2V4ID0gX01BUktET1dOX1NUT0NLX1JFR0VYCiAgICAgICAgaWYgaWdub3JlX2xpbmtzOgogICAgICAgICAgICByZWdleCA9ICcoPzolc3wlcyknICUgKF9VUkxfUkVHRVgsIHJlZ2V4KQogICAgICAgIHJldHVybiByZS5zdWIocmVnZXgsIHJlcGxhY2VtZW50LCB0ZXh0LCAwLCByZS5NVUxUSUxJTkUpCiAgICBlbHNlOgogICAgICAgIHRleHQgPSByZS5zdWIocidcXCcsIHInXFxcXCcsIHRleHQpCiAgICAgICAgcmV0dXJuIF9NQVJLRE9XTl9FU0NBUEVfUkVHRVguc3ViKHInXFxcMScsIHRleHQpCgpkZWYgZXNjYXBlX21lbnRpb25zKHRleHQpOgogICAgIiIiQSBoZWxwZXIgZnVuY3Rpb24gdGhhdCBlc2NhcGVzIGV2ZXJ5b25lLCBoZXJlLCByb2xlLCBhbmQgdXNlciBtZW50aW9ucy4KCiAgICAuLiBub3RlOjoKCiAgICAgICAgVGhpcyBkb2VzIG5vdCBpbmNsdWRlIGNoYW5uZWwgbWVudGlvbnMuCgogICAgLi4gbm90ZTo6CgogICAgICAgIEZvciBtb3JlIGdyYW51bGFyIGNvbnRyb2wgb3ZlciB3aGF0IG1lbnRpb25zIHNob3VsZCBiZSBlc2NhcGVkCiAgICAgICAgd2l0aGluIG1lc3NhZ2VzLCByZWZlciB0byB0aGUgOmNsYXNzOmB+ZGlzY29yZC5BbGxvd2VkTWVudGlvbnNgCiAgICAgICAgY2xhc3MuCgogICAgUGFyYW1ldGVycwogICAgLS0tLS0tLS0tLS0KICAgIHRleHQ6IDpjbGFzczpgc3RyYAogICAgICAgIFRoZSB0ZXh0IHRvIGVzY2FwZSBtZW50aW9ucyBmcm9tLgoKICAgIFJldHVybnMKICAgIC0tLS0tLS0tCiAgICA6Y2xhc3M6YHN0cmAKICAgICAgICBUaGUgdGV4dCB3aXRoIHRoZSBtZW50aW9ucyByZW1vdmVkLgogICAgIiIiCiAgICByZXR1cm4gcmUuc3ViKHInQChldmVyeW9uZXxoZXJlfFshJl0/WzAtOV17MTcsMjB9KScsICdAXHUyMDBiXFwxJywgdGV4dCkK
