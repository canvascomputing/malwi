statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/dynamodb/conditions.py
  contents:
  - name: ConditionBase.get_expression
    score: null
    code: |-
      def get_expression(self):
              return {'format': self.expression_format,
                      'operator': self.expression_operator,
                      'values': self._values}
    tokens: resume load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr _values load_const build_const_key_map return_value
    hash: cac3e0df8f4b85d672b44f04183a2030009f053b46d6620991ee907ca035964f
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/dynamodb/conditions.py: 
