statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/postgres.py
  contents:
  - name: PostgresBackend.__init__
    score: 0.0
    code: |-
      def __init__(
              self, database_url: typing.Union[DatabaseURL, str], **options: typing.Any
          ) -> None:
              self._database_url = DatabaseURL(database_url)
              self._options = options
              self._dialect = self._get_dialect()
              self._pool = None
    tokens: resume load_global DatabaseURL load_fast database_url call load_fast self store_attr _database_url load_fast options load_fast self store_attr _options load_fast self load_attr _get_dialect call load_fast self store_attr _dialect load_const load_fast self store_attr _pool return_const None
    hash: 93b4610015d2d77e0412dfd94e662abc32a1386f35d27604ada7073eff51b14f
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/postgres.py
  : 
