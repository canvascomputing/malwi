statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/response.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      from __future__ import absolute_import
      from contextlib import contextmanager
      import zlib
      import io
      import logging
      from socket import timeout as SocketTimeout
      from socket import error as SocketError

      from ._collections import HTTPHeaderDict
      from .exceptions import (
          BodyNotHttplibCompatible, ProtocolError, DecodeError, ReadTimeoutError,
          ResponseNotChunked, IncompleteRead, InvalidHeader
      )
      from .packages.six import string_types as basestring, PY3
      from .packages.six.moves import http_client as httplib
      from .connection import HTTPException, BaseSSLError
      from .util.response import is_fp_closed, is_response_to_head

      log = logging.getLogger(__name__)


      class DeflateDecoder(object):

          def __init__(self):
              self._first_try = True
              self._data = b''
              self._obj = zlib.decompressobj()

          def __getattr__(self, name):
              return getattr(self._obj, name)

          def decompress(self, data):
              if not data:
                  return data

              if not self._first_try:
                  return self._obj.decompress(data)

              self._data += data
              try:
                  decompressed = self._obj.decompress(data)
                  if decompressed:
                      self._first_try = False
                      self._data = None
                  return decompressed
              except zlib.error:
                  self._first_try = False
                  self._obj = zlib.decompressobj(-zlib.MAX_WBITS)
                  try:
                      return self.decompress(self._data)
                  finally:
                      self._data = None
    tokens: resume load_const INTEGER load_const import_name __future__ import_from absolute_import store_name absolute_import pop_top load_const INTEGER load_const import_name contextlib import_from contextmanager store_name contextmanager pop_top load_const INTEGER load_const import_name zlib store_name zlib load_const INTEGER load_const import_name io store_name io load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name socket import_from timeout store_name SocketTimeout pop_top load_const INTEGER load_const import_name socket import_from error store_name SocketError pop_top load_const INTEGER load_const import_name _collections import_from HTTPHeaderDict store_name HTTPHeaderDict pop_top load_const INTEGER load_const import_name exceptions import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH import_from ProtocolError store_name ProtocolError import_from DecodeError store_name DecodeError import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from IncompleteRead store_name IncompleteRead import_from InvalidHeader store_name InvalidHeader pop_top load_const INTEGER load_const import_name packages.six import_from string_types store_name basestring import_from PY3 store_name PY3 pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from http_client store_name httplib pop_top load_const INTEGER load_const import_name connection import_from HTTPException store_name HTTPException import_from BaseSSLError store_name BaseSSLError pop_top load_const INTEGER load_const import_name util.response import_from is_fp_closed store_name is_fp_closed import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_name logging load_attr getLogger load_name __name__ call store_name log push_null load_build_class load_const OBJECT make_function load_const DeflateDecoder load_name object call store_name DeflateDecoder push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name object call store_name STRING_BASE64_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const GzipDecoder load_name object call store_name GzipDecoder push_null load_build_class load_const OBJECT make_function load_const MultiDecoder load_name object call store_name MultiDecoder load_const OBJECT make_function store_name _get_decoder push_null load_build_class load_const OBJECT make_function load_const HTTPResponse load_name io load_attr IOBase call store_name HTTPResponse return_const None
    hash: 83c47be6696b1ae08a05f4b12514b2cb6848061a0439a5bdc662e916982813be
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/response.py
  : 
