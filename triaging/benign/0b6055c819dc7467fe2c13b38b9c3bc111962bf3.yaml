statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/util/selectors.py
  contents:
  - name: _SelectorMapping.__init__
    score: 0.0
    code: |-
      def __init__(self, selector):
              self._selector = selector
    tokens: resume load_fast selector load_fast self store_attr _selector return_const None
    hash: ab89420e9ca5a8040f31c6981e7798b5425a9a215d242c1a462fbe231e62f647
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/util/selectors.py
  : 
