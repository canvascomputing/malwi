statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_tls.py
  contents:
  - name: get_dh_params_length
    score: 0.0
    code: |-
      def get_dh_params_length(server_handshake_bytes):
          """
          Determines the length of the DH params from the ServerKeyExchange

          :param server_handshake_bytes:
              A byte string of the handshake data received from the server

          :return:
              None or an integer of the bit size of the DH parameters
          """

          output = None

          dh_params_bytes = None

          for record_type, _, record_data in parse_tls_records(server_handshake_bytes):
              if record_type != b'\x16':
                  continue
              for message_type, message_data in parse_handshake_messages(record_data):
                  if message_type == b'\x0c':
                      dh_params_bytes = message_data
                      break
              if dh_params_bytes:
                  break

          if dh_params_bytes:
              output = int_from_bytes(dh_params_bytes[0:2]) * 8

          return output
    tokens: resume load_const store_fast output load_const store_fast dh_params_bytes load_global STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH call get_iter for_iter TO_NUMBER unpack_sequence store_fast record_type store_fast _ store_fast record_data load_fast record_type load_const compare_op != pop_jump_if_false TO_NUMBER jump_backward TO_NUMBER load_global STRING_LEN_S_ENT_HIGH load_fast record_data call get_iter for_iter TO_NUMBER unpack_sequence store_fast message_type store_fast message_data load_fast message_type load_const compare_op == pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_fast message_data store_fast dh_params_bytes pop_top jump_forward TO_NUMBER end_for load_fast dh_params_bytes pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER pop_top jump_forward TO_NUMBER end_for load_fast dh_params_bytes pop_jump_if_false TO_NUMBER load_global int_from_bytes load_fast dh_params_bytes load_const INTEGER load_const INTEGER binary_slice call load_const INTEGER binary_op * store_fast output load_fast output return_value
    hash: 228069cd2416982fb74657159ee47d8ed6046de448acf4d0a4fd6117ccbcd076
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_tls.py: 
