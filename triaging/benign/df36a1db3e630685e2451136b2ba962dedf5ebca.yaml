statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/socks.py
  contents:
  - name: SOCKSConnection._new_conn
    score: 0.0
    code: |-
      def _new_conn(self):
              """
              Establish a new connection via the SOCKS proxy.
              """
              extra_kw = {}
              if self.source_address:
                  extra_kw['source_address'] = self.source_address

              if self.socket_options:
                  extra_kw['socket_options'] = self.socket_options

              try:
                  conn = socks.create_connection(
                      (self.host, self.port),
                      proxy_type=self._socks_options['socks_version'],
                      proxy_addr=self._socks_options['proxy_host'],
                      proxy_port=self._socks_options['proxy_port'],
                      proxy_username=self._socks_options['username'],
                      proxy_password=self._socks_options['password'],
                      proxy_rdns=self._socks_options['rdns'],
                      timeout=self.timeout,
                      **extra_kw
                  )

              except SocketTimeout as e:
                  raise ConnectTimeoutError(
                      self, "Connection to %s timed out. (connect timeout=%s)" %
                      (self.host, self.timeout))

              except socks.ProxyError as e:
                  # This is fragile as hell, but it seems to be the only way to raise
                  # useful errors here.
                  if e.socket_err:
                      error = e.socket_err
                      if isinstance(error, SocketTimeout):
                          raise ConnectTimeoutError(
                              self,
                              "Connection to %s timed out. (connect timeout=%s)" %
                              (self.host, self.timeout)
                          )
                      else:
                          raise NewConnectionError(
                              self,
                              "Failed to establish a new connection: %s" % error
                          )
                  else:
                      raise NewConnectionError(
                          self,
                          "Failed to establish a new connection: %s" % e
                      )

              except SocketError as e:  # Defensive: PySocks should catch all these.
                  raise NewConnectionError(
                      self, "Failed to establish a new connection: %s" % e)

              return conn
    tokens: resume build_map store_fast extra_kw load_fast self load_attr source_address pop_jump_if_false TO_NUMBER load_fast self load_attr source_address load_fast extra_kw load_const source_address store_subscr load_fast self load_attr socket_options pop_jump_if_false TO_NUMBER load_fast self load_attr socket_options load_fast extra_kw load_const socket_options store_subscr nop load_global socks load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr host load_fast self load_attr port build_tuple build_tuple load_fast self load_attr _socks_options load_const socks_version binary_subscr load_fast self load_attr _socks_options load_const proxy_host binary_subscr load_fast self load_attr _socks_options load_const proxy_port binary_subscr load_fast self load_attr _socks_options load_const username binary_subscr load_fast self load_attr _socks_options load_const password binary_subscr load_fast self load_attr _socks_options load_const rdns binary_subscr load_fast self load_attr timeout load_const build_const_key_map load_fast extra_kw dict_merge call_function_ex store_fast conn load_fast conn return_value push_exc_info load_global SocketTimeout check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global STRING_LEN_S_ENT_HIGH load_fast self load_const Connection to load_fast self load_attr host format_value INTEGER load_const STRING_LEN_S_ENT_HIGH load_fast self load_attr timeout format_value INTEGER load_const ) build_string call raise_varargs load_const store_fast e delete_fast e reraise load_global socks load_attr ProxyError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_fast e load_attr socket_err pop_jump_if_false TO_NUMBER load_fast e load_attr socket_err store_fast error load_global isinstance load_fast error load_global SocketTimeout call pop_jump_if_false TO_NUMBER load_global STRING_LEN_S_ENT_HIGH load_fast self load_const Connection to load_fast self load_attr host format_value INTEGER load_const STRING_LEN_S_ENT_HIGH load_fast self load_attr timeout format_value INTEGER load_const ) build_string call raise_varargs load_global STRING_LEN_S_ENT_HIGH load_fast self load_const STRING_LEN_S_ENT_HIGH load_fast error binary_op % call raise_varargs load_global STRING_LEN_S_ENT_HIGH load_fast self load_const STRING_LEN_S_ENT_HIGH load_fast e binary_op % call raise_varargs load_const store_fast e delete_fast e reraise load_global SocketError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global STRING_LEN_S_ENT_HIGH load_fast self load_const STRING_LEN_S_ENT_HIGH load_fast e binary_op % call raise_varargs load_const store_fast e delete_fast e reraise reraise copy pop_except reraise
    hash: 756a278d05939ba24ef7a02b4df3ceafa3b094b989916e4909be8e0ad0e58390
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/socks.py: 
