statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/contrib/pyopenssl.py
  contents:
  - name: PyOpenSSLContext
    score: 0.0
    code: |-
      def makefile(self, mode, bufsize=-1):
              self._makefile_refs += 1
              return _fileobject(self, mode, bufsize, close=True)
    tokens: resume load_name __name__ store_name __module__ load_const STRING_BASE64_LEN_S_ENT_HIGH store_name __qualname__ load_const STRING_LEN_M_ENT_HIGH store_name __doc__ load_const OBJECT make_function store_name __init__ load_name property load_const OBJECT make_function call store_name options load_name options load_attr setter load_const OBJECT make_function call store_name options load_name property load_const OBJECT make_function call store_name verify_mode load_name verify_mode load_attr setter load_const OBJECT make_function call store_name verify_mode load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name set_ciphers load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const load_const OBJECT make_function defaults store_name load_cert_chain nop nop nop load_const load_const OBJECT make_function defaults store_name wrap_socket return_const None
    hash: f59ed784cfd95ba2c11e42d491172f5d4ecb33a1994787d4a074a4300898c165
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/contrib/pyopenssl.py
  : 
