statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/s3/inject.py
  contents:
  - name: bucket_load
    score: 0.0
    code: |-
      def bucket_load(self, *args, **kwargs):
          """
          Calls s3.Client.list_buckets() to update the attributes of the Bucket
          resource.
          """
          # The docstring above is phrased this way to match what the autogenerated
          # docs produce.

          # We can't actually get the bucket's attributes from a HeadBucket,
          # so we need to use a ListBuckets and search for our bucket.
          # However, we may fail if we lack permissions to ListBuckets
          # or the bucket is in another account. In which case, creation_date
          # will be None.
          self.meta.data = {}
          try:
              response = self.meta.client.list_buckets()
              for bucket_data in response['Buckets']:
                  if bucket_data['Name'] == self.name:
                      self.meta.data = bucket_data
                      break
          except ClientError as e:
              if not e.response.get('Error', {}).get('Code') == 'AccessDenied':
                  raise
    tokens: resume build_map load_fast self load_attr meta store_attr data nop load_fast self load_attr meta load_attr client load_attr list_buckets call store_fast response load_fast response load_const Buckets binary_subscr get_iter for_iter TO_NUMBER store_fast bucket_data load_fast bucket_data load_const Name binary_subscr load_fast self load_attr name compare_op == pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_fast bucket_data load_fast self load_attr meta store_attr data pop_top return_const None end_for return_const None push_exc_info load_global ClientError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_fast e load_attr response load_attr get load_const Error build_map call load_attr get load_const Code call load_const AccessDenied compare_op == pop_jump_if_true TO_NUMBER raise_varargs pop_except load_const store_fast e delete_fast e return_const None load_const store_fast e delete_fast e reraise reraise copy pop_except reraise
    hash: f0ab83be7b5fec91e4d71ce364e2f007d2fd7696c8c24f3b6103e7caae3fb891
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/s3/inject.py: IyBDb3B5cmlnaHQgMjAxNSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuIFlvdQojIG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YKIyB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0CiMKIyBodHRwczovL2F3cy5hbWF6b24uY29tL2FwYWNoZTIuMC8KIwojIG9yIGluIHRoZSAibGljZW5zZSIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMKIyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgojIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYwojIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCmZyb20gYm90b2NvcmUuZXhjZXB0aW9ucyBpbXBvcnQgQ2xpZW50RXJyb3IKCmZyb20gYm90bzMuczMudHJhbnNmZXIgaW1wb3J0IGNyZWF0ZV90cmFuc2Zlcl9tYW5hZ2VyCmZyb20gYm90bzMuczMudHJhbnNmZXIgaW1wb3J0IFRyYW5zZmVyQ29uZmlnLCBTM1RyYW5zZmVyCmZyb20gYm90bzMuczMudHJhbnNmZXIgaW1wb3J0IFByb2dyZXNzQ2FsbGJhY2tJbnZva2VyCmZyb20gYm90bzMgaW1wb3J0IHV0aWxzCgoKZGVmIGluamVjdF9zM190cmFuc2Zlcl9tZXRob2RzKGNsYXNzX2F0dHJpYnV0ZXMsICoqa3dhcmdzKToKICAgIHV0aWxzLmluamVjdF9hdHRyaWJ1dGUoY2xhc3NfYXR0cmlidXRlcywgJ3VwbG9hZF9maWxlJywgdXBsb2FkX2ZpbGUpCiAgICB1dGlscy5pbmplY3RfYXR0cmlidXRlKGNsYXNzX2F0dHJpYnV0ZXMsICdkb3dubG9hZF9maWxlJywgZG93bmxvYWRfZmlsZSkKICAgIHV0aWxzLmluamVjdF9hdHRyaWJ1dGUoY2xhc3NfYXR0cmlidXRlcywgJ2NvcHknLCBjb3B5KQogICAgdXRpbHMuaW5qZWN0X2F0dHJpYnV0ZShjbGFzc19hdHRyaWJ1dGVzLCAndXBsb2FkX2ZpbGVvYmonLCB1cGxvYWRfZmlsZW9iaikKICAgIHV0aWxzLmluamVjdF9hdHRyaWJ1dGUoCiAgICAgICAgY2xhc3NfYXR0cmlidXRlcywgJ2Rvd25sb2FkX2ZpbGVvYmonLCBkb3dubG9hZF9maWxlb2JqKQoKCmRlZiBpbmplY3RfYnVja2V0X21ldGhvZHMoY2xhc3NfYXR0cmlidXRlcywgKiprd2FyZ3MpOgogICAgdXRpbHMuaW5qZWN0X2F0dHJpYnV0ZShjbGFzc19hdHRyaWJ1dGVzLCAnbG9hZCcsIGJ1Y2tldF9sb2FkKQogICAgdXRpbHMuaW5qZWN0X2F0dHJpYnV0ZShjbGFzc19hdHRyaWJ1dGVzLCAndXBsb2FkX2ZpbGUnLCBidWNrZXRfdXBsb2FkX2ZpbGUpCiAgICB1dGlscy5pbmplY3RfYXR0cmlidXRlKAogICAgICAgIGNsYXNzX2F0dHJpYnV0ZXMsICdkb3dubG9hZF9maWxlJywgYnVja2V0X2Rvd25sb2FkX2ZpbGUpCiAgICB1dGlscy5pbmplY3RfYXR0cmlidXRlKGNsYXNzX2F0dHJpYnV0ZXMsICdjb3B5JywgYnVja2V0X2NvcHkpCiAgICB1dGlscy5pbmplY3RfYXR0cmlidXRlKAogICAgICAgIGNsYXNzX2F0dHJpYnV0ZXMsICd1cGxvYWRfZmlsZW9iaicsIGJ1Y2tldF91cGxvYWRfZmlsZW9iaikKICAgIHV0aWxzLmluamVjdF9hdHRyaWJ1dGUoCiAgICAgICAgY2xhc3NfYXR0cmlidXRlcywgJ2Rvd25sb2FkX2ZpbGVvYmonLCBidWNrZXRfZG93bmxvYWRfZmlsZW9iaikKCgpkZWYgaW5qZWN0X29iamVjdF9tZXRob2RzKGNsYXNzX2F0dHJpYnV0ZXMsICoqa3dhcmdzKToKICAgIHV0aWxzLmluamVjdF9hdHRyaWJ1dGUoY2xhc3NfYXR0cmlidXRlcywgJ3VwbG9hZF9maWxlJywgb2JqZWN0X3VwbG9hZF9maWxlKQogICAgdXRpbHMuaW5qZWN0X2F0dHJpYnV0ZSgKICAgICAgICBjbGFzc19hdHRyaWJ1dGVzLCAnZG93bmxvYWRfZmlsZScsIG9iamVjdF9kb3dubG9hZF9maWxlKQogICAgdXRpbHMuaW5qZWN0X2F0dHJpYnV0ZShjbGFzc19hdHRyaWJ1dGVzLCAnY29weScsIG9iamVjdF9jb3B5KQogICAgdXRpbHMuaW5qZWN0X2F0dHJpYnV0ZSgKICAgICAgICBjbGFzc19hdHRyaWJ1dGVzLCAndXBsb2FkX2ZpbGVvYmonLCBvYmplY3RfdXBsb2FkX2ZpbGVvYmopCiAgICB1dGlscy5pbmplY3RfYXR0cmlidXRlKAogICAgICAgIGNsYXNzX2F0dHJpYnV0ZXMsICdkb3dubG9hZF9maWxlb2JqJywgb2JqZWN0X2Rvd25sb2FkX2ZpbGVvYmopCgoKZGVmIGluamVjdF9vYmplY3Rfc3VtbWFyeV9tZXRob2RzKGNsYXNzX2F0dHJpYnV0ZXMsICoqa3dhcmdzKToKICAgIHV0aWxzLmluamVjdF9hdHRyaWJ1dGUoY2xhc3NfYXR0cmlidXRlcywgJ2xvYWQnLCBvYmplY3Rfc3VtbWFyeV9sb2FkKQoKCmRlZiBidWNrZXRfbG9hZChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgIiIiCiAgICBDYWxscyBzMy5DbGllbnQubGlzdF9idWNrZXRzKCkgdG8gdXBkYXRlIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBCdWNrZXQKICAgIHJlc291cmNlLgogICAgIiIiCiAgICAjIFRoZSBkb2NzdHJpbmcgYWJvdmUgaXMgcGhyYXNlZCB0aGlzIHdheSB0byBtYXRjaCB3aGF0IHRoZSBhdXRvZ2VuZXJhdGVkCiAgICAjIGRvY3MgcHJvZHVjZS4KCiAgICAjIFdlIGNhbid0IGFjdHVhbGx5IGdldCB0aGUgYnVja2V0J3MgYXR0cmlidXRlcyBmcm9tIGEgSGVhZEJ1Y2tldCwKICAgICMgc28gd2UgbmVlZCB0byB1c2UgYSBMaXN0QnVja2V0cyBhbmQgc2VhcmNoIGZvciBvdXIgYnVja2V0LgogICAgIyBIb3dldmVyLCB3ZSBtYXkgZmFpbCBpZiB3ZSBsYWNrIHBlcm1pc3Npb25zIHRvIExpc3RCdWNrZXRzCiAgICAjIG9yIHRoZSBidWNrZXQgaXMgaW4gYW5vdGhlciBhY2NvdW50LiBJbiB3aGljaCBjYXNlLCBjcmVhdGlvbl9kYXRlCiAgICAjIHdpbGwgYmUgTm9uZS4KICAgIHNlbGYubWV0YS5kYXRhID0ge30KICAgIHRyeToKICAgICAgICByZXNwb25zZSA9IHNlbGYubWV0YS5jbGllbnQubGlzdF9idWNrZXRzKCkKICAgICAgICBmb3IgYnVja2V0X2RhdGEgaW4gcmVzcG9uc2VbJ0J1Y2tldHMnXToKICAgICAgICAgICAgaWYgYnVja2V0X2RhdGFbJ05hbWUnXSA9PSBzZWxmLm5hbWU6CiAgICAgICAgICAgICAgICBzZWxmLm1ldGEuZGF0YSA9IGJ1Y2tldF9kYXRhCiAgICAgICAgICAgICAgICBicmVhawogICAgZXhjZXB0IENsaWVudEVycm9yIGFzIGU6CiAgICAgICAgaWYgbm90IGUucmVzcG9uc2UuZ2V0KCdFcnJvcicsIHt9KS5nZXQoJ0NvZGUnKSA9PSAnQWNjZXNzRGVuaWVkJzoKICAgICAgICAgICAgcmFpc2UKCgpkZWYgb2JqZWN0X3N1bW1hcnlfbG9hZChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgIiIiCiAgICBDYWxscyBzMy5DbGllbnQuaGVhZF9vYmplY3QgdG8gdXBkYXRlIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBPYmplY3RTdW1tYXJ5CiAgICByZXNvdXJjZS4KICAgICIiIgogICAgcmVzcG9uc2UgPSBzZWxmLm1ldGEuY2xpZW50LmhlYWRfb2JqZWN0KAogICAgICAgIEJ1Y2tldD1zZWxmLmJ1Y2tldF9uYW1lLCBLZXk9c2VsZi5rZXkpCiAgICBpZiAnQ29udGVudExlbmd0aCcgaW4gcmVzcG9uc2U6CiAgICAgICAgcmVzcG9uc2VbJ1NpemUnXSA9IHJlc3BvbnNlLnBvcCgnQ29udGVudExlbmd0aCcpCiAgICBzZWxmLm1ldGEuZGF0YSA9IHJlc3BvbnNlCgoKZGVmIHVwbG9hZF9maWxlKHNlbGYsIEZpbGVuYW1lLCBCdWNrZXQsIEtleSwgRXh0cmFBcmdzPU5vbmUsCiAgICAgICAgICAgICAgICBDYWxsYmFjaz1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJVcGxvYWQgYSBmaWxlIHRvIGFuIFMzIG9iamVjdC4KCiAgICBVc2FnZTo6CgogICAgICAgIGltcG9ydCBib3RvMwogICAgICAgIHMzID0gYm90bzMucmVzb3VyY2UoJ3MzJykKICAgICAgICBzMy5tZXRhLmNsaWVudC51cGxvYWRfZmlsZSgnL3RtcC9oZWxsby50eHQnLCAnbXlidWNrZXQnLCAnaGVsbG8udHh0JykKCiAgICBTaW1pbGFyIGJlaGF2aW9yIGFzIFMzVHJhbnNmZXIncyB1cGxvYWRfZmlsZSgpIG1ldGhvZCwKICAgIGV4Y2VwdCB0aGF0IHBhcmFtZXRlcnMgYXJlIGNhcGl0YWxpemVkLiBEZXRhaWxlZCBleGFtcGxlcyBjYW4gYmUgZm91bmQgYXQKICAgIDpyZWY6YFMzVHJhbnNmZXIncyBVc2FnZSA8cmVmX3MzdHJhbnNmZXJfdXNhZ2U+YC4KCiAgICA6dHlwZSBGaWxlbmFtZTogc3RyCiAgICA6cGFyYW0gRmlsZW5hbWU6IFRoZSBwYXRoIHRvIHRoZSBmaWxlIHRvIHVwbG9hZC4KCiAgICA6dHlwZSBCdWNrZXQ6IHN0cgogICAgOnBhcmFtIEJ1Y2tldDogVGhlIG5hbWUgb2YgdGhlIGJ1Y2tldCB0byB1cGxvYWQgdG8uCgogICAgOnR5cGUgS2V5OiBzdHIKICAgIDpwYXJhbSBLZXk6IFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gdXBsb2FkIHRvLgoKICAgIDp0eXBlIEV4dHJhQXJnczogZGljdAogICAgOnBhcmFtIEV4dHJhQXJnczogRXh0cmEgYXJndW1lbnRzIHRoYXQgbWF5IGJlIHBhc3NlZCB0byB0aGUKICAgICAgICBjbGllbnQgb3BlcmF0aW9uLgoKICAgIDp0eXBlIENhbGxiYWNrOiBmdW5jdGlvbgogICAgOnBhcmFtIENhbGxiYWNrOiBBIG1ldGhvZCB3aGljaCB0YWtlcyBhIG51bWJlciBvZiBieXRlcyB0cmFuc2ZlcnJlZCB0bwogICAgICAgIGJlIHBlcmlvZGljYWxseSBjYWxsZWQgZHVyaW5nIHRoZSB1cGxvYWQuCgogICAgOnR5cGUgQ29uZmlnOiBib3RvMy5zMy50cmFuc2Zlci5UcmFuc2ZlckNvbmZpZwogICAgOnBhcmFtIENvbmZpZzogVGhlIHRyYW5zZmVyIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZCB3aGVuIHBlcmZvcm1pbmcgdGhlCiAgICAgICAgdHJhbnNmZXIuCiAgICAiIiIKICAgIHdpdGggUzNUcmFuc2ZlcihzZWxmLCBDb25maWcpIGFzIHRyYW5zZmVyOgogICAgICAgIHJldHVybiB0cmFuc2Zlci51cGxvYWRfZmlsZSgKICAgICAgICAgICAgZmlsZW5hbWU9RmlsZW5hbWUsIGJ1Y2tldD1CdWNrZXQsIGtleT1LZXksCiAgICAgICAgICAgIGV4dHJhX2FyZ3M9RXh0cmFBcmdzLCBjYWxsYmFjaz1DYWxsYmFjaykKCgpkZWYgZG93bmxvYWRfZmlsZShzZWxmLCBCdWNrZXQsIEtleSwgRmlsZW5hbWUsIEV4dHJhQXJncz1Ob25lLAogICAgICAgICAgICAgICAgICBDYWxsYmFjaz1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJEb3dubG9hZCBhbiBTMyBvYmplY3QgdG8gYSBmaWxlLgoKICAgIFVzYWdlOjoKCiAgICAgICAgaW1wb3J0IGJvdG8zCiAgICAgICAgczMgPSBib3RvMy5yZXNvdXJjZSgnczMnKQogICAgICAgIHMzLm1ldGEuY2xpZW50LmRvd25sb2FkX2ZpbGUoJ215YnVja2V0JywgJ2hlbGxvLnR4dCcsICcvdG1wL2hlbGxvLnR4dCcpCgogICAgU2ltaWxhciBiZWhhdmlvciBhcyBTM1RyYW5zZmVyJ3MgZG93bmxvYWRfZmlsZSgpIG1ldGhvZCwKICAgIGV4Y2VwdCB0aGF0IHBhcmFtZXRlcnMgYXJlIGNhcGl0YWxpemVkLiBEZXRhaWxlZCBleGFtcGxlcyBjYW4gYmUgZm91bmQgYXQKICAgIDpyZWY6YFMzVHJhbnNmZXIncyBVc2FnZSA8cmVmX3MzdHJhbnNmZXJfdXNhZ2U+YC4KCiAgICA6dHlwZSBCdWNrZXQ6IHN0cgogICAgOnBhcmFtIEJ1Y2tldDogVGhlIG5hbWUgb2YgdGhlIGJ1Y2tldCB0byBkb3dubG9hZCBmcm9tLgoKICAgIDp0eXBlIEtleTogc3RyCiAgICA6cGFyYW0gS2V5OiBUaGUgbmFtZSBvZiB0aGUga2V5IHRvIGRvd25sb2FkIGZyb20uCgogICAgOnR5cGUgRmlsZW5hbWU6IHN0cgogICAgOnBhcmFtIEZpbGVuYW1lOiBUaGUgcGF0aCB0byB0aGUgZmlsZSB0byBkb3dubG9hZCB0by4KCiAgICA6dHlwZSBFeHRyYUFyZ3M6IGRpY3QKICAgIDpwYXJhbSBFeHRyYUFyZ3M6IEV4dHJhIGFyZ3VtZW50cyB0aGF0IG1heSBiZSBwYXNzZWQgdG8gdGhlCiAgICAgICAgY2xpZW50IG9wZXJhdGlvbi4KCiAgICA6dHlwZSBDYWxsYmFjazogZnVuY3Rpb24KICAgIDpwYXJhbSBDYWxsYmFjazogQSBtZXRob2Qgd2hpY2ggdGFrZXMgYSBudW1iZXIgb2YgYnl0ZXMgdHJhbnNmZXJyZWQgdG8KICAgICAgICBiZSBwZXJpb2RpY2FsbHkgY2FsbGVkIGR1cmluZyB0aGUgZG93bmxvYWQuCgogICAgOnR5cGUgQ29uZmlnOiBib3RvMy5zMy50cmFuc2Zlci5UcmFuc2ZlckNvbmZpZwogICAgOnBhcmFtIENvbmZpZzogVGhlIHRyYW5zZmVyIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZCB3aGVuIHBlcmZvcm1pbmcgdGhlCiAgICAgICAgdHJhbnNmZXIuCiAgICAiIiIKICAgIHdpdGggUzNUcmFuc2ZlcihzZWxmLCBDb25maWcpIGFzIHRyYW5zZmVyOgogICAgICAgIHJldHVybiB0cmFuc2Zlci5kb3dubG9hZF9maWxlKAogICAgICAgICAgICBidWNrZXQ9QnVja2V0LCBrZXk9S2V5LCBmaWxlbmFtZT1GaWxlbmFtZSwKICAgICAgICAgICAgZXh0cmFfYXJncz1FeHRyYUFyZ3MsIGNhbGxiYWNrPUNhbGxiYWNrKQoKCmRlZiBidWNrZXRfdXBsb2FkX2ZpbGUoc2VsZiwgRmlsZW5hbWUsIEtleSwKICAgICAgICAgICAgICAgICAgICAgICBFeHRyYUFyZ3M9Tm9uZSwgQ2FsbGJhY2s9Tm9uZSwgQ29uZmlnPU5vbmUpOgogICAgIiIiVXBsb2FkIGEgZmlsZSB0byBhbiBTMyBvYmplY3QuCgogICAgVXNhZ2U6OgoKICAgICAgICBpbXBvcnQgYm90bzMKICAgICAgICBzMyA9IGJvdG8zLnJlc291cmNlKCdzMycpCiAgICAgICAgczMuQnVja2V0KCdteWJ1Y2tldCcpLnVwbG9hZF9maWxlKCcvdG1wL2hlbGxvLnR4dCcsICdoZWxsby50eHQnKQoKICAgIFNpbWlsYXIgYmVoYXZpb3IgYXMgUzNUcmFuc2ZlcidzIHVwbG9hZF9maWxlKCkgbWV0aG9kLAogICAgZXhjZXB0IHRoYXQgcGFyYW1ldGVycyBhcmUgY2FwaXRhbGl6ZWQuIERldGFpbGVkIGV4YW1wbGVzIGNhbiBiZSBmb3VuZCBhdAogICAgOnJlZjpgUzNUcmFuc2ZlcidzIFVzYWdlIDxyZWZfczN0cmFuc2Zlcl91c2FnZT5gLgoKICAgIDp0eXBlIEZpbGVuYW1lOiBzdHIKICAgIDpwYXJhbSBGaWxlbmFtZTogVGhlIHBhdGggdG8gdGhlIGZpbGUgdG8gdXBsb2FkLgoKICAgIDp0eXBlIEtleTogc3RyCiAgICA6cGFyYW0gS2V5OiBUaGUgbmFtZSBvZiB0aGUga2V5IHRvIHVwbG9hZCB0by4KCiAgICA6dHlwZSBFeHRyYUFyZ3M6IGRpY3QKICAgIDpwYXJhbSBFeHRyYUFyZ3M6IEV4dHJhIGFyZ3VtZW50cyB0aGF0IG1heSBiZSBwYXNzZWQgdG8gdGhlCiAgICAgICAgY2xpZW50IG9wZXJhdGlvbi4KCiAgICA6dHlwZSBDYWxsYmFjazogZnVuY3Rpb24KICAgIDpwYXJhbSBDYWxsYmFjazogQSBtZXRob2Qgd2hpY2ggdGFrZXMgYSBudW1iZXIgb2YgYnl0ZXMgdHJhbnNmZXJyZWQgdG8KICAgICAgICBiZSBwZXJpb2RpY2FsbHkgY2FsbGVkIGR1cmluZyB0aGUgdXBsb2FkLgoKICAgIDp0eXBlIENvbmZpZzogYm90bzMuczMudHJhbnNmZXIuVHJhbnNmZXJDb25maWcKICAgIDpwYXJhbSBDb25maWc6IFRoZSB0cmFuc2ZlciBjb25maWd1cmF0aW9uIHRvIGJlIHVzZWQgd2hlbiBwZXJmb3JtaW5nIHRoZQogICAgICAgIHRyYW5zZmVyLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5tZXRhLmNsaWVudC51cGxvYWRfZmlsZSgKICAgICAgICBGaWxlbmFtZT1GaWxlbmFtZSwgQnVja2V0PXNlbGYubmFtZSwgS2V5PUtleSwKICAgICAgICBFeHRyYUFyZ3M9RXh0cmFBcmdzLCBDYWxsYmFjaz1DYWxsYmFjaywgQ29uZmlnPUNvbmZpZykKCgpkZWYgYnVja2V0X2Rvd25sb2FkX2ZpbGUoc2VsZiwgS2V5LCBGaWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgIEV4dHJhQXJncz1Ob25lLCBDYWxsYmFjaz1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJEb3dubG9hZCBhbiBTMyBvYmplY3QgdG8gYSBmaWxlLgoKICAgIFVzYWdlOjoKCiAgICAgICAgaW1wb3J0IGJvdG8zCiAgICAgICAgczMgPSBib3RvMy5yZXNvdXJjZSgnczMnKQogICAgICAgIHMzLkJ1Y2tldCgnbXlidWNrZXQnKS5kb3dubG9hZF9maWxlKCdoZWxsby50eHQnLCAnL3RtcC9oZWxsby50eHQnKQoKICAgIFNpbWlsYXIgYmVoYXZpb3IgYXMgUzNUcmFuc2ZlcidzIGRvd25sb2FkX2ZpbGUoKSBtZXRob2QsCiAgICBleGNlcHQgdGhhdCBwYXJhbWV0ZXJzIGFyZSBjYXBpdGFsaXplZC4gRGV0YWlsZWQgZXhhbXBsZXMgY2FuIGJlIGZvdW5kIGF0CiAgICA6cmVmOmBTM1RyYW5zZmVyJ3MgVXNhZ2UgPHJlZl9zM3RyYW5zZmVyX3VzYWdlPmAuCgogICAgOnR5cGUgS2V5OiBzdHIKICAgIDpwYXJhbSBLZXk6IFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gZG93bmxvYWQgZnJvbS4KCiAgICA6dHlwZSBGaWxlbmFtZTogc3RyCiAgICA6cGFyYW0gRmlsZW5hbWU6IFRoZSBwYXRoIHRvIHRoZSBmaWxlIHRvIGRvd25sb2FkIHRvLgoKICAgIDp0eXBlIEV4dHJhQXJnczogZGljdAogICAgOnBhcmFtIEV4dHJhQXJnczogRXh0cmEgYXJndW1lbnRzIHRoYXQgbWF5IGJlIHBhc3NlZCB0byB0aGUKICAgICAgICBjbGllbnQgb3BlcmF0aW9uLgoKICAgIDp0eXBlIENhbGxiYWNrOiBmdW5jdGlvbgogICAgOnBhcmFtIENhbGxiYWNrOiBBIG1ldGhvZCB3aGljaCB0YWtlcyBhIG51bWJlciBvZiBieXRlcyB0cmFuc2ZlcnJlZCB0bwogICAgICAgIGJlIHBlcmlvZGljYWxseSBjYWxsZWQgZHVyaW5nIHRoZSBkb3dubG9hZC4KCiAgICA6dHlwZSBDb25maWc6IGJvdG8zLnMzLnRyYW5zZmVyLlRyYW5zZmVyQ29uZmlnCiAgICA6cGFyYW0gQ29uZmlnOiBUaGUgdHJhbnNmZXIgY29uZmlndXJhdGlvbiB0byBiZSB1c2VkIHdoZW4gcGVyZm9ybWluZyB0aGUKICAgICAgICB0cmFuc2Zlci4KICAgICIiIgogICAgcmV0dXJuIHNlbGYubWV0YS5jbGllbnQuZG93bmxvYWRfZmlsZSgKICAgICAgICBCdWNrZXQ9c2VsZi5uYW1lLCBLZXk9S2V5LCBGaWxlbmFtZT1GaWxlbmFtZSwKICAgICAgICBFeHRyYUFyZ3M9RXh0cmFBcmdzLCBDYWxsYmFjaz1DYWxsYmFjaywgQ29uZmlnPUNvbmZpZykKCgpkZWYgb2JqZWN0X3VwbG9hZF9maWxlKHNlbGYsIEZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgIEV4dHJhQXJncz1Ob25lLCBDYWxsYmFjaz1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJVcGxvYWQgYSBmaWxlIHRvIGFuIFMzIG9iamVjdC4KCiAgICBVc2FnZTo6CgogICAgICAgIGltcG9ydCBib3RvMwogICAgICAgIHMzID0gYm90bzMucmVzb3VyY2UoJ3MzJykKICAgICAgICBzMy5PYmplY3QoJ215YnVja2V0JywgJ2hlbGxvLnR4dCcpLnVwbG9hZF9maWxlKCcvdG1wL2hlbGxvLnR4dCcpCgogICAgU2ltaWxhciBiZWhhdmlvciBhcyBTM1RyYW5zZmVyJ3MgdXBsb2FkX2ZpbGUoKSBtZXRob2QsCiAgICBleGNlcHQgdGhhdCBwYXJhbWV0ZXJzIGFyZSBjYXBpdGFsaXplZC4gRGV0YWlsZWQgZXhhbXBsZXMgY2FuIGJlIGZvdW5kIGF0CiAgICA6cmVmOmBTM1RyYW5zZmVyJ3MgVXNhZ2UgPHJlZl9zM3RyYW5zZmVyX3VzYWdlPmAuCgogICAgOnR5cGUgRmlsZW5hbWU6IHN0cgogICAgOnBhcmFtIEZpbGVuYW1lOiBUaGUgcGF0aCB0byB0aGUgZmlsZSB0byB1cGxvYWQuCgogICAgOnR5cGUgRXh0cmFBcmdzOiBkaWN0CiAgICA6cGFyYW0gRXh0cmFBcmdzOiBFeHRyYSBhcmd1bWVudHMgdGhhdCBtYXkgYmUgcGFzc2VkIHRvIHRoZQogICAgICAgIGNsaWVudCBvcGVyYXRpb24uCgogICAgOnR5cGUgQ2FsbGJhY2s6IGZ1bmN0aW9uCiAgICA6cGFyYW0gQ2FsbGJhY2s6IEEgbWV0aG9kIHdoaWNoIHRha2VzIGEgbnVtYmVyIG9mIGJ5dGVzIHRyYW5zZmVycmVkIHRvCiAgICAgICAgYmUgcGVyaW9kaWNhbGx5IGNhbGxlZCBkdXJpbmcgdGhlIHVwbG9hZC4KCiAgICA6dHlwZSBDb25maWc6IGJvdG8zLnMzLnRyYW5zZmVyLlRyYW5zZmVyQ29uZmlnCiAgICA6cGFyYW0gQ29uZmlnOiBUaGUgdHJhbnNmZXIgY29uZmlndXJhdGlvbiB0byBiZSB1c2VkIHdoZW4gcGVyZm9ybWluZyB0aGUKICAgICAgICB0cmFuc2Zlci4KICAgICIiIgogICAgcmV0dXJuIHNlbGYubWV0YS5jbGllbnQudXBsb2FkX2ZpbGUoCiAgICAgICAgRmlsZW5hbWU9RmlsZW5hbWUsIEJ1Y2tldD1zZWxmLmJ1Y2tldF9uYW1lLCBLZXk9c2VsZi5rZXksCiAgICAgICAgRXh0cmFBcmdzPUV4dHJhQXJncywgQ2FsbGJhY2s9Q2FsbGJhY2ssIENvbmZpZz1Db25maWcpCgoKZGVmIG9iamVjdF9kb3dubG9hZF9maWxlKHNlbGYsIEZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgRXh0cmFBcmdzPU5vbmUsIENhbGxiYWNrPU5vbmUsIENvbmZpZz1Ob25lKToKICAgICIiIkRvd25sb2FkIGFuIFMzIG9iamVjdCB0byBhIGZpbGUuCgogICAgVXNhZ2U6OgoKICAgICAgICBpbXBvcnQgYm90bzMKICAgICAgICBzMyA9IGJvdG8zLnJlc291cmNlKCdzMycpCiAgICAgICAgczMuT2JqZWN0KCdteWJ1Y2tldCcsICdoZWxsby50eHQnKS5kb3dubG9hZF9maWxlKCcvdG1wL2hlbGxvLnR4dCcpCgogICAgU2ltaWxhciBiZWhhdmlvciBhcyBTM1RyYW5zZmVyJ3MgZG93bmxvYWRfZmlsZSgpIG1ldGhvZCwKICAgIGV4Y2VwdCB0aGF0IHBhcmFtZXRlcnMgYXJlIGNhcGl0YWxpemVkLiBEZXRhaWxlZCBleGFtcGxlcyBjYW4gYmUgZm91bmQgYXQKICAgIDpyZWY6YFMzVHJhbnNmZXIncyBVc2FnZSA8cmVmX3MzdHJhbnNmZXJfdXNhZ2U+YC4KCiAgICA6dHlwZSBGaWxlbmFtZTogc3RyCiAgICA6cGFyYW0gRmlsZW5hbWU6IFRoZSBwYXRoIHRvIHRoZSBmaWxlIHRvIGRvd25sb2FkIHRvLgoKICAgIDp0eXBlIEV4dHJhQXJnczogZGljdAogICAgOnBhcmFtIEV4dHJhQXJnczogRXh0cmEgYXJndW1lbnRzIHRoYXQgbWF5IGJlIHBhc3NlZCB0byB0aGUKICAgICAgICBjbGllbnQgb3BlcmF0aW9uLgoKICAgIDp0eXBlIENhbGxiYWNrOiBmdW5jdGlvbgogICAgOnBhcmFtIENhbGxiYWNrOiBBIG1ldGhvZCB3aGljaCB0YWtlcyBhIG51bWJlciBvZiBieXRlcyB0cmFuc2ZlcnJlZCB0bwogICAgICAgIGJlIHBlcmlvZGljYWxseSBjYWxsZWQgZHVyaW5nIHRoZSBkb3dubG9hZC4KCiAgICA6dHlwZSBDb25maWc6IGJvdG8zLnMzLnRyYW5zZmVyLlRyYW5zZmVyQ29uZmlnCiAgICA6cGFyYW0gQ29uZmlnOiBUaGUgdHJhbnNmZXIgY29uZmlndXJhdGlvbiB0byBiZSB1c2VkIHdoZW4gcGVyZm9ybWluZyB0aGUKICAgICAgICB0cmFuc2Zlci4KICAgICIiIgogICAgcmV0dXJuIHNlbGYubWV0YS5jbGllbnQuZG93bmxvYWRfZmlsZSgKICAgICAgICBCdWNrZXQ9c2VsZi5idWNrZXRfbmFtZSwgS2V5PXNlbGYua2V5LCBGaWxlbmFtZT1GaWxlbmFtZSwKICAgICAgICBFeHRyYUFyZ3M9RXh0cmFBcmdzLCBDYWxsYmFjaz1DYWxsYmFjaywgQ29uZmlnPUNvbmZpZykKCgpkZWYgY29weShzZWxmLCBDb3B5U291cmNlLCBCdWNrZXQsIEtleSwgRXh0cmFBcmdzPU5vbmUsIENhbGxiYWNrPU5vbmUsCiAgICAgICAgIFNvdXJjZUNsaWVudD1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJDb3B5IGFuIG9iamVjdCBmcm9tIG9uZSBTMyBsb2NhdGlvbiB0byBhbm90aGVyLgoKICAgIFRoaXMgaXMgYSBtYW5hZ2VkIHRyYW5zZmVyIHdoaWNoIHdpbGwgcGVyZm9ybSBhIG11bHRpcGFydCBjb3B5IGluCiAgICBtdWx0aXBsZSB0aHJlYWRzIGlmIG5lY2Vzc2FyeS4KCiAgICBVc2FnZTo6CgogICAgICAgIGltcG9ydCBib3RvMwogICAgICAgIHMzID0gYm90bzMucmVzb3VyY2UoJ3MzJykKICAgICAgICBjb3B5X3NvdXJjZSA9IHsKICAgICAgICAgICAgJ0J1Y2tldCc6ICdteWJ1Y2tldCcsCiAgICAgICAgICAgICdLZXknOiAnbXlrZXknCiAgICAgICAgfQogICAgICAgIHMzLm1ldGEuY2xpZW50LmNvcHkoY29weV9zb3VyY2UsICdvdGhlcmJ1Y2tldCcsICdvdGhlcmtleScpCgogICAgOnR5cGUgQ29weVNvdXJjZTogZGljdAogICAgOnBhcmFtIENvcHlTb3VyY2U6IFRoZSBuYW1lIG9mIHRoZSBzb3VyY2UgYnVja2V0LCBrZXkgbmFtZSBvZiB0aGUKICAgICAgICBzb3VyY2Ugb2JqZWN0LCBhbmQgb3B0aW9uYWwgdmVyc2lvbiBJRCBvZiB0aGUgc291cmNlIG9iamVjdC4gVGhlCiAgICAgICAgZGljdGlvbmFyeSBmb3JtYXQgaXM6CiAgICAgICAgYGB7J0J1Y2tldCc6ICdidWNrZXQnLCAnS2V5JzogJ2tleScsICdWZXJzaW9uSWQnOiAnaWQnfWBgLiBOb3RlCiAgICAgICAgdGhhdCB0aGUgYGBWZXJzaW9uSWRgYCBrZXkgaXMgb3B0aW9uYWwgYW5kIG1heSBiZSBvbWl0dGVkLgoKICAgIDp0eXBlIEJ1Y2tldDogc3RyCiAgICA6cGFyYW0gQnVja2V0OiBUaGUgbmFtZSBvZiB0aGUgYnVja2V0IHRvIGNvcHkgdG8KCiAgICA6dHlwZSBLZXk6IHN0cgogICAgOnBhcmFtIEtleTogVGhlIG5hbWUgb2YgdGhlIGtleSB0byBjb3B5IHRvCgogICAgOnR5cGUgRXh0cmFBcmdzOiBkaWN0CiAgICA6cGFyYW0gRXh0cmFBcmdzOiBFeHRyYSBhcmd1bWVudHMgdGhhdCBtYXkgYmUgcGFzc2VkIHRvIHRoZQogICAgICAgIGNsaWVudCBvcGVyYXRpb24KCiAgICA6dHlwZSBDYWxsYmFjazogZnVuY3Rpb24KICAgIDpwYXJhbSBDYWxsYmFjazogQSBtZXRob2Qgd2hpY2ggdGFrZXMgYSBudW1iZXIgb2YgYnl0ZXMgdHJhbnNmZXJyZWQgdG8KICAgICAgICBiZSBwZXJpb2RpY2FsbHkgY2FsbGVkIGR1cmluZyB0aGUgY29weS4KCiAgICA6dHlwZSBTb3VyY2VDbGllbnQ6IGJvdG9jb3JlIG9yIGJvdG8zIENsaWVudAogICAgOnBhcmFtIFNvdXJjZUNsaWVudDogVGhlIGNsaWVudCB0byBiZSB1c2VkIGZvciBvcGVyYXRpb24gdGhhdAogICAgICAgIG1heSBoYXBwZW4gYXQgdGhlIHNvdXJjZSBvYmplY3QuIEZvciBleGFtcGxlLCB0aGlzIGNsaWVudCBpcwogICAgICAgIHVzZWQgZm9yIHRoZSBoZWFkX29iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIHNpemUgb2YgdGhlIGNvcHkuCiAgICAgICAgSWYgbm8gY2xpZW50IGlzIHByb3ZpZGVkLCB0aGUgY3VycmVudCBjbGllbnQgaXMgdXNlZCBhcyB0aGUgY2xpZW50CiAgICAgICAgZm9yIHRoZSBzb3VyY2Ugb2JqZWN0LgoKICAgIDp0eXBlIENvbmZpZzogYm90bzMuczMudHJhbnNmZXIuVHJhbnNmZXJDb25maWcKICAgIDpwYXJhbSBDb25maWc6IFRoZSB0cmFuc2ZlciBjb25maWd1cmF0aW9uIHRvIGJlIHVzZWQgd2hlbiBwZXJmb3JtaW5nIHRoZQogICAgICAgIGNvcHkuCiAgICAiIiIKICAgIHN1YnNjcmliZXJzID0gTm9uZQogICAgaWYgQ2FsbGJhY2sgaXMgbm90IE5vbmU6CiAgICAgICAgc3Vic2NyaWJlcnMgPSBbUHJvZ3Jlc3NDYWxsYmFja0ludm9rZXIoQ2FsbGJhY2spXQoKICAgIGNvbmZpZyA9IENvbmZpZwogICAgaWYgY29uZmlnIGlzIE5vbmU6CiAgICAgICAgY29uZmlnID0gVHJhbnNmZXJDb25maWcoKQoKICAgIHdpdGggY3JlYXRlX3RyYW5zZmVyX21hbmFnZXIoc2VsZiwgY29uZmlnKSBhcyBtYW5hZ2VyOgogICAgICAgIGZ1dHVyZSA9IG1hbmFnZXIuY29weSgKICAgICAgICAgICAgY29weV9zb3VyY2U9Q29weVNvdXJjZSwgYnVja2V0PUJ1Y2tldCwga2V5PUtleSwKICAgICAgICAgICAgZXh0cmFfYXJncz1FeHRyYUFyZ3MsIHN1YnNjcmliZXJzPXN1YnNjcmliZXJzLAogICAgICAgICAgICBzb3VyY2VfY2xpZW50PVNvdXJjZUNsaWVudCkKICAgICAgICByZXR1cm4gZnV0dXJlLnJlc3VsdCgpCgoKZGVmIGJ1Y2tldF9jb3B5KHNlbGYsIENvcHlTb3VyY2UsIEtleSwgRXh0cmFBcmdzPU5vbmUsIENhbGxiYWNrPU5vbmUsCiAgICAgICAgICAgICAgICBTb3VyY2VDbGllbnQ9Tm9uZSwgQ29uZmlnPU5vbmUpOgogICAgIiIiQ29weSBhbiBvYmplY3QgZnJvbSBvbmUgUzMgbG9jYXRpb24gdG8gYW4gb2JqZWN0IGluIHRoaXMgYnVja2V0LgoKICAgIFRoaXMgaXMgYSBtYW5hZ2VkIHRyYW5zZmVyIHdoaWNoIHdpbGwgcGVyZm9ybSBhIG11bHRpcGFydCBjb3B5IGluCiAgICBtdWx0aXBsZSB0aHJlYWRzIGlmIG5lY2Vzc2FyeS4KCiAgICBVc2FnZTo6CgogICAgICAgIGltcG9ydCBib3RvMwogICAgICAgIHMzID0gYm90bzMucmVzb3VyY2UoJ3MzJykKICAgICAgICBjb3B5X3NvdXJjZSA9IHsKICAgICAgICAgICAgJ0J1Y2tldCc6ICdteWJ1Y2tldCcsCiAgICAgICAgICAgICdLZXknOiAnbXlrZXknCiAgICAgICAgfQogICAgICAgIGJ1Y2tldCA9IHMzLkJ1Y2tldCgnb3RoZXJidWNrZXQnKQogICAgICAgIGJ1Y2tldC5jb3B5KGNvcHlfc291cmNlLCAnb3RoZXJrZXknKQoKICAgIDp0eXBlIENvcHlTb3VyY2U6IGRpY3QKICAgIDpwYXJhbSBDb3B5U291cmNlOiBUaGUgbmFtZSBvZiB0aGUgc291cmNlIGJ1Y2tldCwga2V5IG5hbWUgb2YgdGhlCiAgICAgICAgc291cmNlIG9iamVjdCwgYW5kIG9wdGlvbmFsIHZlcnNpb24gSUQgb2YgdGhlIHNvdXJjZSBvYmplY3QuIFRoZQogICAgICAgIGRpY3Rpb25hcnkgZm9ybWF0IGlzOgogICAgICAgIGBgeydCdWNrZXQnOiAnYnVja2V0JywgJ0tleSc6ICdrZXknLCAnVmVyc2lvbklkJzogJ2lkJ31gYC4gTm90ZQogICAgICAgIHRoYXQgdGhlIGBgVmVyc2lvbklkYGAga2V5IGlzIG9wdGlvbmFsIGFuZCBtYXkgYmUgb21pdHRlZC4KCiAgICA6dHlwZSBLZXk6IHN0cgogICAgOnBhcmFtIEtleTogVGhlIG5hbWUgb2YgdGhlIGtleSB0byBjb3B5IHRvCgogICAgOnR5cGUgRXh0cmFBcmdzOiBkaWN0CiAgICA6cGFyYW0gRXh0cmFBcmdzOiBFeHRyYSBhcmd1bWVudHMgdGhhdCBtYXkgYmUgcGFzc2VkIHRvIHRoZQogICAgICAgIGNsaWVudCBvcGVyYXRpb24KCiAgICA6dHlwZSBDYWxsYmFjazogZnVuY3Rpb24KICAgIDpwYXJhbSBDYWxsYmFjazogQSBtZXRob2Qgd2hpY2ggdGFrZXMgYSBudW1iZXIgb2YgYnl0ZXMgdHJhbnNmZXJyZWQgdG8KICAgICAgICBiZSBwZXJpb2RpY2FsbHkgY2FsbGVkIGR1cmluZyB0aGUgY29weS4KCiAgICA6dHlwZSBTb3VyY2VDbGllbnQ6IGJvdG9jb3JlIG9yIGJvdG8zIENsaWVudAogICAgOnBhcmFtIFNvdXJjZUNsaWVudDogVGhlIGNsaWVudCB0byBiZSB1c2VkIGZvciBvcGVyYXRpb24gdGhhdAogICAgICAgIG1heSBoYXBwZW4gYXQgdGhlIHNvdXJjZSBvYmplY3QuIEZvciBleGFtcGxlLCB0aGlzIGNsaWVudCBpcwogICAgICAgIHVzZWQgZm9yIHRoZSBoZWFkX29iamVjdCB0aGF0IGRldGVybWluZXMgdGhlIHNpemUgb2YgdGhlIGNvcHkuCiAgICAgICAgSWYgbm8gY2xpZW50IGlzIHByb3ZpZGVkLCB0aGUgY3VycmVudCBjbGllbnQgaXMgdXNlZCBhcyB0aGUgY2xpZW50CiAgICAgICAgZm9yIHRoZSBzb3VyY2Ugb2JqZWN0LgoKICAgIDp0eXBlIENvbmZpZzogYm90bzMuczMudHJhbnNmZXIuVHJhbnNmZXJDb25maWcKICAgIDpwYXJhbSBDb25maWc6IFRoZSB0cmFuc2ZlciBjb25maWd1cmF0aW9uIHRvIGJlIHVzZWQgd2hlbiBwZXJmb3JtaW5nIHRoZQogICAgICAgIGNvcHkuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLm1ldGEuY2xpZW50LmNvcHkoCiAgICAgICAgQ29weVNvdXJjZT1Db3B5U291cmNlLCBCdWNrZXQ9c2VsZi5uYW1lLCBLZXk9S2V5LCBFeHRyYUFyZ3M9RXh0cmFBcmdzLAogICAgICAgIENhbGxiYWNrPUNhbGxiYWNrLCBTb3VyY2VDbGllbnQ9U291cmNlQ2xpZW50LCBDb25maWc9Q29uZmlnKQoKCmRlZiBvYmplY3RfY29weShzZWxmLCBDb3B5U291cmNlLCBFeHRyYUFyZ3M9Tm9uZSwgQ2FsbGJhY2s9Tm9uZSwKICAgICAgICAgICAgICAgIFNvdXJjZUNsaWVudD1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJDb3B5IGFuIG9iamVjdCBmcm9tIG9uZSBTMyBsb2NhdGlvbiB0byB0aGlzIG9iamVjdC4KCiAgICBUaGlzIGlzIGEgbWFuYWdlZCB0cmFuc2ZlciB3aGljaCB3aWxsIHBlcmZvcm0gYSBtdWx0aXBhcnQgY29weSBpbgogICAgbXVsdGlwbGUgdGhyZWFkcyBpZiBuZWNlc3NhcnkuCgogICAgVXNhZ2U6OgoKICAgICAgICBpbXBvcnQgYm90bzMKICAgICAgICBzMyA9IGJvdG8zLnJlc291cmNlKCdzMycpCiAgICAgICAgY29weV9zb3VyY2UgPSB7CiAgICAgICAgICAgICdCdWNrZXQnOiAnbXlidWNrZXQnLAogICAgICAgICAgICAnS2V5JzogJ215a2V5JwogICAgICAgIH0KICAgICAgICBidWNrZXQgPSBzMy5CdWNrZXQoJ290aGVyYnVja2V0JykKICAgICAgICBvYmogPSBidWNrZXQuT2JqZWN0KCdvdGhlcmtleScpCiAgICAgICAgb2JqLmNvcHkoY29weV9zb3VyY2UpCgogICAgOnR5cGUgQ29weVNvdXJjZTogZGljdAogICAgOnBhcmFtIENvcHlTb3VyY2U6IFRoZSBuYW1lIG9mIHRoZSBzb3VyY2UgYnVja2V0LCBrZXkgbmFtZSBvZiB0aGUKICAgICAgICBzb3VyY2Ugb2JqZWN0LCBhbmQgb3B0aW9uYWwgdmVyc2lvbiBJRCBvZiB0aGUgc291cmNlIG9iamVjdC4gVGhlCiAgICAgICAgZGljdGlvbmFyeSBmb3JtYXQgaXM6CiAgICAgICAgYGB7J0J1Y2tldCc6ICdidWNrZXQnLCAnS2V5JzogJ2tleScsICdWZXJzaW9uSWQnOiAnaWQnfWBgLiBOb3RlCiAgICAgICAgdGhhdCB0aGUgYGBWZXJzaW9uSWRgYCBrZXkgaXMgb3B0aW9uYWwgYW5kIG1heSBiZSBvbWl0dGVkLgoKICAgIDp0eXBlIEV4dHJhQXJnczogZGljdAogICAgOnBhcmFtIEV4dHJhQXJnczogRXh0cmEgYXJndW1lbnRzIHRoYXQgbWF5IGJlIHBhc3NlZCB0byB0aGUKICAgICAgICBjbGllbnQgb3BlcmF0aW9uCgogICAgOnR5cGUgQ2FsbGJhY2s6IGZ1bmN0aW9uCiAgICA6cGFyYW0gQ2FsbGJhY2s6IEEgbWV0aG9kIHdoaWNoIHRha2VzIGEgbnVtYmVyIG9mIGJ5dGVzIHRyYW5zZmVycmVkIHRvCiAgICAgICAgYmUgcGVyaW9kaWNhbGx5IGNhbGxlZCBkdXJpbmcgdGhlIGNvcHkuCgogICAgOnR5cGUgU291cmNlQ2xpZW50OiBib3RvY29yZSBvciBib3RvMyBDbGllbnQKICAgIDpwYXJhbSBTb3VyY2VDbGllbnQ6IFRoZSBjbGllbnQgdG8gYmUgdXNlZCBmb3Igb3BlcmF0aW9uIHRoYXQKICAgICAgICBtYXkgaGFwcGVuIGF0IHRoZSBzb3VyY2Ugb2JqZWN0LiBGb3IgZXhhbXBsZSwgdGhpcyBjbGllbnQgaXMKICAgICAgICB1c2VkIGZvciB0aGUgaGVhZF9vYmplY3QgdGhhdCBkZXRlcm1pbmVzIHRoZSBzaXplIG9mIHRoZSBjb3B5LgogICAgICAgIElmIG5vIGNsaWVudCBpcyBwcm92aWRlZCwgdGhlIGN1cnJlbnQgY2xpZW50IGlzIHVzZWQgYXMgdGhlIGNsaWVudAogICAgICAgIGZvciB0aGUgc291cmNlIG9iamVjdC4KCiAgICA6dHlwZSBDb25maWc6IGJvdG8zLnMzLnRyYW5zZmVyLlRyYW5zZmVyQ29uZmlnCiAgICA6cGFyYW0gQ29uZmlnOiBUaGUgdHJhbnNmZXIgY29uZmlndXJhdGlvbiB0byBiZSB1c2VkIHdoZW4gcGVyZm9ybWluZyB0aGUKICAgICAgICBjb3B5LgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5tZXRhLmNsaWVudC5jb3B5KAogICAgICAgIENvcHlTb3VyY2U9Q29weVNvdXJjZSwgQnVja2V0PXNlbGYuYnVja2V0X25hbWUsIEtleT1zZWxmLmtleSwKICAgICAgICBFeHRyYUFyZ3M9RXh0cmFBcmdzLCBDYWxsYmFjaz1DYWxsYmFjaywgU291cmNlQ2xpZW50PVNvdXJjZUNsaWVudCwKICAgICAgICBDb25maWc9Q29uZmlnKQoKCmRlZiB1cGxvYWRfZmlsZW9iaihzZWxmLCBGaWxlb2JqLCBCdWNrZXQsIEtleSwgRXh0cmFBcmdzPU5vbmUsCiAgICAgICAgICAgICAgICAgICBDYWxsYmFjaz1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJVcGxvYWQgYSBmaWxlLWxpa2Ugb2JqZWN0IHRvIFMzLgoKICAgIFRoZSBmaWxlLWxpa2Ugb2JqZWN0IG11c3QgYmUgaW4gYmluYXJ5IG1vZGUuCgogICAgVGhpcyBpcyBhIG1hbmFnZWQgdHJhbnNmZXIgd2hpY2ggd2lsbCBwZXJmb3JtIGEgbXVsdGlwYXJ0IHVwbG9hZCBpbgogICAgbXVsdGlwbGUgdGhyZWFkcyBpZiBuZWNlc3NhcnkuCgogICAgVXNhZ2U6OgoKICAgICAgICBpbXBvcnQgYm90bzMKICAgICAgICBzMyA9IGJvdG8zLmNsaWVudCgnczMnKQoKICAgICAgICB3aXRoIG9wZW4oJ2ZpbGVuYW1lJywgJ3JiJykgYXMgZGF0YToKICAgICAgICAgICAgczMudXBsb2FkX2ZpbGVvYmooZGF0YSwgJ215YnVja2V0JywgJ215a2V5JykKCiAgICA6dHlwZSBGaWxlb2JqOiBhIGZpbGUtbGlrZSBvYmplY3QKICAgIDpwYXJhbSBGaWxlb2JqOiBBIGZpbGUtbGlrZSBvYmplY3QgdG8gdXBsb2FkLiBBdCBhIG1pbmltdW0sIGl0IG11c3QKICAgICAgICBpbXBsZW1lbnQgdGhlIGByZWFkYCBtZXRob2QsIGFuZCBtdXN0IHJldHVybiBieXRlcy4KCiAgICA6dHlwZSBCdWNrZXQ6IHN0cgogICAgOnBhcmFtIEJ1Y2tldDogVGhlIG5hbWUgb2YgdGhlIGJ1Y2tldCB0byB1cGxvYWQgdG8uCgogICAgOnR5cGUgS2V5OiBzdHIKICAgIDpwYXJhbSBLZXk6IFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gdXBsb2FkIHRvLgoKICAgIDp0eXBlIEV4dHJhQXJnczogZGljdAogICAgOnBhcmFtIEV4dHJhQXJnczogRXh0cmEgYXJndW1lbnRzIHRoYXQgbWF5IGJlIHBhc3NlZCB0byB0aGUKICAgICAgICBjbGllbnQgb3BlcmF0aW9uLgoKICAgIDp0eXBlIENhbGxiYWNrOiBmdW5jdGlvbgogICAgOnBhcmFtIENhbGxiYWNrOiBBIG1ldGhvZCB3aGljaCB0YWtlcyBhIG51bWJlciBvZiBieXRlcyB0cmFuc2ZlcnJlZCB0bwogICAgICAgIGJlIHBlcmlvZGljYWxseSBjYWxsZWQgZHVyaW5nIHRoZSB1cGxvYWQuCgogICAgOnR5cGUgQ29uZmlnOiBib3RvMy5zMy50cmFuc2Zlci5UcmFuc2ZlckNvbmZpZwogICAgOnBhcmFtIENvbmZpZzogVGhlIHRyYW5zZmVyIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZCB3aGVuIHBlcmZvcm1pbmcgdGhlCiAgICAgICAgdXBsb2FkLgogICAgIiIiCiAgICBpZiBub3QgaGFzYXR0cihGaWxlb2JqLCAncmVhZCcpOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ0ZpbGVvYmogbXVzdCBpbXBsZW1lbnQgcmVhZCcpCgogICAgc3Vic2NyaWJlcnMgPSBOb25lCiAgICBpZiBDYWxsYmFjayBpcyBub3QgTm9uZToKICAgICAgICBzdWJzY3JpYmVycyA9IFtQcm9ncmVzc0NhbGxiYWNrSW52b2tlcihDYWxsYmFjayldCgogICAgY29uZmlnID0gQ29uZmlnCiAgICBpZiBjb25maWcgaXMgTm9uZToKICAgICAgICBjb25maWcgPSBUcmFuc2ZlckNvbmZpZygpCgogICAgd2l0aCBjcmVhdGVfdHJhbnNmZXJfbWFuYWdlcihzZWxmLCBjb25maWcpIGFzIG1hbmFnZXI6CiAgICAgICAgZnV0dXJlID0gbWFuYWdlci51cGxvYWQoCiAgICAgICAgICAgIGZpbGVvYmo9RmlsZW9iaiwgYnVja2V0PUJ1Y2tldCwga2V5PUtleSwKICAgICAgICAgICAgZXh0cmFfYXJncz1FeHRyYUFyZ3MsIHN1YnNjcmliZXJzPXN1YnNjcmliZXJzKQogICAgICAgIHJldHVybiBmdXR1cmUucmVzdWx0KCkKCgpkZWYgYnVja2V0X3VwbG9hZF9maWxlb2JqKHNlbGYsIEZpbGVvYmosIEtleSwgRXh0cmFBcmdzPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FsbGJhY2s9Tm9uZSwgQ29uZmlnPU5vbmUpOgogICAgIiIiVXBsb2FkIGEgZmlsZS1saWtlIG9iamVjdCB0byB0aGlzIGJ1Y2tldC4KCiAgICBUaGUgZmlsZS1saWtlIG9iamVjdCBtdXN0IGJlIGluIGJpbmFyeSBtb2RlLgoKICAgIFRoaXMgaXMgYSBtYW5hZ2VkIHRyYW5zZmVyIHdoaWNoIHdpbGwgcGVyZm9ybSBhIG11bHRpcGFydCB1cGxvYWQgaW4KICAgIG11bHRpcGxlIHRocmVhZHMgaWYgbmVjZXNzYXJ5LgoKICAgIFVzYWdlOjoKCiAgICAgICAgaW1wb3J0IGJvdG8zCiAgICAgICAgczMgPSBib3RvMy5yZXNvdXJjZSgnczMnKQogICAgICAgIGJ1Y2tldCA9IHMzLkJ1Y2tldCgnbXlidWNrZXQnKQoKICAgICAgICB3aXRoIG9wZW4oJ2ZpbGVuYW1lJywgJ3JiJykgYXMgZGF0YToKICAgICAgICAgICAgYnVja2V0LnVwbG9hZF9maWxlb2JqKGRhdGEsICdteWtleScpCgogICAgOnR5cGUgRmlsZW9iajogYSBmaWxlLWxpa2Ugb2JqZWN0CiAgICA6cGFyYW0gRmlsZW9iajogQSBmaWxlLWxpa2Ugb2JqZWN0IHRvIHVwbG9hZC4gQXQgYSBtaW5pbXVtLCBpdCBtdXN0CiAgICAgICAgaW1wbGVtZW50IHRoZSBgcmVhZGAgbWV0aG9kLCBhbmQgbXVzdCByZXR1cm4gYnl0ZXMuCgogICAgOnR5cGUgS2V5OiBzdHIKICAgIDpwYXJhbSBLZXk6IFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gdXBsb2FkIHRvLgoKICAgIDp0eXBlIEV4dHJhQXJnczogZGljdAogICAgOnBhcmFtIEV4dHJhQXJnczogRXh0cmEgYXJndW1lbnRzIHRoYXQgbWF5IGJlIHBhc3NlZCB0byB0aGUKICAgICAgICBjbGllbnQgb3BlcmF0aW9uLgoKICAgIDp0eXBlIENhbGxiYWNrOiBmdW5jdGlvbgogICAgOnBhcmFtIENhbGxiYWNrOiBBIG1ldGhvZCB3aGljaCB0YWtlcyBhIG51bWJlciBvZiBieXRlcyB0cmFuc2ZlcnJlZCB0bwogICAgICAgIGJlIHBlcmlvZGljYWxseSBjYWxsZWQgZHVyaW5nIHRoZSB1cGxvYWQuCgogICAgOnR5cGUgQ29uZmlnOiBib3RvMy5zMy50cmFuc2Zlci5UcmFuc2ZlckNvbmZpZwogICAgOnBhcmFtIENvbmZpZzogVGhlIHRyYW5zZmVyIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZCB3aGVuIHBlcmZvcm1pbmcgdGhlCiAgICAgICAgdXBsb2FkLgogICAgIiIiCiAgICByZXR1cm4gc2VsZi5tZXRhLmNsaWVudC51cGxvYWRfZmlsZW9iaigKICAgICAgICBGaWxlb2JqPUZpbGVvYmosIEJ1Y2tldD1zZWxmLm5hbWUsIEtleT1LZXksIEV4dHJhQXJncz1FeHRyYUFyZ3MsCiAgICAgICAgQ2FsbGJhY2s9Q2FsbGJhY2ssIENvbmZpZz1Db25maWcpCgoKZGVmIG9iamVjdF91cGxvYWRfZmlsZW9iaihzZWxmLCBGaWxlb2JqLCBFeHRyYUFyZ3M9Tm9uZSwgQ2FsbGJhY2s9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBDb25maWc9Tm9uZSk6CiAgICAiIiJVcGxvYWQgYSBmaWxlLWxpa2Ugb2JqZWN0IHRvIHRoaXMgb2JqZWN0LgoKICAgIFRoZSBmaWxlLWxpa2Ugb2JqZWN0IG11c3QgYmUgaW4gYmluYXJ5IG1vZGUuCgogICAgVGhpcyBpcyBhIG1hbmFnZWQgdHJhbnNmZXIgd2hpY2ggd2lsbCBwZXJmb3JtIGEgbXVsdGlwYXJ0IHVwbG9hZCBpbgogICAgbXVsdGlwbGUgdGhyZWFkcyBpZiBuZWNlc3NhcnkuCgogICAgVXNhZ2U6OgoKICAgICAgICBpbXBvcnQgYm90bzMKICAgICAgICBzMyA9IGJvdG8zLnJlc291cmNlKCdzMycpCiAgICAgICAgYnVja2V0ID0gczMuQnVja2V0KCdteWJ1Y2tldCcpCiAgICAgICAgb2JqID0gYnVja2V0Lk9iamVjdCgnbXlrZXknKQoKICAgICAgICB3aXRoIG9wZW4oJ2ZpbGVuYW1lJywgJ3JiJykgYXMgZGF0YToKICAgICAgICAgICAgb2JqLnVwbG9hZF9maWxlb2JqKGRhdGEpCgogICAgOnR5cGUgRmlsZW9iajogYSBmaWxlLWxpa2Ugb2JqZWN0CiAgICA6cGFyYW0gRmlsZW9iajogQSBmaWxlLWxpa2Ugb2JqZWN0IHRvIHVwbG9hZC4gQXQgYSBtaW5pbXVtLCBpdCBtdXN0CiAgICAgICAgaW1wbGVtZW50IHRoZSBgcmVhZGAgbWV0aG9kLCBhbmQgbXVzdCByZXR1cm4gYnl0ZXMuCgogICAgOnR5cGUgRXh0cmFBcmdzOiBkaWN0CiAgICA6cGFyYW0gRXh0cmFBcmdzOiBFeHRyYSBhcmd1bWVudHMgdGhhdCBtYXkgYmUgcGFzc2VkIHRvIHRoZQogICAgICAgIGNsaWVudCBvcGVyYXRpb24uCgogICAgOnR5cGUgQ2FsbGJhY2s6IGZ1bmN0aW9uCiAgICA6cGFyYW0gQ2FsbGJhY2s6IEEgbWV0aG9kIHdoaWNoIHRha2VzIGEgbnVtYmVyIG9mIGJ5dGVzIHRyYW5zZmVycmVkIHRvCiAgICAgICAgYmUgcGVyaW9kaWNhbGx5IGNhbGxlZCBkdXJpbmcgdGhlIHVwbG9hZC4KCiAgICA6dHlwZSBDb25maWc6IGJvdG8zLnMzLnRyYW5zZmVyLlRyYW5zZmVyQ29uZmlnCiAgICA6cGFyYW0gQ29uZmlnOiBUaGUgdHJhbnNmZXIgY29uZmlndXJhdGlvbiB0byBiZSB1c2VkIHdoZW4gcGVyZm9ybWluZyB0aGUKICAgICAgICB1cGxvYWQuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLm1ldGEuY2xpZW50LnVwbG9hZF9maWxlb2JqKAogICAgICAgIEZpbGVvYmo9RmlsZW9iaiwgQnVja2V0PXNlbGYuYnVja2V0X25hbWUsIEtleT1zZWxmLmtleSwKICAgICAgICBFeHRyYUFyZ3M9RXh0cmFBcmdzLCBDYWxsYmFjaz1DYWxsYmFjaywgQ29uZmlnPUNvbmZpZykKCgpkZWYgZG93bmxvYWRfZmlsZW9iaihzZWxmLCBCdWNrZXQsIEtleSwgRmlsZW9iaiwgRXh0cmFBcmdzPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgIENhbGxiYWNrPU5vbmUsIENvbmZpZz1Ob25lKToKICAgICIiIkRvd25sb2FkIGFuIG9iamVjdCBmcm9tIFMzIHRvIGEgZmlsZS1saWtlIG9iamVjdC4KCiAgICBUaGUgZmlsZS1saWtlIG9iamVjdCBtdXN0IGJlIGluIGJpbmFyeSBtb2RlLgoKICAgIFRoaXMgaXMgYSBtYW5hZ2VkIHRyYW5zZmVyIHdoaWNoIHdpbGwgcGVyZm9ybSBhIG11bHRpcGFydCBkb3dubG9hZCBpbgogICAgbXVsdGlwbGUgdGhyZWFkcyBpZiBuZWNlc3NhcnkuCgogICAgVXNhZ2U6OgoKICAgICAgICBpbXBvcnQgYm90bzMKICAgICAgICBzMyA9IGJvdG8zLmNsaWVudCgnczMnKQoKICAgICAgICB3aXRoIG9wZW4oJ2ZpbGVuYW1lJywgJ3diJykgYXMgZGF0YToKICAgICAgICAgICAgczMuZG93bmxvYWRfZmlsZW9iaignbXlidWNrZXQnLCAnbXlrZXknLCBkYXRhKQoKICAgIDp0eXBlIEJ1Y2tldDogc3RyCiAgICA6cGFyYW0gQnVja2V0OiBUaGUgbmFtZSBvZiB0aGUgYnVja2V0IHRvIGRvd25sb2FkIGZyb20uCgogICAgOnR5cGUgS2V5OiBzdHIKICAgIDpwYXJhbSBLZXk6IFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gZG93bmxvYWQgZnJvbS4KCiAgICA6dHlwZSBGaWxlb2JqOiBhIGZpbGUtbGlrZSBvYmplY3QKICAgIDpwYXJhbSBGaWxlb2JqOiBBIGZpbGUtbGlrZSBvYmplY3QgdG8gZG93bmxvYWQgaW50by4gQXQgYSBtaW5pbXVtLCBpdCBtdXN0CiAgICAgICAgaW1wbGVtZW50IHRoZSBgd3JpdGVgIG1ldGhvZCBhbmQgbXVzdCBhY2NlcHQgYnl0ZXMuCgogICAgOnR5cGUgRXh0cmFBcmdzOiBkaWN0CiAgICA6cGFyYW0gRXh0cmFBcmdzOiBFeHRyYSBhcmd1bWVudHMgdGhhdCBtYXkgYmUgcGFzc2VkIHRvIHRoZQogICAgICAgIGNsaWVudCBvcGVyYXRpb24uCgogICAgOnR5cGUgQ2FsbGJhY2s6IGZ1bmN0aW9uCiAgICA6cGFyYW0gQ2FsbGJhY2s6IEEgbWV0aG9kIHdoaWNoIHRha2VzIGEgbnVtYmVyIG9mIGJ5dGVzIHRyYW5zZmVycmVkIHRvCiAgICAgICAgYmUgcGVyaW9kaWNhbGx5IGNhbGxlZCBkdXJpbmcgdGhlIGRvd25sb2FkLgoKICAgIDp0eXBlIENvbmZpZzogYm90bzMuczMudHJhbnNmZXIuVHJhbnNmZXJDb25maWcKICAgIDpwYXJhbSBDb25maWc6IFRoZSB0cmFuc2ZlciBjb25maWd1cmF0aW9uIHRvIGJlIHVzZWQgd2hlbiBwZXJmb3JtaW5nIHRoZQogICAgICAgIGRvd25sb2FkLgogICAgIiIiCiAgICBpZiBub3QgaGFzYXR0cihGaWxlb2JqLCAnd3JpdGUnKToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdGaWxlb2JqIG11c3QgaW1wbGVtZW50IHdyaXRlJykKCiAgICBzdWJzY3JpYmVycyA9IE5vbmUKICAgIGlmIENhbGxiYWNrIGlzIG5vdCBOb25lOgogICAgICAgIHN1YnNjcmliZXJzID0gW1Byb2dyZXNzQ2FsbGJhY2tJbnZva2VyKENhbGxiYWNrKV0KCiAgICBjb25maWcgPSBDb25maWcKICAgIGlmIGNvbmZpZyBpcyBOb25lOgogICAgICAgIGNvbmZpZyA9IFRyYW5zZmVyQ29uZmlnKCkKCiAgICB3aXRoIGNyZWF0ZV90cmFuc2Zlcl9tYW5hZ2VyKHNlbGYsIGNvbmZpZykgYXMgbWFuYWdlcjoKICAgICAgICBmdXR1cmUgPSBtYW5hZ2VyLmRvd25sb2FkKAogICAgICAgICAgICBidWNrZXQ9QnVja2V0LCBrZXk9S2V5LCBmaWxlb2JqPUZpbGVvYmosCiAgICAgICAgICAgIGV4dHJhX2FyZ3M9RXh0cmFBcmdzLCBzdWJzY3JpYmVycz1zdWJzY3JpYmVycykKICAgICAgICByZXR1cm4gZnV0dXJlLnJlc3VsdCgpCgoKZGVmIGJ1Y2tldF9kb3dubG9hZF9maWxlb2JqKHNlbGYsIEtleSwgRmlsZW9iaiwgRXh0cmFBcmdzPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWxsYmFjaz1Ob25lLCBDb25maWc9Tm9uZSk6CiAgICAiIiJEb3dubG9hZCBhbiBvYmplY3QgZnJvbSB0aGlzIGJ1Y2tldCB0byBhIGZpbGUtbGlrZS1vYmplY3QuCgogICAgVGhlIGZpbGUtbGlrZSBvYmplY3QgbXVzdCBiZSBpbiBiaW5hcnkgbW9kZS4KCiAgICBUaGlzIGlzIGEgbWFuYWdlZCB0cmFuc2ZlciB3aGljaCB3aWxsIHBlcmZvcm0gYSBtdWx0aXBhcnQgZG93bmxvYWQgaW4KICAgIG11bHRpcGxlIHRocmVhZHMgaWYgbmVjZXNzYXJ5LgoKICAgIFVzYWdlOjoKCiAgICAgICAgaW1wb3J0IGJvdG8zCiAgICAgICAgczMgPSBib3RvMy5yZXNvdXJjZSgnczMnKQogICAgICAgIGJ1Y2tldCA9IHMzLkJ1Y2tldCgnbXlidWNrZXQnKQoKICAgICAgICB3aXRoIG9wZW4oJ2ZpbGVuYW1lJywgJ3diJykgYXMgZGF0YToKICAgICAgICAgICAgYnVja2V0LmRvd25sb2FkX2ZpbGVvYmooJ215a2V5JywgZGF0YSkKCiAgICA6dHlwZSBGaWxlb2JqOiBhIGZpbGUtbGlrZSBvYmplY3QKICAgIDpwYXJhbSBGaWxlb2JqOiBBIGZpbGUtbGlrZSBvYmplY3QgdG8gZG93bmxvYWQgaW50by4gQXQgYSBtaW5pbXVtLCBpdCBtdXN0CiAgICAgICAgaW1wbGVtZW50IHRoZSBgd3JpdGVgIG1ldGhvZCBhbmQgbXVzdCBhY2NlcHQgYnl0ZXMuCgogICAgOnR5cGUgS2V5OiBzdHIKICAgIDpwYXJhbSBLZXk6IFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gZG93bmxvYWQgZnJvbS4KCiAgICA6dHlwZSBFeHRyYUFyZ3M6IGRpY3QKICAgIDpwYXJhbSBFeHRyYUFyZ3M6IEV4dHJhIGFyZ3VtZW50cyB0aGF0IG1heSBiZSBwYXNzZWQgdG8gdGhlCiAgICAgICAgY2xpZW50IG9wZXJhdGlvbi4KCiAgICA6dHlwZSBDYWxsYmFjazogZnVuY3Rpb24KICAgIDpwYXJhbSBDYWxsYmFjazogQSBtZXRob2Qgd2hpY2ggdGFrZXMgYSBudW1iZXIgb2YgYnl0ZXMgdHJhbnNmZXJyZWQgdG8KICAgICAgICBiZSBwZXJpb2RpY2FsbHkgY2FsbGVkIGR1cmluZyB0aGUgZG93bmxvYWQuCgogICAgOnR5cGUgQ29uZmlnOiBib3RvMy5zMy50cmFuc2Zlci5UcmFuc2ZlckNvbmZpZwogICAgOnBhcmFtIENvbmZpZzogVGhlIHRyYW5zZmVyIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZCB3aGVuIHBlcmZvcm1pbmcgdGhlCiAgICAgICAgZG93bmxvYWQuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLm1ldGEuY2xpZW50LmRvd25sb2FkX2ZpbGVvYmooCiAgICAgICAgQnVja2V0PXNlbGYubmFtZSwgS2V5PUtleSwgRmlsZW9iaj1GaWxlb2JqLCBFeHRyYUFyZ3M9RXh0cmFBcmdzLAogICAgICAgIENhbGxiYWNrPUNhbGxiYWNrLCBDb25maWc9Q29uZmlnKQoKCmRlZiBvYmplY3RfZG93bmxvYWRfZmlsZW9iaihzZWxmLCBGaWxlb2JqLCBFeHRyYUFyZ3M9Tm9uZSwgQ2FsbGJhY2s9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbmZpZz1Ob25lKToKICAgICIiIkRvd25sb2FkIHRoaXMgb2JqZWN0IGZyb20gUzMgdG8gYSBmaWxlLWxpa2Ugb2JqZWN0LgoKICAgIFRoZSBmaWxlLWxpa2Ugb2JqZWN0IG11c3QgYmUgaW4gYmluYXJ5IG1vZGUuCgogICAgVGhpcyBpcyBhIG1hbmFnZWQgdHJhbnNmZXIgd2hpY2ggd2lsbCBwZXJmb3JtIGEgbXVsdGlwYXJ0IGRvd25sb2FkIGluCiAgICBtdWx0aXBsZSB0aHJlYWRzIGlmIG5lY2Vzc2FyeS4KCiAgICBVc2FnZTo6CgogICAgICAgIGltcG9ydCBib3RvMwogICAgICAgIHMzID0gYm90bzMucmVzb3VyY2UoJ3MzJykKICAgICAgICBidWNrZXQgPSBzMy5CdWNrZXQoJ215YnVja2V0JykKICAgICAgICBvYmogPSBidWNrZXQuT2JqZWN0KCdteWtleScpCgogICAgICAgIHdpdGggb3BlbignZmlsZW5hbWUnLCAnd2InKSBhcyBkYXRhOgogICAgICAgICAgICBvYmouZG93bmxvYWRfZmlsZW9iaihkYXRhKQoKICAgIDp0eXBlIEZpbGVvYmo6IGEgZmlsZS1saWtlIG9iamVjdAogICAgOnBhcmFtIEZpbGVvYmo6IEEgZmlsZS1saWtlIG9iamVjdCB0byBkb3dubG9hZCBpbnRvLiBBdCBhIG1pbmltdW0sIGl0IG11c3QKICAgICAgICBpbXBsZW1lbnQgdGhlIGB3cml0ZWAgbWV0aG9kIGFuZCBtdXN0IGFjY2VwdCBieXRlcy4KCiAgICA6dHlwZSBFeHRyYUFyZ3M6IGRpY3QKICAgIDpwYXJhbSBFeHRyYUFyZ3M6IEV4dHJhIGFyZ3VtZW50cyB0aGF0IG1heSBiZSBwYXNzZWQgdG8gdGhlCiAgICAgICAgY2xpZW50IG9wZXJhdGlvbi4KCiAgICA6dHlwZSBDYWxsYmFjazogZnVuY3Rpb24KICAgIDpwYXJhbSBDYWxsYmFjazogQSBtZXRob2Qgd2hpY2ggdGFrZXMgYSBudW1iZXIgb2YgYnl0ZXMgdHJhbnNmZXJyZWQgdG8KICAgICAgICBiZSBwZXJpb2RpY2FsbHkgY2FsbGVkIGR1cmluZyB0aGUgZG93bmxvYWQuCgogICAgOnR5cGUgQ29uZmlnOiBib3RvMy5zMy50cmFuc2Zlci5UcmFuc2ZlckNvbmZpZwogICAgOnBhcmFtIENvbmZpZzogVGhlIHRyYW5zZmVyIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZCB3aGVuIHBlcmZvcm1pbmcgdGhlCiAgICAgICAgZG93bmxvYWQuCiAgICAiIiIKICAgIHJldHVybiBzZWxmLm1ldGEuY2xpZW50LmRvd25sb2FkX2ZpbGVvYmooCiAgICAgICAgQnVja2V0PXNlbGYuYnVja2V0X25hbWUsIEtleT1zZWxmLmtleSwgRmlsZW9iaj1GaWxlb2JqLAogICAgICAgIEV4dHJhQXJncz1FeHRyYUFyZ3MsIENhbGxiYWNrPUNhbGxiYWNrLCBDb25maWc9Q29uZmlnKQo=
