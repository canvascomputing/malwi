statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/paramfile.py
  contents:
  - name: URIArgumentHandler._check_for_uri_param
    score: 0.0
    code: |-
      def _check_for_uri_param(self, param, value):
              if isinstance(value, list) and len(value) == 1:
                  value = value[0]
              try:
                  return get_paramfile(value, self._prefixes)
              except ResourceLoadingError as e:
                  raise ParamError(param.cli_name, six.text_type(e))
    tokens: resume load_global isinstance load_fast value load_global list call pop_jump_if_false TO_NUMBER load_global len load_fast value call load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_fast value load_const INTEGER binary_subscr store_fast value nop load_global get_paramfile load_fast value load_fast self load_attr _prefixes call return_value push_exc_info load_global STRING_BASE64_LEN_S_ENT_HIGH check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global ParamError load_fast param load_attr cli_name load_global six load_attr text_type load_fast e call call raise_varargs load_const store_fast e delete_fast e reraise reraise copy pop_except reraise
    hash: 68e467629a9283909446f44b8d696b15701c35e64373f48a29da41f74e2c28c4
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/paramfile.py: 
