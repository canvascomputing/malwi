statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/appengine.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      """
      This module provides a pool manager that uses Google App Engine's
      `URLFetch Service <https://cloud.google.com/appengine/docs/python/urlfetch>`_.

      Example usage::

          from urllib3 import PoolManager
          from urllib3.contrib.appengine import AppEngineManager, is_appengine_sandbox

          if is_appengine_sandbox():
              # AppEngineManager uses AppEngine's URLFetch API behind the scenes
              http = AppEngineManager()
          else:
              # PoolManager uses a socket-level API behind the scenes
              http = PoolManager()

          r = http.request('GET', 'https://google.com/')

      There are `limitations <https://cloud.google.com/appengine/docs/python/\
      urlfetch/#Python_Quotas_and_limits>`_ to the URLFetch service and it may not be
      the best choice for your application. There are three options for using
      urllib3 on Google App Engine:

      1. You can use :class:`AppEngineManager` with URLFetch. URLFetch is
         cost-effective in many circumstances as long as your usage is within the
         limitations.
      2. You can use a normal :class:`~urllib3.PoolManager` by enabling sockets.
         Sockets also have `limitations and restrictions
         <https://cloud.google.com/appengine/docs/python/sockets/\
         #limitations-and-restrictions>`_ and have a lower free quota than URLFetch.
         To use sockets, be sure to specify the following in your ``app.yaml``::

              env_variables:
                  GAE_USE_SOCKETS_HTTPLIB : 'true'

      3. If you are using `App Engine Flexible
      <https://cloud.google.com/appengine/docs/flexible/>`_, you can use the standard
      :class:`PoolManager` without any configuration or special environment variables.
      """

      from __future__ import absolute_import
      import logging
      import os
      import warnings
      from ..packages.six.moves.urllib.parse import urljoin

      from ..exceptions import (
          HTTPError,
          HTTPWarning,
          MaxRetryError,
          ProtocolError,
          TimeoutError,
          SSLError
      )

      from ..packages.six import BytesIO
      from ..request import RequestMethods
      from ..response import HTTPResponse
      from ..util.timeout import Timeout
      from ..util.retry import Retry

      try:
          from google.appengine.api import urlfetch
      except ImportError:
          urlfetch = None


      log = logging.getLogger(__name__)


      class AppEnginePlatformWarning(HTTPWarning):
          pass
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ load_const INTEGER load_const import_name __future__ import_from absolute_import store_name absolute_import pop_top load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name warnings store_name warnings load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from urljoin store_name urljoin pop_top load_const INTEGER load_const import_name exceptions import_from HTTPError store_name HTTPError import_from HTTPWarning store_name HTTPWarning import_from MaxRetryError store_name MaxRetryError import_from ProtocolError store_name ProtocolError import_from TimeoutError store_name TimeoutError import_from SSLError store_name SSLError pop_top load_const INTEGER load_const import_name packages.six import_from BytesIO store_name BytesIO pop_top load_const INTEGER load_const import_name request import_from RequestMethods store_name RequestMethods pop_top load_const INTEGER load_const import_name response import_from HTTPResponse store_name HTTPResponse pop_top load_const INTEGER load_const import_name util.timeout import_from Timeout store_name Timeout pop_top load_const INTEGER load_const import_name util.retry import_from Retry store_name Retry pop_top nop load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from urlfetch store_name urlfetch pop_top push_null load_name logging load_attr getLogger load_name __name__ call store_name log push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name HTTPWarning call store_name STRING_BASE64_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name HTTPError call store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name RequestMethods call store_name STRING_BASE64_LEN_S_ENT_HIGH load_const OBJECT make_function store_name is_appengine load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH return_const None push_exc_info load_name ImportError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const store_name urlfetch pop_except jump_backward TO_NUMBER reraise copy pop_except reraise
    hash: 84eb1349bfb6d13a02fd3f89571429088a2212ff1fff481245f10f496083dc52
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/appengine.py: 
