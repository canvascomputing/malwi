statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/alias.py
  contents:
  - name: AliasLoader.__init__
    score: 0.0
    code: |-
      def __init__(self,
                       alias_filename=os.path.expanduser(
                           os.path.join('~', '.aws', 'cli', 'alias'))):
              """Interface for loading and interacting with alias file

              :param alias_filename: The name of the file to load aliases from.
                  This file must be an INI file.
              """
              self._filename = alias_filename
              self._aliases = None
    tokens: resume load_fast alias_filename load_fast self store_attr _filename load_const load_fast self store_attr _aliases return_const None
    hash: b7aec079fc62937c73f45ca7b783ad71c489ad238ba39b3c337d97bef496a54e
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/alias.py: 
