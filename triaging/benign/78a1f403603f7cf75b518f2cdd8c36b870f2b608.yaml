statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/gateway.py
  contents:
  - name: DiscordWebSocket.send
    score: 0.0
    code: |-
      async def send(self, data):
              await self._rate_limiter.block()
              self._dispatch('socket_raw_send', data)
              await self.socket.send_str(data)
    tokens: return_generator pop_top resume load_fast self load_attr _rate_limiter load_attr block call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top load_fast self load_attr _dispatch load_const socket_raw_send load_fast data call pop_top load_fast self load_attr socket load_attr send_str load_fast data call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_const None cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: c45d93ebe9d9d60d9b83de20d0d5bf5ac25d70ef52ffa9530dbe327142b6f1da
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/gateway.py: 
