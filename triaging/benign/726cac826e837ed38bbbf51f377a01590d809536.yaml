statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/dynamodb/types.py
  contents:
  - name: TypeDeserializer
    score: 0.0
    code: |-
      def _serialize_m(self, value):
              return dict([(k, self.serialize(v)) for k, v in value.items()])
    tokens: resume load_name __name__ store_name __module__ load_const STRING_BASE64_LEN_S_ENT_HIGH store_name __qualname__ load_const STRING_LEN_S_ENT_HIGH store_name __doc__ load_const OBJECT make_function store_name deserialize load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name _deserialize_n load_const OBJECT make_function store_name _deserialize_s load_const OBJECT make_function store_name _deserialize_b load_const OBJECT make_function store_name _deserialize_ns load_const OBJECT make_function store_name _deserialize_ss load_const OBJECT make_function store_name _deserialize_bs load_const OBJECT make_function store_name _deserialize_l load_const OBJECT make_function store_name _deserialize_m return_const None
    hash: 3edc000b57c556a92a6b9d6889a3d8bbfb99c3e41040adc8613dadce0241a9c3
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/dynamodb/types.py: 
