statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/_securetransport/low_level.py
  contents:
  - name: _cert_array_from_pem
    score: 0.0
    code: |-
      def _cert_array_from_pem(pem_bundle):
          """
          Given a bundle of certs in PEM format, turns them into a CFArray of certs
          that can be used to validate a cert chain.
          """
          der_certs = [
              base64.b64decode(match.group(1))
              for match in _PEM_CERTS_RE.finditer(pem_bundle)
          ]
          if not der_certs:
              raise ssl.SSLError("No root certificates specified")

          cert_array = CoreFoundation.CFArrayCreateMutable(
              CoreFoundation.kCFAllocatorDefault,
              0,
              ctypes.byref(CoreFoundation.kCFTypeArrayCallBacks)
          )
          if not cert_array:
              raise ssl.SSLError("Unable to allocate memory!")

          try:
              for der_bytes in der_certs:
                  certdata = _cf_data_from_bytes(der_bytes)
                  if not certdata:
                      raise ssl.SSLError("Unable to allocate memory!")
                  cert = Security.SecCertificateCreateWithData(
                      CoreFoundation.kCFAllocatorDefault, certdata
                  )
                  CoreFoundation.CFRelease(certdata)
                  if not cert:
                      raise ssl.SSLError("Unable to build cert object!")

                  CoreFoundation.CFArrayAppendValue(cert_array, cert)
                  CoreFoundation.CFRelease(cert)
          except Exception:
              # We need to free the array before the exception bubbles further.
              # We only want to do that if an error occurs: otherwise, the caller
              # should free.
              CoreFoundation.CFRelease(cert_array)

          return cert_array
    tokens: resume load_global _PEM_CERTS_RE load_attr finditer load_fast pem_bundle call get_iter load_fast_and_clear match swap build_list swap for_iter TO_NUMBER store_fast match load_global base64 load_attr ENCODING_DECODING load_fast match load_attr group load_const INTEGER call call list_append jump_backward TO_NUMBER end_for store_fast der_certs store_fast match load_fast der_certs pop_jump_if_true TO_NUMBER load_global ssl load_attr SSLError load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_global CoreFoundation load_attr STRING_BASE64_LEN_S_ENT_HIGH load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH load_const INTEGER load_global ctypes load_attr byref load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH call call store_fast cert_array load_fast cert_array pop_jump_if_true TO_NUMBER load_global ssl load_attr SSLError load_const STRING_LEN_S_ENT_HIGH call raise_varargs nop load_fast der_certs get_iter for_iter TO_NUMBER store_fast der_bytes load_global STRING_LEN_S_ENT_HIGH load_fast der_bytes call store_fast certdata load_fast certdata pop_jump_if_true TO_NUMBER load_global ssl load_attr SSLError load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_global Security load_attr STRING_BASE64_LEN_S_ENT_HIGH load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH load_fast certdata call store_fast cert load_global CoreFoundation load_attr CFRelease load_fast certdata call pop_top load_fast cert pop_jump_if_true TO_NUMBER load_global ssl load_attr SSLError load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_global CoreFoundation load_attr STRING_LEN_S_ENT_HIGH load_fast cert_array load_fast cert call pop_top load_global CoreFoundation load_attr CFRelease load_fast cert call pop_top jump_backward TO_NUMBER end_for nop load_fast cert_array return_value swap pop_top swap store_fast match reraise push_exc_info load_global Exception check_exc_match pop_jump_if_false TO_NUMBER pop_top load_global CoreFoundation load_attr CFRelease load_fast cert_array call pop_top pop_except load_fast cert_array return_value reraise copy pop_except reraise
    hash: aa12fa870386b16cc535184fe9b6aaf34cf06c72df58a749be5341c392c7c313
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/contrib/_securetransport/low_level.py
  : 
