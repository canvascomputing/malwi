statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/sticker.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-

      """
      The MIT License (MIT)

      Copyright (c) 2015-present Rapptz

      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the "Software"),
      to deal in the Software without restriction, including without limitation
      the rights to use, copy, modify, merge, publish, distribute, sublicense,
      and/or sell copies of the Software, and to permit persons to whom the
      Software is furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE SOFTWARE.
      """

      from .mixins import Hashable
      from .asset import Asset
      from .utils import snowflake_time
      from .enums import StickerType, try_enum

      class Sticker(Hashable):
          """Represents a sticker.

          .. versionadded:: 1.6

          .. container:: operations

              .. describe:: str(x)

                  Returns the name of the sticker.

              .. describe:: x == y

                 Checks if the sticker is equal to another sticker.

              .. describe:: x != y

                 Checks if the sticker is not equal to another sticker.

          Attributes
          ----------
          name: :class:`str`
              The sticker's name.
          id: :class:`int`
              The id of the sticker.
          description: :class:`str`
              The description of the sticker.
          pack_id: :class:`int`
              The id of the sticker's pack.
          format: :class:`StickerType`
              The format for the sticker's image.
          image: :class:`str`
              The sticker's image.
          tags: List[:class:`str`]
              A list of tags for the sticker.
          preview_image: Optional[:class:`str`]
              The sticker's preview asset hash.
          """
          __slots__ = ('_state', 'id', 'name', 'description', 'pack_id', 'format', 'image', 'tags', 'preview_image')

          def __init__(self, *, state, data):
              self._state = state
              self.id = int(data['id'])
              self.name = data['name']
              self.description = data['description']
              self.pack_id = int(data.get('pack_id', 0))
              self.format = try_enum(StickerType, data['format_type'])
              self.image = data['asset']

              try:
                  self.tags = [tag.strip() for tag in data['tags'].split(',')]
              except KeyError:
                  self.tags = []

              self.preview_image = data.get('preview_asset')

          def __repr__(self):
              return '<{0.__class__.__name__} id={0.id} name={0.name!r}>'.format(self)

          def __str__(self):
              return self.name

          @property
          def created_at(self):
              """:class:`datetime.datetime`: Returns the sticker's creation time in UTC as a naive datetime."""
              return snowflake_time(self.id)

          @property
          def image_url(self):
              """Returns an :class:`Asset` for the sticker's image.

              .. note::
                  This will return ``None`` if the format is ``StickerType.lottie``.

              Returns
              -------
              Optional[:class:`Asset`]
                  The resulting CDN asset.
              """
              return self.image_url_as()

          def image_url_as(self, *, size=1024):
              """Optionally returns an :class:`Asset` for the sticker's image.

              The size must be a power of 2 between 16 and 4096.

              .. note::
                  This will return ``None`` if the format is ``StickerType.lottie``.

              Parameters
              -----------
              size: :class:`int`
                  The size of the image to display.

              Raises
              ------
              InvalidArgument
                  Invalid ``size``.

              Returns
              -------
              Optional[:class:`Asset`]
                  The resulting CDN asset or ``None``.
              """
              if self.format is StickerType.lottie:
                  return None

              return Asset._from_sticker_url(self._state, self, size=size)
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ load_const INTEGER load_const import_name mixins import_from Hashable store_name Hashable pop_top load_const INTEGER load_const import_name asset import_from Asset store_name Asset pop_top load_const INTEGER load_const import_name utils import_from snowflake_time store_name snowflake_time pop_top load_const INTEGER load_const import_name enums import_from StickerType store_name StickerType import_from try_enum store_name try_enum pop_top push_null load_build_class load_const OBJECT make_function load_const Sticker load_name Hashable call store_name Sticker return_const None
    hash: f4133353539e37848303bf78311e051993e833351f9ca237a6015ceacfaeb0d7
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/sticker.py: IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgpmcm9tIC5taXhpbnMgaW1wb3J0IEhhc2hhYmxlCmZyb20gLmFzc2V0IGltcG9ydCBBc3NldApmcm9tIC51dGlscyBpbXBvcnQgc25vd2ZsYWtlX3RpbWUKZnJvbSAuZW51bXMgaW1wb3J0IFN0aWNrZXJUeXBlLCB0cnlfZW51bQoKY2xhc3MgU3RpY2tlcihIYXNoYWJsZSk6CiAgICAiIiJSZXByZXNlbnRzIGEgc3RpY2tlci4KCiAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjYKCiAgICAuLiBjb250YWluZXI6OiBvcGVyYXRpb25zCgogICAgICAgIC4uIGRlc2NyaWJlOjogc3RyKHgpCgogICAgICAgICAgICBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBzdGlja2VyLgoKICAgICAgICAuLiBkZXNjcmliZTo6IHggPT0geQoKICAgICAgICAgICBDaGVja3MgaWYgdGhlIHN0aWNrZXIgaXMgZXF1YWwgdG8gYW5vdGhlciBzdGlja2VyLgoKICAgICAgICAuLiBkZXNjcmliZTo6IHggIT0geQoKICAgICAgICAgICBDaGVja3MgaWYgdGhlIHN0aWNrZXIgaXMgbm90IGVxdWFsIHRvIGFub3RoZXIgc3RpY2tlci4KCiAgICBBdHRyaWJ1dGVzCiAgICAtLS0tLS0tLS0tCiAgICBuYW1lOiA6Y2xhc3M6YHN0cmAKICAgICAgICBUaGUgc3RpY2tlcidzIG5hbWUuCiAgICBpZDogOmNsYXNzOmBpbnRgCiAgICAgICAgVGhlIGlkIG9mIHRoZSBzdGlja2VyLgogICAgZGVzY3JpcHRpb246IDpjbGFzczpgc3RyYAogICAgICAgIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgc3RpY2tlci4KICAgIHBhY2tfaWQ6IDpjbGFzczpgaW50YAogICAgICAgIFRoZSBpZCBvZiB0aGUgc3RpY2tlcidzIHBhY2suCiAgICBmb3JtYXQ6IDpjbGFzczpgU3RpY2tlclR5cGVgCiAgICAgICAgVGhlIGZvcm1hdCBmb3IgdGhlIHN0aWNrZXIncyBpbWFnZS4KICAgIGltYWdlOiA6Y2xhc3M6YHN0cmAKICAgICAgICBUaGUgc3RpY2tlcidzIGltYWdlLgogICAgdGFnczogTGlzdFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgQSBsaXN0IG9mIHRhZ3MgZm9yIHRoZSBzdGlja2VyLgogICAgcHJldmlld19pbWFnZTogT3B0aW9uYWxbOmNsYXNzOmBzdHJgXQogICAgICAgIFRoZSBzdGlja2VyJ3MgcHJldmlldyBhc3NldCBoYXNoLgogICAgIiIiCiAgICBfX3Nsb3RzX18gPSAoJ19zdGF0ZScsICdpZCcsICduYW1lJywgJ2Rlc2NyaXB0aW9uJywgJ3BhY2tfaWQnLCAnZm9ybWF0JywgJ2ltYWdlJywgJ3RhZ3MnLCAncHJldmlld19pbWFnZScpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICosIHN0YXRlLCBkYXRhKToKICAgICAgICBzZWxmLl9zdGF0ZSA9IHN0YXRlCiAgICAgICAgc2VsZi5pZCA9IGludChkYXRhWydpZCddKQogICAgICAgIHNlbGYubmFtZSA9IGRhdGFbJ25hbWUnXQogICAgICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkYXRhWydkZXNjcmlwdGlvbiddCiAgICAgICAgc2VsZi5wYWNrX2lkID0gaW50KGRhdGEuZ2V0KCdwYWNrX2lkJywgMCkpCiAgICAgICAgc2VsZi5mb3JtYXQgPSB0cnlfZW51bShTdGlja2VyVHlwZSwgZGF0YVsnZm9ybWF0X3R5cGUnXSkKICAgICAgICBzZWxmLmltYWdlID0gZGF0YVsnYXNzZXQnXQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYudGFncyA9IFt0YWcuc3RyaXAoKSBmb3IgdGFnIGluIGRhdGFbJ3RhZ3MnXS5zcGxpdCgnLCcpXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgc2VsZi50YWdzID0gW10KCiAgICAgICAgc2VsZi5wcmV2aWV3X2ltYWdlID0gZGF0YS5nZXQoJ3ByZXZpZXdfYXNzZXQnKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzx7MC5fX2NsYXNzX18uX19uYW1lX199IGlkPXswLmlkfSBuYW1lPXswLm5hbWUhcn0+Jy5mb3JtYXQoc2VsZikKCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5uYW1lCgogICAgQHByb3BlcnR5CiAgICBkZWYgY3JlYXRlZF9hdChzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGRhdGV0aW1lLmRhdGV0aW1lYDogUmV0dXJucyB0aGUgc3RpY2tlcidzIGNyZWF0aW9uIHRpbWUgaW4gVVRDIGFzIGEgbmFpdmUgZGF0ZXRpbWUuIiIiCiAgICAgICAgcmV0dXJuIHNub3dmbGFrZV90aW1lKHNlbGYuaWQpCgogICAgQHByb3BlcnR5CiAgICBkZWYgaW1hZ2VfdXJsKHNlbGYpOgogICAgICAgICIiIlJldHVybnMgYW4gOmNsYXNzOmBBc3NldGAgZm9yIHRoZSBzdGlja2VyJ3MgaW1hZ2UuCgogICAgICAgIC4uIG5vdGU6OgogICAgICAgICAgICBUaGlzIHdpbGwgcmV0dXJuIGBgTm9uZWBgIGlmIHRoZSBmb3JtYXQgaXMgYGBTdGlja2VyVHlwZS5sb3R0aWVgYC4KCiAgICAgICAgUmV0dXJucwogICAgICAgIC0tLS0tLS0KICAgICAgICBPcHRpb25hbFs6Y2xhc3M6YEFzc2V0YF0KICAgICAgICAgICAgVGhlIHJlc3VsdGluZyBDRE4gYXNzZXQuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuaW1hZ2VfdXJsX2FzKCkKCiAgICBkZWYgaW1hZ2VfdXJsX2FzKHNlbGYsICosIHNpemU9MTAyNCk6CiAgICAgICAgIiIiT3B0aW9uYWxseSByZXR1cm5zIGFuIDpjbGFzczpgQXNzZXRgIGZvciB0aGUgc3RpY2tlcidzIGltYWdlLgoKICAgICAgICBUaGUgc2l6ZSBtdXN0IGJlIGEgcG93ZXIgb2YgMiBiZXR3ZWVuIDE2IGFuZCA0MDk2LgoKICAgICAgICAuLiBub3RlOjoKICAgICAgICAgICAgVGhpcyB3aWxsIHJldHVybiBgYE5vbmVgYCBpZiB0aGUgZm9ybWF0IGlzIGBgU3RpY2tlclR5cGUubG90dGllYGAuCgogICAgICAgIFBhcmFtZXRlcnMKICAgICAgICAtLS0tLS0tLS0tLQogICAgICAgIHNpemU6IDpjbGFzczpgaW50YAogICAgICAgICAgICBUaGUgc2l6ZSBvZiB0aGUgaW1hZ2UgdG8gZGlzcGxheS4KCiAgICAgICAgUmFpc2VzCiAgICAgICAgLS0tLS0tCiAgICAgICAgSW52YWxpZEFyZ3VtZW50CiAgICAgICAgICAgIEludmFsaWQgYGBzaXplYGAuCgogICAgICAgIFJldHVybnMKICAgICAgICAtLS0tLS0tCiAgICAgICAgT3B0aW9uYWxbOmNsYXNzOmBBc3NldGBdCiAgICAgICAgICAgIFRoZSByZXN1bHRpbmcgQ0ROIGFzc2V0IG9yIGBgTm9uZWBgLgogICAgICAgICIiIgogICAgICAgIGlmIHNlbGYuZm9ybWF0IGlzIFN0aWNrZXJUeXBlLmxvdHRpZToKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgcmV0dXJuIEFzc2V0Ll9mcm9tX3N0aWNrZXJfdXJsKHNlbGYuX3N0YXRlLCBzZWxmLCBzaXplPXNpemUpCg==
