statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/packages/socks.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      """SocksiPy - Python SOCKS module.

      Copyright 2006 Dan-Haim. All rights reserved.

      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
      1. Redistributions of source code must retain the above copyright notice, this
         list of conditions and the following disclaimer.
      2. Redistributions in binary form must reproduce the above copyright notice,
         this list of conditions and the following disclaimer in the documentation
         and/or other materials provided with the distribution.
      3. Neither the name of Dan Haim nor the names of his contributors may be used
         to endorse or promote products derived from this software without specific
         prior written permission.

      THIS SOFTWARE IS PROVIDED BY DAN HAIM "AS IS" AND ANY EXPRESS OR IMPLIED
      WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
      EVENT SHALL DAN HAIM OR HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
      INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA
      OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
      OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


      This module provides a standard socket-like interface for Python
      for tunneling connections through SOCKS proxies.

      ===============================================================================

      Minor modifications made by Christopher Gilbert (http://motomastyle.com/)
      for use in PyLoris (http://pyloris.sourceforge.net/)

      Minor modifications made by Mario Vilas (http://breakingcode.wordpress.com/)
      mainly to merge bug fixes found in Sourceforge

      Modifications made by Anorov (https://github.com/Anorov)
      -Forked and renamed to PySocks
      -Fixed issue with HTTP proxy failure checking (same bug that was in the
       old ___recvall() method)
      -Included SocksiPyHandler (sockshandler.py), to be used as a urllib2 handler,
       courtesy of e000 (https://github.com/e000):
       https://gist.github.com/869791#file_socksipyhandler.py
      -Re-styled code to make it readable
          -Aliased PROXY_TYPE_SOCKS5 -> SOCKS5 etc.
          -Improved exception handling and output
          -Removed irritating use of sequence indexes, replaced with tuple unpacked
           variables
          -Fixed up Python 3 bytestring handling - chr(0x03).encode() -> b"\x03"
          -Other general fixes
      -Added clarification that the HTTP proxy connection method only supports
       CONNECT-style tunneling HTTP proxies
      -Various small bug fixes
      """

      from base64 import b64encode
      try:
          from collections.abc import Callable
      except ImportError:
          from collections import Callable
      from errno import EOPNOTSUPP, EINVAL, EAGAIN
      import functools
      from io import BytesIO
      import logging
      import os
      from os import SEEK_CUR
      import socket
      import struct
      import sys

      __version__ = "1.6.7"


      if os.name == "nt" and sys.version_info < (3, 0):
          try:
              import win_inet_pton
          except ImportError:
              raise ImportError(
                  "To run PySocks on Windows you must install win_inet_pton")

      log = logging.getLogger(__name__)

      PROXY_TYPE_SOCKS4 = SOCKS4 = 1
      PROXY_TYPE_SOCKS5 = SOCKS5 = 2
      PROXY_TYPE_HTTP = HTTP = 3

      PROXY_TYPES = {"SOCKS4": SOCKS4, "SOCKS5": SOCKS5, "HTTP": HTTP}
      PRINTABLE_PROXY_TYPES = dict(zip(PROXY_TYPES.values(), PROXY_TYPES.keys()))

      _orgsocket = _orig_socket = socket.socket


      def set_self_blocking(function):

          @functools.wraps(function)
          def wrapper(*args, **kwargs):
              self = args[0]
              try:
                  _is_blocking = self.gettimeout()
                  if _is_blocking == 0:
                      self.setblocking(True)
                  return function(*args, **kwargs)
              except Exception as e:
                  raise
              finally:
                  # set orgin blocking
                  if _is_blocking == 0:
                      self.setblocking(False)
          return wrapper
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ load_const INTEGER load_const import_name base64 import_from ENCODING_DECODING store_name ENCODING_DECODING pop_top nop load_const INTEGER load_const import_name collections.abc import_from Callable store_name Callable pop_top load_const INTEGER load_const import_name errno import_from EOPNOTSUPP store_name EOPNOTSUPP import_from EINVAL store_name EINVAL import_from EAGAIN store_name EAGAIN pop_top load_const INTEGER load_const import_name functools store_name functools load_const INTEGER load_const import_name io import_from BytesIO store_name BytesIO pop_top load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name os import_from SEEK_CUR store_name SEEK_CUR pop_top load_const INTEGER load_const import_name socket store_name socket load_const INTEGER load_const import_name struct store_name struct load_const INTEGER load_const import_name sys store_name sys load_const 1.6.7 store_name __version__ load_name os load_attr name load_const nt compare_op == pop_jump_if_false TO_NUMBER load_name sys load_attr version_info load_const compare_op < pop_jump_if_false TO_NUMBER nop load_const INTEGER load_const import_name win_inet_pton store_name win_inet_pton push_null load_name logging load_attr getLogger load_name __name__ call store_name log load_const INTEGER copy store_name STRING_LEN_S_ENT_HIGH store_name SOCKS4 load_const INTEGER copy store_name STRING_LEN_S_ENT_HIGH store_name SOCKS5 load_const INTEGER copy store_name PROXY_TYPE_HTTP store_name HTTP load_name SOCKS4 load_name SOCKS5 load_name HTTP load_const build_const_key_map store_name PROXY_TYPES push_null load_name dict push_null load_name zip load_name PROXY_TYPES load_attr values call load_name PROXY_TYPES load_attr keys call call call store_name STRING_LEN_S_ENT_HIGH load_name socket load_attr socket copy store_name _orgsocket store_name _orig_socket load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const ProxyError load_name IOError call store_name ProxyError push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name ProxyError call store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name ProxyError call store_name STRING_BASE64_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const SOCKS5AuthError load_name ProxyError call store_name SOCKS5AuthError push_null load_build_class load_const OBJECT make_function load_const SOCKS5Error load_name ProxyError call store_name SOCKS5Error push_null load_build_class load_const OBJECT make_function load_const SOCKS4Error load_name ProxyError call store_name SOCKS4Error push_null load_build_class load_const OBJECT make_function load_const HTTPError load_name ProxyError call store_name HTTPError load_const STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map store_name SOCKS4_ERRORS load_const STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_const TTL expired load_const STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH load_const build_const_key_map store_name SOCKS5_ERRORS load_name SOCKS4 load_const INTEGER load_name SOCKS5 load_const INTEGER load_name HTTP load_const INTEGER build_map store_name DEFAULT_PORTS nop nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name setdefaultproxy load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_name STRING_LEN_S_ENT_HIGH store_name getdefaultproxy load_const OBJECT make_function store_name wrap_module load_name wrap_module store_name wrapmodule nop nop nop nop nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const _BaseSocket load_name socket load_attr socket call store_name _BaseSocket load_const OBJECT make_function store_name _makemethod load_const get_iter for_iter TO_NUMBER store_name name push_null load_name REFLECTION_DYNAMIC_READ load_name _BaseSocket load_name name load_const call store_name method push_null load_name isinstance load_name method load_name Callable call pop_jump_if_false TO_NUMBER jump_backward TO_NUMBER load_name _BaseSocket load_attr _savenames load_attr append load_name name call pop_top push_null load_name REFLECTION_DYNAMIC_WRITE load_name _BaseSocket load_name name push_null load_name _makemethod load_name name call call pop_top jump_backward TO_NUMBER end_for push_null load_build_class load_const OBJECT make_function load_const socksocket load_name _BaseSocket call store_name socksocket return_const None push_exc_info load_name ImportError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const INTEGER load_const import_name collections import_from Callable store_name Callable pop_top pop_except extended_arg jump_backward TO_NUMBER reraise copy pop_except reraise push_exc_info load_name ImportError check_exc_match pop_jump_if_false TO_NUMBER pop_top push_null load_name ImportError load_const STRING_LEN_S_ENT_HIGH call raise_varargs reraise copy pop_except reraise
    hash: c114ed9ccc21e1a77f225082c4e3f57673c9ecfe28a34611a0b129b1649a22a5
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/packages/socks.py
  : 
