statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/util/connection.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      from __future__ import absolute_import
      import socket
      from .wait import wait_for_read
      from .selectors import HAS_SELECT, SelectorError


      def is_connection_dropped(conn):  # Platform-specific
          """
          Returns True if the connection is dropped and should be closed.

          :param conn:
              :class:`httplib.HTTPConnection` object.

          Note: For platforms like AppEngine, this will always return ``False`` to
          let the platform handle connection recycling transparently for us.
          """
          sock = getattr(conn, 'sock', False)
          if sock is False:  # Platform-specific: AppEngine
              return False
          if sock is None:  # Connection already closed (such as by httplib).
              return True

          if not HAS_SELECT:
              return False

          try:
              return bool(wait_for_read(sock, timeout=0.0))
          except SelectorError:
              return True
    tokens: resume load_const INTEGER load_const import_name __future__ import_from absolute_import store_name absolute_import pop_top load_const INTEGER load_const import_name socket store_name socket load_const INTEGER load_const import_name wait import_from wait_for_read store_name wait_for_read pop_top load_const INTEGER load_const import_name selectors import_from HAS_SELECT store_name HAS_SELECT import_from SelectorError store_name SelectorError pop_top load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_name socket load_attr STRING_LEN_S_ENT_HIGH load_const load_const build_tuple load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name _has_ipv6 push_null load_name _has_ipv6 load_const STRING_IP call store_name HAS_IPV6 return_const None
    hash: 3c78995e70dad2ca1b758ae4950835fcd49eb38e9e4e478f0c3be9a1011b3d8f
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/urllib3/util/connection.py: ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKaW1wb3J0IHNvY2tldApmcm9tIC53YWl0IGltcG9ydCB3YWl0X2Zvcl9yZWFkCmZyb20gLnNlbGVjdG9ycyBpbXBvcnQgSEFTX1NFTEVDVCwgU2VsZWN0b3JFcnJvcgoKCmRlZiBpc19jb25uZWN0aW9uX2Ryb3BwZWQoY29ubik6ICAjIFBsYXRmb3JtLXNwZWNpZmljCiAgICAiIiIKICAgIFJldHVybnMgVHJ1ZSBpZiB0aGUgY29ubmVjdGlvbiBpcyBkcm9wcGVkIGFuZCBzaG91bGQgYmUgY2xvc2VkLgoKICAgIDpwYXJhbSBjb25uOgogICAgICAgIDpjbGFzczpgaHR0cGxpYi5IVFRQQ29ubmVjdGlvbmAgb2JqZWN0LgoKICAgIE5vdGU6IEZvciBwbGF0Zm9ybXMgbGlrZSBBcHBFbmdpbmUsIHRoaXMgd2lsbCBhbHdheXMgcmV0dXJuIGBgRmFsc2VgYCB0bwogICAgbGV0IHRoZSBwbGF0Zm9ybSBoYW5kbGUgY29ubmVjdGlvbiByZWN5Y2xpbmcgdHJhbnNwYXJlbnRseSBmb3IgdXMuCiAgICAiIiIKICAgIHNvY2sgPSBnZXRhdHRyKGNvbm4sICdzb2NrJywgRmFsc2UpCiAgICBpZiBzb2NrIGlzIEZhbHNlOiAgIyBQbGF0Zm9ybS1zcGVjaWZpYzogQXBwRW5naW5lCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBpZiBzb2NrIGlzIE5vbmU6ICAjIENvbm5lY3Rpb24gYWxyZWFkeSBjbG9zZWQgKHN1Y2ggYXMgYnkgaHR0cGxpYikuCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBpZiBub3QgSEFTX1NFTEVDVDoKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICB0cnk6CiAgICAgICAgcmV0dXJuIGJvb2wod2FpdF9mb3JfcmVhZChzb2NrLCB0aW1lb3V0PTAuMCkpCiAgICBleGNlcHQgU2VsZWN0b3JFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCiMgVGhpcyBmdW5jdGlvbiBpcyBjb3BpZWQgZnJvbSBzb2NrZXQucHkgaW4gdGhlIFB5dGhvbiAyLjcgc3RhbmRhcmQKIyBsaWJyYXJ5IHRlc3Qgc3VpdGUuIEFkZGVkIHRvIGl0cyBzaWduYXR1cmUgaXMgb25seSBgc29ja2V0X29wdGlvbnNgLgojIE9uZSBhZGRpdGlvbmFsIG1vZGlmaWNhdGlvbiBpcyB0aGF0IHdlIGF2b2lkIGJpbmRpbmcgdG8gSVB2NiBzZXJ2ZXJzCiMgZGlzY292ZXJlZCBpbiBETlMgaWYgdGhlIHN5c3RlbSBkb2Vzbid0IGhhdmUgSVB2NiBmdW5jdGlvbmFsaXR5LgpkZWYgY3JlYXRlX2Nvbm5lY3Rpb24oYWRkcmVzcywgdGltZW91dD1zb2NrZXQuX0dMT0JBTF9ERUZBVUxUX1RJTUVPVVQsCiAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfYWRkcmVzcz1Ob25lLCBzb2NrZXRfb3B0aW9ucz1Ob25lKToKICAgICIiIkNvbm5lY3QgdG8gKmFkZHJlc3MqIGFuZCByZXR1cm4gdGhlIHNvY2tldCBvYmplY3QuCgogICAgQ29udmVuaWVuY2UgZnVuY3Rpb24uICBDb25uZWN0IHRvICphZGRyZXNzKiAoYSAyLXR1cGxlIGBgKGhvc3QsCiAgICBwb3J0KWBgKSBhbmQgcmV0dXJuIHRoZSBzb2NrZXQgb2JqZWN0LiAgUGFzc2luZyB0aGUgb3B0aW9uYWwKICAgICp0aW1lb3V0KiBwYXJhbWV0ZXIgd2lsbCBzZXQgdGhlIHRpbWVvdXQgb24gdGhlIHNvY2tldCBpbnN0YW5jZQogICAgYmVmb3JlIGF0dGVtcHRpbmcgdG8gY29ubmVjdC4gIElmIG5vICp0aW1lb3V0KiBpcyBzdXBwbGllZCwgdGhlCiAgICBnbG9iYWwgZGVmYXVsdCB0aW1lb3V0IHNldHRpbmcgcmV0dXJuZWQgYnkgOmZ1bmM6YGdldGRlZmF1bHR0aW1lb3V0YAogICAgaXMgdXNlZC4gIElmICpzb3VyY2VfYWRkcmVzcyogaXMgc2V0IGl0IG11c3QgYmUgYSB0dXBsZSBvZiAoaG9zdCwgcG9ydCkKICAgIGZvciB0aGUgc29ja2V0IHRvIGJpbmQgYXMgYSBzb3VyY2UgYWRkcmVzcyBiZWZvcmUgbWFraW5nIHRoZSBjb25uZWN0aW9uLgogICAgQW4gaG9zdCBvZiAnJyBvciBwb3J0IDAgdGVsbHMgdGhlIE9TIHRvIHVzZSB0aGUgZGVmYXVsdC4KICAgICIiIgoKICAgIGhvc3QsIHBvcnQgPSBhZGRyZXNzCiAgICBpZiBob3N0LnN0YXJ0c3dpdGgoJ1snKToKICAgICAgICBob3N0ID0gaG9zdC5zdHJpcCgnW10nKQogICAgZXJyID0gTm9uZQoKICAgICMgVXNpbmcgdGhlIHZhbHVlIGZyb20gYWxsb3dlZF9nYWlfZmFtaWx5KCkgaW4gdGhlIGNvbnRleHQgb2YgZ2V0YWRkcmluZm8gbGV0cwogICAgIyB1cyBzZWxlY3Qgd2hldGhlciB0byB3b3JrIHdpdGggSVB2NCBETlMgcmVjb3JkcywgSVB2NiByZWNvcmRzLCBvciBib3RoLgogICAgIyBUaGUgb3JpZ2luYWwgY3JlYXRlX2Nvbm5lY3Rpb24gZnVuY3Rpb24gYWx3YXlzIHJldHVybnMgYWxsIHJlY29yZHMuCiAgICBmYW1pbHkgPSBhbGxvd2VkX2dhaV9mYW1pbHkoKQoKICAgIGZvciByZXMgaW4gc29ja2V0LmdldGFkZHJpbmZvKGhvc3QsIHBvcnQsIGZhbWlseSwgc29ja2V0LlNPQ0tfU1RSRUFNKToKICAgICAgICBhZiwgc29ja3R5cGUsIHByb3RvLCBjYW5vbm5hbWUsIHNhID0gcmVzCiAgICAgICAgc29jayA9IE5vbmUKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNvY2sgPSBzb2NrZXQuc29ja2V0KGFmLCBzb2NrdHlwZSwgcHJvdG8pCgogICAgICAgICAgICAjIElmIHByb3ZpZGVkLCBzZXQgc29ja2V0IGxldmVsIG9wdGlvbnMgYmVmb3JlIGNvbm5lY3RpbmcuCiAgICAgICAgICAgIF9zZXRfc29ja2V0X29wdGlvbnMoc29jaywgc29ja2V0X29wdGlvbnMpCgogICAgICAgICAgICBpZiB0aW1lb3V0IGlzIG5vdCBzb2NrZXQuX0dMT0JBTF9ERUZBVUxUX1RJTUVPVVQ6CiAgICAgICAgICAgICAgICBzb2NrLnNldHRpbWVvdXQodGltZW91dCkKICAgICAgICAgICAgaWYgc291cmNlX2FkZHJlc3M6CiAgICAgICAgICAgICAgICBzb2NrLmJpbmQoc291cmNlX2FkZHJlc3MpCiAgICAgICAgICAgIHNvY2suY29ubmVjdChzYSkKICAgICAgICAgICAgcmV0dXJuIHNvY2sKCiAgICAgICAgZXhjZXB0IHNvY2tldC5lcnJvciBhcyBlOgogICAgICAgICAgICBlcnIgPSBlCiAgICAgICAgICAgIGlmIHNvY2sgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBzb2NrLmNsb3NlKCkKICAgICAgICAgICAgICAgIHNvY2sgPSBOb25lCgogICAgaWYgZXJyIGlzIG5vdCBOb25lOgogICAgICAgIHJhaXNlIGVycgoKICAgIHJhaXNlIHNvY2tldC5lcnJvcigiZ2V0YWRkcmluZm8gcmV0dXJucyBhbiBlbXB0eSBsaXN0IikKCgpkZWYgX3NldF9zb2NrZXRfb3B0aW9ucyhzb2NrLCBvcHRpb25zKToKICAgIGlmIG9wdGlvbnMgaXMgTm9uZToKICAgICAgICByZXR1cm4KCiAgICBmb3Igb3B0IGluIG9wdGlvbnM6CiAgICAgICAgc29jay5zZXRzb2Nrb3B0KCpvcHQpCgoKZGVmIGFsbG93ZWRfZ2FpX2ZhbWlseSgpOgogICAgIiIiVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byB3b3JrIGluIHRoZSBjb250ZXh0IG9mCiAgICBnZXRhZGRyaW5mbywgd2hlcmUgZmFtaWx5PXNvY2tldC5BRl9VTlNQRUMgaXMgdGhlIGRlZmF1bHQgYW5kCiAgICB3aWxsIHBlcmZvcm0gYSBETlMgc2VhcmNoIGZvciBib3RoIElQdjYgYW5kIElQdjQgcmVjb3Jkcy4iIiIKCiAgICBmYW1pbHkgPSBzb2NrZXQuQUZfSU5FVAogICAgaWYgSEFTX0lQVjY6CiAgICAgICAgZmFtaWx5ID0gc29ja2V0LkFGX1VOU1BFQwogICAgcmV0dXJuIGZhbWlseQoKCmRlZiBfaGFzX2lwdjYoaG9zdCk6CiAgICAiIiIgUmV0dXJucyBUcnVlIGlmIHRoZSBzeXN0ZW0gY2FuIGJpbmQgYW4gSVB2NiBhZGRyZXNzLiAiIiIKICAgIHNvY2sgPSBOb25lCiAgICBoYXNfaXB2NiA9IEZhbHNlCgogICAgaWYgc29ja2V0Lmhhc19pcHY2OgogICAgICAgICMgaGFzX2lwdjYgcmV0dXJucyB0cnVlIGlmIGNQeXRob24gd2FzIGNvbXBpbGVkIHdpdGggSVB2NiBzdXBwb3J0LgogICAgICAgICMgSXQgZG9lcyBub3QgdGVsbCB1cyBpZiB0aGUgc3lzdGVtIGhhcyBJUHY2IHN1cHBvcnQgZW5hYmxlZC4gVG8KICAgICAgICAjIGRldGVybWluZSB0aGF0IHdlIG11c3QgYmluZCB0byBhbiBJUHY2IGFkZHJlc3MuCiAgICAgICAgIyBodHRwczovL2dpdGh1Yi5jb20vc2hhem93L3VybGxpYjMvcHVsbC82MTEKICAgICAgICAjIGh0dHBzOi8vYnVncy5weXRob24ub3JnL2lzc3VlNjU4MzI3CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzb2NrID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVDYpCiAgICAgICAgICAgIHNvY2suYmluZCgoaG9zdCwgMCkpCiAgICAgICAgICAgIGhhc19pcHY2ID0gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHBhc3MKCiAgICBpZiBzb2NrOgogICAgICAgIHNvY2suY2xvc2UoKQogICAgcmV0dXJuIGhhc19pcHY2CgoKSEFTX0lQVjYgPSBfaGFzX2lwdjYoJzo6MScpCg==
