statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/typesutil/1.9.4/typesutil-1.9.4/typesutil-1.9.4/typesutil/__init__.py
  contents:
  - name: Date.__ne__
    score: 0.0
    code: |-
      def __ne__(self, other):
              if isinstance(other, Date):
                  return self.day_count != other.day_count
              elif hasattr(other, "day_count"):
                  return NotImplemented
              else:
                  return True
    tokens: TARGETED_FILE resume load_global isinstance load_fast other load_global Date call pop_jump_if_false TO_NUMBER load_fast self load_attr day_count load_fast other load_attr day_count compare_op != return_value load_global REFLECTION_DYNAMIC_READ load_fast other load_const day_count call pop_jump_if_false TO_NUMBER load_global NotImplemented return_value return_const True
    hash: 0eca9d3e896d4b20d388150466fbcfbf15bdaddd6b08b9e60f65c08e72ad04e9
sources:
  .repo_cache/malicious_repos/pypi_malregistry/typesutil/1.9.4/typesutil-1.9.4/typesutil-1.9.4/typesutil/__init__.py: 
