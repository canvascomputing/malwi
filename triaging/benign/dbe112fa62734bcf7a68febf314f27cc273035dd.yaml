statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/symmetric.py
  contents:
  - name: _calculate_aes_cipher
    score: 0.0
    code: |-
      def _calculate_aes_cipher(key):
          """
          Determines if the key is a valid AES 128, 192 or 256 key

          :param key:
              A byte string of the key to use

          :raises:
              ValueError - when an invalid key is provided

          :return:
              A unicode string of the AES variation - "aes128", "aes192" or "aes256"
          """

          if len(key) not in [16, 24, 32]:
              raise ValueError(pretty_message(
                  '''
                  key must be either 16, 24 or 32 bytes (128, 192 or 256 bits)
                  long - is %s
                  ''',
                  len(key)
              ))

          if len(key) == 16:
              cipher = 'aes128'
          elif len(key) == 24:
              cipher = 'aes192'
          elif len(key) == 32:
              cipher = 'aes256'

          return cipher
    tokens: resume load_global len load_fast key call load_const contains_op pop_jump_if_false TO_NUMBER load_global ValueError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_global len load_fast key call call call raise_varargs load_global len load_fast key call load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_const aes128 store_fast cipher load_fast cipher return_value load_global len load_fast key call load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_const aes192 store_fast cipher load_fast cipher return_value load_global len load_fast key call load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_const aes256 store_fast cipher load_fast_check cipher return_value
    hash: 42839dacd818819ca683594629226cfe01d931bcfa803bdeba3e8f6e440b65db
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/symmetric.py
  : 
