statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/waiters.py
  contents:
  - name: WaiterStateDocBuilder.__init__
    score: null
    code: |-
      def __init__(self, waiter_config):
              self._waiter_config = waiter_config
    tokens: resume load_fast waiter_config load_fast self store_attr _waiter_config return_const None
    hash: 231839318a7050156761e327b5c920f1a47693cb8b5d9fc33aa8c9c6282018c2
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/waiters.py: 
