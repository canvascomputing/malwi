statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/typesutil/1.9.4/typesutil-1.9.4/typesutil-1.9.4/typesutil/modern.py
  contents:
  - name: InternetTime.beat
    score: 0.0
    code: |-
      @property
          def beat(self):
              return self._beat
    tokens: resume load_fast self load_attr _beat return_value
    hash: ba98a4859651bed7804b011b5c829603d34b44c4d388f2079e6e505d25f120c7
sources:
  .repo_cache/malicious_repos/pypi_malregistry/typesutil/1.9.4/typesutil-1.9.4/typesutil-1.9.4/typesutil/modern.py: 
