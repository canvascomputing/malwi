statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_pkcs12.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # coding: utf-8
      from __future__ import unicode_literals, division, absolute_import, print_function

      import sys
      import hashlib
      import math

      from ._asn1 import int_from_bytes, int_to_bytes
      from ._errors import pretty_message
      from ._types import type_name, byte_cls, int_types


      if sys.version_info < (3,):
          chr_cls = chr

      else:
          def chr_cls(num):
              return bytes([num])
    tokens: resume load_const INTEGER load_const import_name __future__ import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from division store_name division import_from absolute_import store_name absolute_import import_from print_function store_name print_function pop_top load_const INTEGER load_const import_name sys store_name sys load_const INTEGER load_const import_name hashlib store_name hashlib load_const INTEGER load_const import_name math store_name math load_const INTEGER load_const import_name _asn1 import_from int_from_bytes store_name int_from_bytes import_from int_to_bytes store_name int_to_bytes pop_top load_const INTEGER load_const import_name _errors import_from pretty_message store_name pretty_message pop_top load_const INTEGER load_const import_name _types import_from type_name store_name type_name import_from byte_cls store_name byte_cls import_from int_types store_name int_types pop_top load_name sys load_attr version_info load_const compare_op < pop_jump_if_false TO_NUMBER load_name chr store_name chr_cls jump_forward TO_NUMBER load_const OBJECT make_function store_name chr_cls load_const pkcs12_kdf build_list store_name __all__ load_const OBJECT make_function store_name pkcs12_kdf return_const None
    hash: 6fedab7496b52991779e2cb09b4cc8bd2cd78dcb40d79740cdfafc3dc3fc7f17
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_pkcs12.py: IyBjb2Rpbmc6IHV0Zi04CmZyb20gX19mdXR1cmVfXyBpbXBvcnQgdW5pY29kZV9saXRlcmFscywgZGl2aXNpb24sIGFic29sdXRlX2ltcG9ydCwgcHJpbnRfZnVuY3Rpb24KCmltcG9ydCBzeXMKaW1wb3J0IGhhc2hsaWIKaW1wb3J0IG1hdGgKCmZyb20gLl9hc24xIGltcG9ydCBpbnRfZnJvbV9ieXRlcywgaW50X3RvX2J5dGVzCmZyb20gLl9lcnJvcnMgaW1wb3J0IHByZXR0eV9tZXNzYWdlCmZyb20gLl90eXBlcyBpbXBvcnQgdHlwZV9uYW1lLCBieXRlX2NscywgaW50X3R5cGVzCgoKaWYgc3lzLnZlcnNpb25faW5mbyA8ICgzLCk6CiAgICBjaHJfY2xzID0gY2hyCgplbHNlOgogICAgZGVmIGNocl9jbHMobnVtKToKICAgICAgICByZXR1cm4gYnl0ZXMoW251bV0pCgoKX19hbGxfXyA9IFsKICAgICdwa2NzMTJfa2RmJywKXQoKCmRlZiBwa2NzMTJfa2RmKGhhc2hfYWxnb3JpdGhtLCBwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5X2xlbmd0aCwgaWRfKToKICAgICIiIgogICAgS0RGIGZyb20gUkZDNzI5MiBhcHBlbmRpeCBiLjIgLSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzI5MiNwYWdlLTE5CgogICAgOnBhcmFtIGhhc2hfYWxnb3JpdGhtOgogICAgICAgIFRoZSBzdHJpbmcgbmFtZSBvZiB0aGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlOiAibWQ1IiwgInNoYTEiLCAic2hhMjI0IiwKICAgICAgICAic2hhMjU2IiwgInNoYTM4NCIsICJzaGE1MTIiCgogICAgOnBhcmFtIHBhc3N3b3JkOgogICAgICAgIEEgYnl0ZSBzdHJpbmcgb2YgdGhlIHBhc3N3b3JkIHRvIHVzZSBhbiBpbnB1dCB0byB0aGUgS0RGCgogICAgOnBhcmFtIHNhbHQ6CiAgICAgICAgQSBjcnlwdG9ncmFwaGljIHJhbmRvbSBieXRlIHN0cmluZwoKICAgIDpwYXJhbSBpdGVyYXRpb25zOgogICAgICAgIFRoZSBudW1iZXJzIG9mIGl0ZXJhdGlvbnMgdG8gdXNlIHdoZW4gZGVyaXZpbmcgdGhlIGtleQoKICAgIDpwYXJhbSBrZXlfbGVuZ3RoOgogICAgICAgIFRoZSBsZW5ndGggb2YgdGhlIGRlc2lyZWQga2V5IGluIGJ5dGVzCgogICAgOnBhcmFtIGlkXzoKICAgICAgICBUaGUgSUQgb2YgdGhlIHVzYWdlIC0gMSBmb3Iga2V5LCAyIGZvciBpdiwgMyBmb3IgbWFjCgogICAgOnJldHVybjoKICAgICAgICBUaGUgZGVyaXZlZCBrZXkgYXMgYSBieXRlIHN0cmluZwogICAgIiIiCgogICAgaWYgbm90IGlzaW5zdGFuY2UocGFzc3dvcmQsIGJ5dGVfY2xzKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IocHJldHR5X21lc3NhZ2UoCiAgICAgICAgICAgICcnJwogICAgICAgICAgICBwYXNzd29yZCBtdXN0IGJlIGEgYnl0ZSBzdHJpbmcsIG5vdCAlcwogICAgICAgICAgICAnJycsCiAgICAgICAgICAgIHR5cGVfbmFtZShwYXNzd29yZCkKICAgICAgICApKQoKICAgIGlmIG5vdCBpc2luc3RhbmNlKHNhbHQsIGJ5dGVfY2xzKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IocHJldHR5X21lc3NhZ2UoCiAgICAgICAgICAgICcnJwogICAgICAgICAgICBzYWx0IG11c3QgYmUgYSBieXRlIHN0cmluZywgbm90ICVzCiAgICAgICAgICAgICcnJywKICAgICAgICAgICAgdHlwZV9uYW1lKHNhbHQpCiAgICAgICAgKSkKCiAgICBpZiBub3QgaXNpbnN0YW5jZShpdGVyYXRpb25zLCBpbnRfdHlwZXMpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcihwcmV0dHlfbWVzc2FnZSgKICAgICAgICAgICAgJycnCiAgICAgICAgICAgIGl0ZXJhdGlvbnMgbXVzdCBiZSBhbiBpbnRlZ2VyLCBub3QgJXMKICAgICAgICAgICAgJycnLAogICAgICAgICAgICB0eXBlX25hbWUoaXRlcmF0aW9ucykKICAgICAgICApKQoKICAgIGlmIGl0ZXJhdGlvbnMgPCAxOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IocHJldHR5X21lc3NhZ2UoCiAgICAgICAgICAgICcnJwogICAgICAgICAgICBpdGVyYXRpb25zIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAgLSBpcyAlcwogICAgICAgICAgICAnJycsCiAgICAgICAgICAgIHJlcHIoaXRlcmF0aW9ucykKICAgICAgICApKQoKICAgIGlmIG5vdCBpc2luc3RhbmNlKGtleV9sZW5ndGgsIGludF90eXBlcyk6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKHByZXR0eV9tZXNzYWdlKAogICAgICAgICAgICAnJycKICAgICAgICAgICAga2V5X2xlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIsIG5vdCAlcwogICAgICAgICAgICAnJycsCiAgICAgICAgICAgIHR5cGVfbmFtZShrZXlfbGVuZ3RoKQogICAgICAgICkpCgogICAgaWYga2V5X2xlbmd0aCA8IDE6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihwcmV0dHlfbWVzc2FnZSgKICAgICAgICAgICAgJycnCiAgICAgICAgICAgIGtleV9sZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCAtIGlzICVzCiAgICAgICAgICAgICcnJywKICAgICAgICAgICAgcmVwcihrZXlfbGVuZ3RoKQogICAgICAgICkpCgogICAgaWYgaGFzaF9hbGdvcml0aG0gbm90IGluIHNldChbJ21kNScsICdzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMiddKToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKHByZXR0eV9tZXNzYWdlKAogICAgICAgICAgICAnJycKICAgICAgICAgICAgaGFzaF9hbGdvcml0aG0gbXVzdCBiZSBvbmUgb2YgIm1kNSIsICJzaGExIiwgInNoYTIyNCIsICJzaGEyNTYiLAogICAgICAgICAgICAic2hhMzg0IiwgInNoYTUxMiIsIG5vdCAlcwogICAgICAgICAgICAnJycsCiAgICAgICAgICAgIHJlcHIoaGFzaF9hbGdvcml0aG0pCiAgICAgICAgKSkKCiAgICBpZiBpZF8gbm90IGluIHNldChbMSwgMiwgM10pOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IocHJldHR5X21lc3NhZ2UoCiAgICAgICAgICAgICcnJwogICAgICAgICAgICBpZF8gbXVzdCBiZSBvbmUgb2YgMSwgMiwgMywgbm90ICVzCiAgICAgICAgICAgICcnJywKICAgICAgICAgICAgcmVwcihpZF8pCiAgICAgICAgKSkKCiAgICB1dGYxNl9wYXNzd29yZCA9IHBhc3N3b3JkLmRlY29kZSgndXRmLTgnKS5lbmNvZGUoJ3V0Zi0xNmJlJykgKyBiJ1x4MDBceDAwJwoKICAgIGFsZ28gPSBnZXRhdHRyKGhhc2hsaWIsIGhhc2hfYWxnb3JpdGhtKQoKICAgICMgdSBhbmQgdiB2YWx1ZXMgYXJlIGJ5dGVzIChub3QgYml0cyBhcyBpbiB0aGUgUkZDKQogICAgdSA9IHsKICAgICAgICAnbWQ1JzogMTYsCiAgICAgICAgJ3NoYTEnOiAyMCwKICAgICAgICAnc2hhMjI0JzogMjgsCiAgICAgICAgJ3NoYTI1Nic6IDMyLAogICAgICAgICdzaGEzODQnOiA0OCwKICAgICAgICAnc2hhNTEyJzogNjQKICAgIH1baGFzaF9hbGdvcml0aG1dCgogICAgaWYgaGFzaF9hbGdvcml0aG0gaW4gWydzaGEzODQnLCAnc2hhNTEyJ106CiAgICAgICAgdiA9IDEyOAogICAgZWxzZToKICAgICAgICB2ID0gNjQKCiAgICAjIFN0ZXAgMQogICAgZCA9IGNocl9jbHMoaWRfKSAqIHYKCiAgICAjIFN0ZXAgMgogICAgcyA9IGInJwogICAgaWYgc2FsdCAhPSBiJyc6CiAgICAgICAgc19sZW4gPSB2ICogaW50KG1hdGguY2VpbChmbG9hdChsZW4oc2FsdCkpIC8gdikpCiAgICAgICAgd2hpbGUgbGVuKHMpIDwgc19sZW46CiAgICAgICAgICAgIHMgKz0gc2FsdAogICAgICAgIHMgPSBzWzA6c19sZW5dCgogICAgIyBTdGVwIDMKICAgIHAgPSBiJycKICAgIGlmIHV0ZjE2X3Bhc3N3b3JkICE9IGInJzoKICAgICAgICBwX2xlbiA9IHYgKiBpbnQobWF0aC5jZWlsKGZsb2F0KGxlbih1dGYxNl9wYXNzd29yZCkpIC8gdikpCiAgICAgICAgd2hpbGUgbGVuKHApIDwgcF9sZW46CiAgICAgICAgICAgIHAgKz0gdXRmMTZfcGFzc3dvcmQKICAgICAgICBwID0gcFswOnBfbGVuXQoKICAgICMgU3RlcCA0CiAgICBpID0gcyArIHAKCiAgICAjIFN0ZXAgNQogICAgYyA9IGludChtYXRoLmNlaWwoZmxvYXQoa2V5X2xlbmd0aCkgLyB1KSkKCiAgICBhID0gYidceDAwJyAqIChjICogdSkKCiAgICBmb3IgbnVtIGluIHJhbmdlKDEsIGMgKyAxKToKICAgICAgICAjIFN0ZXAgNkEKICAgICAgICBhMiA9IGFsZ28oZCArIGkpLmRpZ2VzdCgpCiAgICAgICAgZm9yIF8gaW4gcmFuZ2UoMiwgaXRlcmF0aW9ucyArIDEpOgogICAgICAgICAgICBhMiA9IGFsZ28oYTIpLmRpZ2VzdCgpCgogICAgICAgIGlmIG51bSA8IGM6CiAgICAgICAgICAgICMgU3RlcCA2QgogICAgICAgICAgICBiID0gYicnCiAgICAgICAgICAgIHdoaWxlIGxlbihiKSA8IHY6CiAgICAgICAgICAgICAgICBiICs9IGEyCgogICAgICAgICAgICBiID0gaW50X2Zyb21fYnl0ZXMoYlswOnZdKSArIDEKCiAgICAgICAgICAgICMgU3RlcCA2QwogICAgICAgICAgICBmb3IgbnVtMiBpbiByYW5nZSgwLCBsZW4oaSkgLy8gdik6CiAgICAgICAgICAgICAgICBzdGFydCA9IG51bTIgKiB2CiAgICAgICAgICAgICAgICBlbmQgPSAobnVtMiArIDEpICogdgogICAgICAgICAgICAgICAgaV9udW0yID0gaVtzdGFydDplbmRdCgogICAgICAgICAgICAgICAgaV9udW0yID0gaW50X3RvX2J5dGVzKGludF9mcm9tX2J5dGVzKGlfbnVtMikgKyBiKQoKICAgICAgICAgICAgICAgICMgRW5zdXJlIHRoZSBuZXcgc2xpY2UgaXMgdGhlIHJpZ2h0IHNpemUKICAgICAgICAgICAgICAgIGlfbnVtMl9sID0gbGVuKGlfbnVtMikKICAgICAgICAgICAgICAgIGlmIGlfbnVtMl9sID4gdjoKICAgICAgICAgICAgICAgICAgICBpX251bTIgPSBpX251bTJbaV9udW0yX2wgLSB2Ol0KCiAgICAgICAgICAgICAgICBpID0gaVswOnN0YXJ0XSArIGlfbnVtMiArIGlbZW5kOl0KCiAgICAgICAgIyBTdGVwIDcgKG9uZSBwaWVjZSBhdCBhIHRpbWUpCiAgICAgICAgYmVnaW4gPSAobnVtIC0gMSkgKiB1CiAgICAgICAgdG9fY29weSA9IG1pbihrZXlfbGVuZ3RoLCB1KQogICAgICAgIGEgPSBhWzA6YmVnaW5dICsgYTJbMDp0b19jb3B5XSArIGFbYmVnaW4gKyB0b19jb3B5Ol0KCiAgICByZXR1cm4gYVswOmtleV9sZW5ndGhdCg==
