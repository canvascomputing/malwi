statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/chardet/hebrewprober.py
  contents:
  - name: HebrewProber.set_model_probers
    score: null
    code: |-
      def set_model_probers(self, logicalProber, visualProber):
              self._logical_prober = logicalProber
              self._visual_prober = visualProber
    tokens: resume load_fast logicalProber load_fast self store_attr _logical_prober load_fast visualProber load_fast self store_attr _visual_prober return_const None
    hash: b30b8dd1ff9a670cee15e84170505d8f29978bc4e682f5041689016cde99531a
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/chardet/hebrewprober.py
  : 
