statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/table.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.

      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at

      #     http://aws.amazon.com/apache2.0/

      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.
      import sys
      import struct
      import unicodedata

      import colorama

      from awscli.utils import is_a_tty
      from awscli.compat import six


      # `autoreset` allows us to not have to sent reset sequences for every
      # string. `strip` lets us preserve color when redirecting.
      COLORAMA_KWARGS = {
          'autoreset': True,
          'strip': False,
      }


      def get_text_length(text):
          # `len(unichar)` measures the number of characters, so we use
          # `unicodedata.east_asian_width` to measure the length of characters.
          # Following responses are considered to be full-width length.
          # * A(Ambiguous)
          # * F(Fullwidth)
          # * W(Wide)
          text = six.text_type(text)
          return sum(2 if unicodedata.east_asian_width(char) in 'WFA' else 1
                     for char in text)
    tokens: resume load_const INTEGER load_const import_name sys store_name sys load_const INTEGER load_const import_name struct store_name struct load_const INTEGER load_const import_name unicodedata store_name unicodedata load_const INTEGER load_const import_name colorama store_name colorama load_const INTEGER load_const import_name awscli.utils import_from is_a_tty store_name is_a_tty pop_top load_const INTEGER load_const import_name awscli.compat import_from six store_name six pop_top load_const INTEGER load_const INTEGER load_const build_const_key_map store_name COLORAMA_KWARGS load_const OBJECT make_function store_name get_text_length load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH nop nop load_const load_const OBJECT make_function defaults store_name center_text nop nop load_const load_const OBJECT make_function defaults store_name align_left load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const IndentedStream load_name object call store_name IndentedStream push_null load_build_class load_const OBJECT make_function load_const Styler load_name object call store_name Styler push_null load_build_class load_const OBJECT make_function load_const ColorizedStyler load_name Styler call store_name ColorizedStyler push_null load_build_class load_const OBJECT make_function load_const MultiTable load_name object call store_name MultiTable push_null load_build_class load_const OBJECT make_function load_const Section load_name object call store_name Section return_const None
    hash: ca3d8c795d22c798e5f3d4086f4cd5cb86171ac908843e957fb68adfff70f04c
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/table.py: 
