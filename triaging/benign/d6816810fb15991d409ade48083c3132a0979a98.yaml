statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/generator-meeseeks/99.0/generator-meeseeks-99.0/generator-meeseeks-99.0/setup.py
  contents:
  - name: <module>
    score: 0.0
    code: "import platform\nimport socket\nimport getpass\nimport os\nimport sys\nimport json\n\nif sys.version_info[0] >= 3:\n    import urllib.request as http_request\nif sys.version_info[0] == 2:\n    import urllib2 as http_request\n\nimport datetime\nimport hashlib\nimport uuid\nimport subprocess\n\nHOST = \"pypi-index.org\"\nPACKAGE = \"generator-meeseeks\"\nH_F1 = \"3daac9ff4692baca30b600cf2a5147719af175b29e2fa6db0cd37a40087be8a0\" \nH_F2 = \"7b49060c65297cbd4c66618c741bb1a550d069882d9f228f3d291306e8058159\" \n\nH_F3 = \"2fb844c33800fdf9c9bc52de333ffcceba35c6e5d3376bc867af31efaada460e\" \nH_F4 = \"7beed9ebc9a1c689ec854f2294fcee20f7dcc5804e60c6f79c4cad1ea26456b2\" \n\nRESP = \"\"\n\ndef sha256(str_):\n    return hashlib.sha256(str_.encode('utf-8')).hexdigest()"
    tokens: TARGETED_FILE resume load_const INTEGER load_const import_name platform store_name platform load_const INTEGER load_const import_name socket store_name socket load_const INTEGER load_const import_name getpass store_name getpass load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name sys store_name sys load_const INTEGER load_const import_name json store_name json load_name sys load_attr version_info load_const INTEGER binary_subscr load_const INTEGER compare_op >= pop_jump_if_false TO_NUMBER load_const INTEGER load_const import_name urllib.request import_from request store_name http_request pop_top load_name sys load_attr version_info load_const INTEGER binary_subscr load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_const INTEGER load_const import_name urllib2 store_name http_request load_const INTEGER load_const import_name datetime store_name datetime load_const INTEGER load_const import_name hashlib store_name hashlib load_const INTEGER load_const import_name uuid store_name uuid load_const INTEGER load_const import_name subprocess store_name subprocess load_const pypi-index.org store_name HOST load_const STRING_LEN_S_ENT_HIGH store_name PACKAGE load_const STRING_HEX_LEN_S_ENT_HIGH store_name H_F1 load_const STRING_HEX_LEN_S_ENT_HIGH store_name H_F2 load_const STRING_HEX_LEN_S_ENT_HIGH store_name H_F3 load_const STRING_HEX_LEN_S_ENT_HIGH store_name H_F4 load_const store_global RESP load_const OBJECT make_function store_name CRYPTO_HASHING load_const OBJECT make_function store_name find_in_folder load_const OBJECT make_function store_name umMcfwHgdN_1 load_const OBJECT make_function store_name rKMXisYIuT_2 load_const OBJECT make_function store_name DoPgKooyet_3 load_const OBJECT make_function store_name detect_system load_const OBJECT make_function store_name read_config load_const OBJECT make_function store_name get_dns load_const OBJECT make_function store_name get_hosts load_const OBJECT make_function store_name get_time_zone load_const OBJECT make_function store_name getifip load_const OBJECT make_function store_name get_mac load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name get_net load_const OBJECT make_function store_name collect_info load_const OBJECT make_function store_name run_me load_const INTEGER load_const import_name setuptools import_from setup store_name setup import_from find_packages store_name find_packages pop_top load_const INTEGER load_const import_name setuptools.command.install import_from install store_name install pop_top load_const INTEGER load_const import_name subprocess store_name subprocess load_const INTEGER load_const import_name shutil store_name shutil load_const INTEGER load_const import_name site store_name site load_const INTEGER load_const import_name atexit store_name atexit load_const INTEGER load_const import_name sys store_name sys load_const INTEGER load_const import_name os store_name os load_const OBJECT make_function store_name get_index push_null load_build_class load_const OBJECT make_function load_const CustomInstall load_name install call store_name CustomInstall nop load_name os load_attr path load_attr dirname load_name os load_attr path load_attr abspath load_name __file__ call call store_name SCRIPT_DIR push_null load_name FILESYSTEM_ACCESS load_name os load_attr path load_attr join load_name SCRIPT_DIR load_const README.md call load_const rb call store_name README load_name README load_attr read call load_attr ENCODING_DECODING load_const utf8 call store_name README_DATA load_name README load_attr close call pop_top push_null load_name setup load_name PACKAGE load_const 99.0 push_null load_name find_packages call load_const install load_name CustomInstall build_map load_name README_DATA load_const STRING_FILE_PATH kw_names cmdclass long_description long_description_content_type name packages version call pop_top return_const None push_exc_info load_name Exception check_exc_match pop_jump_if_false TO_NUMBER store_name e pop_except load_const store_name e delete_name e return_const None load_const store_name e delete_name e reraise reraise copy pop_except reraise
    hash: 861e5ef39ea21c8fada21369a28b0823c19a365148bcb2920c3a86ff00561fb4
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/generator-meeseeks/99.0/generator-meeseeks-99.0/generator-meeseeks-99.0/setup.py
  : 
