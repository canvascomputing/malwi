statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/retry/retry_condition.py
  contents:
  - name: _find_data_in_retry_config
    score: 0.0
    code: |-
      def _find_data_in_retry_config(key_name, request, retry_config):
          if request.get_product() is None:
              return None
          path = '"{0}"."{1}"."{2}"'.format(request.get_product().lower(),
                                            request.get_version(),
                                            key_name)
          return jmespath.search(path, retry_config)
    tokens: resume load_fast request load_attr get_product call pop_jump_if_not_none TO_NUMBER return_const None load_const STRING_LEN_S_ENT_MED load_attr format load_fast request load_attr get_product call load_attr lower call load_fast request load_attr get_version call load_fast key_name call store_fast path load_global jmespath load_attr search load_fast path load_fast retry_config call return_value
    hash: 55a18d5327606499261e1390cb1f7570ee2af0898c445deb1eeb068ecab44d3e
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/retry/retry_condition.py
  : 
