statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/requestsd/2.28.2/requestsd-2.28.2-py3-none-any/requests/adapters.py
  contents:
  - name: HTTPAdapter.cert_verify
    score: 0.0
    code: |-
      def cert_verify(self, conn, url, verify, cert):
              """Verify a SSL certificate. This method should not be called from user
              code, and is only exposed for use when subclassing the
              :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

              :param conn: The urllib3 connection object associated with the cert.
              :param url: The requested URL.
              :param verify: Either a boolean, in which case it controls whether we verify
                  the server's TLS certificate, or a string, in which case it must be a path
                  to a CA bundle to use
              :param cert: The SSL certificate to verify.
              """
              if url.lower().startswith("https") and verify:

                  cert_loc = None

                  # Allow self-specified cert location.
                  if verify is not True:
                      cert_loc = verify

                  if not cert_loc:
                      cert_loc = extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)

                  if not cert_loc or not os.path.exists(cert_loc):
                      raise OSError(
                          f"Could not find a suitable TLS CA certificate bundle, "
                          f"invalid path: {cert_loc}"
                      )

                  conn.cert_reqs = "CERT_REQUIRED"

                  if not os.path.isdir(cert_loc):
                      conn.ca_certs = cert_loc
                  else:
                      conn.ca_cert_dir = cert_loc
              else:
                  conn.cert_reqs = "CERT_NONE"
                  conn.ca_certs = None
                  conn.ca_cert_dir = None

              if cert:
                  if not isinstance(cert, basestring):
                      conn.cert_file = cert[0]
                      conn.key_file = cert[1]
                  else:
                      conn.cert_file = cert
                      conn.key_file = None
                  if conn.cert_file and not os.path.exists(conn.cert_file):
                      raise OSError(
                          f"Could not find the TLS certificate file, "
                          f"invalid path: {conn.cert_file}"
                      )
                  if conn.key_file and not os.path.exists(conn.key_file):
                      raise OSError(
                          f"Could not find the TLS key file, invalid path: {conn.key_file}"
                      )
    tokens: resume load_fast url load_attr lower call load_attr startswith load_const https call pop_jump_if_false TO_NUMBER load_fast verify pop_jump_if_false TO_NUMBER load_const store_fast cert_loc load_fast verify load_const INTEGER is_op pop_jump_if_false TO_NUMBER load_fast verify store_fast cert_loc load_fast cert_loc pop_jump_if_true TO_NUMBER load_global STRING_LEN_S_ENT_HIGH load_global STRING_LEN_S_ENT_HIGH call store_fast cert_loc load_fast cert_loc pop_jump_if_false TO_NUMBER load_global os load_attr path load_attr exists load_fast cert_loc call pop_jump_if_true TO_NUMBER load_global OSError load_const STRING_LEN_S_ENT_HIGH load_fast cert_loc format_value INTEGER build_string call raise_varargs load_const CERT_REQUIRED load_fast conn store_attr cert_reqs load_global os load_attr path load_attr isdir load_fast cert_loc call pop_jump_if_true TO_NUMBER load_fast cert_loc load_fast conn store_attr ca_certs jump_forward TO_NUMBER load_fast cert_loc load_fast conn store_attr ca_cert_dir jump_forward TO_NUMBER load_const CERT_NONE load_fast conn store_attr cert_reqs load_const load_fast conn store_attr ca_certs load_const load_fast conn store_attr ca_cert_dir load_fast cert pop_jump_if_false TO_NUMBER load_global isinstance load_fast cert load_global basestring call pop_jump_if_true TO_NUMBER load_fast cert load_const INTEGER binary_subscr load_fast conn store_attr cert_file load_fast cert load_const INTEGER binary_subscr load_fast conn store_attr key_file jump_forward TO_NUMBER load_fast cert load_fast conn store_attr cert_file load_const load_fast conn store_attr key_file load_fast conn load_attr cert_file pop_jump_if_false TO_NUMBER load_global os load_attr path load_attr exists load_fast conn load_attr cert_file call pop_jump_if_true TO_NUMBER load_global OSError load_const STRING_LEN_S_ENT_HIGH load_fast conn load_attr cert_file format_value INTEGER build_string call raise_varargs load_fast conn load_attr key_file pop_jump_if_false TO_NUMBER load_global os load_attr path load_attr exists load_fast conn load_attr key_file call pop_jump_if_true TO_NUMBER load_global OSError load_const STRING_LEN_S_ENT_HIGH load_fast conn load_attr key_file format_value INTEGER build_string call raise_varargs return_const None return_const None return_const None
    hash: f3f12771a5d60f09bd779e90bf478beb3258b1cb7bc8d96f1a4dd16597f3f1a6
sources:
  .repo_cache/malicious_repos/pypi_malregistry/requestsd/2.28.2/requestsd-2.28.2-py3-none-any/requests/adapters.py: 
