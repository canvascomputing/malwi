statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/util/ssl_.py
  contents:
  - name: create_urllib3_context
    score: 0.0
    code: |-
      def create_urllib3_context(ssl_version=None, cert_reqs=None,
                                 options=None, ciphers=None):
          """All arguments have the same meaning as ``ssl_wrap_socket``.

          By default, this function does a lot of the same work that
          ``ssl.create_default_context`` does on Python 3.4+. It:

          - Disables SSLv2, SSLv3, and compression
          - Sets a restricted set of server ciphers

          If you wish to enable SSLv3, you can do::

              from urllib3.util import ssl_
              context = ssl_.create_urllib3_context()
              context.options &= ~ssl_.OP_NO_SSLv3

          You can do the same to enable compression (substituting ``COMPRESSION``
          for ``SSLv3`` in the last line above).

          :param ssl_version:
              The desired protocol version to use. This will default to
              PROTOCOL_SSLv23 which will negotiate the highest protocol that both
              the server and your installation of OpenSSL support.
          :param cert_reqs:
              Whether to require the certificate verification. This defaults to
              ``ssl.CERT_REQUIRED``.
          :param options:
              Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,
              ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``.
          :param ciphers:
              Which cipher suites to allow the server to select.
          :returns:
              Constructed SSLContext object with specified options
          :rtype: SSLContext
          """
          context = SSLContext(ssl_version or ssl.PROTOCOL_SSLv23)

          context.set_ciphers(ciphers or DEFAULT_CIPHERS)

          # Setting the default here, as we may have no ssl module on import
          cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs

          if options is None:
              options = 0
              # SSLv2 is easily broken and is considered harmful and dangerous
              options |= OP_NO_SSLv2
              # SSLv3 has several problems and is now dangerous
              options |= OP_NO_SSLv3
              # Disable compression to prevent CRIME attacks for OpenSSL 1.0+
              # (issue #309)
              options |= OP_NO_COMPRESSION

          context.options |= options

          context.verify_mode = cert_reqs
          if getattr(context, 'check_hostname', None) is not None:  # Platform-specific: Python 3.2
              # We do our own verification, including fingerprints and alternative
              # hostnames. So disable it here
              context.check_hostname = False
          return context
    tokens: resume load_global SSLContext load_fast ssl_version copy pop_jump_if_true TO_NUMBER pop_top load_global ssl load_attr PROTOCOL_SSLv23 call store_fast context load_fast context load_attr set_ciphers load_fast ciphers copy pop_jump_if_true TO_NUMBER pop_top load_global DEFAULT_CIPHERS call pop_top load_fast cert_reqs pop_jump_if_not_none TO_NUMBER load_global ssl load_attr CERT_REQUIRED jump_forward TO_NUMBER load_fast cert_reqs store_fast cert_reqs load_fast options pop_jump_if_not_none TO_NUMBER load_const INTEGER store_fast options load_fast options load_global OP_NO_SSLv2 binary_op |= store_fast options load_fast options load_global OP_NO_SSLv3 binary_op |= store_fast options load_fast options load_global STRING_LEN_S_ENT_HIGH binary_op |= store_fast options load_fast context copy load_attr options load_fast options binary_op |= swap store_attr options load_fast cert_reqs load_fast context store_attr verify_mode load_global REFLECTION_DYNAMIC_READ load_fast context load_const check_hostname load_const call pop_jump_if_none TO_NUMBER load_const INTEGER load_fast context store_attr check_hostname load_fast context return_value
    hash: 692681140b722cc47260122cb9d5c82945eae74d0a871db2ac3913e64b349716
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/util/ssl_.py
  : 
