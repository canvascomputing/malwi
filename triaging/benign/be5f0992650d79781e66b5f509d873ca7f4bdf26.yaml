statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/shard.py
  contents:
  - name: AutoShardedClient.launch_shard
    score: 0.0
    code: |-
      async def launch_shard(self, gateway, shard_id, *, initial=False):
              try:
                  coro = DiscordWebSocket.from_client(self, initial=initial, gateway=gateway, shard_id=shard_id)
                  ws = await asyncio.wait_for(coro, timeout=180.0)
              except Exception:
                  log.exception('Failed to connect for shard_id: %s. Retrying...', shard_id)
                  await asyncio.sleep(5.0)
                  return await self.launch_shard(gateway, shard_id)

              # keep reading the shard while others connect
              self.__shards[shard_id] = ret = Shard(ws, self, self.__queue.put_nowait)
              ret.launch()
    tokens: return_generator pop_top resume nop load_global STRING_BASE64_LEN_S_ENT_HIGH load_attr from_client load_fast self load_fast initial load_fast gateway load_fast shard_id kw_names gateway initial shard_id call store_fast coro load_global asyncio load_attr wait_for load_fast coro load_const FLOAT kw_names timeout call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast ws load_global Shard load_fast ws load_fast self load_fast self load_attr STRING_LEN_S_ENT_HIGH load_attr put_nowait call copy load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast shard_id store_subscr store_fast ret load_fast ret load_attr launch call pop_top return_const None cleanup_throw jump_backward TO_NUMBER push_exc_info load_global Exception check_exc_match pop_jump_if_false TO_NUMBER pop_top load_global log load_attr exception load_const STRING_LEN_S_ENT_HIGH load_fast shard_id call pop_top load_global asyncio load_attr sleep load_const FLOAT call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER cleanup_throw end_send pop_top load_fast self load_attr launch_shard load_fast gateway load_fast shard_id call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER cleanup_throw end_send swap pop_except return_value reraise copy pop_except reraise call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: 4132613d51dab40c5154a6bc30dae3e87325a57032970e5b5bb4646c567415cf
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/shard.py: 
