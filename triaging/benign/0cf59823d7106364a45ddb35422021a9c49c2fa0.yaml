statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/collection.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.
      from botocore import xform_name
      from botocore.docs.method import get_instance_public_methods
      from botocore.docs.utils import DocumentedShape

      from boto3.docs.base import BaseDocumenter
      from boto3.docs.utils import get_resource_ignore_params
      from boto3.docs.method import document_model_driven_resource_method
      from boto3.docs.utils import add_resource_type_overview


      class CollectionDocumenter(BaseDocumenter):
          def document_collections(self, section):
              collections = self._resource.meta.resource_model.collections
              collections_list = []
              add_resource_type_overview(
                  section=section,
                  resource_type='Collections',
                  description=(
                      'Collections provide an interface to iterate over and '
                      'manipulate groups of resources. '),
                  intro_link='guide_collections')
              self.member_map['collections'] = collections_list
              for collection in collections:
                  collection_section = section.add_new_section(collection.name)
                  collections_list.append(collection.name)
                  self._document_collection(collection_section, collection)

          def _document_collection(self, section, collection):
              methods = get_instance_public_methods(
                  getattr(self._resource, collection.name))
              document_collection_object(section, collection)
              batch_actions = {}
              for batch_action in collection.batch_actions:
                  batch_actions[batch_action.name] = batch_action

              for method in sorted(methods):
                  method_section = section.add_new_section(method)
                  if method in batch_actions:
                      document_batch_action(
                          section=method_section,
                          resource_name=self._resource_name,
                          event_emitter=self._resource.meta.client.meta.events,
                          batch_action_model=batch_actions[method],
                          collection_model=collection,
                          service_model=self._resource.meta.client.meta.service_model
                      )
                  else:
                      document_collection_method(
                          section=method_section,
                          resource_name=self._resource_name,
                          action_name=method,
                          event_emitter=self._resource.meta.client.meta.events,
                          collection_model=collection,
                          service_model=self._resource.meta.client.meta.service_model
                      )
    tokens: resume load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from DocumentedShape store_name DocumentedShape pop_top load_const INTEGER load_const import_name boto3.docs.base import_from BaseDocumenter store_name BaseDocumenter pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name BaseDocumenter call store_name STRING_BASE64_LEN_S_ENT_HIGH nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: bb9d44be7a0d520aed1eca3ec5185d8b50be3a1f5f1e6a9f19a028c1f9bb5bee
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/collection.py: 
