statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/tls.py
  contents:
  - name: TLSSocket._read_certificates
    score: 0.0
    code: |-
      def _read_certificates(self):
              """
              Reads end-entity and intermediate certificate information from the
              TLS session
              """

              stack_pointer = libssl.SSL_get_peer_cert_chain(self._ssl)
              if is_null(stack_pointer):
                  handle_openssl_error(0, TLSError)

              if libcrypto_version_info < (1, 1):
                  number_certs = libssl.sk_num(stack_pointer)
              else:
                  number_certs = libssl.OPENSSL_sk_num(stack_pointer)

              self._intermediates = []

              for index in range(0, number_certs):
                  if libcrypto_version_info < (1, 1):
                      x509_ = libssl.sk_value(stack_pointer, index)
                  else:
                      x509_ = libssl.OPENSSL_sk_value(stack_pointer, index)
                  buffer_size = libcrypto.i2d_X509(x509_, null())
                  cert_buffer = buffer_from_bytes(buffer_size)
                  cert_pointer = buffer_pointer(cert_buffer)
                  cert_length = libcrypto.i2d_X509(x509_, cert_pointer)
                  handle_openssl_error(cert_length)
                  cert_data = bytes_from_buffer(cert_buffer, cert_length)

                  cert = Asn1Certificate.load(cert_data)

                  if index == 0:
                      self._certificate = cert
                  else:
                      self._intermediates.append(cert)
    tokens: resume load_global libssl load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr _ssl call store_fast stack_pointer load_global is_null load_fast stack_pointer call pop_jump_if_false TO_NUMBER load_global STRING_LEN_S_ENT_HIGH load_const INTEGER load_global TLSError call pop_top load_global STRING_LEN_S_ENT_HIGH load_const compare_op < pop_jump_if_false TO_NUMBER load_global libssl load_attr sk_num load_fast stack_pointer call store_fast number_certs jump_forward TO_NUMBER load_global libssl load_attr OPENSSL_sk_num load_fast stack_pointer call store_fast number_certs build_list load_fast self store_attr _intermediates load_global range load_const INTEGER load_fast number_certs call get_iter for_iter TO_NUMBER store_fast index load_global STRING_LEN_S_ENT_HIGH load_const compare_op < pop_jump_if_false TO_NUMBER load_global libssl load_attr sk_value load_fast stack_pointer load_fast index call store_fast x509_ jump_forward TO_NUMBER load_global libssl load_attr STRING_LEN_S_ENT_HIGH load_fast stack_pointer load_fast index call store_fast x509_ load_global libcrypto load_attr i2d_X509 load_fast x509_ load_global null call call store_fast buffer_size load_global STRING_LEN_S_ENT_HIGH load_fast buffer_size call store_fast cert_buffer load_global buffer_pointer load_fast cert_buffer call store_fast cert_pointer load_global libcrypto load_attr i2d_X509 load_fast x509_ load_fast cert_pointer call store_fast cert_length load_global STRING_LEN_S_ENT_HIGH load_fast cert_length call pop_top load_global STRING_LEN_S_ENT_HIGH load_fast cert_buffer load_fast cert_length call store_fast cert_data load_global Asn1Certificate load_attr load load_fast cert_data call store_fast cert load_fast index load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_fast cert load_fast self store_attr _certificate jump_backward TO_NUMBER load_fast self load_attr _intermediates load_attr append load_fast cert call pop_top jump_backward TO_NUMBER end_for return_const None
    hash: b8424e05fbc7a2aa082264e8a59e68e5e5f5266adcd9b8f68d23b5a6c5e15907
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/tls.py
  : 
