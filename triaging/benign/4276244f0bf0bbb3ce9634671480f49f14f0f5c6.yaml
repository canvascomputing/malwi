statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/model.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.

      """
      The models defined in this file represent the resource JSON description
      format and provide a layer of abstraction from the raw JSON. The advantages
      of this are:

      * Pythonic interface (e.g. ``action.request.operation``)
      * Consumers need not change for minor JSON changes (e.g. renamed field)

      These models are used both by the resource factory to generate resource
      classes as well as by the documentation generator.
      """

      import logging

      from botocore import xform_name


      logger = logging.getLogger(__name__)


      class Identifier(object):
          """
          A resource identifier, given by its name.

          :type name: string
          :param name: The name of the identifier
          """
          def __init__(self, name, member_name=None):
              #: (``string``) The name of the identifier
              self.name = name
              self.member_name = member_name
    tokens: resume load_const STRING_LEN_M_ENT_HIGH store_name __doc__ load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top push_null load_name logging load_attr getLogger load_name __name__ call store_name logger push_null load_build_class load_const OBJECT make_function load_const Identifier load_name object call store_name Identifier push_null load_build_class load_const OBJECT make_function load_const Action load_name object call store_name Action push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name object call store_name STRING_BASE64_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const Parameter load_name object call store_name Parameter push_null load_build_class load_const OBJECT make_function load_const Request load_name STRING_BASE64_LEN_S_ENT_HIGH call store_name Request push_null load_build_class load_const OBJECT make_function load_const Waiter load_name STRING_BASE64_LEN_S_ENT_HIGH call store_name Waiter push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name object call store_name STRING_BASE64_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const Collection load_name Action call store_name Collection push_null load_build_class load_const OBJECT make_function load_const ResourceModel load_name object call store_name ResourceModel return_const None
    hash: d82b527aa258973b2bec11f4259351d2077e19322d6e47ca469b79deeab32717
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/model.py: 
