statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/response.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.

      import jmespath
      from botocore import xform_name

      from .params import get_data_member


      def all_not_none(iterable):
          """
          Return True if all elements of the iterable are not None (or if the
          iterable is empty). This is like the built-in ``all``, except checks
          against None, so 0 and False are allowable values.
          """
          for element in iterable:
              if element is None:
                  return False
          return True
    tokens: resume load_const INTEGER load_const import_name jmespath store_name jmespath load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top load_const INTEGER load_const import_name params import_from get_data_member store_name get_data_member pop_top load_const OBJECT make_function store_name all_not_none load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const RawHandler load_name object call store_name RawHandler push_null load_build_class load_const OBJECT make_function load_const ResourceHandler load_name object call store_name ResourceHandler return_const None
    hash: 292d3a69c9d995d8d2f154e07d108bd3626902396b1268a9ce9d5f9fd1db3128
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/response.py: 
