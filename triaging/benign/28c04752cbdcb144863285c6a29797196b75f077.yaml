statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/params.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.

      import re

      import jmespath
      from botocore import xform_name

      from ..exceptions import ResourceLoadException


      INDEX_RE = re.compile(r'\[(.*)\]$')


      def get_data_member(parent, path):
          """
          Get a data member from a parent using a JMESPath search query,
          loading the parent if required. If the parent cannot be loaded
          and no data is present then an exception is raised.

          :type parent: ServiceResource
          :param parent: The resource instance to which contains data we
                         are interested in.
          :type path: string
          :param path: The JMESPath expression to query
          :raises ResourceLoadException: When no data is present and the
                                         resource cannot be loaded.
          :returns: The queried data or ``None``.
          """
          # Ensure the parent has its data loaded, if possible.
          if parent.meta.data is None:
              if hasattr(parent, 'load'):
                  parent.load()
              else:
                  raise ResourceLoadException(
                      '{0} has no load method!'.format(parent.__class__.__name__))

          return jmespath.search(path, parent.meta.data)
    tokens: resume load_const INTEGER load_const import_name re store_name re load_const INTEGER load_const import_name jmespath store_name jmespath load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top load_const INTEGER load_const import_name exceptions import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_name re load_attr DYNAMIC_CODE_COMPILATION load_const STRING_FILE_PATH call store_name INDEX_RE load_const OBJECT make_function store_name get_data_member load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: d1e7be0da37a7030cd8a515b8b64c6e309ef7ef902874e7978e2b0ffcc6e4e06
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/params.py: 
