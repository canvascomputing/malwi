statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/client.py
  contents:
  - name: Client.cached_messages
    score: 0.0
    code: |-
      @property
          def cached_messages(self):
              """Sequence[:class:`.Message`]: Read-only list of messages the connected client has cached.

              .. versionadded:: 1.1
              """
              return utils.SequenceProxy(self._connection._messages or [])
    tokens: resume load_global utils load_attr SequenceProxy load_fast self load_attr _connection load_attr _messages copy pop_jump_if_true TO_NUMBER pop_top build_list call return_value
    hash: d5350fa0afda2ccdb42d4006746c5b1ea65ccdcc27a14e8997c5dc6827d5658b
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/client.py: 
