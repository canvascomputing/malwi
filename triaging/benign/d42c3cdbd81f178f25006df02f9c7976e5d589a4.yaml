statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_win/tls.py
  contents:
  - name: TLSSocket.read_until
    score: 0.0
    code: |-
      def read_until(self, marker):
              """
              Reads data from the socket until a marker is found. Data read may
              include data beyond the marker.

              :param marker:
                  A byte string or regex object from re.compile(). Used to determine
                  when to stop reading. Regex objects are more inefficient since
                  they must scan the entire byte string of read data each time data
                  is read off the socket.

              :return:
                  A byte string of the data read
              """

              if not isinstance(marker, byte_cls) and not isinstance(marker, Pattern):
                  raise TypeError(pretty_message(
                      '''
                      marker must be a byte string or compiled regex object, not %s
                      ''',
                      type_name(marker)
                  ))

              output = b''

              is_regex = isinstance(marker, Pattern)

              while True:
                  if len(self._decrypted_bytes) > 0:
                      chunk = self._decrypted_bytes
                      self._decrypted_bytes = b''
                  else:
                      chunk = self.read(8192)

                  offset = len(output)
                  output += chunk

                  if is_regex:
                      match = marker.search(output)
                      if match is not None:
                          end = match.end()
                          break
                  else:
                      # If the marker was not found last time, we have to start
                      # at a position where the marker would have its final char
                      # in the newly read chunk
                      start = max(0, offset - len(marker) - 1)
                      match = output.find(marker, start)
                      if match != -1:
                          end = match + len(marker)
                          break

              self._decrypted_bytes = output[end:] + self._decrypted_bytes
              return output[0:end]
    tokens: resume load_global isinstance load_fast marker load_global byte_cls call pop_jump_if_true TO_NUMBER load_global isinstance load_fast marker load_global Pattern call pop_jump_if_true TO_NUMBER load_global TypeError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_global type_name load_fast marker call call call raise_varargs load_const store_fast output load_global isinstance load_fast marker load_global Pattern call store_fast is_regex nop load_global len load_fast self load_attr STRING_LEN_S_ENT_HIGH call load_const INTEGER compare_op > pop_jump_if_false TO_NUMBER load_fast self load_attr STRING_LEN_S_ENT_HIGH store_fast chunk load_const load_fast self store_attr STRING_LEN_S_ENT_HIGH jump_forward TO_NUMBER load_fast self load_attr read load_const INTEGER call store_fast chunk load_global len load_fast output call store_fast offset load_fast output load_fast chunk binary_op += store_fast output load_fast is_regex pop_jump_if_false TO_NUMBER load_fast marker load_attr search load_fast output call store_fast match load_fast match pop_jump_if_none TO_NUMBER load_fast match load_attr end call store_fast end jump_forward TO_NUMBER load_global max load_const INTEGER load_fast offset load_global len load_fast marker call binary_op - load_const INTEGER binary_op - call store_fast start load_fast output load_attr find load_fast marker load_fast start call store_fast match load_fast match load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_fast match load_global len load_fast marker call binary_op + store_fast end jump_forward TO_NUMBER jump_backward TO_NUMBER load_fast output load_fast end load_const binary_slice load_fast self load_attr STRING_LEN_S_ENT_HIGH binary_op + load_fast self store_attr STRING_LEN_S_ENT_HIGH load_fast output load_const INTEGER load_fast end binary_slice return_value
    hash: 8384f53c292cd2fb46e2c544ad746d5aad164b394e292ade0a1daaee5f62eeae
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_win/tls.py: 
