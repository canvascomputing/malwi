statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/action.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.
      from botocore import xform_name
      from botocore.model import OperationModel
      from botocore.utils import get_service_module_name
      from botocore.docs.method import document_model_driven_method
      from botocore.docs.method import document_custom_method

      from boto3.docs.base import BaseDocumenter
      from boto3.docs.method import document_model_driven_resource_method
      from boto3.docs.utils import get_resource_ignore_params
      from boto3.docs.utils import get_resource_public_actions
      from boto3.docs.utils import add_resource_type_overview


      class ActionDocumenter(BaseDocumenter):
          def document_actions(self, section):
              modeled_actions_list = self._resource_model.actions
              modeled_actions = {}
              for modeled_action in modeled_actions_list:
                  modeled_actions[modeled_action.name] = modeled_action
              resource_actions = get_resource_public_actions(
                  self._resource.__class__)
              self.member_map['actions'] = sorted(resource_actions)
              add_resource_type_overview(
                  section=section,
                  resource_type='Actions',
                  description=(
                      'Actions call operations on resources.  They may '
                      'automatically handle the passing in of arguments set '
                      'from identifiers and some attributes.'),
                  intro_link='actions_intro')

              for action_name in sorted(resource_actions):
                  action_section = section.add_new_section(action_name)
                  if action_name in ['load', 'reload'] and self._resource_model.load:
                      document_load_reload_action(
                          section=action_section,
                          action_name=action_name,
                          resource_name=self._resource_name,
                          event_emitter=self._resource.meta.client.meta.events,
                          load_model=self._resource_model.load,
                          service_model=self._service_model
                      )
                  elif action_name in modeled_actions:
                      document_action(
                          section=action_section,
                          resource_name=self._resource_name,
                          event_emitter=self._resource.meta.client.meta.events,
                          action_model=modeled_actions[action_name],
                          service_model=self._service_model,
                      )
                  else:
                      document_custom_method(
                          action_section, action_name, resource_actions[action_name])
    tokens: resume load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top load_const INTEGER load_const import_name botocore.model import_from OperationModel store_name OperationModel pop_top load_const INTEGER load_const import_name botocore.utils import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name boto3.docs.base import_from BaseDocumenter store_name BaseDocumenter pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name BaseDocumenter call store_name STRING_BASE64_LEN_S_ENT_HIGH nop load_const load_const OBJECT make_function defaults store_name document_action nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: b786120aa4ce0a24507ea3440facad493b0b14691fe7e4cfe4355b96e37db351
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/action.py: 
