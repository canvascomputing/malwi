statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/testutils.py
  contents:
  - name: CapturedRenderer.__init__
    score: 0.0
    code: |-
      def __init__(self):
              self.rendered_contents = ''
    tokens: resume load_const load_fast self store_attr STRING_LEN_S_ENT_HIGH return_const None
    hash: 0c1f6a4f60069c86fc4ee5ec66b673d331184603b0e00e6c32efcf69d8e77e19
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/testutils.py: 
