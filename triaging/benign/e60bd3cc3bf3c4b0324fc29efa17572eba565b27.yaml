statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/colour.py
  contents:
  - name: <module>
    score: 0.0
    code: "# -*- coding: utf-8 -*-\n\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2015-present Rapptz\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\"\"\"\n\nimport colorsys\nimport random\n\nclass Colour:\n    \"\"\"Represents a Discord role colour. This class is similar\n    to a (red, green, blue) :class:`tuple`.\n\n    There is an alias for this called Color.\n\n    .. container:: operations\n\n        .. describe:: x == y\n\n             Checks if two colours are equal.\n\n        .. describe:: x != y\n\n             Checks if two colours are not equal.\n\n        .. describe:: hash(x)\n\n             Return the colour's hash.\n\n        .. describe:: str(x)\n\n             Returns the hex format for the colour.\n\n    Attributes\n    ------------\n    value: :class:`int`\n        The raw integer colour value.\n    \"\"\"\n\n    __slots__ = ('value',)\n\n    def __init__(self, value):\n        if not isinstance(value, int):\n            raise TypeError('Expected int parameter, received %s instead.' % value.__class__.__name__)\n\n        self.value = value\n\n    def _get_byte(self, byte):\n        return (self.value >> (8 * byte)) & 0xff\n\n    def __eq__(self, other):\n        return isinstance(other, Colour) and self.value == other.value\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __str__(self):\n        return '#{:0>6x}'.format(self.value)\n\n    def __repr__(self):\n        return '<Colour value=%s>' % self.value\n\n    def __hash__(self):\n        return hash(self.value)\n\n    @property\n    def r(self):\n        \"\"\":class:`int`: Returns the red component of the colour.\"\"\"\n        return self._get_byte(2)\n\n    @property\n    def g(self):\n        \"\"\":class:`int`: Returns the green component of the colour.\"\"\"\n        return self._get_byte(1)\n\n    @property\n    def b(self):\n        \"\"\":class:`int`: Returns the blue component of the colour.\"\"\"\n        return self._get_byte(0)\n\n    def to_rgb(self):\n        \"\"\"Tuple[:class:`int`, :class:`int`, :class:`int`]: Returns an (r, g, b) tuple representing the colour.\"\"\"\n        return (self.r, self.g, self.b)\n\n    @classmethod\n    def from_rgb(cls, r, g, b):\n        \"\"\"Constructs a :class:`Colour` from an RGB tuple.\"\"\"\n        return cls((r << 16) + (g << 8) + b)\n\n    @classmethod\n    def from_hsv(cls, h, s, v):\n        \"\"\"Constructs a :class:`Colour` from an HSV tuple.\"\"\"\n        rgb = colorsys.hsv_to_rgb(h, s, v)\n        return cls.from_rgb(*(int(x * 255) for x in rgb))\n\n    @classmethod\n    def default(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0``.\"\"\"\n        return cls(0)\n\n    @classmethod\n    def random(cls, *, seed=None):\n        \"\"\"A factory method that returns a :class:`Colour` with a random hue.\n\n        .. note::\n\n            The random algorithm works by choosing a colour with a random hue but\n            with maxed out saturation and value.\n\n        .. versionadded:: 1.6\n\n        Parameters\n        ------------\n        seed: Optional[Union[:class:`int`, :class:`str`, :class:`float`, :class:`bytes`, :class:`bytearray`]]\n            The seed to initialize the RNG with. If ``None`` is passed the default RNG is used. \n\n            .. versionadded:: 1.7\n        \"\"\"\n        rand = random if seed is None else random.Random(seed)\n        return cls.from_hsv(rand.random(), 1, 1)\n\n    @classmethod\n    def teal(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x1abc9c``.\"\"\"\n        return cls(0x1abc9c)\n\n    @classmethod\n    def dark_teal(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x11806a``.\"\"\"\n        return cls(0x11806a)\n\n    @classmethod\n    def green(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x2ecc71``.\"\"\"\n        return cls(0x2ecc71)\n\n    @classmethod\n    def dark_green(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x1f8b4c``.\"\"\"\n        return cls(0x1f8b4c)\n\n    @classmethod\n    def blue(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x3498db``.\"\"\"\n        return cls(0x3498db)\n\n    @classmethod\n    def dark_blue(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x206694``.\"\"\"\n        return cls(0x206694)\n\n    @classmethod\n    def purple(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x9b59b6``.\"\"\"\n        return cls(0x9b59b6)\n\n    @classmethod\n    def dark_purple(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x71368a``.\"\"\"\n        return cls(0x71368a)\n\n    @classmethod\n    def magenta(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0xe91e63``.\"\"\"\n        return cls(0xe91e63)\n\n    @classmethod\n    def dark_magenta(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0xad1457``.\"\"\"\n        return cls(0xad1457)\n\n    @classmethod\n    def gold(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0xf1c40f``.\"\"\"\n        return cls(0xf1c40f)\n\n    @classmethod\n    def dark_gold(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0xc27c0e``.\"\"\"\n        return cls(0xc27c0e)\n\n    @classmethod\n    def orange(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0xe67e22``.\"\"\"\n        return cls(0xe67e22)\n\n    @classmethod\n    def dark_orange(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0xa84300``.\"\"\"\n        return cls(0xa84300)\n\n    @classmethod\n    def red(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0xe74c3c``.\"\"\"\n        return cls(0xe74c3c)\n\n    @classmethod\n    def dark_red(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x992d22``.\"\"\"\n        return cls(0x992d22)\n\n    @classmethod\n    def lighter_grey(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x95a5a6``.\"\"\"\n        return cls(0x95a5a6)\n\n    lighter_gray = lighter_grey\n\n    @classmethod\n    def dark_grey(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x607d8b``.\"\"\"\n        return cls(0x607d8b)\n\n    dark_gray = dark_grey\n\n    @classmethod\n    def light_grey(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x979c9f``.\"\"\"\n        return cls(0x979c9f)\n\n    light_gray = light_grey\n\n    @classmethod\n    def darker_grey(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x546e7a``.\"\"\"\n        return cls(0x546e7a)\n\n    darker_gray = darker_grey\n\n    @classmethod\n    def blurple(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x7289da``.\"\"\"\n        return cls(0x7289da)\n\n    @classmethod\n    def greyple(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x99aab5``.\"\"\"\n        return cls(0x99aab5)\n\n    @classmethod\n    def dark_theme(cls):\n        \"\"\"A factory method that returns a :class:`Colour` with a value of ``0x36393F``.\n        This will appear transparent on Discord's dark theme.\n\n        .. versionadded:: 1.5\n        \"\"\"\n        return cls(0x36393F)"
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ load_const INTEGER load_const import_name colorsys store_name colorsys load_const INTEGER load_const import_name random store_name random push_null load_build_class load_const OBJECT make_function load_const Colour call store_name Colour load_name Colour store_name Color return_const None
    hash: f180863f6e25eb531491bb0c98f6b5199aca2e5dc6814f3976674b52831fa123
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/colour.py: 
