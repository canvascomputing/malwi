statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_util.py
  contents:
  - name: TestUtil.test_invalid_host
    score: 0.0
    code: |-
      def test_invalid_host(self):
              # TODO: Add more tests
              invalid_host = [
                  'http://google.com:foo',
                  'http://::1/',
                  'http://::1:80/',
                  'http://google.com:-80',
                  six.u('http://google.com:\xb2\xb2'),  # \xb2 = ^2
              ]

              for location in invalid_host:
                  self.assertRaises(LocationParseError, get_host, location)
    tokens: resume load_const STRING_URL load_const STRING_URL load_const STRING_URL load_const STRING_URL load_global six load_attr u load_const STRING_URL call build_list store_fast invalid_host load_fast invalid_host get_iter for_iter TO_NUMBER store_fast location load_fast self load_attr assertRaises load_global STRING_LEN_S_ENT_HIGH load_global get_host load_fast location call pop_top jump_backward TO_NUMBER end_for return_const None
    hash: 3dd1cdfaf20d336afd51c5735bdca3c56216caa6d812c36cb0463ab6d9f0d0d4
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_util.py: 
