statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/clidocs.py
  contents:
  - name: GlobalOptionsDocumenter.__init__
    score: 0.0
    code: |-
      def __init__(self, help_command):
              self._help_command = help_command
    tokens: resume load_fast help_command load_fast self store_attr _help_command return_const None
    hash: 5b865ddfc21c599dcef599aaed5021423951a83f6f899c2a383f5a0b08bb9fa1
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/clidocs.py: 
