statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/dummyserver/handlers.py
  contents:
  - name: TestingApp.redirect_after
    score: 0.0
    code: |-
      def redirect_after(self, request):
              "Perform a redirect to ``target``"
              date = request.params.get('date')
              if date:
                  retry_after = str(httputil.format_timestamp(
                          datetime.fromtimestamp(float(date))))
              else:
                  retry_after = '1'
              target = request.params.get('target', '/')
              headers = [('Location', target), ('Retry-After', retry_after)]
              return Response(status='303 See Other', headers=headers)
    tokens: resume load_fast request load_attr params load_attr get load_const date call store_fast date load_fast date pop_jump_if_false TO_NUMBER load_global str load_global httputil load_attr STRING_LEN_S_ENT_HIGH load_global datetime load_attr fromtimestamp load_global float load_fast date call call call call store_fast retry_after jump_forward TO_NUMBER load_const 1 store_fast retry_after load_fast request load_attr params load_attr get load_const target load_const / call store_fast target load_const Location load_fast target build_tuple load_const Retry-After load_fast retry_after build_tuple build_list store_fast headers load_global Response load_const 303 See Other load_fast headers kw_names headers status call return_value
    hash: 649c388eff1ba8c38339258e54dfd531e896771bbdc0a003945162c25f34a627
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/dummyserver/handlers.py: ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbgoKaW1wb3J0IGNvbGxlY3Rpb25zCmltcG9ydCBjb250ZXh0bGliCmltcG9ydCBnemlwCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nCmltcG9ydCBzeXMKaW1wb3J0IHRpbWUKaW1wb3J0IHpsaWIKCmZyb20gaW8gaW1wb3J0IEJ5dGVzSU8KZnJvbSB0b3JuYWRvLndlYiBpbXBvcnQgUmVxdWVzdEhhbmRsZXIKZnJvbSB0b3JuYWRvIGltcG9ydCBodHRwdXRpbApmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIGRhdGV0aW1lIGltcG9ydCB0aW1lZGVsdGEKCmZyb20gdXJsbGliMy5wYWNrYWdlcy5zaXgubW92ZXMuaHR0cF9jbGllbnQgaW1wb3J0IHJlc3BvbnNlcwpmcm9tIHVybGxpYjMucGFja2FnZXMuc2l4Lm1vdmVzLnVybGxpYi5wYXJzZSBpbXBvcnQgdXJsc3BsaXQKCmxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmNsYXNzIFJlc3BvbnNlKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgYm9keT0nJywgc3RhdHVzPScyMDAgT0snLCBoZWFkZXJzPU5vbmUpOgogICAgICAgIHNlbGYuYm9keSA9IGJvZHkKICAgICAgICBzZWxmLnN0YXR1cyA9IHN0YXR1cwogICAgICAgIHNlbGYuaGVhZGVycyA9IGhlYWRlcnMgb3IgWygiQ29udGVudC10eXBlIiwgInRleHQvcGxhaW4iKV0KCiAgICBkZWYgX19jYWxsX18oc2VsZiwgcmVxdWVzdF9oYW5kbGVyKToKICAgICAgICBzdGF0dXMsIHJlYXNvbiA9IHNlbGYuc3RhdHVzLnNwbGl0KCcgJywgMSkKICAgICAgICByZXF1ZXN0X2hhbmRsZXIuc2V0X3N0YXR1cyhpbnQoc3RhdHVzKSwgcmVhc29uKQogICAgICAgIGZvciBoZWFkZXIsIHZhbHVlIGluIHNlbGYuaGVhZGVyczoKICAgICAgICAgICAgcmVxdWVzdF9oYW5kbGVyLmFkZF9oZWFkZXIoaGVhZGVyLCB2YWx1ZSkKCiAgICAgICAgIyBjaHVua2VkCiAgICAgICAgaWYgaXNpbnN0YW5jZShzZWxmLmJvZHksIGxpc3QpOgogICAgICAgICAgICBmb3IgaXRlbSBpbiBzZWxmLmJvZHk6CiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShpdGVtLCBieXRlcyk6CiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uZW5jb2RlKCd1dGY4JykKICAgICAgICAgICAgICAgIHJlcXVlc3RfaGFuZGxlci53cml0ZShpdGVtKQogICAgICAgICAgICAgICAgcmVxdWVzdF9oYW5kbGVyLmZsdXNoKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBib2R5ID0gc2VsZi5ib2R5CiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGJvZHksIGJ5dGVzKToKICAgICAgICAgICAgICAgIGJvZHkgPSBib2R5LmVuY29kZSgndXRmOCcpCgogICAgICAgICAgICByZXF1ZXN0X2hhbmRsZXIud3JpdGUoYm9keSkKCgpSRVRSWV9URVNUX05BTUVTID0gY29sbGVjdGlvbnMuZGVmYXVsdGRpY3QoaW50KQoKCmNsYXNzIFRlc3RpbmdBcHAoUmVxdWVzdEhhbmRsZXIpOgogICAgIiIiCiAgICBTaW1wbGUgYXBwIHRoYXQgcGVyZm9ybXMgdmFyaW91cyBvcGVyYXRpb25zLCB1c2VmdWwgZm9yIHRlc3RpbmcgYW4gSFRUUAogICAgbGlicmFyeS4KCiAgICBHaXZlbiBhbnkgcGF0aCwgaXQgd2lsbCBhdHRlbXB0IHRvIGxvYWQgYSBjb3JyZXNwb25kaW5nIGxvY2FsIG1ldGhvZCBpZgogICAgaXQgZXhpc3RzLiBTdGF0dXMgY29kZSAyMDAgaW5kaWNhdGVzIHN1Y2Nlc3MsIDQwMCBpbmRpY2F0ZXMgZmFpbHVyZS4gRWFjaAogICAgbWV0aG9kIGhhcyBpdHMgb3duIGNvbmRpdGlvbnMgZm9yIHN1Y2Nlc3MvZmFpbHVyZS4KICAgICIiIgogICAgZGVmIGdldChzZWxmKToKICAgICAgICAiIiIgSGFuZGxlIEdFVCByZXF1ZXN0cyAiIiIKICAgICAgICBzZWxmLl9jYWxsX21ldGhvZCgpCgogICAgZGVmIHBvc3Qoc2VsZik6CiAgICAgICAgIiIiIEhhbmRsZSBQT1NUIHJlcXVlc3RzICIiIgogICAgICAgIHNlbGYuX2NhbGxfbWV0aG9kKCkKCiAgICBkZWYgcHV0KHNlbGYpOgogICAgICAgICIiIiBIYW5kbGUgUFVUIHJlcXVlc3RzICIiIgogICAgICAgIHNlbGYuX2NhbGxfbWV0aG9kKCkKCiAgICBkZWYgb3B0aW9ucyhzZWxmKToKICAgICAgICAiIiIgSGFuZGxlIE9QVElPTlMgcmVxdWVzdHMgIiIiCiAgICAgICAgc2VsZi5fY2FsbF9tZXRob2QoKQoKICAgIGRlZiBoZWFkKHNlbGYpOgogICAgICAgICIiIiBIYW5kbGUgSEVBRCByZXF1ZXN0cyAiIiIKICAgICAgICBzZWxmLl9jYWxsX21ldGhvZCgpCgogICAgZGVmIF9jYWxsX21ldGhvZChzZWxmKToKICAgICAgICAiIiIgQ2FsbCB0aGUgY29ycmVjdCBtZXRob2QgaW4gdGhpcyBjbGFzcyBiYXNlZCBvbiB0aGUgaW5jb21pbmcgVVJJICIiIgogICAgICAgIHJlcSA9IHNlbGYucmVxdWVzdAogICAgICAgIHJlcS5wYXJhbXMgPSB7fQogICAgICAgIGZvciBrLCB2IGluIHJlcS5hcmd1bWVudHMuaXRlbXMoKToKICAgICAgICAgICAgcmVxLnBhcmFtc1trXSA9IG5leHQoaXRlcih2KSkKCiAgICAgICAgcGF0aCA9IHJlcS5wYXRoWzpdCiAgICAgICAgaWYgbm90IHBhdGguc3RhcnRzd2l0aCgnLycpOgogICAgICAgICAgICBwYXRoID0gdXJsc3BsaXQocGF0aCkucGF0aAoKICAgICAgICB0YXJnZXQgPSBwYXRoWzE6XS5yZXBsYWNlKCcvJywgJ18nKQogICAgICAgIG1ldGhvZCA9IGdldGF0dHIoc2VsZiwgdGFyZ2V0LCBzZWxmLmluZGV4KQoKICAgICAgICByZXNwID0gbWV0aG9kKHJlcSkKCiAgICAgICAgaWYgZGljdChyZXNwLmhlYWRlcnMpLmdldCgnQ29ubmVjdGlvbicpID09ICdjbG9zZSc6CiAgICAgICAgICAgICMgRklYTUU6IENhbiB3ZSBraWxsIHRoZSBjb25uZWN0aW9uIHNvbWVob3c/CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmVzcChzZWxmKQoKICAgIGRlZiBpbmRleChzZWxmLCBfcmVxdWVzdCk6CiAgICAgICAgIlJlbmRlciBzaW1wbGUgbWVzc2FnZSIKICAgICAgICByZXR1cm4gUmVzcG9uc2UoIkR1bW15IHNlcnZlciEiKQoKICAgIGRlZiBzb3VyY2VfYWRkcmVzcyhzZWxmLCByZXF1ZXN0KToKICAgICAgICAiIiJSZXR1cm4gdGhlIHJlcXVlc3RlcidzIElQIGFkZHJlc3MuIiIiCiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKHJlcXVlc3QucmVtb3RlX2lwKQoKICAgIGRlZiBzZXRfdXAoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgdGVzdF90eXBlID0gcmVxdWVzdC5wYXJhbXMuZ2V0KCd0ZXN0X3R5cGUnKQogICAgICAgIHRlc3RfaWQgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ3Rlc3RfaWQnKQogICAgICAgIGlmIHRlc3RfaWQ6CiAgICAgICAgICAgIHByaW50KCdcbk5ldyB0ZXN0ICVzOiAlcycgJSAodGVzdF90eXBlLCB0ZXN0X2lkKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgnXG5OZXcgdGVzdCAlcycgJSB0ZXN0X3R5cGUpCiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKCJEdW1teSBzZXJ2ZXIgaXMgcmVhZHkhIikKCiAgICBkZWYgc3BlY2lmaWNfbWV0aG9kKHNlbGYsIHJlcXVlc3QpOgogICAgICAgICJDb25maXJtIHRoYXQgdGhlIHJlcXVlc3QgbWF0Y2hlcyB0aGUgZGVzaXJlZCBtZXRob2QgdHlwZSIKICAgICAgICBtZXRob2QgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ21ldGhvZCcpCiAgICAgICAgaWYgbWV0aG9kIGFuZCBub3QgaXNpbnN0YW5jZShtZXRob2QsIHN0cik6CiAgICAgICAgICAgIG1ldGhvZCA9IG1ldGhvZC5kZWNvZGUoJ3V0ZjgnKQoKICAgICAgICBpZiByZXF1ZXN0Lm1ldGhvZCAhPSBtZXRob2Q6CiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZSgiV3JvbmcgbWV0aG9kOiAlcyAhPSAlcyIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1ldGhvZCwgcmVxdWVzdC5tZXRob2QpLCBzdGF0dXM9JzQwMCBCYWQgUmVxdWVzdCcpCiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKCkKCiAgICBkZWYgdXBsb2FkKHNlbGYsIHJlcXVlc3QpOgogICAgICAgICJDb25maXJtIHRoYXQgdGhlIHVwbG9hZGVkIGZpbGUgY29uZm9ybXMgdG8gc3BlY2lmaWNhdGlvbiIKICAgICAgICAjIEZJWE1FOiBUaGlzIGlzIGEgaHVnZSBicm9rZW4gbWVzcwogICAgICAgIHBhcmFtID0gcmVxdWVzdC5wYXJhbXMuZ2V0KCd1cGxvYWRfcGFyYW0nLCAnbXlmaWxlJykuZGVjb2RlKCdhc2NpaScpCiAgICAgICAgZmlsZW5hbWUgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ3VwbG9hZF9maWxlbmFtZScsICcnKS5kZWNvZGUoJ3V0Zi04JykKICAgICAgICBzaXplID0gaW50KHJlcXVlc3QucGFyYW1zLmdldCgndXBsb2FkX3NpemUnLCAnMCcpKQogICAgICAgIGZpbGVzXyA9IHJlcXVlc3QuZmlsZXMuZ2V0KHBhcmFtKQoKICAgICAgICBpZiBsZW4oZmlsZXNfKSAhPSAxOgogICAgICAgICAgICByZXR1cm4gUmVzcG9uc2UoIkV4cGVjdGVkIDEgZmlsZSBmb3IgJyVzJywgbm90ICVkIiAlIChwYXJhbSwgbGVuKGZpbGVzXykpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzPSc0MDAgQmFkIFJlcXVlc3QnKQogICAgICAgIGZpbGVfID0gZmlsZXNfWzBdCgogICAgICAgIGRhdGEgPSBmaWxlX1snYm9keSddCiAgICAgICAgaWYgaW50KHNpemUpICE9IGxlbihkYXRhKToKICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlKCJXcm9uZyBzaXplOiAlZCAhPSAlZCIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNpemUsIGxlbihkYXRhKSksIHN0YXR1cz0nNDAwIEJhZCBSZXF1ZXN0JykKCiAgICAgICAgaWYgZmlsZW5hbWUgIT0gZmlsZV9bJ2ZpbGVuYW1lJ106CiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZSgiV3JvbmcgZmlsZW5hbWU6ICVzICE9ICVzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZmlsZW5hbWUsIGZpbGVfLmZpbGVuYW1lKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cz0nNDAwIEJhZCBSZXF1ZXN0JykKCiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKCkKCiAgICBkZWYgcmVkaXJlY3Qoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgIlBlcmZvcm0gYSByZWRpcmVjdCB0byBgYHRhcmdldGBgIgogICAgICAgIHRhcmdldCA9IHJlcXVlc3QucGFyYW1zLmdldCgndGFyZ2V0JywgJy8nKQogICAgICAgIHN0YXR1cyA9IHJlcXVlc3QucGFyYW1zLmdldCgnc3RhdHVzJywgJzMwMyBTZWUgT3RoZXInKQogICAgICAgIGlmIGxlbihzdGF0dXMpID09IDM6CiAgICAgICAgICAgIHN0YXR1cyA9ICclcyBSZWRpcmVjdCcgJSBzdGF0dXMuZGVjb2RlKCdsYXRpbi0xJykKCiAgICAgICAgaGVhZGVycyA9IFsoJ0xvY2F0aW9uJywgdGFyZ2V0KV0KICAgICAgICByZXR1cm4gUmVzcG9uc2Uoc3RhdHVzPXN0YXR1cywgaGVhZGVycz1oZWFkZXJzKQoKICAgIGRlZiBtdWx0aV9yZWRpcmVjdChzZWxmLCByZXF1ZXN0KToKICAgICAgICAiUGVyZm9ybXMgYSByZWRpcmVjdCBjaGFpbiBiYXNlZCBvbiBgYHJlZGlyZWN0X2NvZGVzYGAiCiAgICAgICAgY29kZXMgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ3JlZGlyZWN0X2NvZGVzJywgJzIwMCcpLmRlY29kZSgndXRmLTgnKQogICAgICAgIGhlYWQsIHRhaWwgPSBjb2Rlcy5zcGxpdCgnLCcsIDEpIGlmICIsIiBpbiBjb2RlcyBlbHNlIChjb2RlcywgTm9uZSkKICAgICAgICBzdGF0dXMgPSAiezB9IHsxfSIuZm9ybWF0KGhlYWQsIHJlc3BvbnNlc1tpbnQoaGVhZCldKQogICAgICAgIGlmIG5vdCB0YWlsOgogICAgICAgICAgICByZXR1cm4gUmVzcG9uc2UoIkRvbmUgcmVkaXJlY3RpbmciLCBzdGF0dXM9c3RhdHVzKQoKICAgICAgICBoZWFkZXJzID0gWygnTG9jYXRpb24nLCAnL211bHRpX3JlZGlyZWN0P3JlZGlyZWN0X2NvZGVzPSVzJyAlIHRhaWwpXQogICAgICAgIHJldHVybiBSZXNwb25zZShzdGF0dXM9c3RhdHVzLCBoZWFkZXJzPWhlYWRlcnMpCgogICAgZGVmIGtlZXBhbGl2ZShzZWxmLCByZXF1ZXN0KToKICAgICAgICBpZiByZXF1ZXN0LnBhcmFtcy5nZXQoJ2Nsb3NlJywgYicwJykgPT0gYicxJzoKICAgICAgICAgICAgaGVhZGVycyA9IFsoJ0Nvbm5lY3Rpb24nLCAnY2xvc2UnKV0KICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlKCdDbG9zaW5nJywgaGVhZGVycz1oZWFkZXJzKQoKICAgICAgICBoZWFkZXJzID0gWygnQ29ubmVjdGlvbicsICdrZWVwLWFsaXZlJyldCiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKCdLZWVwaW5nIGFsaXZlJywgaGVhZGVycz1oZWFkZXJzKQoKICAgIGRlZiBzbGVlcChzZWxmLCByZXF1ZXN0KToKICAgICAgICAiU2xlZXAgZm9yIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBgYHNlY29uZHNgYCIKICAgICAgICAjIERPIE5PVCBVU0UgVEhJUywgSVQnUyBERVBSRUNBVEVELgogICAgICAgICMgRklYTUU6IERlbGV0ZSB0aGlzIG9uY2UgYXBwZW5naW5lIHRlc3RzIGFyZSBmaXhlZCB0byBub3QgdXNlIHRoaXMgaGFuZGxlci4KICAgICAgICBzZWNvbmRzID0gZmxvYXQocmVxdWVzdC5wYXJhbXMuZ2V0KCdzZWNvbmRzJywgJzEnKSkKICAgICAgICB0aW1lLnNsZWVwKHNlY29uZHMpCiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKCkKCiAgICBkZWYgZWNobyhzZWxmLCByZXF1ZXN0KToKICAgICAgICAiRWNobyBiYWNrIHRoZSBwYXJhbXMiCiAgICAgICAgaWYgcmVxdWVzdC5tZXRob2QgPT0gJ0dFVCc6CiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZShyZXF1ZXN0LnF1ZXJ5KQoKICAgICAgICByZXR1cm4gUmVzcG9uc2UocmVxdWVzdC5ib2R5KQoKICAgIGRlZiBlbmNvZGluZ3JlcXVlc3Qoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgIkNoZWNrIGZvciBVQSBhY2NlcHRpbmcgZ3ppcC9kZWZsYXRlIGVuY29kaW5nIgogICAgICAgIGRhdGEgPSBiImhlbGxvLCB3b3JsZCEiCiAgICAgICAgZW5jb2RpbmcgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdBY2NlcHQtRW5jb2RpbmcnLCAnJykKICAgICAgICBoZWFkZXJzID0gTm9uZQogICAgICAgIGlmIGVuY29kaW5nID09ICdnemlwJzoKICAgICAgICAgICAgaGVhZGVycyA9IFsoJ0NvbnRlbnQtRW5jb2RpbmcnLCAnZ3ppcCcpXQogICAgICAgICAgICBmaWxlXyA9IEJ5dGVzSU8oKQogICAgICAgICAgICB3aXRoIGNvbnRleHRsaWIuY2xvc2luZyhnemlwLkd6aXBGaWxlKCcnLCBtb2RlPSd3JywgZmlsZW9iaj1maWxlXykpIGFzIHppcGZpbGU6CiAgICAgICAgICAgICAgICB6aXBmaWxlLndyaXRlKGRhdGEpCiAgICAgICAgICAgIGRhdGEgPSBmaWxlXy5nZXR2YWx1ZSgpCiAgICAgICAgZWxpZiBlbmNvZGluZyA9PSAnZGVmbGF0ZSc6CiAgICAgICAgICAgIGhlYWRlcnMgPSBbKCdDb250ZW50LUVuY29kaW5nJywgJ2RlZmxhdGUnKV0KICAgICAgICAgICAgZGF0YSA9IHpsaWIuY29tcHJlc3MoZGF0YSkKICAgICAgICBlbGlmIGVuY29kaW5nID09ICdnYXJiYWdlLWd6aXAnOgogICAgICAgICAgICBoZWFkZXJzID0gWygnQ29udGVudC1FbmNvZGluZycsICdnemlwJyldCiAgICAgICAgICAgIGRhdGEgPSAnZ2FyYmFnZScKICAgICAgICBlbGlmIGVuY29kaW5nID09ICdnYXJiYWdlLWRlZmxhdGUnOgogICAgICAgICAgICBoZWFkZXJzID0gWygnQ29udGVudC1FbmNvZGluZycsICdkZWZsYXRlJyldCiAgICAgICAgICAgIGRhdGEgPSAnZ2FyYmFnZScKICAgICAgICByZXR1cm4gUmVzcG9uc2UoZGF0YSwgaGVhZGVycz1oZWFkZXJzKQoKICAgIGRlZiBoZWFkZXJzKHNlbGYsIHJlcXVlc3QpOgogICAgICAgIHJldHVybiBSZXNwb25zZShqc29uLmR1bXBzKHJlcXVlc3QuaGVhZGVycykpCgogICAgZGVmIHN1Y2Nlc3NmdWxfcmV0cnkoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgIiIiIEhhbmRsZXIgd2hpY2ggd2lsbCByZXR1cm4gYW4gZXJyb3IgYW5kIHRoZW4gc3VjY2VzcwoKICAgICAgICBJdCdzIG5vdCBjdXJyZW50bHkgdmVyeSBmbGV4aWJsZSBhcyB0aGUgbnVtYmVyIG9mIHJldHJpZXMgaXMgaGFyZC1jb2RlZC4KICAgICAgICAiIiIKICAgICAgICB0ZXN0X25hbWUgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCd0ZXN0LW5hbWUnLCBOb25lKQogICAgICAgIGlmIG5vdCB0ZXN0X25hbWU6CiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZSgidGVzdC1uYW1lIGhlYWRlciBub3Qgc2V0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cz0iNDAwIEJhZCBSZXF1ZXN0IikKCiAgICAgICAgUkVUUllfVEVTVF9OQU1FU1t0ZXN0X25hbWVdICs9IDEKCiAgICAgICAgaWYgUkVUUllfVEVTVF9OQU1FU1t0ZXN0X25hbWVdID49IDI6CiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZSgiUmV0cnkgc3VjY2Vzc2Z1bCEiKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZSgibmVlZCB0byBrZWVwIHJldHJ5aW5nISIsIHN0YXR1cz0iNDE4IEknbSBBIFRlYXBvdCIpCgogICAgZGVmIGNodW5rZWQoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKFsnMTIzJ10gKiA0KQoKICAgIGRlZiBjaHVua2VkX2d6aXAoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgY2h1bmtzID0gW10KICAgICAgICBjb21wcmVzc29yID0gemxpYi5jb21wcmVzc29iaig2LCB6bGliLkRFRkxBVEVELCAxNiArIHpsaWIuTUFYX1dCSVRTKQoKICAgICAgICBmb3IgdW5jb21wcmVzc2VkIGluIFtiJzEyMyddICogNDoKICAgICAgICAgICAgY2h1bmtzLmFwcGVuZChjb21wcmVzc29yLmNvbXByZXNzKHVuY29tcHJlc3NlZCkpCgogICAgICAgIGNodW5rcy5hcHBlbmQoY29tcHJlc3Nvci5mbHVzaCgpKQoKICAgICAgICByZXR1cm4gUmVzcG9uc2UoY2h1bmtzLCBoZWFkZXJzPVsoJ0NvbnRlbnQtRW5jb2RpbmcnLCAnZ3ppcCcpXSkKCiAgICBkZWYgbmJ5dGVzKHNlbGYsIHJlcXVlc3QpOgogICAgICAgIGxlbmd0aCA9IGludChyZXF1ZXN0LnBhcmFtcy5nZXQoJ2xlbmd0aCcpKQogICAgICAgIGRhdGEgPSBiJzEnICogbGVuZ3RoCiAgICAgICAgcmV0dXJuIFJlc3BvbnNlKAogICAgICAgICAgICBkYXRhLAogICAgICAgICAgICBoZWFkZXJzPVsoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKV0pCgogICAgZGVmIHN0YXR1cyhzZWxmLCByZXF1ZXN0KToKICAgICAgICBzdGF0dXMgPSByZXF1ZXN0LnBhcmFtcy5nZXQoInN0YXR1cyIsICIyMDAgT0siKQoKICAgICAgICByZXR1cm4gUmVzcG9uc2Uoc3RhdHVzPXN0YXR1cykKCiAgICBkZWYgcmV0cnlfYWZ0ZXIoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgaWYgZGF0ZXRpbWUubm93KCkgLSBzZWxmLmFwcGxpY2F0aW9uLmxhc3RfcmVxIDwgdGltZWRlbHRhKHNlY29uZHM9MSk6CiAgICAgICAgICAgIHN0YXR1cyA9IHJlcXVlc3QucGFyYW1zLmdldCgic3RhdHVzIiwgIjQyOSBUb28gTWFueSBSZXF1ZXN0cyIpCiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZSgKICAgICAgICAgICAgICAgICAgICBzdGF0dXM9c3RhdHVzLmRlY29kZSgndXRmLTgnKSwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPVsoJ1JldHJ5LUFmdGVyJywgJzEnKV0pCgogICAgICAgIHNlbGYuYXBwbGljYXRpb24ubGFzdF9yZXEgPSBkYXRldGltZS5ub3coKQoKICAgICAgICByZXR1cm4gUmVzcG9uc2Uoc3RhdHVzPSIyMDAgT0siKQoKICAgIGRlZiByZWRpcmVjdF9hZnRlcihzZWxmLCByZXF1ZXN0KToKICAgICAgICAiUGVyZm9ybSBhIHJlZGlyZWN0IHRvIGBgdGFyZ2V0YGAiCiAgICAgICAgZGF0ZSA9IHJlcXVlc3QucGFyYW1zLmdldCgnZGF0ZScpCiAgICAgICAgaWYgZGF0ZToKICAgICAgICAgICAgcmV0cnlfYWZ0ZXIgPSBzdHIoaHR0cHV0aWwuZm9ybWF0X3RpbWVzdGFtcCgKICAgICAgICAgICAgICAgICAgICBkYXRldGltZS5mcm9tdGltZXN0YW1wKGZsb2F0KGRhdGUpKSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0cnlfYWZ0ZXIgPSAnMScKICAgICAgICB0YXJnZXQgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ3RhcmdldCcsICcvJykKICAgICAgICBoZWFkZXJzID0gWygnTG9jYXRpb24nLCB0YXJnZXQpLCAoJ1JldHJ5LUFmdGVyJywgcmV0cnlfYWZ0ZXIpXQogICAgICAgIHJldHVybiBSZXNwb25zZShzdGF0dXM9JzMwMyBTZWUgT3RoZXInLCBoZWFkZXJzPWhlYWRlcnMpCgogICAgZGVmIHNodXRkb3duKHNlbGYsIHJlcXVlc3QpOgogICAgICAgIHN5cy5leGl0KCkKCgojIFJGQzIyMzEtYXdhcmUgcmVwbGFjZW1lbnQgb2YgaW50ZXJuYWwgdG9ybmFkbyBmdW5jdGlvbgpkZWYgX3BhcnNlX2hlYWRlcihsaW5lKToKICAgIHIiIiJQYXJzZSBhIENvbnRlbnQtdHlwZSBsaWtlIGhlYWRlci4KCiAgICBSZXR1cm4gdGhlIG1haW4gY29udGVudC10eXBlIGFuZCBhIGRpY3Rpb25hcnkgb2Ygb3B0aW9ucy4KCiAgICA+Pj4gZCA9IF9wYXJzZV9oZWFkZXIoIkNEOiBmZDsgZm9vPVwiYmFyXCI7IGZpbGUqPXV0Zi04JydUJUMzJUE0c3QiKVsxXQogICAgPj4+IGRbJ2ZpbGUnXSA9PSAnVFx1MDBlNHN0JwogICAgVHJ1ZQogICAgPj4+IGRbJ2ZvbyddCiAgICAnYmFyJwogICAgIiIiCiAgICBpbXBvcnQgdG9ybmFkby5odHRwdXRpbAogICAgaW1wb3J0IGVtYWlsLnV0aWxzCiAgICBmcm9tIHVybGxpYjMucGFja2FnZXMgaW1wb3J0IHNpeAogICAgaWYgbm90IHNpeC5QWTM6CiAgICAgICAgbGluZSA9IGxpbmUuZW5jb2RlKCd1dGYtOCcpCiAgICBwYXJ0cyA9IHRvcm5hZG8uaHR0cHV0aWwuX3BhcnNlcGFyYW0oJzsnICsgbGluZSkKICAgIGtleSA9IG5leHQocGFydHMpCiAgICAjIGRlY29kZV9wYXJhbXMgdHJlYXRzIGZpcnN0IGFyZ3VtZW50IHNwZWNpYWwsIGJ1dCB3ZSBhbHJlYWR5IHN0cmlwcGVkIGtleQogICAgcGFyYW1zID0gWygnRHVtbXknLCAndmFsdWUnKV0KICAgIGZvciBwIGluIHBhcnRzOgogICAgICAgIGkgPSBwLmZpbmQoJz0nKQogICAgICAgIGlmIGkgPj0gMDoKICAgICAgICAgICAgbmFtZSA9IHBbOmldLnN0cmlwKCkubG93ZXIoKQogICAgICAgICAgICB2YWx1ZSA9IHBbaSArIDE6XS5zdHJpcCgpCiAgICAgICAgICAgIHBhcmFtcy5hcHBlbmQoKG5hbWUsIHZhbHVlKSkKICAgIHBhcmFtcyA9IGVtYWlsLnV0aWxzLmRlY29kZV9wYXJhbXMocGFyYW1zKQogICAgcGFyYW1zLnBvcCgwKSAgIyBnZXQgcmlkIG9mIHRoZSBkdW1teSBhZ2FpbgogICAgcGRpY3QgPSB7fQogICAgZm9yIG5hbWUsIHZhbHVlIGluIHBhcmFtczoKICAgICAgICB2YWx1ZSA9IGVtYWlsLnV0aWxzLmNvbGxhcHNlX3JmYzIyMzFfdmFsdWUodmFsdWUpCiAgICAgICAgaWYgbGVuKHZhbHVlKSA+PSAyIGFuZCB2YWx1ZVswXSA9PSAnIicgYW5kIHZhbHVlWy0xXSA9PSAnIic6CiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbMTotMV0KICAgICAgICBwZGljdFtuYW1lXSA9IHZhbHVlCiAgICByZXR1cm4ga2V5LCBwZGljdAoKCiMgVE9ETzogbWFrZSB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbmFsIGFzIHNvb24gYXMgd2Uga25vdyBhIHZlcnNpb24KIyAgICAgICB3aGljaCBkb2VzIG5vdCByZXF1aXJlIHRoaXMgZml4LgojICAgICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svdG9ybmFkby9pc3N1ZXMvODY4CmlmIFRydWU6CiAgICBpbXBvcnQgdG9ybmFkby5odHRwdXRpbAogICAgdG9ybmFkby5odHRwdXRpbC5fcGFyc2VfaGVhZGVyID0gX3BhcnNlX2hlYWRlcgo=
