statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/chardet/charsetprober.py
  contents:
  - name: CharSetProber.__init__
    score: 0.0
    code: |-
      def __init__(self, lang_filter=None):
              self._state = None
              self.lang_filter = lang_filter
              self.logger = logging.getLogger(__name__)
    tokens: resume load_const load_fast self store_attr _state load_fast lang_filter load_fast self store_attr lang_filter load_global logging load_attr getLogger load_global __name__ call load_fast self store_attr logger return_const None
    hash: 1dc9e2a49b935b2a405041154f0f5a9df45850247313f66ff5e3ba08563d51c9
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/chardet/charsetprober.py
  : IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIEJFR0lOIExJQ0VOU0UgQkxPQ0sgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgVGhlIE9yaWdpbmFsIENvZGUgaXMgTW96aWxsYSBVbml2ZXJzYWwgY2hhcnNldCBkZXRlY3RvciBjb2RlLgojCiMgVGhlIEluaXRpYWwgRGV2ZWxvcGVyIG9mIHRoZSBPcmlnaW5hbCBDb2RlIGlzCiMgTmV0c2NhcGUgQ29tbXVuaWNhdGlvbnMgQ29ycG9yYXRpb24uCiMgUG9ydGlvbnMgY3JlYXRlZCBieSB0aGUgSW5pdGlhbCBEZXZlbG9wZXIgYXJlIENvcHlyaWdodCAoQykgMjAwMQojIHRoZSBJbml0aWFsIERldmVsb3Blci4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIwojIENvbnRyaWJ1dG9yKHMpOgojICAgTWFyayBQaWxncmltIC0gcG9ydCB0byBQeXRob24KIyAgIFNoeSBTaGFsb20gLSBvcmlnaW5hbCBDIGNvZGUKIwojIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKIyBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCiMgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKIyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgojIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiMgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKIyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiMgRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3QsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BCiMgMDIxMTAtMTMwMSAgVVNBCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgRU5EIExJQ0VOU0UgQkxPQ0sgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHJlCgpmcm9tIC5lbnVtcyBpbXBvcnQgUHJvYmluZ1N0YXRlCgoKY2xhc3MgQ2hhclNldFByb2JlcihvYmplY3QpOgoKICAgIFNIT1JUQ1VUX1RIUkVTSE9MRCA9IDAuOTUKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbGFuZ19maWx0ZXI9Tm9uZSk6CiAgICAgICAgc2VsZi5fc3RhdGUgPSBOb25lCiAgICAgICAgc2VsZi5sYW5nX2ZpbHRlciA9IGxhbmdfZmlsdGVyCiAgICAgICAgc2VsZi5sb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCiAgICBkZWYgcmVzZXQoc2VsZik6CiAgICAgICAgc2VsZi5fc3RhdGUgPSBQcm9iaW5nU3RhdGUuREVURUNUSU5HCgogICAgQHByb3BlcnR5CiAgICBkZWYgY2hhcnNldF9uYW1lKHNlbGYpOgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGZlZWQoc2VsZiwgYnVmKToKICAgICAgICBwYXNzCgogICAgQHByb3BlcnR5CiAgICBkZWYgc3RhdGUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIGdldF9jb25maWRlbmNlKHNlbGYpOgogICAgICAgIHJldHVybiAwLjAKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgZmlsdGVyX2hpZ2hfYnl0ZV9vbmx5KGJ1Zik6CiAgICAgICAgYnVmID0gcmUuc3ViKGInKFtceDAwLVx4N0ZdKSsnLCBiJyAnLCBidWYpCiAgICAgICAgcmV0dXJuIGJ1ZgoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBmaWx0ZXJfaW50ZXJuYXRpb25hbF93b3JkcyhidWYpOgogICAgICAgICIiIgogICAgICAgIFdlIGRlZmluZSB0aHJlZSB0eXBlcyBvZiBieXRlczoKICAgICAgICBhbHBoYWJldDogZW5nbGlzaCBhbHBoYWJldHMgW2EtekEtWl0KICAgICAgICBpbnRlcm5hdGlvbmFsOiBpbnRlcm5hdGlvbmFsIGNoYXJhY3RlcnMgW1x4ODAtXHhGRl0KICAgICAgICBtYXJrZXI6IGV2ZXJ5dGhpbmcgZWxzZSBbXmEtekEtWlx4ODAtXHhGRl0KCiAgICAgICAgVGhlIGlucHV0IGJ1ZmZlciBjYW4gYmUgdGhvdWdodCB0byBjb250YWluIGEgc2VyaWVzIG9mIHdvcmRzIGRlbGltaXRlZAogICAgICAgIGJ5IG1hcmtlcnMuIFRoaXMgZnVuY3Rpb24gd29ya3MgdG8gZmlsdGVyIGFsbCB3b3JkcyB0aGF0IGNvbnRhaW4gYXQKICAgICAgICBsZWFzdCBvbmUgaW50ZXJuYXRpb25hbCBjaGFyYWN0ZXIuIEFsbCBjb250aWd1b3VzIHNlcXVlbmNlcyBvZiBtYXJrZXJzCiAgICAgICAgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlIGFzY2lpIGNoYXJhY3Rlci4KCiAgICAgICAgVGhpcyBmaWx0ZXIgYXBwbGllcyB0byBhbGwgc2NyaXB0cyB3aGljaCBkbyBub3QgdXNlIEVuZ2xpc2ggY2hhcmFjdGVycy4KICAgICAgICAiIiIKICAgICAgICBmaWx0ZXJlZCA9IGJ5dGVhcnJheSgpCgogICAgICAgICMgVGhpcyByZWdleCBleHByZXNzaW9uIGZpbHRlcnMgb3V0IG9ubHkgd29yZHMgdGhhdCBoYXZlIGF0LWxlYXN0IG9uZQogICAgICAgICMgaW50ZXJuYXRpb25hbCBjaGFyYWN0ZXIuIFRoZSB3b3JkIG1heSBpbmNsdWRlIG9uZSBtYXJrZXIgY2hhcmFjdGVyIGF0CiAgICAgICAgIyB0aGUgZW5kLgogICAgICAgIHdvcmRzID0gcmUuZmluZGFsbChiJ1thLXpBLVpdKltceDgwLVx4RkZdK1thLXpBLVpdKlteYS16QS1aXHg4MC1ceEZGXT8nLAogICAgICAgICAgICAgICAgICAgICAgICAgICBidWYpCgogICAgICAgIGZvciB3b3JkIGluIHdvcmRzOgogICAgICAgICAgICBmaWx0ZXJlZC5leHRlbmQod29yZFs6LTFdKQoKICAgICAgICAgICAgIyBJZiB0aGUgbGFzdCBjaGFyYWN0ZXIgaW4gdGhlIHdvcmQgaXMgYSBtYXJrZXIsIHJlcGxhY2UgaXQgd2l0aCBhCiAgICAgICAgICAgICMgc3BhY2UgYXMgbWFya2VycyBzaG91bGRuJ3QgYWZmZWN0IG91ciBhbmFseXNpcyAodGhleSBhcmUgdXNlZAogICAgICAgICAgICAjIHNpbWlsYXJseSBhY3Jvc3MgYWxsIGxhbmd1YWdlcyBhbmQgbWF5IHRodXMgaGF2ZSBzaW1pbGFyCiAgICAgICAgICAgICMgZnJlcXVlbmNpZXMpLgogICAgICAgICAgICBsYXN0X2NoYXIgPSB3b3JkWy0xOl0KICAgICAgICAgICAgaWYgbm90IGxhc3RfY2hhci5pc2FscGhhKCkgYW5kIGxhc3RfY2hhciA8IGInXHg4MCc6CiAgICAgICAgICAgICAgICBsYXN0X2NoYXIgPSBiJyAnCiAgICAgICAgICAgIGZpbHRlcmVkLmV4dGVuZChsYXN0X2NoYXIpCgogICAgICAgIHJldHVybiBmaWx0ZXJlZAoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBmaWx0ZXJfd2l0aF9lbmdsaXNoX2xldHRlcnMoYnVmKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm5zIGEgY29weSBvZiBgYGJ1ZmBgIHRoYXQgcmV0YWlucyBvbmx5IHRoZSBzZXF1ZW5jZXMgb2YgRW5nbGlzaAogICAgICAgIGFscGhhYmV0IGFuZCBoaWdoIGJ5dGUgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgYmV0d2VlbiA8PiBjaGFyYWN0ZXJzLgogICAgICAgIEFsc28gcmV0YWlucyBFbmdsaXNoIGFscGhhYmV0IGFuZCBoaWdoIGJ5dGUgY2hhcmFjdGVycyBpbW1lZGlhdGVseQogICAgICAgIGJlZm9yZSBvY2N1cnJlbmNlcyBvZiA+LgoKICAgICAgICBUaGlzIGZpbHRlciBjYW4gYmUgYXBwbGllZCB0byBhbGwgc2NyaXB0cyB3aGljaCBjb250YWluIGJvdGggRW5nbGlzaAogICAgICAgIGNoYXJhY3RlcnMgYW5kIGV4dGVuZGVkIEFTQ0lJIGNoYXJhY3RlcnMsIGJ1dCBpcyBjdXJyZW50bHkgb25seSB1c2VkIGJ5CiAgICAgICAgYGBMYXRpbjFQcm9iZXJgYC4KICAgICAgICAiIiIKICAgICAgICBmaWx0ZXJlZCA9IGJ5dGVhcnJheSgpCiAgICAgICAgaW5fdGFnID0gRmFsc2UKICAgICAgICBwcmV2ID0gMAoKICAgICAgICBmb3IgY3VyciBpbiByYW5nZShsZW4oYnVmKSk6CiAgICAgICAgICAgICMgU2xpY2UgaGVyZSB0byBnZXQgYnl0ZXMgaW5zdGVhZCBvZiBhbiBpbnQgd2l0aCBQeXRob24gMwogICAgICAgICAgICBidWZfY2hhciA9IGJ1ZltjdXJyOmN1cnIgKyAxXQogICAgICAgICAgICAjIENoZWNrIGlmIHdlJ3JlIGNvbWluZyBvdXQgb2Ygb3IgZW50ZXJpbmcgYW4gSFRNTCB0YWcKICAgICAgICAgICAgaWYgYnVmX2NoYXIgPT0gYic+JzoKICAgICAgICAgICAgICAgIGluX3RhZyA9IEZhbHNlCiAgICAgICAgICAgIGVsaWYgYnVmX2NoYXIgPT0gYic8JzoKICAgICAgICAgICAgICAgIGluX3RhZyA9IFRydWUKCiAgICAgICAgICAgICMgSWYgY3VycmVudCBjaGFyYWN0ZXIgaXMgbm90IGV4dGVuZGVkLUFTQ0lJIGFuZCBub3QgYWxwaGFiZXRpYy4uLgogICAgICAgICAgICBpZiBidWZfY2hhciA8IGInXHg4MCcgYW5kIG5vdCBidWZfY2hhci5pc2FscGhhKCk6CiAgICAgICAgICAgICAgICAjIC4uLmFuZCB3ZSdyZSBub3QgaW4gYSB0YWcKICAgICAgICAgICAgICAgIGlmIGN1cnIgPiBwcmV2IGFuZCBub3QgaW5fdGFnOgogICAgICAgICAgICAgICAgICAgICMgS2VlcCBldmVyeXRoaW5nIGFmdGVyIGxhc3Qgbm9uLWV4dGVuZGVkLUFTQ0lJLAogICAgICAgICAgICAgICAgICAgICMgbm9uLWFscGhhYmV0aWMgY2hhcmFjdGVyCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQuZXh0ZW5kKGJ1ZltwcmV2OmN1cnJdKQogICAgICAgICAgICAgICAgICAgICMgT3V0cHV0IGEgc3BhY2UgdG8gZGVsaW1pdCBzdHJldGNoIHdlIGtlcHQKICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZC5leHRlbmQoYicgJykKICAgICAgICAgICAgICAgIHByZXYgPSBjdXJyICsgMQoKICAgICAgICAjIElmIHdlJ3JlIG5vdCBpbiBhIHRhZy4uLgogICAgICAgIGlmIG5vdCBpbl90YWc6CiAgICAgICAgICAgICMgS2VlcCBldmVyeXRoaW5nIGFmdGVyIGxhc3Qgbm9uLWV4dGVuZGVkLUFTQ0lJLCBub24tYWxwaGFiZXRpYwogICAgICAgICAgICAjIGNoYXJhY3RlcgogICAgICAgICAgICBmaWx0ZXJlZC5leHRlbmQoYnVmW3ByZXY6XSkKCiAgICAgICAgcmV0dXJuIGZpbHRlcmVkCg==
