statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/waiter.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.
      from botocore import xform_name
      from botocore.utils import get_service_module_name
      from botocore.docs.method import document_model_driven_method

      from boto3.docs.base import BaseDocumenter
      from boto3.docs.utils import get_resource_ignore_params
      from boto3.docs.utils import add_resource_type_overview


      class WaiterResourceDocumenter(BaseDocumenter):
          def __init__(self, resource, service_waiter_model):
              super(WaiterResourceDocumenter, self).__init__(resource)
              self._service_waiter_model = service_waiter_model

          def document_resource_waiters(self, section):
              waiters = self._resource.meta.resource_model.waiters
              add_resource_type_overview(
                  section=section,
                  resource_type='Waiters',
                  description=(
                      'Waiters provide an interface to wait for a resource'
                      ' to reach a specific state.'),
                  intro_link='waiters_intro')
              waiter_list = []
              self.member_map['waiters'] = waiter_list
              for waiter in waiters:
                  waiter_section = section.add_new_section(waiter.name)
                  waiter_list.append(waiter.name)
                  document_resource_waiter(
                      section=waiter_section,
                      resource_name=self._resource_name,
                      event_emitter=self._resource.meta.client.meta.events,
                      service_model=self._service_model,
                      resource_waiter_model=waiter,
                      service_waiter_model=self._service_waiter_model
                  )
    tokens: resume load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top load_const INTEGER load_const import_name botocore.utils import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name boto3.docs.base import_from BaseDocumenter store_name BaseDocumenter pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name BaseDocumenter call store_name STRING_BASE64_LEN_S_ENT_HIGH nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: 004aef8ad990e4d45a3016ff0118003ae2ff3277c76cf5d21737fbff0c41f51d
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/waiter.py: IyBDb3B5cmlnaHQgMjAxNSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuIFlvdQojIG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YKIyB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0CiMKIyBodHRwczovL2F3cy5hbWF6b24uY29tL2FwYWNoZTIuMC8KIwojIG9yIGluIHRoZSAibGljZW5zZSIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMKIyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgojIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYwojIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCmZyb20gYm90b2NvcmUgaW1wb3J0IHhmb3JtX25hbWUKZnJvbSBib3RvY29yZS51dGlscyBpbXBvcnQgZ2V0X3NlcnZpY2VfbW9kdWxlX25hbWUKZnJvbSBib3RvY29yZS5kb2NzLm1ldGhvZCBpbXBvcnQgZG9jdW1lbnRfbW9kZWxfZHJpdmVuX21ldGhvZAoKZnJvbSBib3RvMy5kb2NzLmJhc2UgaW1wb3J0IEJhc2VEb2N1bWVudGVyCmZyb20gYm90bzMuZG9jcy51dGlscyBpbXBvcnQgZ2V0X3Jlc291cmNlX2lnbm9yZV9wYXJhbXMKZnJvbSBib3RvMy5kb2NzLnV0aWxzIGltcG9ydCBhZGRfcmVzb3VyY2VfdHlwZV9vdmVydmlldwoKCmNsYXNzIFdhaXRlclJlc291cmNlRG9jdW1lbnRlcihCYXNlRG9jdW1lbnRlcik6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcmVzb3VyY2UsIHNlcnZpY2Vfd2FpdGVyX21vZGVsKToKICAgICAgICBzdXBlcihXYWl0ZXJSZXNvdXJjZURvY3VtZW50ZXIsIHNlbGYpLl9faW5pdF9fKHJlc291cmNlKQogICAgICAgIHNlbGYuX3NlcnZpY2Vfd2FpdGVyX21vZGVsID0gc2VydmljZV93YWl0ZXJfbW9kZWwKCiAgICBkZWYgZG9jdW1lbnRfcmVzb3VyY2Vfd2FpdGVycyhzZWxmLCBzZWN0aW9uKToKICAgICAgICB3YWl0ZXJzID0gc2VsZi5fcmVzb3VyY2UubWV0YS5yZXNvdXJjZV9tb2RlbC53YWl0ZXJzCiAgICAgICAgYWRkX3Jlc291cmNlX3R5cGVfb3ZlcnZpZXcoCiAgICAgICAgICAgIHNlY3Rpb249c2VjdGlvbiwKICAgICAgICAgICAgcmVzb3VyY2VfdHlwZT0nV2FpdGVycycsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSgKICAgICAgICAgICAgICAgICdXYWl0ZXJzIHByb3ZpZGUgYW4gaW50ZXJmYWNlIHRvIHdhaXQgZm9yIGEgcmVzb3VyY2UnCiAgICAgICAgICAgICAgICAnIHRvIHJlYWNoIGEgc3BlY2lmaWMgc3RhdGUuJyksCiAgICAgICAgICAgIGludHJvX2xpbms9J3dhaXRlcnNfaW50cm8nKQogICAgICAgIHdhaXRlcl9saXN0ID0gW10KICAgICAgICBzZWxmLm1lbWJlcl9tYXBbJ3dhaXRlcnMnXSA9IHdhaXRlcl9saXN0CiAgICAgICAgZm9yIHdhaXRlciBpbiB3YWl0ZXJzOgogICAgICAgICAgICB3YWl0ZXJfc2VjdGlvbiA9IHNlY3Rpb24uYWRkX25ld19zZWN0aW9uKHdhaXRlci5uYW1lKQogICAgICAgICAgICB3YWl0ZXJfbGlzdC5hcHBlbmQod2FpdGVyLm5hbWUpCiAgICAgICAgICAgIGRvY3VtZW50X3Jlc291cmNlX3dhaXRlcigKICAgICAgICAgICAgICAgIHNlY3Rpb249d2FpdGVyX3NlY3Rpb24sCiAgICAgICAgICAgICAgICByZXNvdXJjZV9uYW1lPXNlbGYuX3Jlc291cmNlX25hbWUsCiAgICAgICAgICAgICAgICBldmVudF9lbWl0dGVyPXNlbGYuX3Jlc291cmNlLm1ldGEuY2xpZW50Lm1ldGEuZXZlbnRzLAogICAgICAgICAgICAgICAgc2VydmljZV9tb2RlbD1zZWxmLl9zZXJ2aWNlX21vZGVsLAogICAgICAgICAgICAgICAgcmVzb3VyY2Vfd2FpdGVyX21vZGVsPXdhaXRlciwKICAgICAgICAgICAgICAgIHNlcnZpY2Vfd2FpdGVyX21vZGVsPXNlbGYuX3NlcnZpY2Vfd2FpdGVyX21vZGVsCiAgICAgICAgICAgICkKCgpkZWYgZG9jdW1lbnRfcmVzb3VyY2Vfd2FpdGVyKHNlY3Rpb24sIHJlc291cmNlX25hbWUsIGV2ZW50X2VtaXR0ZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZV9tb2RlbCwgcmVzb3VyY2Vfd2FpdGVyX21vZGVsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2Vfd2FpdGVyX21vZGVsLCBpbmNsdWRlX3NpZ25hdHVyZT1UcnVlKToKICAgIHdhaXRlcl9tb2RlbCA9IHNlcnZpY2Vfd2FpdGVyX21vZGVsLmdldF93YWl0ZXIoCiAgICAgICAgcmVzb3VyY2Vfd2FpdGVyX21vZGVsLndhaXRlcl9uYW1lKQogICAgb3BlcmF0aW9uX21vZGVsID0gc2VydmljZV9tb2RlbC5vcGVyYXRpb25fbW9kZWwoCiAgICAgICAgd2FpdGVyX21vZGVsLm9wZXJhdGlvbikKCiAgICBpZ25vcmVfcGFyYW1zID0gZ2V0X3Jlc291cmNlX2lnbm9yZV9wYXJhbXMocmVzb3VyY2Vfd2FpdGVyX21vZGVsLnBhcmFtcykKICAgIHNlcnZpY2VfbW9kdWxlX25hbWUgPSBnZXRfc2VydmljZV9tb2R1bGVfbmFtZShzZXJ2aWNlX21vZGVsKQogICAgZGVzY3JpcHRpb24gPSAoCiAgICAgICAgJ1dhaXRzIHVudGlsIHRoaXMgJXMgaXMgJXMuIFRoaXMgbWV0aG9kIGNhbGxzICcKICAgICAgICAnOnB5Om1ldGg6YCVzLldhaXRlci4lcy53YWl0YCB3aGljaCBwb2xscy4gJwogICAgICAgICc6cHk6bWV0aDpgJXMuQ2xpZW50LiVzYCBldmVyeSAlcyBzZWNvbmRzIHVudGlsICcKICAgICAgICAnYSBzdWNjZXNzZnVsIHN0YXRlIGlzIHJlYWNoZWQuIEFuIGVycm9yIGlzIHJldHVybmVkICcKICAgICAgICAnYWZ0ZXIgJXMgZmFpbGVkIGNoZWNrcy4nICUgKAogICAgICAgICAgICByZXNvdXJjZV9uYW1lLCAnICcuam9pbihyZXNvdXJjZV93YWl0ZXJfbW9kZWwubmFtZS5zcGxpdCgnXycpWzI6XSksCiAgICAgICAgICAgIHNlcnZpY2VfbW9kdWxlX25hbWUsCiAgICAgICAgICAgIHhmb3JtX25hbWUocmVzb3VyY2Vfd2FpdGVyX21vZGVsLndhaXRlcl9uYW1lKSwKICAgICAgICAgICAgc2VydmljZV9tb2R1bGVfbmFtZSwKICAgICAgICAgICAgeGZvcm1fbmFtZSh3YWl0ZXJfbW9kZWwub3BlcmF0aW9uKSwKICAgICAgICAgICAgd2FpdGVyX21vZGVsLmRlbGF5LCB3YWl0ZXJfbW9kZWwubWF4X2F0dGVtcHRzKSkKICAgIGV4YW1wbGVfcHJlZml4ID0gJyVzLiVzJyAlICgKICAgICAgICB4Zm9ybV9uYW1lKHJlc291cmNlX25hbWUpLCByZXNvdXJjZV93YWl0ZXJfbW9kZWwubmFtZSkKICAgIGRvY3VtZW50X21vZGVsX2RyaXZlbl9tZXRob2QoCiAgICAgICAgc2VjdGlvbj1zZWN0aW9uLCBtZXRob2RfbmFtZT1yZXNvdXJjZV93YWl0ZXJfbW9kZWwubmFtZSwKICAgICAgICBvcGVyYXRpb25fbW9kZWw9b3BlcmF0aW9uX21vZGVsLAogICAgICAgIGV2ZW50X2VtaXR0ZXI9ZXZlbnRfZW1pdHRlciwKICAgICAgICBleGFtcGxlX3ByZWZpeD1leGFtcGxlX3ByZWZpeCwKICAgICAgICBtZXRob2RfZGVzY3JpcHRpb249ZGVzY3JpcHRpb24sCiAgICAgICAgZXhjbHVkZV9pbnB1dD1pZ25vcmVfcGFyYW1zLAogICAgICAgIGluY2x1ZGVfc2lnbmF0dXJlPWluY2x1ZGVfc2lnbmF0dXJlCiAgICApCiAgICBpZiAncmV0dXJuJyBpbiBzZWN0aW9uLmF2YWlsYWJsZV9zZWN0aW9uczoKICAgICAgICAjIFdhaXRlcnMgZG8gbm90IHJldHVybiBhbnl0aGluZyBzbyB3ZSBzaG91bGQgcmVtb3ZlCiAgICAgICAgIyBhbnkgc2VjdGlvbnMgdGhhdCBtYXkgZG9jdW1lbnQgdGhlIHVuZGVybHlpbmcgcmV0dXJuCiAgICAgICAgIyB2YWx1ZSBvZiB0aGUgY2xpZW50IG1ldGhvZC4KICAgICAgICByZXR1cm5fc2VjdGlvbiA9IHNlY3Rpb24uZ2V0X3NlY3Rpb24oJ3JldHVybicpCiAgICAgICAgcmV0dXJuX3NlY3Rpb24uY2xlYXJfdGV4dCgpCiAgICAgICAgcmV0dXJuX3NlY3Rpb24ucmVtb3ZlX2FsbF9zZWN0aW9ucygpCiAgICAgICAgcmV0dXJuX3NlY3Rpb24ud3JpdGUoJzpyZXR1cm5zOiBOb25lJykK
