statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/team.py
  contents:
  - name: TeamMember.__init__
    score: 0.0
    code: |-
      def __init__(self, team, state, data):
              self.team = team
              self.membership_state = try_enum(TeamMembershipState, data['membership_state'])
              self.permissions = data['permissions']
              super().__init__(state=state, data=data['user'])
    tokens: copy_free_vars resume load_fast team load_fast self store_attr team load_global try_enum load_global STRING_LEN_S_ENT_HIGH load_fast data load_const STRING_LEN_S_ENT_HIGH binary_subscr call load_fast self store_attr STRING_LEN_S_ENT_HIGH load_fast data load_const permissions binary_subscr load_fast self store_attr permissions load_global super load_deref __class__ load_fast self load_super_attr __init__ load_fast state load_fast data load_const user binary_subscr kw_names data state call pop_top return_const None
    hash: 66746d8115edbefa3ce8ce74b33e432c28dc4dd1f834a21158183f2eb2e60332
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/team.py: IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgpmcm9tIC4gaW1wb3J0IHV0aWxzCmZyb20gLnVzZXIgaW1wb3J0IEJhc2VVc2VyCmZyb20gLmFzc2V0IGltcG9ydCBBc3NldApmcm9tIC5lbnVtcyBpbXBvcnQgVGVhbU1lbWJlcnNoaXBTdGF0ZSwgdHJ5X2VudW0KCl9fYWxsX18gPSAoCiAgICAnVGVhbScsCiAgICAnVGVhbU1lbWJlcicsCikKCmNsYXNzIFRlYW06CiAgICAiIiJSZXByZXNlbnRzIGFuIGFwcGxpY2F0aW9uIHRlYW0gZm9yIGEgYm90IHByb3ZpZGVkIGJ5IERpc2NvcmQuCgogICAgQXR0cmlidXRlcwogICAgLS0tLS0tLS0tLS0tLQogICAgaWQ6IDpjbGFzczpgaW50YAogICAgICAgIFRoZSB0ZWFtIElELgogICAgbmFtZTogOmNsYXNzOmBzdHJgCiAgICAgICAgVGhlIHRlYW0gbmFtZQogICAgaWNvbjogT3B0aW9uYWxbOmNsYXNzOmBzdHJgXQogICAgICAgIFRoZSBpY29uIGhhc2gsIGlmIGl0IGV4aXN0cy4KICAgIG93bmVyX2lkOiA6Y2xhc3M6YGludGAKICAgICAgICBUaGUgdGVhbSdzIG93bmVyIElELgogICAgbWVtYmVyczogTGlzdFs6Y2xhc3M6YFRlYW1NZW1iZXJgXQogICAgICAgIEEgbGlzdCBvZiB0aGUgbWVtYmVycyBpbiB0aGUgdGVhbQoKICAgICAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjMKICAgICIiIgogICAgX19zbG90c19fID0gKCdfc3RhdGUnLCAnaWQnLCAnbmFtZScsICdpY29uJywgJ293bmVyX2lkJywgJ21lbWJlcnMnKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzdGF0ZSwgZGF0YSk6CiAgICAgICAgc2VsZi5fc3RhdGUgPSBzdGF0ZQoKICAgICAgICBzZWxmLmlkID0gdXRpbHMuX2dldF9hc19zbm93Zmxha2UoZGF0YSwgJ2lkJykKICAgICAgICBzZWxmLm5hbWUgPSBkYXRhWyduYW1lJ10KICAgICAgICBzZWxmLmljb24gPSBkYXRhWydpY29uJ10KICAgICAgICBzZWxmLm93bmVyX2lkID0gdXRpbHMuX2dldF9hc19zbm93Zmxha2UoZGF0YSwgJ293bmVyX3VzZXJfaWQnKQogICAgICAgIHNlbGYubWVtYmVycyA9IFtUZWFtTWVtYmVyKHNlbGYsIHNlbGYuX3N0YXRlLCBtZW1iZXIpIGZvciBtZW1iZXIgaW4gZGF0YVsnbWVtYmVycyddXQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzx7MC5fX2NsYXNzX18uX19uYW1lX199IGlkPXswLmlkfSBuYW1lPXswLm5hbWV9PicuZm9ybWF0KHNlbGYpCgogICAgQHByb3BlcnR5CiAgICBkZWYgaWNvbl91cmwoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmAuQXNzZXRgOiBSZXRyaWV2ZXMgdGhlIHRlYW0ncyBpY29uIGFzc2V0LgoKICAgICAgICBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZyA6bWV0aDpgaWNvbl91cmxfYXNgIHdpdGgKICAgICAgICB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzICgnd2VicCcgZm9ybWF0IGFuZCBhIHNpemUgb2YgMTAyNCkuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuaWNvbl91cmxfYXMoKQoKICAgIGRlZiBpY29uX3VybF9hcyhzZWxmLCAqLCBmb3JtYXQ9J3dlYnAnLCBzaXplPTEwMjQpOgogICAgICAgICIiIlJldHVybnMgYW4gOmNsYXNzOmBBc3NldGAgZm9yIHRoZSBpY29uIHRoZSB0ZWFtIGhhcy4KCiAgICAgICAgVGhlIGZvcm1hdCBtdXN0IGJlIG9uZSBvZiAnd2VicCcsICdqcGVnJywgJ2pwZycgb3IgJ3BuZycuCiAgICAgICAgVGhlIHNpemUgbXVzdCBiZSBhIHBvd2VyIG9mIDIgYmV0d2VlbiAxNiBhbmQgNDA5Ni4KCiAgICAgICAgLi4gdmVyc2lvbmFkZGVkOjogMi4wCgogICAgICAgIFBhcmFtZXRlcnMKICAgICAgICAtLS0tLS0tLS0tLQogICAgICAgIGZvcm1hdDogOmNsYXNzOmBzdHJgCiAgICAgICAgICAgIFRoZSBmb3JtYXQgdG8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSBpY29uIHRvLiBEZWZhdWx0cyB0byAnd2VicCcuCiAgICAgICAgc2l6ZTogOmNsYXNzOmBpbnRgCiAgICAgICAgICAgIFRoZSBzaXplIG9mIHRoZSBpbWFnZSB0byBkaXNwbGF5LgoKICAgICAgICBSYWlzZXMKICAgICAgICAtLS0tLS0KICAgICAgICBJbnZhbGlkQXJndW1lbnQKICAgICAgICAgICAgQmFkIGltYWdlIGZvcm1hdCBwYXNzZWQgdG8gYGBmb3JtYXRgYCBvciBpbnZhbGlkIGBgc2l6ZWBgLgoKICAgICAgICBSZXR1cm5zCiAgICAgICAgLS0tLS0tLS0KICAgICAgICA6Y2xhc3M6YEFzc2V0YAogICAgICAgICAgICBUaGUgcmVzdWx0aW5nIENETiBhc3NldC4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gQXNzZXQuX2Zyb21faWNvbihzZWxmLl9zdGF0ZSwgc2VsZiwgJ3RlYW0nLCBmb3JtYXQ9Zm9ybWF0LCBzaXplPXNpemUpCgogICAgQHByb3BlcnR5CiAgICBkZWYgb3duZXIoc2VsZik6CiAgICAgICAgIiIiT3B0aW9uYWxbOmNsYXNzOmBUZWFtTWVtYmVyYF06IFRoZSB0ZWFtJ3Mgb3duZXIuIiIiCiAgICAgICAgcmV0dXJuIHV0aWxzLmdldChzZWxmLm1lbWJlcnMsIGlkPXNlbGYub3duZXJfaWQpCgpjbGFzcyBUZWFtTWVtYmVyKEJhc2VVc2VyKToKICAgICIiIlJlcHJlc2VudHMgYSB0ZWFtIG1lbWJlciBpbiBhIHRlYW0uCgogICAgLi4gY29udGFpbmVyOjogb3BlcmF0aW9ucwoKICAgICAgICAuLiBkZXNjcmliZTo6IHggPT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byB0ZWFtIG1lbWJlcnMgYXJlIGVxdWFsLgoKICAgICAgICAuLiBkZXNjcmliZTo6IHggIT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byB0ZWFtIG1lbWJlcnMgYXJlIG5vdCBlcXVhbC4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiBoYXNoKHgpCgogICAgICAgICAgICBSZXR1cm4gdGhlIHRlYW0gbWVtYmVyJ3MgaGFzaC4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiBzdHIoeCkKCiAgICAgICAgICAgIFJldHVybnMgdGhlIHRlYW0gbWVtYmVyJ3MgbmFtZSB3aXRoIGRpc2NyaW1pbmF0b3IuCgogICAgLi4gdmVyc2lvbmFkZGVkOjogMS4zCgogICAgQXR0cmlidXRlcwogICAgLS0tLS0tLS0tLS0tLQogICAgbmFtZTogOmNsYXNzOmBzdHJgCiAgICAgICAgVGhlIHRlYW0gbWVtYmVyJ3MgdXNlcm5hbWUuCiAgICBpZDogOmNsYXNzOmBpbnRgCiAgICAgICAgVGhlIHRlYW0gbWVtYmVyJ3MgdW5pcXVlIElELgogICAgZGlzY3JpbWluYXRvcjogOmNsYXNzOmBzdHJgCiAgICAgICAgVGhlIHRlYW0gbWVtYmVyJ3MgZGlzY3JpbWluYXRvci4gVGhpcyBpcyBnaXZlbiB3aGVuIHRoZSB1c2VybmFtZSBoYXMgY29uZmxpY3RzLgogICAgYXZhdGFyOiBPcHRpb25hbFs6Y2xhc3M6YHN0cmBdCiAgICAgICAgVGhlIGF2YXRhciBoYXNoIHRoZSB0ZWFtIG1lbWJlciBoYXMuIENvdWxkIGJlIE5vbmUuCiAgICBib3Q6IDpjbGFzczpgYm9vbGAKICAgICAgICBTcGVjaWZpZXMgaWYgdGhlIHVzZXIgaXMgYSBib3QgYWNjb3VudC4KICAgIHRlYW06IDpjbGFzczpgVGVhbWAKICAgICAgICBUaGUgdGVhbSB0aGF0IHRoZSBtZW1iZXIgaXMgZnJvbS4KICAgIG1lbWJlcnNoaXBfc3RhdGU6IDpjbGFzczpgVGVhbU1lbWJlcnNoaXBTdGF0ZWAKICAgICAgICBUaGUgbWVtYmVyc2hpcCBzdGF0ZSBvZiB0aGUgbWVtYmVyIChlLmcuIGludml0ZWQgb3IgYWNjZXB0ZWQpCiAgICAiIiIKICAgIF9fc2xvdHNfXyA9IEJhc2VVc2VyLl9fc2xvdHNfXyArICgndGVhbScsICdtZW1iZXJzaGlwX3N0YXRlJywgJ3Blcm1pc3Npb25zJykKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdGVhbSwgc3RhdGUsIGRhdGEpOgogICAgICAgIHNlbGYudGVhbSA9IHRlYW0KICAgICAgICBzZWxmLm1lbWJlcnNoaXBfc3RhdGUgPSB0cnlfZW51bShUZWFtTWVtYmVyc2hpcFN0YXRlLCBkYXRhWydtZW1iZXJzaGlwX3N0YXRlJ10pCiAgICAgICAgc2VsZi5wZXJtaXNzaW9ucyA9IGRhdGFbJ3Blcm1pc3Npb25zJ10KICAgICAgICBzdXBlcigpLl9faW5pdF9fKHN0YXRlPXN0YXRlLCBkYXRhPWRhdGFbJ3VzZXInXSkKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuICc8ezAuX19jbGFzc19fLl9fbmFtZV9ffSBpZD17MC5pZH0gbmFtZT17MC5uYW1lIXJ9ICcgXAogICAgICAgICAgICAgICAnZGlzY3JpbWluYXRvcj17MC5kaXNjcmltaW5hdG9yIXJ9IG1lbWJlcnNoaXBfc3RhdGU9ezAubWVtYmVyc2hpcF9zdGF0ZSFyfT4nLmZvcm1hdChzZWxmKQo=
