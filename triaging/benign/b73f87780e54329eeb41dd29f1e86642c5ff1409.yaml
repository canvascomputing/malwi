statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/role.py
  contents:
  - name: Role.delete
    score: 0.0
    code: |-
      async def delete(self, *, reason=None):
              """|coro|

              Deletes the role.

              You must have the :attr:`~Permissions.manage_roles` permission to
              use this.

              Parameters
              -----------
              reason: Optional[:class:`str`]
                  The reason for deleting this role. Shows up on the audit log.

              Raises
              --------
              Forbidden
                  You do not have permissions to delete the role.
              HTTPException
                  Deleting the role failed.
              """

              await self._state.http.delete_role(self.guild.id, self.id, reason=reason)
    tokens: return_generator pop_top resume load_fast self load_attr _state load_attr http load_attr delete_role load_fast self load_attr guild load_attr id load_fast self load_attr id load_fast reason kw_names reason call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_const None cleanup_throw jump_backward TO_NUMBER call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: 3a646d797fbd47eb4039055f2a4a767d06a10feef56b033788a8404c9a66e58b
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/role.py: 
