statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_ffi.py
  contents:
  - name: 'null'
    score: null
    code: |-
      def null():
              return ffi.NULL
    tokens: resume load_global ffi load_attr NULL return_value
    hash: e18eba3264d40fc59f76221cbeceafaceae34557983508025722d5e2f1573206
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_ffi.py: 
