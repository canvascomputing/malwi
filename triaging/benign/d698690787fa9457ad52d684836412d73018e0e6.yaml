statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/auth/composer/rpc_signature_composer.py
  contents:
  - name: get_signed_url
    score: 0.0
    code: |-
      def get_signed_url(params, ak, secret, accept_format, method, body_params, signer=mac1):
          url_params = __refresh_sign_parameters(params, ak, accept_format, signer)
          sign_params = dict(url_params)
          sign_params.update(body_params)
          string_to_sign = __compose_string_to_sign(method, sign_params)
          signature = __get_signature(string_to_sign, secret, signer)
          url_params['Signature'] = signature
          url = '/?' + __pop_standard_urlencode(urlencode(url_params))
          return url, string_to_sign
    tokens: resume load_global STRING_LEN_S_ENT_HIGH load_fast params load_fast ak load_fast accept_format load_fast signer call store_fast url_params load_global dict load_fast url_params call store_fast sign_params load_fast sign_params load_attr update load_fast body_params call pop_top load_global STRING_LEN_S_ENT_HIGH load_fast method load_fast sign_params call store_fast string_to_sign load_global __get_signature load_fast string_to_sign load_fast secret load_fast signer call store_fast signature load_fast signature load_fast url_params load_const Signature store_subscr load_const STRING_FILE_PATH load_global STRING_LEN_S_ENT_HIGH load_global urlencode load_fast url_params call call binary_op + store_fast url load_fast url load_fast string_to_sign build_tuple return_value
    hash: 99c6b4755103899e725b294d3b56ced57aacb52ea2f50c19e2fa3209c8256d6c
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/auth/composer/rpc_signature_composer.py
  : IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lCiMgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlCiMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24KIyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlCiMgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZQojICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2UKIyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiMgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KIyAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKIyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKIyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiMgdW5kZXIgdGhlIExpY2Vuc2UuCgojIGNvZGluZz11dGYtOApmcm9tIGFsaXl1bnNka2NvcmUudmVuZG9yZWQuc2l4IGltcG9ydCBpdGVyaXRlbXMKZnJvbSBhbGl5dW5zZGtjb3JlLnZlbmRvcmVkLnNpeC5tb3Zlcy51cmxsaWIucGFyc2UgaW1wb3J0IHVybGVuY29kZQpmcm9tIGFsaXl1bnNka2NvcmUudmVuZG9yZWQuc2l4Lm1vdmVzLnVybGxpYi5yZXF1ZXN0IGltcG9ydCBwYXRobmFtZTJ1cmwKCmZyb20gYWxpeXVuc2RrY29yZS5hdXRoLmFsZ29yaXRobSBpbXBvcnQgc2hhX2htYWMxIGFzIG1hYzEKZnJvbSBhbGl5dW5zZGtjb3JlLnV0aWxzIGltcG9ydCBwYXJhbWV0ZXJfaGVscGVyIGFzIGhlbHBlcgoKCiMgdGhpcyBmdW5jdGlvbiB3aWxsIGFwcGVuZCB0aGUgbmVjZXNzYXJ5IHBhcmFtZXRlcnMgZm9yIHNpZ25lcnMgcHJvY2Vzcy4KIyBwYXJhbWV0ZXJzOiB0aGUgb3JpZ25hbCBwYXJhbWV0ZXJzCiMgc2lnbmVyczogc2hhX2htYWMxIG9yIHNoYV9obWFjMjU2CiMgYWNjZXNzS2V5SWQ6IHRoaXMgaXMgYWxpeXVuX2FjY2Vzc19rZXlfaWQKIyBmb3JtYXQ6IFhNTCBvciBKU09OCmRlZiBfX3JlZnJlc2hfc2lnbl9wYXJhbWV0ZXJzKAogICAgICAgIHBhcmFtZXRlcnMsCiAgICAgICAgYWNjZXNzX2tleV9pZCwKICAgICAgICBhY2NlcHRfZm9ybWF0PSJKU09OIiwKICAgICAgICBzaWduZXI9bWFjMSk6CiAgICBpZiBwYXJhbWV0ZXJzIGlzIE5vbmUgb3Igbm90IGlzaW5zdGFuY2UocGFyYW1ldGVycywgZGljdCk6CiAgICAgICAgcGFyYW1ldGVycyA9IGRpY3QoKQogICAgaWYgJ1NpZ25hdHVyZScgaW4gcGFyYW1ldGVyczoKICAgICAgICBkZWwgcGFyYW1ldGVyc1snU2lnbmF0dXJlJ10KICAgIHBhcmFtZXRlcnNbIlRpbWVzdGFtcCJdID0gaGVscGVyLmdldF9pc29fODA2MV9kYXRlKCkKICAgIHBhcmFtZXRlcnNbIlNpZ25hdHVyZU1ldGhvZCJdID0gc2lnbmVyLmdldF9zaWduZXJfbmFtZSgpCiAgICBwYXJhbWV0ZXJzWyJTaWduYXR1cmVUeXBlIl0gPSBzaWduZXIuZ2V0X3NpZ25lcl90eXBlKCkKICAgIHBhcmFtZXRlcnNbIlNpZ25hdHVyZVZlcnNpb24iXSA9IHNpZ25lci5nZXRfc2lnbmVyX3ZlcnNpb24oKQogICAgcGFyYW1ldGVyc1siU2lnbmF0dXJlTm9uY2UiXSA9IGhlbHBlci5nZXRfdXVpZCgpCiAgICBwYXJhbWV0ZXJzWyJBY2Nlc3NLZXlJZCJdID0gYWNjZXNzX2tleV9pZAogICAgaWYgYWNjZXB0X2Zvcm1hdCBpcyBub3QgTm9uZToKICAgICAgICBwYXJhbWV0ZXJzWyJGb3JtYXQiXSA9IGFjY2VwdF9mb3JtYXQKICAgIHJldHVybiBwYXJhbWV0ZXJzCgoKZGVmIF9fcG9wX3N0YW5kYXJkX3VybGVuY29kZShxdWVyeSk6CiAgICByZXQgPSBxdWVyeS5yZXBsYWNlKCcrJywgJyUyMCcpCiAgICByZXQgPSByZXQucmVwbGFjZSgnKicsICclMkEnKQogICAgcmV0ID0gcmV0LnJlcGxhY2UoJyU3RScsICd+JykKICAgIHJldHVybiByZXQKCgpkZWYgX19jb21wb3NlX3N0cmluZ190b19zaWduKG1ldGhvZCwgcXVlcmllcyk6CiAgICBzb3J0ZWRfcGFyYW1ldGVycyA9IHNvcnRlZChpdGVyaXRlbXMocXVlcmllcyksIGtleT1sYW1iZGEgcXVlcmllczogcXVlcmllc1swXSkKICAgIHNvcnRlZF9xdWVyeV9zdHJpbmcgPSBfX3BvcF9zdGFuZGFyZF91cmxlbmNvZGUodXJsZW5jb2RlKHNvcnRlZF9wYXJhbWV0ZXJzKSkKICAgIGNhbm9uaWNhbGl6ZWRfcXVlcnlfc3RyaW5nID0gX19wb3Bfc3RhbmRhcmRfdXJsZW5jb2RlKHBhdGhuYW1lMnVybChzb3J0ZWRfcXVlcnlfc3RyaW5nKSkKICAgIHN0cmluZ190b19zaWduID0gbWV0aG9kICsgIiYlMkYmIiArIGNhbm9uaWNhbGl6ZWRfcXVlcnlfc3RyaW5nCiAgICByZXR1cm4gc3RyaW5nX3RvX3NpZ24KCgpkZWYgX19nZXRfc2lnbmF0dXJlKHN0cmluZ190b19zaWduLCBzZWNyZXQsIHNpZ25lcj1tYWMxKToKICAgIHJldHVybiBzaWduZXIuZ2V0X3NpZ25fc3RyaW5nKHN0cmluZ190b19zaWduLCBzZWNyZXQgKyAnJicpCgoKZGVmIGdldF9zaWduZWRfdXJsKHBhcmFtcywgYWssIHNlY3JldCwgYWNjZXB0X2Zvcm1hdCwgbWV0aG9kLCBib2R5X3BhcmFtcywgc2lnbmVyPW1hYzEpOgogICAgdXJsX3BhcmFtcyA9IF9fcmVmcmVzaF9zaWduX3BhcmFtZXRlcnMocGFyYW1zLCBhaywgYWNjZXB0X2Zvcm1hdCwgc2lnbmVyKQogICAgc2lnbl9wYXJhbXMgPSBkaWN0KHVybF9wYXJhbXMpCiAgICBzaWduX3BhcmFtcy51cGRhdGUoYm9keV9wYXJhbXMpCiAgICBzdHJpbmdfdG9fc2lnbiA9IF9fY29tcG9zZV9zdHJpbmdfdG9fc2lnbihtZXRob2QsIHNpZ25fcGFyYW1zKQogICAgc2lnbmF0dXJlID0gX19nZXRfc2lnbmF0dXJlKHN0cmluZ190b19zaWduLCBzZWNyZXQsIHNpZ25lcikKICAgIHVybF9wYXJhbXNbJ1NpZ25hdHVyZSddID0gc2lnbmF0dXJlCiAgICB1cmwgPSAnLz8nICsgX19wb3Bfc3RhbmRhcmRfdXJsZW5jb2RlKHVybGVuY29kZSh1cmxfcGFyYW1zKSkKICAgIHJldHVybiB1cmwsIHN0cmluZ190b19zaWduCg==
