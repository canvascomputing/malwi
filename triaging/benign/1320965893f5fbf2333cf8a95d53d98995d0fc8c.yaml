statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-kms/2.16.1/python-aliyun-sdk-kms-2.16.1/python-aliyun-sdk-kms-2.16.1/aliyunsdkkms/request/v20160120/GetParametersForImportRequest.py
  contents:
  - name: GetParametersForImportRequest
    score: 0.0
    code: "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nfrom aliyunsdkcore.request import RpcRequest\nfrom aliyunsdkkms.endpoint import endpoint_data\n\nclass GetParametersForImportRequest(RpcRequest):\n\n\tdef __init__(self):\n\t\tRpcRequest.__init__(self, 'Kms', '2016-01-20', 'GetParametersForImport','kms')\n\t\tself.set_protocol_type('https')\n\t\tself.set_method('POST')\n\n\t\tif hasattr(self, \"endpoint_map\"):\n\t\t\tsetattr(self, \"endpoint_map\", endpoint_data.getEndpointMap())\n\t\tif hasattr(self, \"endpoint_regional\"):\n\t\t\tsetattr(self, \"endpoint_regional\", endpoint_data.getEndpointRegional())\n\n\tdef get_KeyId(self): # String\n\t\treturn self.get_query_params().get('KeyId')\n\n\tdef set_KeyId(self, KeyId):  # String\n\t\tself.add_query_param('KeyId', KeyId)\n\tdef get_WrappingAlgorithm(self): # String\n\t\treturn self.get_query_params().get('WrappingAlgorithm')\n\n\tdef set_WrappingAlgorithm(self, WrappingAlgorithm):  # String\n\t\tself.add_query_param('WrappingAlgorithm', WrappingAlgorithm)\n\tdef get_WrappingKeySpec(self): # String\n\t\treturn self.get_query_params().get('WrappingKeySpec')\n\n\tdef set_WrappingKeySpec(self, WrappingKeySpec):  # String\n\t\tself.add_query_param('WrappingKeySpec', WrappingKeySpec)"
    tokens: resume load_name __name__ store_name __module__ load_const STRING_LEN_S_ENT_HIGH store_name __qualname__ load_const OBJECT make_function store_name __init__ load_const OBJECT make_function store_name get_KeyId load_const OBJECT make_function store_name set_KeyId load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: 4fed054d61333fd7d54667eda46c61fd5b231dc0518b827b4598e447d0d18bcd
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-kms/2.16.1/python-aliyun-sdk-kms-2.16.1/python-aliyun-sdk-kms-2.16.1/aliyunsdkkms/request/v20160120/GetParametersForImportRequest.py
  : IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lCiMgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlCiMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24KIyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlCiMgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZQojICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2UKIyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIwojICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKIwojCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAojIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiMgIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiMgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiMgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwojIHVuZGVyIHRoZSBMaWNlbnNlLgoKZnJvbSBhbGl5dW5zZGtjb3JlLnJlcXVlc3QgaW1wb3J0IFJwY1JlcXVlc3QKZnJvbSBhbGl5dW5zZGtrbXMuZW5kcG9pbnQgaW1wb3J0IGVuZHBvaW50X2RhdGEKCmNsYXNzIEdldFBhcmFtZXRlcnNGb3JJbXBvcnRSZXF1ZXN0KFJwY1JlcXVlc3QpOgoKCWRlZiBfX2luaXRfXyhzZWxmKToKCQlScGNSZXF1ZXN0Ll9faW5pdF9fKHNlbGYsICdLbXMnLCAnMjAxNi0wMS0yMCcsICdHZXRQYXJhbWV0ZXJzRm9ySW1wb3J0Jywna21zJykKCQlzZWxmLnNldF9wcm90b2NvbF90eXBlKCdodHRwcycpCgkJc2VsZi5zZXRfbWV0aG9kKCdQT1NUJykKCgkJaWYgaGFzYXR0cihzZWxmLCAiZW5kcG9pbnRfbWFwIik6CgkJCXNldGF0dHIoc2VsZiwgImVuZHBvaW50X21hcCIsIGVuZHBvaW50X2RhdGEuZ2V0RW5kcG9pbnRNYXAoKSkKCQlpZiBoYXNhdHRyKHNlbGYsICJlbmRwb2ludF9yZWdpb25hbCIpOgoJCQlzZXRhdHRyKHNlbGYsICJlbmRwb2ludF9yZWdpb25hbCIsIGVuZHBvaW50X2RhdGEuZ2V0RW5kcG9pbnRSZWdpb25hbCgpKQoKCWRlZiBnZXRfS2V5SWQoc2VsZik6ICMgU3RyaW5nCgkJcmV0dXJuIHNlbGYuZ2V0X3F1ZXJ5X3BhcmFtcygpLmdldCgnS2V5SWQnKQoKCWRlZiBzZXRfS2V5SWQoc2VsZiwgS2V5SWQpOiAgIyBTdHJpbmcKCQlzZWxmLmFkZF9xdWVyeV9wYXJhbSgnS2V5SWQnLCBLZXlJZCkKCWRlZiBnZXRfV3JhcHBpbmdBbGdvcml0aG0oc2VsZik6ICMgU3RyaW5nCgkJcmV0dXJuIHNlbGYuZ2V0X3F1ZXJ5X3BhcmFtcygpLmdldCgnV3JhcHBpbmdBbGdvcml0aG0nKQoKCWRlZiBzZXRfV3JhcHBpbmdBbGdvcml0aG0oc2VsZiwgV3JhcHBpbmdBbGdvcml0aG0pOiAgIyBTdHJpbmcKCQlzZWxmLmFkZF9xdWVyeV9wYXJhbSgnV3JhcHBpbmdBbGdvcml0aG0nLCBXcmFwcGluZ0FsZ29yaXRobSkKCWRlZiBnZXRfV3JhcHBpbmdLZXlTcGVjKHNlbGYpOiAjIFN0cmluZwoJCXJldHVybiBzZWxmLmdldF9xdWVyeV9wYXJhbXMoKS5nZXQoJ1dyYXBwaW5nS2V5U3BlYycpCgoJZGVmIHNldF9XcmFwcGluZ0tleVNwZWMoc2VsZiwgV3JhcHBpbmdLZXlTcGVjKTogICMgU3RyaW5nCgkJc2VsZi5hZGRfcXVlcnlfcGFyYW0oJ1dyYXBwaW5nS2V5U3BlYycsIFdyYXBwaW5nS2V5U3BlYykK
