statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/sqlite.py
  contents:
  - name: SQLiteTransaction.start
    score: 0.0
    code: |-
      async def start(
              self, is_root: bool, extra_options: typing.Dict[typing.Any, typing.Any]
          ) -> None:
              assert self._connection._connection is not None, "Connection is not acquired"
              self._is_root = is_root
              if self._is_root:
                  async with self._connection._connection.execute("BEGIN") as cursor:
                      await cursor.close()
              else:
                  id = str(uuid.uuid4()).replace("-", "_")
                  self._savepoint_name = f"STARLETTE_SAVEPOINT_{id}"
                  async with self._connection._connection.execute(
                      f"SAVEPOINT {self._savepoint_name}"
                  ) as cursor:
                      await cursor.close()
    tokens: return_generator pop_top resume load_fast self load_attr _connection load_attr _connection pop_jump_if_not_none TO_NUMBER load_assertion_error load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast is_root load_fast self store_attr _is_root load_fast self load_attr _is_root pop_jump_if_false TO_NUMBER load_fast self load_attr _connection load_attr _connection load_attr execute load_const BEGIN call before_async_with get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast cursor load_fast cursor load_attr close call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top load_const load_const load_const call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_const None load_global str load_global uuid load_attr uuid4 call call load_attr replace load_const - load_const _ call store_fast id load_const STRING_LEN_S_ENT_HIGH load_fast id format_value INTEGER build_string load_fast self store_attr _savepoint_name load_fast self load_attr _connection load_attr _connection load_attr execute load_const SAVEPOINT load_fast self load_attr _savepoint_name format_value INTEGER build_string call before_async_with get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast cursor load_fast cursor load_attr close call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top load_const load_const load_const call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_const None cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER push_exc_info with_except_start get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER cleanup_throw end_send pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top return_const None copy pop_except reraise cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER push_exc_info with_except_start get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER cleanup_throw end_send pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top return_const None copy pop_except reraise call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: 72ec593cad7e0fecd6f7568f380a10ecf9f7830a63a0b6ba11c0092abe34edfa
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/sqlite.py
  : 
