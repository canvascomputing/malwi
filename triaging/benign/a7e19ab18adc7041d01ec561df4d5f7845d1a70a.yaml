statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/flags.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # -*- coding: utf-8 -*-

      """
      The MIT License (MIT)

      Copyright (c) 2015-present Rapptz

      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the "Software"),
      to deal in the Software without restriction, including without limitation
      the rights to use, copy, modify, merge, publish, distribute, sublicense,
      and/or sell copies of the Software, and to permit persons to whom the
      Software is furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in
      all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE SOFTWARE.
      """

      from .enums import UserFlags

      __all__ = (
          'SystemChannelFlags',
          'MessageFlags',
          'PublicUserFlags',
          'Intents',
          'MemberCacheFlags',
      )

      class flag_value:
          def __init__(self, func):
              self.flag = func(None)
              self.__doc__ = func.__doc__

          def __get__(self, instance, owner):
              if instance is None:
                  return self
              return instance._has_flag(self.flag)

          def __set__(self, instance, value):
              instance._set_flag(self.flag, value)

          def __repr__(self):
              return '<flag_value flag={.flag!r}>'.format(self)
    tokens: resume load_const STRING_FILE_PATH store_name __doc__ load_const INTEGER load_const import_name enums import_from UserFlags store_name UserFlags pop_top load_const store_name __all__ push_null load_build_class load_const OBJECT make_function load_const flag_value call store_name flag_value push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name flag_value call store_name STRING_LEN_S_ENT_HIGH load_const INTEGER load_const build_const_key_map load_const OBJECT make_function kwdefaults store_name fill_with_flags push_null load_build_class load_const OBJECT make_function load_const BaseFlags call store_name BaseFlags push_null load_name fill_with_flags load_const INTEGER kw_names inverted call push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name BaseFlags call call store_name STRING_LEN_S_ENT_HIGH push_null load_name fill_with_flags call push_null load_build_class load_const OBJECT make_function load_const MessageFlags load_name BaseFlags call call store_name MessageFlags push_null load_name fill_with_flags call push_null load_build_class load_const OBJECT make_function load_const PublicUserFlags load_name BaseFlags call call store_name PublicUserFlags push_null load_name fill_with_flags call push_null load_build_class load_const OBJECT make_function load_const Intents load_name BaseFlags call call store_name Intents push_null load_name fill_with_flags call push_null load_build_class load_const OBJECT make_function load_const STRING_BASE64_LEN_S_ENT_HIGH load_name BaseFlags call call store_name STRING_BASE64_LEN_S_ENT_HIGH return_const None
    hash: 0124824d7cde9364575c20a81cfbfb14a3f371d50d662500d0bb8bc8d10e65d9
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/flags.py: IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgpmcm9tIC5lbnVtcyBpbXBvcnQgVXNlckZsYWdzCgpfX2FsbF9fID0gKAogICAgJ1N5c3RlbUNoYW5uZWxGbGFncycsCiAgICAnTWVzc2FnZUZsYWdzJywKICAgICdQdWJsaWNVc2VyRmxhZ3MnLAogICAgJ0ludGVudHMnLAogICAgJ01lbWJlckNhY2hlRmxhZ3MnLAopCgpjbGFzcyBmbGFnX3ZhbHVlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZ1bmMpOgogICAgICAgIHNlbGYuZmxhZyA9IGZ1bmMoTm9uZSkKICAgICAgICBzZWxmLl9fZG9jX18gPSBmdW5jLl9fZG9jX18KCiAgICBkZWYgX19nZXRfXyhzZWxmLCBpbnN0YW5jZSwgb3duZXIpOgogICAgICAgIGlmIGluc3RhbmNlIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmCiAgICAgICAgcmV0dXJuIGluc3RhbmNlLl9oYXNfZmxhZyhzZWxmLmZsYWcpCgogICAgZGVmIF9fc2V0X18oc2VsZiwgaW5zdGFuY2UsIHZhbHVlKToKICAgICAgICBpbnN0YW5jZS5fc2V0X2ZsYWcoc2VsZi5mbGFnLCB2YWx1ZSkKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuICc8ZmxhZ192YWx1ZSBmbGFnPXsuZmxhZyFyfT4nLmZvcm1hdChzZWxmKQoKY2xhc3MgYWxpYXNfZmxhZ192YWx1ZShmbGFnX3ZhbHVlKToKICAgIHBhc3MKCmRlZiBmaWxsX3dpdGhfZmxhZ3MoKiwgaW52ZXJ0ZWQ9RmFsc2UpOgogICAgZGVmIGRlY29yYXRvcihjbHMpOgogICAgICAgIGNscy5WQUxJRF9GTEFHUyA9IHsKICAgICAgICAgICAgbmFtZTogdmFsdWUuZmxhZwogICAgICAgICAgICBmb3IgbmFtZSwgdmFsdWUgaW4gY2xzLl9fZGljdF9fLml0ZW1zKCkKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZmxhZ192YWx1ZSkKICAgICAgICB9CgogICAgICAgIGlmIGludmVydGVkOgogICAgICAgICAgICBtYXhfYml0cyA9IG1heChjbHMuVkFMSURfRkxBR1MudmFsdWVzKCkpLmJpdF9sZW5ndGgoKQogICAgICAgICAgICBjbHMuREVGQVVMVF9WQUxVRSA9IC0xICsgKDIgKiogbWF4X2JpdHMpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgY2xzLkRFRkFVTFRfVkFMVUUgPSAwCgogICAgICAgIHJldHVybiBjbHMKICAgIHJldHVybiBkZWNvcmF0b3IKCiMgbi5iLiBmbGFncyBtdXN0IGluaGVyaXQgZnJvbSB0aGlzIGFuZCB1c2UgdGhlIGRlY29yYXRvciBhYm92ZQpjbGFzcyBCYXNlRmxhZ3M6CiAgICBfX3Nsb3RzX18gPSAoJ3ZhbHVlJywpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICoqa3dhcmdzKToKICAgICAgICBzZWxmLnZhbHVlID0gc2VsZi5ERUZBVUxUX1ZBTFVFCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4ga3dhcmdzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGtleSBub3QgaW4gc2VsZi5WQUxJRF9GTEFHUzoKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcignJXIgaXMgbm90IGEgdmFsaWQgZmxhZyBuYW1lLicgJSBrZXkpCiAgICAgICAgICAgIHNldGF0dHIoc2VsZiwga2V5LCB2YWx1ZSkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBfZnJvbV92YWx1ZShjbHMsIHZhbHVlKToKICAgICAgICBzZWxmID0gY2xzLl9fbmV3X18oY2xzKQogICAgICAgIHNlbGYudmFsdWUgPSB2YWx1ZQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXFfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIGlzaW5zdGFuY2Uob3RoZXIsIHNlbGYuX19jbGFzc19fKSBhbmQgc2VsZi52YWx1ZSA9PSBvdGhlci52YWx1ZQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3Qgc2VsZi5fX2VxX18ob3RoZXIpCgogICAgZGVmIF9faGFzaF9fKHNlbGYpOgogICAgICAgIHJldHVybiBoYXNoKHNlbGYudmFsdWUpCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIHJldHVybiAnPCVzIHZhbHVlPSVzPicgJSAoc2VsZi5fX2NsYXNzX18uX19uYW1lX18sIHNlbGYudmFsdWUpCgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIGZvciBuYW1lLCB2YWx1ZSBpbiBzZWxmLl9fY2xhc3NfXy5fX2RpY3RfXy5pdGVtcygpOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBhbGlhc19mbGFnX3ZhbHVlKToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBmbGFnX3ZhbHVlKToKICAgICAgICAgICAgICAgIHlpZWxkIChuYW1lLCBzZWxmLl9oYXNfZmxhZyh2YWx1ZS5mbGFnKSkKCiAgICBkZWYgX2hhc19mbGFnKHNlbGYsIG8pOgogICAgICAgIHJldHVybiAoc2VsZi52YWx1ZSAmIG8pID09IG8KCiAgICBkZWYgX3NldF9mbGFnKHNlbGYsIG8sIHRvZ2dsZSk6CiAgICAgICAgaWYgdG9nZ2xlIGlzIFRydWU6CiAgICAgICAgICAgIHNlbGYudmFsdWUgfD0gbwogICAgICAgIGVsaWYgdG9nZ2xlIGlzIEZhbHNlOgogICAgICAgICAgICBzZWxmLnZhbHVlICY9IH5vCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdWYWx1ZSB0byBzZXQgZm9yICVzIG11c3QgYmUgYSBib29sLicgJSBzZWxmLl9fY2xhc3NfXy5fX25hbWVfXykKCkBmaWxsX3dpdGhfZmxhZ3MoaW52ZXJ0ZWQ9VHJ1ZSkKY2xhc3MgU3lzdGVtQ2hhbm5lbEZsYWdzKEJhc2VGbGFncyk6CiAgICByIiIiV3JhcHMgdXAgYSBEaXNjb3JkIHN5c3RlbSBjaGFubmVsIGZsYWcgdmFsdWUuCgogICAgU2ltaWxhciB0byA6Y2xhc3M6YFBlcm1pc3Npb25zYFwsIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkIGFyZSB0d28gd2F5LgogICAgWW91IGNhbiBzZXQgYW5kIHJldHJpZXZlIGluZGl2aWR1YWwgYml0cyB1c2luZyB0aGUgcHJvcGVydGllcyBhcyBpZiB0aGV5CiAgICB3ZXJlIHJlZ3VsYXIgYm9vbHMuIFRoaXMgYWxsb3dzIHlvdSB0byBlZGl0IHRoZSBzeXN0ZW0gZmxhZ3MgZWFzaWx5LgoKICAgIFRvIGNvbnN0cnVjdCBhbiBvYmplY3QgeW91IGNhbiBwYXNzIGtleXdvcmQgYXJndW1lbnRzIGRlbm90aW5nIHRoZSBmbGFncwogICAgdG8gZW5hYmxlIG9yIGRpc2FibGUuCgogICAgLi4gY29udGFpbmVyOjogb3BlcmF0aW9ucwoKICAgICAgICAuLiBkZXNjcmliZTo6IHggPT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byBmbGFncyBhcmUgZXF1YWwuCiAgICAgICAgLi4gZGVzY3JpYmU6OiB4ICE9IHkKCiAgICAgICAgICAgIENoZWNrcyBpZiB0d28gZmxhZ3MgYXJlIG5vdCBlcXVhbC4KICAgICAgICAuLiBkZXNjcmliZTo6IGhhc2goeCkKCiAgICAgICAgICAgICAgIFJldHVybiB0aGUgZmxhZydzIGhhc2guCiAgICAgICAgLi4gZGVzY3JpYmU6OiBpdGVyKHgpCgogICAgICAgICAgICAgICBSZXR1cm5zIGFuIGl0ZXJhdG9yIG9mIGBgKG5hbWUsIHZhbHVlKWBgIHBhaXJzLiBUaGlzIGFsbG93cyBpdAogICAgICAgICAgICAgICB0byBiZSwgZm9yIGV4YW1wbGUsIGNvbnN0cnVjdGVkIGFzIGEgZGljdCBvciBhIGxpc3Qgb2YgcGFpcnMuCgogICAgQXR0cmlidXRlcwogICAgLS0tLS0tLS0tLS0KICAgIHZhbHVlOiA6Y2xhc3M6YGludGAKICAgICAgICBUaGUgcmF3IHZhbHVlLiBUaGlzIHZhbHVlIGlzIGEgYml0IGFycmF5IGZpZWxkIG9mIGEgNTMtYml0IGludGVnZXIKICAgICAgICByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgZmxhZ3MuIFlvdSBzaG91bGQgcXVlcnkKICAgICAgICBmbGFncyB2aWEgdGhlIHByb3BlcnRpZXMgcmF0aGVyIHRoYW4gdXNpbmcgdGhpcyByYXcgdmFsdWUuCiAgICAiIiIKICAgIF9fc2xvdHNfXyA9ICgpCgogICAgIyBGb3Igc29tZSByZWFzb24gdGhlIGZsYWdzIGZvciBzeXN0ZW0gY2hhbm5lbHMgYXJlICJpbnZlcnRlZCIKICAgICMgZXJnbywgaWYgdGhleSdyZSBzZXQgdGhlbiBpdCBtZWFucyAic3VwcHJlc3MiIChvZmYgaW4gdGhlIEdVSSB0b2dnbGUpCiAgICAjIFNpbmNlIHRoaXMgaXMgY291bnRlci1pbnR1aXRpdmUgZnJvbSBhbiBBUEkgcGVyc3BlY3RpdmUgYW5kIGFubm95aW5nCiAgICAjIHRoZXNlIHdpbGwgYmUgaW52ZXJ0ZWQgYXV0b21hdGljYWxseQoKICAgIGRlZiBfaGFzX2ZsYWcoc2VsZiwgbyk6CiAgICAgICAgcmV0dXJuIChzZWxmLnZhbHVlICYgbykgIT0gbwoKICAgIGRlZiBfc2V0X2ZsYWcoc2VsZiwgbywgdG9nZ2xlKToKICAgICAgICBpZiB0b2dnbGUgaXMgVHJ1ZToKICAgICAgICAgICAgc2VsZi52YWx1ZSAmPSB+bwogICAgICAgIGVsaWYgdG9nZ2xlIGlzIEZhbHNlOgogICAgICAgICAgICBzZWxmLnZhbHVlIHw9IG8KICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ1ZhbHVlIHRvIHNldCBmb3IgU3lzdGVtQ2hhbm5lbEZsYWdzIG11c3QgYmUgYSBib29sLicpCgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiBqb2luX25vdGlmaWNhdGlvbnMoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgc3lzdGVtIGNoYW5uZWwgaXMgdXNlZCBmb3IgbWVtYmVyIGpvaW4gbm90aWZpY2F0aW9ucy4iIiIKICAgICAgICByZXR1cm4gMQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgcHJlbWl1bV9zdWJzY3JpcHRpb25zKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFJldHVybnMgYGBUcnVlYGAgaWYgdGhlIHN5c3RlbSBjaGFubmVsIGlzIHVzZWQgZm9yIE5pdHJvIGJvb3N0aW5nIG5vdGlmaWNhdGlvbnMuIiIiCiAgICAgICAgcmV0dXJuIDIKCgpAZmlsbF93aXRoX2ZsYWdzKCkKY2xhc3MgTWVzc2FnZUZsYWdzKEJhc2VGbGFncyk6CiAgICByIiIiV3JhcHMgdXAgYSBEaXNjb3JkIE1lc3NhZ2UgZmxhZyB2YWx1ZS4KCiAgICBTZWUgOmNsYXNzOmBTeXN0ZW1DaGFubmVsRmxhZ3NgLgoKICAgIC4uIGNvbnRhaW5lcjo6IG9wZXJhdGlvbnMKCiAgICAgICAgLi4gZGVzY3JpYmU6OiB4ID09IHkKCiAgICAgICAgICAgIENoZWNrcyBpZiB0d28gZmxhZ3MgYXJlIGVxdWFsLgogICAgICAgIC4uIGRlc2NyaWJlOjogeCAhPSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIGZsYWdzIGFyZSBub3QgZXF1YWwuCiAgICAgICAgLi4gZGVzY3JpYmU6OiBoYXNoKHgpCgogICAgICAgICAgICAgICBSZXR1cm4gdGhlIGZsYWcncyBoYXNoLgogICAgICAgIC4uIGRlc2NyaWJlOjogaXRlcih4KQoKICAgICAgICAgICAgICAgUmV0dXJucyBhbiBpdGVyYXRvciBvZiBgYChuYW1lLCB2YWx1ZSlgYCBwYWlycy4gVGhpcyBhbGxvd3MgaXQKICAgICAgICAgICAgICAgdG8gYmUsIGZvciBleGFtcGxlLCBjb25zdHJ1Y3RlZCBhcyBhIGRpY3Qgb3IgYSBsaXN0IG9mIHBhaXJzLgoKICAgIC4uIHZlcnNpb25hZGRlZDo6IDEuMwoKICAgIEF0dHJpYnV0ZXMKICAgIC0tLS0tLS0tLS0tCiAgICB2YWx1ZTogOmNsYXNzOmBpbnRgCiAgICAgICAgVGhlIHJhdyB2YWx1ZS4gVGhpcyB2YWx1ZSBpcyBhIGJpdCBhcnJheSBmaWVsZCBvZiBhIDUzLWJpdCBpbnRlZ2VyCiAgICAgICAgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIGZsYWdzLiBZb3Ugc2hvdWxkIHF1ZXJ5CiAgICAgICAgZmxhZ3MgdmlhIHRoZSBwcm9wZXJ0aWVzIHJhdGhlciB0aGFuIHVzaW5nIHRoaXMgcmF3IHZhbHVlLgogICAgIiIiCiAgICBfX3Nsb3RzX18gPSAoKQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgY3Jvc3Nwb3N0ZWQoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgbWVzc2FnZSBpcyB0aGUgb3JpZ2luYWwgY3Jvc3Nwb3N0ZWQgbWVzc2FnZS4iIiIKICAgICAgICByZXR1cm4gMQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgaXNfY3Jvc3Nwb3N0ZWQoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgbWVzc2FnZSB3YXMgY3Jvc3Nwb3N0ZWQgZnJvbSBhbm90aGVyIGNoYW5uZWwuIiIiCiAgICAgICAgcmV0dXJuIDIKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIHN1cHByZXNzX2VtYmVkcyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBSZXR1cm5zIGBgVHJ1ZWBgIGlmIHRoZSBtZXNzYWdlJ3MgZW1iZWRzIGhhdmUgYmVlbiBzdXBwcmVzc2VkLiIiIgogICAgICAgIHJldHVybiA0CgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiBzb3VyY2VfbWVzc2FnZV9kZWxldGVkKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFJldHVybnMgYGBUcnVlYGAgaWYgdGhlIHNvdXJjZSBtZXNzYWdlIGZvciB0aGlzIGNyb3NzcG9zdCBoYXMgYmVlbiBkZWxldGVkLiIiIgogICAgICAgIHJldHVybiA4CgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiB1cmdlbnQoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgc291cmNlIG1lc3NhZ2UgaXMgYW4gdXJnZW50IG1lc3NhZ2UuCgogICAgICAgIEFuIHVyZ2VudCBtZXNzYWdlIGlzIG9uZSBzZW50IGJ5IERpc2NvcmQgVHJ1c3QgYW5kIFNhZmV0eS4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMTYKCkBmaWxsX3dpdGhfZmxhZ3MoKQpjbGFzcyBQdWJsaWNVc2VyRmxhZ3MoQmFzZUZsYWdzKToKICAgIHIiIiJXcmFwcyB1cCB0aGUgRGlzY29yZCBVc2VyIFB1YmxpYyBmbGFncy4KCiAgICAuLiBjb250YWluZXI6OiBvcGVyYXRpb25zCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCA9PSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIFB1YmxpY1VzZXJGbGFncyBhcmUgZXF1YWwuCiAgICAgICAgLi4gZGVzY3JpYmU6OiB4ICE9IHkKCiAgICAgICAgICAgIENoZWNrcyBpZiB0d28gUHVibGljVXNlckZsYWdzIGFyZSBub3QgZXF1YWwuCiAgICAgICAgLi4gZGVzY3JpYmU6OiBoYXNoKHgpCgogICAgICAgICAgICBSZXR1cm4gdGhlIGZsYWcncyBoYXNoLgogICAgICAgIC4uIGRlc2NyaWJlOjogaXRlcih4KQoKICAgICAgICAgICAgUmV0dXJucyBhbiBpdGVyYXRvciBvZiBgYChuYW1lLCB2YWx1ZSlgYCBwYWlycy4gVGhpcyBhbGxvd3MgaXQKICAgICAgICAgICAgdG8gYmUsIGZvciBleGFtcGxlLCBjb25zdHJ1Y3RlZCBhcyBhIGRpY3Qgb3IgYSBsaXN0IG9mIHBhaXJzLgogICAgICAgICAgICBOb3RlIHRoYXQgYWxpYXNlcyBhcmUgbm90IHNob3duLgoKICAgIC4uIHZlcnNpb25hZGRlZDo6IDEuNAoKICAgIEF0dHJpYnV0ZXMKICAgIC0tLS0tLS0tLS0tCiAgICB2YWx1ZTogOmNsYXNzOmBpbnRgCiAgICAgICAgVGhlIHJhdyB2YWx1ZS4gVGhpcyB2YWx1ZSBpcyBhIGJpdCBhcnJheSBmaWVsZCBvZiBhIDUzLWJpdCBpbnRlZ2VyCiAgICAgICAgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIGZsYWdzLiBZb3Ugc2hvdWxkIHF1ZXJ5CiAgICAgICAgZmxhZ3MgdmlhIHRoZSBwcm9wZXJ0aWVzIHJhdGhlciB0aGFuIHVzaW5nIHRoaXMgcmF3IHZhbHVlLgogICAgIiIiCgogICAgX19zbG90c19fID0gKCkKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIHN0YWZmKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFJldHVybnMgYGBUcnVlYGAgaWYgdGhlIHVzZXIgaXMgYSBEaXNjb3JkIEVtcGxveWVlLiIiIgogICAgICAgIHJldHVybiBVc2VyRmxhZ3Muc3RhZmYudmFsdWUKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIHBhcnRuZXIoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgdXNlciBpcyBhIERpc2NvcmQgUGFydG5lci4iIiIKICAgICAgICByZXR1cm4gVXNlckZsYWdzLnBhcnRuZXIudmFsdWUKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGh5cGVzcXVhZChzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBSZXR1cm5zIGBgVHJ1ZWBgIGlmIHRoZSB1c2VyIGlzIGEgSHlwZVNxdWFkIEV2ZW50cyBtZW1iZXIuIiIiCiAgICAgICAgcmV0dXJuIFVzZXJGbGFncy5oeXBlc3F1YWQudmFsdWUKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGJ1Z19odW50ZXIoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgdXNlciBpcyBhIEJ1ZyBIdW50ZXIiIiIKICAgICAgICByZXR1cm4gVXNlckZsYWdzLmJ1Z19odW50ZXIudmFsdWUKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGh5cGVzcXVhZF9icmF2ZXJ5KHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFJldHVybnMgYGBUcnVlYGAgaWYgdGhlIHVzZXIgaXMgYSBIeXBlU3F1YWQgQnJhdmVyeSBtZW1iZXIuIiIiCiAgICAgICAgcmV0dXJuIFVzZXJGbGFncy5oeXBlc3F1YWRfYnJhdmVyeS52YWx1ZQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgaHlwZXNxdWFkX2JyaWxsaWFuY2Uoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgdXNlciBpcyBhIEh5cGVTcXVhZCBCcmlsbGlhbmNlIG1lbWJlci4iIiIKICAgICAgICByZXR1cm4gVXNlckZsYWdzLmh5cGVzcXVhZF9icmlsbGlhbmNlLnZhbHVlCgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiBoeXBlc3F1YWRfYmFsYW5jZShzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBSZXR1cm5zIGBgVHJ1ZWBgIGlmIHRoZSB1c2VyIGlzIGEgSHlwZVNxdWFkIEJhbGFuY2UgbWVtYmVyLiIiIgogICAgICAgIHJldHVybiBVc2VyRmxhZ3MuaHlwZXNxdWFkX2JhbGFuY2UudmFsdWUKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGVhcmx5X3N1cHBvcnRlcihzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBSZXR1cm5zIGBgVHJ1ZWBgIGlmIHRoZSB1c2VyIGlzIGFuIEVhcmx5IFN1cHBvcnRlci4iIiIKICAgICAgICByZXR1cm4gVXNlckZsYWdzLmVhcmx5X3N1cHBvcnRlci52YWx1ZQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgdGVhbV91c2VyKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFJldHVybnMgYGBUcnVlYGAgaWYgdGhlIHVzZXIgaXMgYSBUZWFtIFVzZXIuIiIiCiAgICAgICAgcmV0dXJuIFVzZXJGbGFncy50ZWFtX3VzZXIudmFsdWUKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIHN5c3RlbShzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBSZXR1cm5zIGBgVHJ1ZWBgIGlmIHRoZSB1c2VyIGlzIGEgc3lzdGVtIHVzZXIgKGkuZS4gcmVwcmVzZW50cyBEaXNjb3JkIG9mZmljaWFsbHkpLiIiIgogICAgICAgIHJldHVybiBVc2VyRmxhZ3Muc3lzdGVtLnZhbHVlCgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiBidWdfaHVudGVyX2xldmVsXzIoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgdXNlciBpcyBhIEJ1ZyBIdW50ZXIgTGV2ZWwgMiIiIgogICAgICAgIHJldHVybiBVc2VyRmxhZ3MuYnVnX2h1bnRlcl9sZXZlbF8yLnZhbHVlCgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiB2ZXJpZmllZF9ib3Qoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogUmV0dXJucyBgYFRydWVgYCBpZiB0aGUgdXNlciBpcyBhIFZlcmlmaWVkIEJvdC4iIiIKICAgICAgICByZXR1cm4gVXNlckZsYWdzLnZlcmlmaWVkX2JvdC52YWx1ZQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgdmVyaWZpZWRfYm90X2RldmVsb3BlcihzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBSZXR1cm5zIGBgVHJ1ZWBgIGlmIHRoZSB1c2VyIGlzIGFuIEVhcmx5IFZlcmlmaWVkIEJvdCBEZXZlbG9wZXIuIiIiCiAgICAgICAgcmV0dXJuIFVzZXJGbGFncy52ZXJpZmllZF9ib3RfZGV2ZWxvcGVyLnZhbHVlCgogICAgQGFsaWFzX2ZsYWdfdmFsdWUKICAgIGRlZiBlYXJseV92ZXJpZmllZF9ib3RfZGV2ZWxvcGVyKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IEFuIGFsaWFzIGZvciA6YXR0cjpgdmVyaWZpZWRfYm90X2RldmVsb3BlcmAuCgogICAgICAgIC4uIHZlcnNpb25hZGRlZDo6IDEuNQogICAgICAgICIiIgogICAgICAgIHJldHVybiBVc2VyRmxhZ3MudmVyaWZpZWRfYm90X2RldmVsb3Blci52YWx1ZQoKICAgIGRlZiBhbGwoc2VsZik6CiAgICAgICAgIiIiTGlzdFs6Y2xhc3M6YFVzZXJGbGFnc2BdOiBSZXR1cm5zIGFsbCBwdWJsaWMgZmxhZ3MgdGhlIHVzZXIgaGFzLiIiIgogICAgICAgIHJldHVybiBbcHVibGljX2ZsYWcgZm9yIHB1YmxpY19mbGFnIGluIFVzZXJGbGFncyBpZiBzZWxmLl9oYXNfZmxhZyhwdWJsaWNfZmxhZy52YWx1ZSldCgoKQGZpbGxfd2l0aF9mbGFncygpCmNsYXNzIEludGVudHMoQmFzZUZsYWdzKToKICAgIHIiIiJXcmFwcyB1cCBhIERpc2NvcmQgZ2F0ZXdheSBpbnRlbnQgZmxhZy4KCiAgICBTaW1pbGFyIHRvIDpjbGFzczpgUGVybWlzc2lvbnNgXCwgdGhlIHByb3BlcnRpZXMgcHJvdmlkZWQgYXJlIHR3byB3YXkuCiAgICBZb3UgY2FuIHNldCBhbmQgcmV0cmlldmUgaW5kaXZpZHVhbCBiaXRzIHVzaW5nIHRoZSBwcm9wZXJ0aWVzIGFzIGlmIHRoZXkKICAgIHdlcmUgcmVndWxhciBib29scy4KCiAgICBUbyBjb25zdHJ1Y3QgYW4gb2JqZWN0IHlvdSBjYW4gcGFzcyBrZXl3b3JkIGFyZ3VtZW50cyBkZW5vdGluZyB0aGUgZmxhZ3MKICAgIHRvIGVuYWJsZSBvciBkaXNhYmxlLgoKICAgIFRoaXMgaXMgdXNlZCB0byBkaXNhYmxlIGNlcnRhaW4gZ2F0ZXdheSBmZWF0dXJlcyB0aGF0IGFyZSB1bm5lY2Vzc2FyeSB0bwogICAgcnVuIHlvdXIgYm90LiBUbyBtYWtlIHVzZSBvZiB0aGlzLCBpdCBpcyBwYXNzZWQgdG8gdGhlIGBgaW50ZW50c2BgIGtleXdvcmQKICAgIGFyZ3VtZW50IG9mIDpjbGFzczpgQ2xpZW50YC4KCiAgICAuLiB2ZXJzaW9uYWRkZWQ6OiAxLjUKCiAgICAuLiBjb250YWluZXI6OiBvcGVyYXRpb25zCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCA9PSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIGZsYWdzIGFyZSBlcXVhbC4KICAgICAgICAuLiBkZXNjcmliZTo6IHggIT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byBmbGFncyBhcmUgbm90IGVxdWFsLgogICAgICAgIC4uIGRlc2NyaWJlOjogaGFzaCh4KQoKICAgICAgICAgICAgICAgUmV0dXJuIHRoZSBmbGFnJ3MgaGFzaC4KICAgICAgICAuLiBkZXNjcmliZTo6IGl0ZXIoeCkKCiAgICAgICAgICAgICAgIFJldHVybnMgYW4gaXRlcmF0b3Igb2YgYGAobmFtZSwgdmFsdWUpYGAgcGFpcnMuIFRoaXMgYWxsb3dzIGl0CiAgICAgICAgICAgICAgIHRvIGJlLCBmb3IgZXhhbXBsZSwgY29uc3RydWN0ZWQgYXMgYSBkaWN0IG9yIGEgbGlzdCBvZiBwYWlycy4KCiAgICBBdHRyaWJ1dGVzCiAgICAtLS0tLS0tLS0tLQogICAgdmFsdWU6IDpjbGFzczpgaW50YAogICAgICAgIFRoZSByYXcgdmFsdWUuIFlvdSBzaG91bGQgcXVlcnkgZmxhZ3MgdmlhIHRoZSBwcm9wZXJ0aWVzCiAgICAgICAgcmF0aGVyIHRoYW4gdXNpbmcgdGhpcyByYXcgdmFsdWUuCiAgICAiIiIKCiAgICBfX3Nsb3RzX18gPSAoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi52YWx1ZSA9IHNlbGYuREVGQVVMVF9WQUxVRQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3YXJncy5pdGVtcygpOgogICAgICAgICAgICBpZiBrZXkgbm90IGluIHNlbGYuVkFMSURfRkxBR1M6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVyIGlzIG5vdCBhIHZhbGlkIGZsYWcgbmFtZS4nICUga2V5KQogICAgICAgICAgICBzZXRhdHRyKHNlbGYsIGtleSwgdmFsdWUpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgYWxsKGNscyk6CiAgICAgICAgIiIiQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSA6Y2xhc3M6YEludGVudHNgIHdpdGggZXZlcnl0aGluZyBlbmFibGVkLiIiIgogICAgICAgIGJpdHMgPSBtYXgoY2xzLlZBTElEX0ZMQUdTLnZhbHVlcygpKS5iaXRfbGVuZ3RoKCkKICAgICAgICB2YWx1ZSA9ICgxIDw8IGJpdHMpIC0gMQogICAgICAgIHNlbGYgPSBjbHMuX19uZXdfXyhjbHMpCiAgICAgICAgc2VsZi52YWx1ZSA9IHZhbHVlCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBub25lKGNscyk6CiAgICAgICAgIiIiQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSA6Y2xhc3M6YEludGVudHNgIHdpdGggZXZlcnl0aGluZyBkaXNhYmxlZC4iIiIKICAgICAgICBzZWxmID0gY2xzLl9fbmV3X18oY2xzKQogICAgICAgIHNlbGYudmFsdWUgPSBzZWxmLkRFRkFVTFRfVkFMVUUKICAgICAgICByZXR1cm4gc2VsZgoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGRlZmF1bHQoY2xzKToKICAgICAgICAiIiJBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIDpjbGFzczpgSW50ZW50c2Agd2l0aCBldmVyeXRoaW5nIGVuYWJsZWQKICAgICAgICBleGNlcHQgOmF0dHI6YHByZXNlbmNlc2AgYW5kIDphdHRyOmBtZW1iZXJzYC4KICAgICAgICAiIiIKICAgICAgICBzZWxmID0gY2xzLmFsbCgpCiAgICAgICAgc2VsZi5wcmVzZW5jZXMgPSBGYWxzZQogICAgICAgIHNlbGYubWVtYmVycyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGd1aWxkcyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIHJlbGF0ZWQgZXZlbnRzIGFyZSBlbmFibGVkLgoKICAgICAgICBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgZXZlbnRzOgoKICAgICAgICAtIDpmdW5jOmBvbl9ndWlsZF9qb2luYAogICAgICAgIC0gOmZ1bmM6YG9uX2d1aWxkX3JlbW92ZWAKICAgICAgICAtIDpmdW5jOmBvbl9ndWlsZF9hdmFpbGFibGVgCiAgICAgICAgLSA6ZnVuYzpgb25fZ3VpbGRfdW5hdmFpbGFibGVgCiAgICAgICAgLSA6ZnVuYzpgb25fZ3VpbGRfY2hhbm5lbF91cGRhdGVgCiAgICAgICAgLSA6ZnVuYzpgb25fZ3VpbGRfY2hhbm5lbF9jcmVhdGVgCiAgICAgICAgLSA6ZnVuYzpgb25fZ3VpbGRfY2hhbm5lbF9kZWxldGVgCiAgICAgICAgLSA6ZnVuYzpgb25fZ3VpbGRfY2hhbm5lbF9waW5zX3VwZGF0ZWAKCiAgICAgICAgVGhpcyBhbHNvIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhbmQgY2xhc3NlcyBpbiB0ZXJtcyBvZiBjYWNoZToKCiAgICAgICAgLSA6YXR0cjpgQ2xpZW50Lmd1aWxkc2AKICAgICAgICAtIDpjbGFzczpgR3VpbGRgIGFuZCBhbGwgaXRzIGF0dHJpYnV0ZXMuCiAgICAgICAgLSA6bWV0aDpgQ2xpZW50LmdldF9jaGFubmVsYAogICAgICAgIC0gOm1ldGg6YENsaWVudC5nZXRfYWxsX2NoYW5uZWxzYAoKICAgICAgICBJdCBpcyBoaWdobHkgYWR2aXNhYmxlIHRvIGxlYXZlIHRoaXMgaW50ZW50IGVuYWJsZWQgZm9yIHlvdXIgYm90IHRvIGZ1bmN0aW9uLgogICAgICAgICIiIgogICAgICAgIHJldHVybiAxIDw8IDAKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIG1lbWJlcnMoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogV2hldGhlciBndWlsZCBtZW1iZXIgcmVsYXRlZCBldmVudHMgYXJlIGVuYWJsZWQuCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX21lbWJlcl9qb2luYAogICAgICAgIC0gOmZ1bmM6YG9uX21lbWJlcl9yZW1vdmVgCiAgICAgICAgLSA6ZnVuYzpgb25fbWVtYmVyX3VwZGF0ZWAgKG5pY2tuYW1lLCByb2xlcykKICAgICAgICAtIDpmdW5jOmBvbl91c2VyX3VwZGF0ZWAKCiAgICAgICAgVGhpcyBhbHNvIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhbmQgY2xhc3NlcyBpbiB0ZXJtcyBvZiBjYWNoZToKCiAgICAgICAgLSA6bWV0aDpgQ2xpZW50LmdldF9hbGxfbWVtYmVyc2AKICAgICAgICAtIDptZXRoOmBHdWlsZC5jaHVua2AKICAgICAgICAtIDptZXRoOmBHdWlsZC5mZXRjaF9tZW1iZXJzYAogICAgICAgIC0gOm1ldGg6YEd1aWxkLmdldF9tZW1iZXJgCiAgICAgICAgLSA6YXR0cjpgR3VpbGQubWVtYmVyc2AKICAgICAgICAtIDphdHRyOmBNZW1iZXIucm9sZXNgCiAgICAgICAgLSA6YXR0cjpgTWVtYmVyLm5pY2tgCiAgICAgICAgLSA6YXR0cjpgTWVtYmVyLnByZW1pdW1fc2luY2VgCiAgICAgICAgLSA6YXR0cjpgVXNlci5uYW1lYAogICAgICAgIC0gOmF0dHI6YFVzZXIuYXZhdGFyYCAoOmF0dHI6YFVzZXIuYXZhdGFyX3VybGAgYW5kIDptZXRoOmBVc2VyLmF2YXRhcl91cmxfYXNgKQogICAgICAgIC0gOmF0dHI6YFVzZXIuZGlzY3JpbWluYXRvcmAKCiAgICAgICAgRm9yIG1vcmUgaW5mb3JtYXRpb24gZ28gdG8gdGhlIDpyZWY6YG1lbWJlciBpbnRlbnQgZG9jdW1lbnRhdGlvbiA8bmVlZF9tZW1iZXJzX2ludGVudD5gLgoKICAgICAgICAuLiBub3RlOjoKCiAgICAgICAgICAgIEN1cnJlbnRseSwgdGhpcyByZXF1aXJlcyBvcHRpbmcgaW4gZXhwbGljaXRseSB2aWEgdGhlIGRldmVsb3BlciBwb3J0YWwgYXMgd2VsbC4KICAgICAgICAgICAgQm90cyBpbiBvdmVyIDEwMCBndWlsZHMgd2lsbCBuZWVkIHRvIGFwcGx5IHRvIERpc2NvcmQgZm9yIHZlcmlmaWNhdGlvbi4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCAxCgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiBiYW5zKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFdoZXRoZXIgZ3VpbGQgYmFuIHJlbGF0ZWQgZXZlbnRzIGFyZSBlbmFibGVkLgoKICAgICAgICBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgZXZlbnRzOgoKICAgICAgICAtIDpmdW5jOmBvbl9tZW1iZXJfYmFuYAogICAgICAgIC0gOmZ1bmM6YG9uX21lbWJlcl91bmJhbmAKCiAgICAgICAgVGhpcyBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGFueSBhdHRyaWJ1dGVzIG9yIGNsYXNzZXMgaW4gdGhlIGxpYnJhcnkgaW4gdGVybXMgb2YgY2FjaGUuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIDEgPDwgMgoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgZW1vamlzKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFdoZXRoZXIgZ3VpbGQgZW1vamkgcmVsYXRlZCBldmVudHMgYXJlIGVuYWJsZWQuCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX2d1aWxkX2Vtb2ppc191cGRhdGVgCgogICAgICAgIFRoaXMgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgYW5kIGNsYXNzZXMgaW4gdGVybXMgb2YgY2FjaGU6CgogICAgICAgIC0gOmNsYXNzOmBFbW9qaWAKICAgICAgICAtIDptZXRoOmBDbGllbnQuZ2V0X2Vtb2ppYAogICAgICAgIC0gOm1ldGg6YENsaWVudC5lbW9qaXNgCiAgICAgICAgLSA6YXR0cjpgR3VpbGQuZW1vamlzYAogICAgICAgICIiIgogICAgICAgIHJldHVybiAxIDw8IDMKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGludGVncmF0aW9ucyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIGludGVncmF0aW9uIHJlbGF0ZWQgZXZlbnRzIGFyZSBlbmFibGVkLgoKICAgICAgICBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgZXZlbnRzOgoKICAgICAgICAtIDpmdW5jOmBvbl9ndWlsZF9pbnRlZ3JhdGlvbnNfdXBkYXRlYAoKICAgICAgICBUaGlzIGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gYW55IGF0dHJpYnV0ZXMgb3IgY2xhc3NlcyBpbiB0aGUgbGlicmFyeSBpbiB0ZXJtcyBvZiBjYWNoZS4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCA0CgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiB3ZWJob29rcyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIHdlYmhvb2sgcmVsYXRlZCBldmVudHMgYXJlIGVuYWJsZWQuCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX3dlYmhvb2tzX3VwZGF0ZWAKCiAgICAgICAgVGhpcyBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGFueSBhdHRyaWJ1dGVzIG9yIGNsYXNzZXMgaW4gdGhlIGxpYnJhcnkgaW4gdGVybXMgb2YgY2FjaGUuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIDEgPDwgNQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgaW52aXRlcyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIGludml0ZSByZWxhdGVkIGV2ZW50cyBhcmUgZW5hYmxlZC4KCiAgICAgICAgVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGV2ZW50czoKCiAgICAgICAgLSA6ZnVuYzpgb25faW52aXRlX2NyZWF0ZWAKICAgICAgICAtIDpmdW5jOmBvbl9pbnZpdGVfZGVsZXRlYAoKICAgICAgICBUaGlzIGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gYW55IGF0dHJpYnV0ZXMgb3IgY2xhc3NlcyBpbiB0aGUgbGlicmFyeSBpbiB0ZXJtcyBvZiBjYWNoZS4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCA2CgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiB2b2ljZV9zdGF0ZXMoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogV2hldGhlciBndWlsZCB2b2ljZSBzdGF0ZSByZWxhdGVkIGV2ZW50cyBhcmUgZW5hYmxlZC4KCiAgICAgICAgVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGV2ZW50czoKCiAgICAgICAgLSA6ZnVuYzpgb25fdm9pY2Vfc3RhdGVfdXBkYXRlYAoKICAgICAgICBUaGlzIGFsc28gY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzIGFuZCBjbGFzc2VzIGluIHRlcm1zIG9mIGNhY2hlOgoKICAgICAgICAtIDphdHRyOmBWb2ljZUNoYW5uZWwubWVtYmVyc2AKICAgICAgICAtIDphdHRyOmBWb2ljZUNoYW5uZWwudm9pY2Vfc3RhdGVzYAogICAgICAgIC0gOmF0dHI6YE1lbWJlci52b2ljZWAKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCA3CgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiBwcmVzZW5jZXMoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogV2hldGhlciBndWlsZCBwcmVzZW5jZSByZWxhdGVkIGV2ZW50cyBhcmUgZW5hYmxlZC4KCiAgICAgICAgVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGV2ZW50czoKCiAgICAgICAgLSA6ZnVuYzpgb25fbWVtYmVyX3VwZGF0ZWAgKGFjdGl2aXRpZXMsIHN0YXR1cykKCiAgICAgICAgVGhpcyBhbHNvIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhbmQgY2xhc3NlcyBpbiB0ZXJtcyBvZiBjYWNoZToKCiAgICAgICAgLSA6YXR0cjpgTWVtYmVyLmFjdGl2aXRpZXNgCiAgICAgICAgLSA6YXR0cjpgTWVtYmVyLnN0YXR1c2AKICAgICAgICAtIDphdHRyOmBNZW1iZXIucmF3X3N0YXR1c2AKCiAgICAgICAgRm9yIG1vcmUgaW5mb3JtYXRpb24gZ28gdG8gdGhlIDpyZWY6YHByZXNlbmNlIGludGVudCBkb2N1bWVudGF0aW9uIDxuZWVkX3ByZXNlbmNlX2ludGVudD5gLgoKICAgICAgICAuLiBub3RlOjoKCiAgICAgICAgICAgIEN1cnJlbnRseSwgdGhpcyByZXF1aXJlcyBvcHRpbmcgaW4gZXhwbGljaXRseSB2aWEgdGhlIGRldmVsb3BlciBwb3J0YWwgYXMgd2VsbC4KICAgICAgICAgICAgQm90cyBpbiBvdmVyIDEwMCBndWlsZHMgd2lsbCBuZWVkIHRvIGFwcGx5IHRvIERpc2NvcmQgZm9yIHZlcmlmaWNhdGlvbi4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCA4CgogICAgQGFsaWFzX2ZsYWdfdmFsdWUKICAgIGRlZiBtZXNzYWdlcyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIGFuZCBkaXJlY3QgbWVzc2FnZSByZWxhdGVkIGV2ZW50cyBhcmUgZW5hYmxlZC4KCiAgICAgICAgVGhpcyBpcyBhIHNob3J0Y3V0IHRvIHNldCBvciBnZXQgYm90aCA6YXR0cjpgZ3VpbGRfbWVzc2FnZXNgIGFuZCA6YXR0cjpgZG1fbWVzc2FnZXNgLgoKICAgICAgICBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgZXZlbnRzOgoKICAgICAgICAtIDpmdW5jOmBvbl9tZXNzYWdlYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9tZXNzYWdlX2VkaXRgIChib3RoIGd1aWxkcyBhbmQgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX21lc3NhZ2VfZGVsZXRlYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfbWVzc2FnZV9kZWxldGVgIChib3RoIGd1aWxkcyBhbmQgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3Jhd19tZXNzYWdlX2VkaXRgIChib3RoIGd1aWxkcyBhbmQgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3ByaXZhdGVfY2hhbm5lbF9jcmVhdGVgCgogICAgICAgIFRoaXMgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgYW5kIGNsYXNzZXMgaW4gdGVybXMgb2YgY2FjaGU6CgogICAgICAgIC0gOmNsYXNzOmBNZXNzYWdlYAogICAgICAgIC0gOmF0dHI6YENsaWVudC5jYWNoZWRfbWVzc2FnZXNgCgogICAgICAgIE5vdGUgdGhhdCBkdWUgdG8gYW4gaW1wbGljaXQgcmVsYXRpb25zaGlwIHRoaXMgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGV2ZW50czoKCiAgICAgICAgLSA6ZnVuYzpgb25fcmVhY3Rpb25fYWRkYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yZWFjdGlvbl9yZW1vdmVgIChib3RoIGd1aWxkcyBhbmQgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3JlYWN0aW9uX2NsZWFyYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gKDEgPDwgOSkgfCAoMSA8PCAxMikKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGd1aWxkX21lc3NhZ2VzKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFdoZXRoZXIgZ3VpbGQgbWVzc2FnZSByZWxhdGVkIGV2ZW50cyBhcmUgZW5hYmxlZC4KCiAgICAgICAgU2VlIGFsc28gOmF0dHI6YGRtX21lc3NhZ2VzYCBmb3IgRE1zIG9yIDphdHRyOmBtZXNzYWdlc2AgZm9yIGJvdGguCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX21lc3NhZ2VgIChvbmx5IGZvciBndWlsZHMpCiAgICAgICAgLSA6ZnVuYzpgb25fbWVzc2FnZV9lZGl0YCAob25seSBmb3IgZ3VpbGRzKQogICAgICAgIC0gOmZ1bmM6YG9uX21lc3NhZ2VfZGVsZXRlYCAob25seSBmb3IgZ3VpbGRzKQogICAgICAgIC0gOmZ1bmM6YG9uX3Jhd19tZXNzYWdlX2RlbGV0ZWAgKG9ubHkgZm9yIGd1aWxkcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfbWVzc2FnZV9lZGl0YCAob25seSBmb3IgZ3VpbGRzKQoKICAgICAgICBUaGlzIGFsc28gY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzIGFuZCBjbGFzc2VzIGluIHRlcm1zIG9mIGNhY2hlOgoKICAgICAgICAtIDpjbGFzczpgTWVzc2FnZWAKICAgICAgICAtIDphdHRyOmBDbGllbnQuY2FjaGVkX21lc3NhZ2VzYCAob25seSBmb3IgZ3VpbGRzKQoKICAgICAgICBOb3RlIHRoYXQgZHVlIHRvIGFuIGltcGxpY2l0IHJlbGF0aW9uc2hpcCB0aGlzIGFsc28gY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX3JlYWN0aW9uX2FkZGAgKG9ubHkgZm9yIGd1aWxkcykKICAgICAgICAtIDpmdW5jOmBvbl9yZWFjdGlvbl9yZW1vdmVgIChvbmx5IGZvciBndWlsZHMpCiAgICAgICAgLSA6ZnVuYzpgb25fcmVhY3Rpb25fY2xlYXJgIChvbmx5IGZvciBndWlsZHMpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIDEgPDwgOQoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgZG1fbWVzc2FnZXMoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogV2hldGhlciBkaXJlY3QgbWVzc2FnZSByZWxhdGVkIGV2ZW50cyBhcmUgZW5hYmxlZC4KCiAgICAgICAgU2VlIGFsc28gOmF0dHI6YGd1aWxkX21lc3NhZ2VzYCBmb3IgZ3VpbGRzIG9yIDphdHRyOmBtZXNzYWdlc2AgZm9yIGJvdGguCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX21lc3NhZ2VgIChvbmx5IGZvciBETXMpCiAgICAgICAgLSA6ZnVuYzpgb25fbWVzc2FnZV9lZGl0YCAob25seSBmb3IgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX21lc3NhZ2VfZGVsZXRlYCAob25seSBmb3IgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3Jhd19tZXNzYWdlX2RlbGV0ZWAgKG9ubHkgZm9yIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfbWVzc2FnZV9lZGl0YCAob25seSBmb3IgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3ByaXZhdGVfY2hhbm5lbF9jcmVhdGVgCgogICAgICAgIFRoaXMgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgYW5kIGNsYXNzZXMgaW4gdGVybXMgb2YgY2FjaGU6CgogICAgICAgIC0gOmNsYXNzOmBNZXNzYWdlYAogICAgICAgIC0gOmF0dHI6YENsaWVudC5jYWNoZWRfbWVzc2FnZXNgIChvbmx5IGZvciBETXMpCgogICAgICAgIE5vdGUgdGhhdCBkdWUgdG8gYW4gaW1wbGljaXQgcmVsYXRpb25zaGlwIHRoaXMgYWxzbyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGV2ZW50czoKCiAgICAgICAgLSA6ZnVuYzpgb25fcmVhY3Rpb25fYWRkYCAob25seSBmb3IgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3JlYWN0aW9uX3JlbW92ZWAgKG9ubHkgZm9yIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yZWFjdGlvbl9jbGVhcmAgKG9ubHkgZm9yIERNcykKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCAxMgoKICAgIEBhbGlhc19mbGFnX3ZhbHVlCiAgICBkZWYgcmVhY3Rpb25zKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFdoZXRoZXIgZ3VpbGQgYW5kIGRpcmVjdCBtZXNzYWdlIHJlYWN0aW9uIHJlbGF0ZWQgZXZlbnRzIGFyZSBlbmFibGVkLgoKICAgICAgICBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gc2V0IG9yIGdldCBib3RoIDphdHRyOmBndWlsZF9yZWFjdGlvbnNgIGFuZCA6YXR0cjpgZG1fcmVhY3Rpb25zYC4KCiAgICAgICAgVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgZm9sbG93aW5nIGV2ZW50czoKCiAgICAgICAgLSA6ZnVuYzpgb25fcmVhY3Rpb25fYWRkYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yZWFjdGlvbl9yZW1vdmVgIChib3RoIGd1aWxkcyBhbmQgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3JlYWN0aW9uX2NsZWFyYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfcmVhY3Rpb25fYWRkYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfcmVhY3Rpb25fcmVtb3ZlYCAoYm90aCBndWlsZHMgYW5kIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfcmVhY3Rpb25fY2xlYXJgIChib3RoIGd1aWxkcyBhbmQgRE1zKQoKICAgICAgICBUaGlzIGFsc28gY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzIGFuZCBjbGFzc2VzIGluIHRlcm1zIG9mIGNhY2hlOgoKICAgICAgICAtIDphdHRyOmBNZXNzYWdlLnJlYWN0aW9uc2AgKGJvdGggZ3VpbGQgYW5kIERNIG1lc3NhZ2VzKQogICAgICAgICIiIgogICAgICAgIHJldHVybiAoMSA8PCAxMCkgfCAoMSA8PCAxMykKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGd1aWxkX3JlYWN0aW9ucyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIG1lc3NhZ2UgcmVhY3Rpb24gcmVsYXRlZCBldmVudHMgYXJlIGVuYWJsZWQuCgogICAgICAgIFNlZSBhbHNvIDphdHRyOmBkbV9yZWFjdGlvbnNgIGZvciBETXMgb3IgOmF0dHI6YHJlYWN0aW9uc2AgZm9yIGJvdGguCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX3JlYWN0aW9uX2FkZGAgKG9ubHkgZm9yIGd1aWxkcykKICAgICAgICAtIDpmdW5jOmBvbl9yZWFjdGlvbl9yZW1vdmVgIChvbmx5IGZvciBndWlsZHMpCiAgICAgICAgLSA6ZnVuYzpgb25fcmVhY3Rpb25fY2xlYXJgIChvbmx5IGZvciBndWlsZHMpCiAgICAgICAgLSA6ZnVuYzpgb25fcmF3X3JlYWN0aW9uX2FkZGAgKG9ubHkgZm9yIGd1aWxkcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfcmVhY3Rpb25fcmVtb3ZlYCAob25seSBmb3IgZ3VpbGRzKQogICAgICAgIC0gOmZ1bmM6YG9uX3Jhd19yZWFjdGlvbl9jbGVhcmAgKG9ubHkgZm9yIGd1aWxkcykKCiAgICAgICAgVGhpcyBhbHNvIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhbmQgY2xhc3NlcyBpbiB0ZXJtcyBvZiBjYWNoZToKCiAgICAgICAgLSA6YXR0cjpgTWVzc2FnZS5yZWFjdGlvbnNgIChvbmx5IGZvciBndWlsZCBtZXNzYWdlcykKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCAxMAoKICAgIEBmbGFnX3ZhbHVlCiAgICBkZWYgZG1fcmVhY3Rpb25zKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFdoZXRoZXIgZGlyZWN0IG1lc3NhZ2UgcmVhY3Rpb24gcmVsYXRlZCBldmVudHMgYXJlIGVuYWJsZWQuCgogICAgICAgIFNlZSBhbHNvIDphdHRyOmBndWlsZF9yZWFjdGlvbnNgIGZvciBndWlsZHMgb3IgOmF0dHI6YHJlYWN0aW9uc2AgZm9yIGJvdGguCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX3JlYWN0aW9uX2FkZGAgKG9ubHkgZm9yIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yZWFjdGlvbl9yZW1vdmVgIChvbmx5IGZvciBETXMpCiAgICAgICAgLSA6ZnVuYzpgb25fcmVhY3Rpb25fY2xlYXJgIChvbmx5IGZvciBETXMpCiAgICAgICAgLSA6ZnVuYzpgb25fcmF3X3JlYWN0aW9uX2FkZGAgKG9ubHkgZm9yIERNcykKICAgICAgICAtIDpmdW5jOmBvbl9yYXdfcmVhY3Rpb25fcmVtb3ZlYCAob25seSBmb3IgRE1zKQogICAgICAgIC0gOmZ1bmM6YG9uX3Jhd19yZWFjdGlvbl9jbGVhcmAgKG9ubHkgZm9yIERNcykKCiAgICAgICAgVGhpcyBhbHNvIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhbmQgY2xhc3NlcyBpbiB0ZXJtcyBvZiBjYWNoZToKCiAgICAgICAgLSA6YXR0cjpgTWVzc2FnZS5yZWFjdGlvbnNgIChvbmx5IGZvciBETSBtZXNzYWdlcykKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gMSA8PCAxMwoKICAgIEBhbGlhc19mbGFnX3ZhbHVlCiAgICBkZWYgdHlwaW5nKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgYm9vbGA6IFdoZXRoZXIgZ3VpbGQgYW5kIGRpcmVjdCBtZXNzYWdlIHR5cGluZyByZWxhdGVkIGV2ZW50cyBhcmUgZW5hYmxlZC4KCiAgICAgICAgVGhpcyBpcyBhIHNob3J0Y3V0IHRvIHNldCBvciBnZXQgYm90aCA6YXR0cjpgZ3VpbGRfdHlwaW5nYCBhbmQgOmF0dHI6YGRtX3R5cGluZ2AuCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX3R5cGluZ2AgKGJvdGggZ3VpbGRzIGFuZCBETXMpCgogICAgICAgIFRoaXMgZG9lcyBub3QgY29ycmVzcG9uZCB0byBhbnkgYXR0cmlidXRlcyBvciBjbGFzc2VzIGluIHRoZSBsaWJyYXJ5IGluIHRlcm1zIG9mIGNhY2hlLgogICAgICAgICIiIgogICAgICAgIHJldHVybiAoMSA8PCAxMSkgfCAoMSA8PCAxNCkKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGd1aWxkX3R5cGluZyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIGFuZCBkaXJlY3QgbWVzc2FnZSB0eXBpbmcgcmVsYXRlZCBldmVudHMgYXJlIGVuYWJsZWQuCgogICAgICAgIFNlZSBhbHNvIDphdHRyOmBkbV90eXBpbmdgIGZvciBETXMgb3IgOmF0dHI6YHR5cGluZ2AgZm9yIGJvdGguCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX3R5cGluZ2AgKG9ubHkgZm9yIGd1aWxkcykKCiAgICAgICAgVGhpcyBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGFueSBhdHRyaWJ1dGVzIG9yIGNsYXNzZXMgaW4gdGhlIGxpYnJhcnkgaW4gdGVybXMgb2YgY2FjaGUuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIDEgPDwgMTEKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIGRtX3R5cGluZyhzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIGd1aWxkIGFuZCBkaXJlY3QgbWVzc2FnZSB0eXBpbmcgcmVsYXRlZCBldmVudHMgYXJlIGVuYWJsZWQuCgogICAgICAgIFNlZSBhbHNvIDphdHRyOmBndWlsZF90eXBpbmdgIGZvciBndWlsZHMgb3IgOmF0dHI6YHR5cGluZ2AgZm9yIGJvdGguCgogICAgICAgIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGZvbGxvd2luZyBldmVudHM6CgogICAgICAgIC0gOmZ1bmM6YG9uX3R5cGluZ2AgKG9ubHkgZm9yIERNcykKCiAgICAgICAgVGhpcyBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGFueSBhdHRyaWJ1dGVzIG9yIGNsYXNzZXMgaW4gdGhlIGxpYnJhcnkgaW4gdGVybXMgb2YgY2FjaGUuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIDEgPDwgMTQKCkBmaWxsX3dpdGhfZmxhZ3MoKQpjbGFzcyBNZW1iZXJDYWNoZUZsYWdzKEJhc2VGbGFncyk6CiAgICAiIiJDb250cm9scyB0aGUgbGlicmFyeSdzIGNhY2hlIHBvbGljeSB3aGVuIGl0IGNvbWVzIHRvIG1lbWJlcnMuCgogICAgVGhpcyBhbGxvd3MgZm9yIGZpbmVyIGdyYWluZWQgY29udHJvbCBvdmVyIHdoYXQgbWVtYmVycyBhcmUgY2FjaGVkLgogICAgTm90ZSB0aGF0IHRoZSBib3QncyBvd24gbWVtYmVyIGlzIGFsd2F5cyBjYWNoZWQuIFRoaXMgY2xhc3MgaXMgcGFzc2VkCiAgICB0byB0aGUgYGBtZW1iZXJfY2FjaGVfZmxhZ3NgYCBwYXJhbWV0ZXIgaW4gOmNsYXNzOmBDbGllbnRgLgoKICAgIER1ZSB0byBhIHF1aXJrIGluIGhvdyBEaXNjb3JkIHdvcmtzLCBpbiBvcmRlciB0byBlbnN1cmUgcHJvcGVyIGNsZWFudXAKICAgIG9mIGNhY2hlIHJlc291cmNlcyBpdCBpcyByZWNvbW1lbmRlZCB0byBoYXZlIDphdHRyOmBJbnRlbnRzLm1lbWJlcnNgCiAgICBlbmFibGVkLiBPdGhlcndpc2UgdGhlIGxpYnJhcnkgY2Fubm90IGtub3cgd2hlbiBhIG1lbWJlciBsZWF2ZXMgYSBndWlsZCBhbmQKICAgIGlzIHRodXMgdW5hYmxlIHRvIGNsZWFudXAgYWZ0ZXIgaXRzZWxmLgoKICAgIFRvIGNvbnN0cnVjdCBhbiBvYmplY3QgeW91IGNhbiBwYXNzIGtleXdvcmQgYXJndW1lbnRzIGRlbm90aW5nIHRoZSBmbGFncwogICAgdG8gZW5hYmxlIG9yIGRpc2FibGUuCgogICAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgYWxsIGZsYWdzIGVuYWJsZWQuCgogICAgLi4gdmVyc2lvbmFkZGVkOjogMS41CgogICAgLi4gY29udGFpbmVyOjogb3BlcmF0aW9ucwoKICAgICAgICAuLiBkZXNjcmliZTo6IHggPT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byBmbGFncyBhcmUgZXF1YWwuCiAgICAgICAgLi4gZGVzY3JpYmU6OiB4ICE9IHkKCiAgICAgICAgICAgIENoZWNrcyBpZiB0d28gZmxhZ3MgYXJlIG5vdCBlcXVhbC4KICAgICAgICAuLiBkZXNjcmliZTo6IGhhc2goeCkKCiAgICAgICAgICAgICAgIFJldHVybiB0aGUgZmxhZydzIGhhc2guCiAgICAgICAgLi4gZGVzY3JpYmU6OiBpdGVyKHgpCgogICAgICAgICAgICAgICBSZXR1cm5zIGFuIGl0ZXJhdG9yIG9mIGBgKG5hbWUsIHZhbHVlKWBgIHBhaXJzLiBUaGlzIGFsbG93cyBpdAogICAgICAgICAgICAgICB0byBiZSwgZm9yIGV4YW1wbGUsIGNvbnN0cnVjdGVkIGFzIGEgZGljdCBvciBhIGxpc3Qgb2YgcGFpcnMuCgogICAgQXR0cmlidXRlcwogICAgLS0tLS0tLS0tLS0KICAgIHZhbHVlOiA6Y2xhc3M6YGludGAKICAgICAgICBUaGUgcmF3IHZhbHVlLiBZb3Ugc2hvdWxkIHF1ZXJ5IGZsYWdzIHZpYSB0aGUgcHJvcGVydGllcwogICAgICAgIHJhdGhlciB0aGFuIHVzaW5nIHRoaXMgcmF3IHZhbHVlLgogICAgIiIiCgogICAgX19zbG90c19fID0gKCkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgKiprd2FyZ3MpOgogICAgICAgIGJpdHMgPSBtYXgoc2VsZi5WQUxJRF9GTEFHUy52YWx1ZXMoKSkuYml0X2xlbmd0aCgpCiAgICAgICAgc2VsZi52YWx1ZSA9ICgxIDw8IGJpdHMpIC0gMQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3YXJncy5pdGVtcygpOgogICAgICAgICAgICBpZiBrZXkgbm90IGluIHNlbGYuVkFMSURfRkxBR1M6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJyVyIGlzIG5vdCBhIHZhbGlkIGZsYWcgbmFtZS4nICUga2V5KQogICAgICAgICAgICBzZXRhdHRyKHNlbGYsIGtleSwgdmFsdWUpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgYWxsKGNscyk6CiAgICAgICAgIiIiQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSA6Y2xhc3M6YE1lbWJlckNhY2hlRmxhZ3NgIHdpdGggZXZlcnl0aGluZyBlbmFibGVkLiIiIgogICAgICAgIGJpdHMgPSBtYXgoY2xzLlZBTElEX0ZMQUdTLnZhbHVlcygpKS5iaXRfbGVuZ3RoKCkKICAgICAgICB2YWx1ZSA9ICgxIDw8IGJpdHMpIC0gMQogICAgICAgIHNlbGYgPSBjbHMuX19uZXdfXyhjbHMpCiAgICAgICAgc2VsZi52YWx1ZSA9IHZhbHVlCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBub25lKGNscyk6CiAgICAgICAgIiIiQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSA6Y2xhc3M6YE1lbWJlckNhY2hlRmxhZ3NgIHdpdGggZXZlcnl0aGluZyBkaXNhYmxlZC4iIiIKICAgICAgICBzZWxmID0gY2xzLl9fbmV3X18oY2xzKQogICAgICAgIHNlbGYudmFsdWUgPSBzZWxmLkRFRkFVTFRfVkFMVUUKICAgICAgICByZXR1cm4gc2VsZgoKICAgIEBwcm9wZXJ0eQogICAgZGVmIF9lbXB0eShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi52YWx1ZSA9PSBzZWxmLkRFRkFVTFRfVkFMVUUKCiAgICBAZmxhZ192YWx1ZQogICAgZGVmIG9ubGluZShzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIHRvIGNhY2hlIG1lbWJlcnMgd2l0aCBhIHN0YXR1cy4KCiAgICAgICAgRm9yIGV4YW1wbGUsIG1lbWJlcnMgdGhhdCBhcmUgcGFydCBvZiB0aGUgaW5pdGlhbCBgYEdVSUxEX0NSRUFURWBgCiAgICAgICAgb3IgYmVjb21lIG9ubGluZSBhdCBhIGxhdGVyIHBvaW50LiBUaGlzIHJlcXVpcmVzIDphdHRyOmBJbnRlbnRzLnByZXNlbmNlc2AuCgogICAgICAgIE1lbWJlcnMgdGhhdCBnbyBvZmZsaW5lIGFyZSBubyBsb25nZXIgY2FjaGVkLgogICAgICAgICIiIgogICAgICAgIHJldHVybiAxCgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiB2b2ljZShzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YGJvb2xgOiBXaGV0aGVyIHRvIGNhY2hlIG1lbWJlcnMgdGhhdCBhcmUgaW4gdm9pY2UuCgogICAgICAgIFRoaXMgcmVxdWlyZXMgOmF0dHI6YEludGVudHMudm9pY2Vfc3RhdGVzYC4KCiAgICAgICAgTWVtYmVycyB0aGF0IGxlYXZlIHZvaWNlIGFyZSBubyBsb25nZXIgY2FjaGVkLgogICAgICAgICIiIgogICAgICAgIHJldHVybiAyCgogICAgQGZsYWdfdmFsdWUKICAgIGRlZiBqb2luZWQoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBib29sYDogV2hldGhlciB0byBjYWNoZSBtZW1iZXJzIHRoYXQgam9pbmVkIHRoZSBndWlsZAogICAgICAgIG9yIGFyZSBjaHVua2VkIGFzIHBhcnQgb2YgdGhlIGluaXRpYWwgbG9nIGluIGZsb3cuCgogICAgICAgIFRoaXMgcmVxdWlyZXMgOmF0dHI6YEludGVudHMubWVtYmVyc2AuCgogICAgICAgIE1lbWJlcnMgdGhhdCBsZWF2ZSB0aGUgZ3VpbGQgYXJlIG5vIGxvbmdlciBjYWNoZWQuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIDQKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX2ludGVudHMoY2xzLCBpbnRlbnRzKToKICAgICAgICAiIiJBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIDpjbGFzczpgTWVtYmVyQ2FjaGVGbGFnc2AgYmFzZWQgb24KICAgICAgICB0aGUgY3VycmVudGx5IHNlbGVjdGVkIDpjbGFzczpgSW50ZW50c2AuCgogICAgICAgIFBhcmFtZXRlcnMKICAgICAgICAtLS0tLS0tLS0tLS0KICAgICAgICBpbnRlbnRzOiA6Y2xhc3M6YEludGVudHNgCiAgICAgICAgICAgIFRoZSBpbnRlbnRzIHRvIHNlbGVjdCBmcm9tLgoKICAgICAgICBSZXR1cm5zCiAgICAgICAgLS0tLS0tLS0tCiAgICAgICAgOmNsYXNzOmBNZW1iZXJDYWNoZUZsYWdzYAogICAgICAgICAgICBUaGUgcmVzdWx0aW5nIG1lbWJlciBjYWNoZSBmbGFncy4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZiA9IGNscy5ub25lKCkKICAgICAgICBpZiBpbnRlbnRzLm1lbWJlcnM6CiAgICAgICAgICAgIHNlbGYuam9pbmVkID0gVHJ1ZQogICAgICAgIGlmIGludGVudHMucHJlc2VuY2VzOgogICAgICAgICAgICBzZWxmLm9ubGluZSA9IFRydWUKICAgICAgICBpZiBpbnRlbnRzLnZvaWNlX3N0YXRlczoKICAgICAgICAgICAgc2VsZi52b2ljZSA9IFRydWUKCiAgICAgICAgaWYgbm90IHNlbGYuam9pbmVkIGFuZCBzZWxmLm9ubGluZSBhbmQgc2VsZi52b2ljZToKICAgICAgICAgICAgc2VsZi52b2ljZSA9IEZhbHNlCgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF92ZXJpZnlfaW50ZW50cyhzZWxmLCBpbnRlbnRzKToKICAgICAgICBpZiBzZWxmLm9ubGluZSBhbmQgbm90IGludGVudHMucHJlc2VuY2VzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdNZW1iZXJDYWNoZUZsYWdzLm9ubGluZSByZXF1aXJlcyBJbnRlbnRzLnByZXNlbmNlcyBlbmFibGVkJykKCiAgICAgICAgaWYgc2VsZi52b2ljZSBhbmQgbm90IGludGVudHMudm9pY2Vfc3RhdGVzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdNZW1iZXJDYWNoZUZsYWdzLnZvaWNlIHJlcXVpcmVzIEludGVudHMudm9pY2Vfc3RhdGVzJykKCiAgICAgICAgaWYgc2VsZi5qb2luZWQgYW5kIG5vdCBpbnRlbnRzLm1lbWJlcnM6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ01lbWJlckNhY2hlRmxhZ3Muam9pbmVkIHJlcXVpcmVzIEludGVudHMubWVtYmVycycpCgogICAgICAgIGlmIG5vdCBzZWxmLmpvaW5lZCBhbmQgc2VsZi52b2ljZSBhbmQgc2VsZi5vbmxpbmU6CiAgICAgICAgICAgIG1zZyA9ICdTZXR0aW5nIGJvdGggTWVtYmVyQ2FjaGVGbGFncy52b2ljZSBhbmQgTWVtYmVyQ2FjaGVGbGFncy5vbmxpbmUgcmVxdWlyZXMgTWVtYmVyQ2FjaGVGbGFncy5qb2luZWQgJyBcCiAgICAgICAgICAgICAgICAgICd0byBwcm9wZXJseSBldmljdCBtZW1iZXJzIGZyb20gdGhlIGNhY2hlLicKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihtc2cpCgogICAgQHByb3BlcnR5CiAgICBkZWYgX3ZvaWNlX29ubHkoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYudmFsdWUgPT0gMgoKICAgIEBwcm9wZXJ0eQogICAgZGVmIF9vbmxpbmVfb25seShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi52YWx1ZSA9PSAxCg==
