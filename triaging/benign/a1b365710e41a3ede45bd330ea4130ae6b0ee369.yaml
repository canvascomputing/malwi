statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/dummyserver/testcase.py
  contents:
  - name: IPv6HTTPDummyProxyTestCase
    score: 0.0
    code: |-
      def setUpClass(cls):
              if not socket.has_ipv6:
                  raise SkipTest('IPv6 not available')
              else:
                  super(IPv6HTTPDummyServerTestCase, cls).setUpClass()
    tokens: resume load_name __name__ store_name __module__ load_const STRING_LEN_S_ENT_HIGH store_name __qualname__ load_const localhost store_name http_host load_const STRING_IP store_name http_host_alt load_const localhost store_name https_host load_const STRING_IP store_name https_host_alt load_name DEFAULT_CERTS store_name https_certs load_const STRING_IP store_name proxy_host load_const STRING_IP store_name proxy_host_alt return_const None
    hash: 7d49d20664519ddacef0b44a762c974915e5de2aaaf6a5107b3606baa2800c2b
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/dummyserver/testcase.py: 
