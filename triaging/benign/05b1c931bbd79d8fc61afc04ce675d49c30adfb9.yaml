statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3/s3handler.py
  contents:
  - name: BaseTransferRequestSubmitter._submit_dryrun
    score: 0.0
    code: |-
      def _submit_dryrun(self, fileinfo):
              transfer_type = fileinfo.operation_name
              if self._cli_params.get('is_move', False):
                  transfer_type = 'move'
              src, dest = self._format_src_dest(fileinfo)
              self._result_queue.put(DryRunResult(
                  transfer_type=transfer_type, src=src, dest=dest))
    tokens: resume load_fast fileinfo load_attr operation_name store_fast transfer_type load_fast self load_attr _cli_params load_attr get load_const is_move load_const INTEGER call pop_jump_if_false TO_NUMBER load_const move store_fast transfer_type load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast fileinfo call unpack_sequence store_fast src store_fast dest load_fast self load_attr _result_queue load_attr put load_global DryRunResult load_fast transfer_type load_fast src load_fast dest kw_names dest src transfer_type call call pop_top return_const None
    hash: d0ac0dd128abe68dfc2936eda810fc3ee857856bbfd451f396b2c1b5881dd6ea
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/s3/s3handler.py
  : 
