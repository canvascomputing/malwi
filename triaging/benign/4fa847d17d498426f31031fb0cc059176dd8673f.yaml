statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/__init__.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      import warnings
      import sys
      import errno
      import functools
      import logging
      import socket
      import platform

      from nose.plugins.skip import SkipTest

      from urllib3.exceptions import HTTPWarning
      from urllib3.packages import six
      from urllib3.util import ssl_

      # We need a host that will not immediately close the connection with a TCP
      # Reset. SO suggests this hostname
      TARPIT_HOST = '10.255.255.1'

      # (Arguments for socket, is it IPv6 address?)
      VALID_SOURCE_ADDRESSES = [(('::1', 0), True), (('127.0.0.1', 0), False)]
      # RFC 5737: 192.0.2.0/24 is for testing only.
      # RFC 3849: 2001:db8::/32 is for documentation only.
      INVALID_SOURCE_ADDRESSES = [('192.0.2.255', 0), ('2001:db8::1', 0)]


      def clear_warnings(cls=HTTPWarning):
          new_filters = []
          for f in warnings.filters:
              if issubclass(f[2], cls):
                  continue
              new_filters.append(f)
          warnings.filters[:] = new_filters
    tokens: TARGETED_FILE resume load_const INTEGER load_const import_name warnings store_name warnings load_const INTEGER load_const import_name sys store_name sys load_const INTEGER load_const import_name errno store_name errno load_const INTEGER load_const import_name functools store_name functools load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name socket store_name socket load_const INTEGER load_const import_name platform store_name platform load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from SkipTest store_name SkipTest pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from HTTPWarning store_name HTTPWarning pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from six store_name six pop_top load_const INTEGER load_const import_name urllib3.util import_from ssl_ store_name ssl_ pop_top load_const STRING_IP store_name TARPIT_HOST load_const load_const build_list store_name STRING_LEN_S_ENT_HIGH load_const load_const build_list store_name STRING_LEN_S_ENT_HIGH load_name HTTPWarning build_tuple load_const OBJECT make_function defaults store_name clear_warnings load_const OBJECT make_function store_name setUp load_const OBJECT make_function store_name onlyPy26OrOlder load_const OBJECT make_function store_name onlyPy27OrNewer load_const OBJECT make_function store_name STRING_BASE64_LEN_S_ENT_HIGH load_const OBJECT make_function store_name onlyPy2 load_const OBJECT make_function store_name onlyPy3 load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const store_global STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const _ListHandler load_name logging load_attr Handler call store_name _ListHandler push_null load_build_class load_const OBJECT make_function load_const LogRecorder load_name object call store_name LogRecorder return_const None
    hash: f4ecfdc712bb33b1c5c3e5e8116c66d00cd98da5ffb266241e81ecfc6abe399d
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/__init__.py: aW1wb3J0IHdhcm5pbmdzCmltcG9ydCBzeXMKaW1wb3J0IGVycm5vCmltcG9ydCBmdW5jdG9vbHMKaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHNvY2tldAppbXBvcnQgcGxhdGZvcm0KCmZyb20gbm9zZS5wbHVnaW5zLnNraXAgaW1wb3J0IFNraXBUZXN0Cgpmcm9tIHVybGxpYjMuZXhjZXB0aW9ucyBpbXBvcnQgSFRUUFdhcm5pbmcKZnJvbSB1cmxsaWIzLnBhY2thZ2VzIGltcG9ydCBzaXgKZnJvbSB1cmxsaWIzLnV0aWwgaW1wb3J0IHNzbF8KCiMgV2UgbmVlZCBhIGhvc3QgdGhhdCB3aWxsIG5vdCBpbW1lZGlhdGVseSBjbG9zZSB0aGUgY29ubmVjdGlvbiB3aXRoIGEgVENQCiMgUmVzZXQuIFNPIHN1Z2dlc3RzIHRoaXMgaG9zdG5hbWUKVEFSUElUX0hPU1QgPSAnMTAuMjU1LjI1NS4xJwoKIyAoQXJndW1lbnRzIGZvciBzb2NrZXQsIGlzIGl0IElQdjYgYWRkcmVzcz8pClZBTElEX1NPVVJDRV9BRERSRVNTRVMgPSBbKCgnOjoxJywgMCksIFRydWUpLCAoKCcxMjcuMC4wLjEnLCAwKSwgRmFsc2UpXQojIFJGQyA1NzM3OiAxOTIuMC4yLjAvMjQgaXMgZm9yIHRlc3Rpbmcgb25seS4KIyBSRkMgMzg0OTogMjAwMTpkYjg6Oi8zMiBpcyBmb3IgZG9jdW1lbnRhdGlvbiBvbmx5LgpJTlZBTElEX1NPVVJDRV9BRERSRVNTRVMgPSBbKCcxOTIuMC4yLjI1NScsIDApLCAoJzIwMDE6ZGI4OjoxJywgMCldCgoKZGVmIGNsZWFyX3dhcm5pbmdzKGNscz1IVFRQV2FybmluZyk6CiAgICBuZXdfZmlsdGVycyA9IFtdCiAgICBmb3IgZiBpbiB3YXJuaW5ncy5maWx0ZXJzOgogICAgICAgIGlmIGlzc3ViY2xhc3MoZlsyXSwgY2xzKToKICAgICAgICAgICAgY29udGludWUKICAgICAgICBuZXdfZmlsdGVycy5hcHBlbmQoZikKICAgIHdhcm5pbmdzLmZpbHRlcnNbOl0gPSBuZXdfZmlsdGVycwoKCmRlZiBzZXRVcCgpOgogICAgY2xlYXJfd2FybmluZ3MoKQogICAgd2FybmluZ3Muc2ltcGxlZmlsdGVyKCdpZ25vcmUnLCBIVFRQV2FybmluZykKCgpkZWYgb25seVB5MjZPck9sZGVyKHRlc3QpOgogICAgIiIiU2tpcHMgdGhpcyB0ZXN0IHVubGVzcyB5b3UgYXJlIG9uIFB5dGhvbjIuNi54IG9yIGVhcmxpZXIuIiIiCgogICAgQGZ1bmN0b29scy53cmFwcyh0ZXN0KQogICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBtc2cgPSAie25hbWV9IG9ubHkgcnVucyBvbiBQeXRob24yLjYueCBvciBvbGRlciIuZm9ybWF0KG5hbWU9dGVzdC5fX25hbWVfXykKICAgICAgICBpZiBzeXMudmVyc2lvbl9pbmZvID49ICgyLCA3KToKICAgICAgICAgICAgcmFpc2UgU2tpcFRlc3QobXNnKQogICAgICAgIHJldHVybiB0ZXN0KCphcmdzLCAqKmt3YXJncykKICAgIHJldHVybiB3cmFwcGVyCgoKZGVmIG9ubHlQeTI3T3JOZXdlcih0ZXN0KToKICAgICIiIlNraXBzIHRoaXMgdGVzdCB1bmxlc3MgeW91IGFyZSBvbiBQeXRob24gMi43Lnggb3IgbGF0ZXIuIiIiCgogICAgQGZ1bmN0b29scy53cmFwcyh0ZXN0KQogICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBtc2cgPSAie25hbWV9IHJlcXVpcmVzIFB5dGhvbiAyLjcueCsgdG8gcnVuIi5mb3JtYXQobmFtZT10ZXN0Ll9fbmFtZV9fKQogICAgICAgIGlmIHN5cy52ZXJzaW9uX2luZm8gPCAoMiwgNyk6CiAgICAgICAgICAgIHJhaXNlIFNraXBUZXN0KG1zZykKICAgICAgICByZXR1cm4gdGVzdCgqYXJncywgKiprd2FyZ3MpCiAgICByZXR1cm4gd3JhcHBlcgoKCmRlZiBvbmx5UHkyNzlPck5ld2VyKHRlc3QpOgogICAgIiIiU2tpcHMgdGhpcyB0ZXN0IHVubGVzcyB5b3UgYXJlIG9uIFB5dGhvbiAyLjcuOSBvciBsYXRlci4iIiIKCiAgICBAZnVuY3Rvb2xzLndyYXBzKHRlc3QpCiAgICBkZWYgd3JhcHBlcigqYXJncywgKiprd2FyZ3MpOgogICAgICAgIG1zZyA9ICJ7bmFtZX0gcmVxdWlyZXMgUHl0aG9uIDIuNy45KyB0byBydW4iLmZvcm1hdChuYW1lPXRlc3QuX19uYW1lX18pCiAgICAgICAgaWYgc3lzLnZlcnNpb25faW5mbyA8ICgyLCA3LCA5KToKICAgICAgICAgICAgcmFpc2UgU2tpcFRlc3QobXNnKQogICAgICAgIHJldHVybiB0ZXN0KCphcmdzLCAqKmt3YXJncykKICAgIHJldHVybiB3cmFwcGVyCgoKZGVmIG9ubHlQeTIodGVzdCk6CiAgICAiIiJTa2lwcyB0aGlzIHRlc3QgdW5sZXNzIHlvdSBhcmUgb24gUHl0aG9uIDIueCIiIgoKICAgIEBmdW5jdG9vbHMud3JhcHModGVzdCkKICAgIGRlZiB3cmFwcGVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgbXNnID0gIntuYW1lfSByZXF1aXJlcyBQeXRob24gMi54IHRvIHJ1biIuZm9ybWF0KG5hbWU9dGVzdC5fX25hbWVfXykKICAgICAgICBpZiBzaXguUFkzOgogICAgICAgICAgICByYWlzZSBTa2lwVGVzdChtc2cpCiAgICAgICAgcmV0dXJuIHRlc3QoKmFyZ3MsICoqa3dhcmdzKQogICAgcmV0dXJuIHdyYXBwZXIKCgpkZWYgb25seVB5Myh0ZXN0KToKICAgICIiIlNraXBzIHRoaXMgdGVzdCB1bmxlc3MgeW91IGFyZSBvbiBQeXRob24zLngiIiIKCiAgICBAZnVuY3Rvb2xzLndyYXBzKHRlc3QpCiAgICBkZWYgd3JhcHBlcigqYXJncywgKiprd2FyZ3MpOgogICAgICAgIG1zZyA9ICJ7bmFtZX0gcmVxdWlyZXMgUHl0aG9uMy54IHRvIHJ1biIuZm9ybWF0KG5hbWU9dGVzdC5fX25hbWVfXykKICAgICAgICBpZiBub3Qgc2l4LlBZMzoKICAgICAgICAgICAgcmFpc2UgU2tpcFRlc3QobXNnKQogICAgICAgIHJldHVybiB0ZXN0KCphcmdzLCAqKmt3YXJncykKICAgIHJldHVybiB3cmFwcGVyCgoKZGVmIG5vdFNlY3VyZVRyYW5zcG9ydCh0ZXN0KToKICAgICIiIlNraXBzIHRoaXMgdGVzdCB3aGVuIFNlY3VyZVRyYW5zcG9ydCBpcyBpbiB1c2UuIiIiCgogICAgQGZ1bmN0b29scy53cmFwcyh0ZXN0KQogICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBtc2cgPSAie25hbWV9IGRvZXMgbm90IHJ1biB3aXRoIFNlY3VyZVRyYW5zcG9ydCIuZm9ybWF0KG5hbWU9dGVzdC5fX25hbWVfXykKICAgICAgICBpZiBzc2xfLklTX1NFQ1VSRVRSQU5TUE9SVDoKICAgICAgICAgICAgcmFpc2UgU2tpcFRlc3QobXNnKQogICAgICAgIHJldHVybiB0ZXN0KCphcmdzLCAqKmt3YXJncykKICAgIHJldHVybiB3cmFwcGVyCgoKZGVmIG9ubHlQeTI3T3JOZXdlck9yTm9uV2luZG93cyh0ZXN0KToKICAgICIiIlNraXBzIHRoaXMgdGVzdCB1bmxlc3MgeW91IGFyZSBvbiBQeXRob24yLjcrIG9yIG5vbi1XaW5kb3dzIiIiCiAgICBAZnVuY3Rvb2xzLndyYXBzKHRlc3QpCiAgICBkZWYgd3JhcHBlcigqYXJncywgKiprd2FyZ3MpOgogICAgICAgIG1zZyA9ICJ7bmFtZX0gcmVxdWlyZXMgUHl0aG9uMi43KyBvciBub24tV2luZG93cyB0byBydW4iLmZvcm1hdChuYW1lPXRlc3QuX19uYW1lX18pCiAgICAgICAgaWYgc3lzLnZlcnNpb25faW5mbyA8ICgyLCA3KSBhbmQgcGxhdGZvcm0uc3lzdGVtKCkgPT0gJ1dpbmRvd3MnOgogICAgICAgICAgICByYWlzZSBTa2lwVGVzdChtc2cpCiAgICAgICAgcmV0dXJuIHRlc3QoKmFyZ3MsICoqa3dhcmdzKQogICAgcmV0dXJuIHdyYXBwZXIKCgpfcmVxdWlyZXNfbmV0d29ya19oYXNfcm91dGUgPSBOb25lCgoKZGVmIHJlcXVpcmVzX25ldHdvcmsodGVzdCk6CiAgICAiIiJIZWxwcyB5b3Ugc2tpcCB0ZXN0cyB0aGF0IHJlcXVpcmUgdGhlIG5ldHdvcmsiIiIKCiAgICBkZWYgX2lzX3VucmVhY2hhYmxlX2VycihlcnIpOgogICAgICAgIHJldHVybiBnZXRhdHRyKGVyciwgJ2Vycm5vJywgTm9uZSkgaW4gKGVycm5vLkVORVRVTlJFQUNILAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm5vLkVIT1NUVU5SRUFDSCkgICMgRm9yIE9TWAoKICAgIGRlZiBfaGFzX3JvdXRlKCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzb2NrID0gc29ja2V0LmNyZWF0ZV9jb25uZWN0aW9uKChUQVJQSVRfSE9TVCwgODApLCAwLjAwMDEpCiAgICAgICAgICAgIHNvY2suY2xvc2UoKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBzb2NrZXQudGltZW91dDoKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yIGFzIGU6CiAgICAgICAgICAgIGlmIF9pc191bnJlYWNoYWJsZV9lcnIoZSk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlCgogICAgQGZ1bmN0b29scy53cmFwcyh0ZXN0KQogICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBnbG9iYWwgX3JlcXVpcmVzX25ldHdvcmtfaGFzX3JvdXRlCgogICAgICAgIGlmIF9yZXF1aXJlc19uZXR3b3JrX2hhc19yb3V0ZSBpcyBOb25lOgogICAgICAgICAgICBfcmVxdWlyZXNfbmV0d29ya19oYXNfcm91dGUgPSBfaGFzX3JvdXRlKCkKCiAgICAgICAgaWYgX3JlcXVpcmVzX25ldHdvcmtfaGFzX3JvdXRlOgogICAgICAgICAgICByZXR1cm4gdGVzdCgqYXJncywgKiprd2FyZ3MpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbXNnID0gIkNhbid0IHJ1biB7bmFtZX0gYmVjYXVzZSB0aGUgbmV0d29yayBpcyB1bnJlYWNoYWJsZSIuZm9ybWF0KAogICAgICAgICAgICAgICAgbmFtZT10ZXN0Ll9fbmFtZV9fKQogICAgICAgICAgICByYWlzZSBTa2lwVGVzdChtc2cpCiAgICByZXR1cm4gd3JhcHBlcgoKCmNsYXNzIF9MaXN0SGFuZGxlcihsb2dnaW5nLkhhbmRsZXIpOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKF9MaXN0SGFuZGxlciwgc2VsZikuX19pbml0X18oKQogICAgICAgIHNlbGYucmVjb3JkcyA9IFtdCgogICAgZGVmIGVtaXQoc2VsZiwgcmVjb3JkKToKICAgICAgICBzZWxmLnJlY29yZHMuYXBwZW5kKHJlY29yZCkKCgpjbGFzcyBMb2dSZWNvcmRlcihvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRhcmdldD1sb2dnaW5nLnJvb3QpOgogICAgICAgIHN1cGVyKExvZ1JlY29yZGVyLCBzZWxmKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5fdGFyZ2V0ID0gdGFyZ2V0CiAgICAgICAgc2VsZi5faGFuZGxlciA9IF9MaXN0SGFuZGxlcigpCgogICAgQHByb3BlcnR5CiAgICBkZWYgcmVjb3JkcyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5faGFuZGxlci5yZWNvcmRzCgogICAgZGVmIGluc3RhbGwoc2VsZik6CiAgICAgICAgc2VsZi5fdGFyZ2V0LmFkZEhhbmRsZXIoc2VsZi5faGFuZGxlcikKCiAgICBkZWYgdW5pbnN0YWxsKHNlbGYpOgogICAgICAgIHNlbGYuX3RhcmdldC5yZW1vdmVIYW5kbGVyKHNlbGYuX2hhbmRsZXIpCgogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToKICAgICAgICBzZWxmLmluc3RhbGwoKQogICAgICAgIHJldHVybiBzZWxmLnJlY29yZHMKCiAgICBkZWYgX19leGl0X18oc2VsZiwgZXhjX3R5cGUsIGV4Y192YWx1ZSwgdHJhY2ViYWNrKToKICAgICAgICBzZWxmLnVuaW5zdGFsbCgpCiAgICAgICAgcmV0dXJuIEZhbHNlCg==
