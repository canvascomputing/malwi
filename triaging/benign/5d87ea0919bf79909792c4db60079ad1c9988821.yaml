statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/cloudtrail/validation.py
  contents:
  - name: Sha256RSADigestValidator.validate
    score: 0.0
    code: |-
      def validate(self, bucket, key, public_key, digest_data, inflated_digest):
              """Validates a digest file.

              Throws a DigestError when the digest is invalid.

              :param bucket: Bucket of the digest file
              :param key: Key of the digest file
              :param public_key: Public key bytes.
              :param digest_data: Dict of digest data returned when JSON
                  decoding a manifest.
              :param inflated_digest: Inflated digest file contents as bytes.
              """
              try:
                  decoded_key = base64.b64decode(public_key)
                  public_key = rsa.PublicKey.load_pkcs1(decoded_key, format='DER')
                  to_sign = self._create_string_to_sign(digest_data, inflated_digest)
                  signature_bytes = binascii.unhexlify(digest_data['_signature'])
                  rsa.verify(to_sign, signature_bytes, public_key)
              except PyAsn1Error:
                  raise DigestError(
                      ('Digest file\ts3://%s/%s\tINVALID: Unable to load PKCS #1 key'
                       ' with fingerprint %s')
                      % (bucket, key, digest_data['digestPublicKeyFingerprint']))
              except rsa.pkcs1.VerificationError:
                  # Note from the Python-RSA docs: Never display the stack trace of
                  # a rsa.pkcs1.VerificationError exception. It shows where in the
                  # code the exception occurred, and thus leaks information about
                  # the key.
                  raise DigestSignatureError(bucket, key)
    tokens: resume nop load_global base64 load_attr ENCODING_DECODING load_fast public_key call store_fast decoded_key load_global rsa load_attr PublicKey load_attr load_pkcs1 load_fast decoded_key load_const DER kw_names format call store_fast public_key load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast digest_data load_fast inflated_digest call store_fast to_sign load_global binascii load_attr ENCODING_DECODING load_fast digest_data load_const _signature binary_subscr call store_fast signature_bytes load_global rsa load_attr verify load_fast to_sign load_fast signature_bytes load_fast public_key call pop_top return_const None push_exc_info load_global PyAsn1Error check_exc_match pop_jump_if_false TO_NUMBER pop_top load_global DigestError load_const STRING_FILE_PATH load_fast bucket format_value INTEGER load_const / load_fast key format_value INTEGER load_const STRING_LEN_S_ENT_HIGH load_fast digest_data load_const STRING_LEN_S_ENT_HIGH binary_subscr format_value INTEGER build_string call raise_varargs load_global rsa load_attr pkcs1 load_attr STRING_LEN_S_ENT_HIGH check_exc_match pop_jump_if_false TO_NUMBER pop_top load_global STRING_BASE64_LEN_S_ENT_HIGH load_fast bucket load_fast key call raise_varargs reraise copy pop_except reraise
    hash: 861a37882fce7608c838e9af99b97314258a86056a9878b807c9af2670317352
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/cloudtrail/validation.py
  : 
