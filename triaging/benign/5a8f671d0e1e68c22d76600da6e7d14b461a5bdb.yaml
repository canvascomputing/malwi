statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/streamingoutputarg.py
  contents:
  - name: StreamingOutputArgument.cli_name
    score: 0.0
    code: |-
      @property
          def cli_name(self):
              # Because this is a parameter, not an option, it shouldn't have the
              # '--' prefix. We want to use the self.py_name to indicate that it's an
              # argument.
              return self._name
    tokens: resume load_fast self load_attr _name return_value
    hash: 2c2423e4d704c54b659b9b0fe2a88200d100bf971f62e2b0a00dcb9970d78207
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/streamingoutputarg.py
  : IyBDb3B5cmlnaHQgMjAxMyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuIFlvdQojIG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YKIyB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0CiMKIyAgICAgaHR0cDovL2F3cy5hbWF6b24uY29tL2FwYWNoZTIuMC8KIwojIG9yIGluIHRoZSAibGljZW5zZSIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMKIyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgojIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYwojIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCmZyb20gYm90b2NvcmUubW9kZWwgaW1wb3J0IFNoYXBlCgpmcm9tIGF3c2NsaS5hcmd1bWVudHMgaW1wb3J0IEJhc2VDTElBcmd1bWVudAoKCmRlZiBhZGRfc3RyZWFtaW5nX291dHB1dF9hcmcoYXJndW1lbnRfdGFibGUsIG9wZXJhdGlvbl9tb2RlbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLCAqKmt3YXJncyk6CiAgICAjIEltcGxlbWVudGF0aW9uIGRldGFpbDogIGhvb2tlZCB1cCB0byAnYnVpbGRpbmctYXJndW1lbnQtdGFibGUnCiAgICAjIGV2ZW50LgogICAgaWYgX2hhc19zdHJlYW1pbmdfb3V0cHV0KG9wZXJhdGlvbl9tb2RlbCk6CiAgICAgICAgc3RyZWFtaW5nX2FyZ3VtZW50X25hbWUgPSBfZ2V0X3N0cmVhbWluZ19hcmd1bWVudF9uYW1lKG9wZXJhdGlvbl9tb2RlbCkKICAgICAgICBhcmd1bWVudF90YWJsZVsnb3V0ZmlsZSddID0gU3RyZWFtaW5nT3V0cHV0QXJndW1lbnQoCiAgICAgICAgICAgIHJlc3BvbnNlX2tleT1zdHJlYW1pbmdfYXJndW1lbnRfbmFtZSwKICAgICAgICAgICAgb3BlcmF0aW9uX21vZGVsPW9wZXJhdGlvbl9tb2RlbCwKICAgICAgICAgICAgc2Vzc2lvbj1zZXNzaW9uLCBuYW1lPSdvdXRmaWxlJykKCgpkZWYgX2hhc19zdHJlYW1pbmdfb3V0cHV0KG1vZGVsKToKICAgIHJldHVybiBtb2RlbC5oYXNfc3RyZWFtaW5nX291dHB1dAoKCmRlZiBfZ2V0X3N0cmVhbWluZ19hcmd1bWVudF9uYW1lKG1vZGVsKToKICAgIHJldHVybiBtb2RlbC5vdXRwdXRfc2hhcGUuc2VyaWFsaXphdGlvblsncGF5bG9hZCddCgoKY2xhc3MgU3RyZWFtaW5nT3V0cHV0QXJndW1lbnQoQmFzZUNMSUFyZ3VtZW50KToKCiAgICBCVUZGRVJfU0laRSA9IDMyNzY4CiAgICBIRUxQID0gJ0ZpbGVuYW1lIHdoZXJlIHRoZSBjb250ZW50IHdpbGwgYmUgc2F2ZWQnCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHJlc3BvbnNlX2tleSwgb3BlcmF0aW9uX21vZGVsLCBuYW1lLAogICAgICAgICAgICAgICAgIHNlc3Npb24sIGJ1ZmZlcl9zaXplPU5vbmUpOgogICAgICAgIHNlbGYuX25hbWUgPSBuYW1lCiAgICAgICAgc2VsZi5hcmd1bWVudF9tb2RlbCA9IFNoYXBlKCdTdHJlYW1pbmdPdXRwdXRBcmd1bWVudCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsndHlwZSc6ICdzdHJpbmcnfSkKICAgICAgICBpZiBidWZmZXJfc2l6ZSBpcyBOb25lOgogICAgICAgICAgICBidWZmZXJfc2l6ZSA9IHNlbGYuQlVGRkVSX1NJWkUKICAgICAgICBzZWxmLl9idWZmZXJfc2l6ZSA9IGJ1ZmZlcl9zaXplCiAgICAgICAgIyBUaGlzIGlzIHRoZSBrZXkgaW4gdGhlIHJlc3BvbnNlIGJvZHkgd2hlcmUgd2UgY2FuIGZpbmQgdGhlCiAgICAgICAgIyBzdHJlYW1lZCBjb250ZW50cy4KICAgICAgICBzZWxmLl9yZXNwb25zZV9rZXkgPSByZXNwb25zZV9rZXkKICAgICAgICBzZWxmLl9vdXRwdXRfZmlsZSA9IE5vbmUKICAgICAgICBzZWxmLl9uYW1lID0gbmFtZQogICAgICAgIHNlbGYuX3JlcXVpcmVkID0gVHJ1ZQogICAgICAgIHNlbGYuX29wZXJhdGlvbl9tb2RlbCA9IG9wZXJhdGlvbl9tb2RlbAogICAgICAgIHNlbGYuX3Nlc3Npb24gPSBzZXNzaW9uCgogICAgQHByb3BlcnR5CiAgICBkZWYgY2xpX25hbWUoc2VsZik6CiAgICAgICAgIyBCZWNhdXNlIHRoaXMgaXMgYSBwYXJhbWV0ZXIsIG5vdCBhbiBvcHRpb24sIGl0IHNob3VsZG4ndCBoYXZlIHRoZQogICAgICAgICMgJy0tJyBwcmVmaXguIFdlIHdhbnQgdG8gdXNlIHRoZSBzZWxmLnB5X25hbWUgdG8gaW5kaWNhdGUgdGhhdCBpdCdzIGFuCiAgICAgICAgIyBhcmd1bWVudC4KICAgICAgICByZXR1cm4gc2VsZi5fbmFtZQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGNsaV90eXBlX25hbWUoc2VsZik6CiAgICAgICAgcmV0dXJuICdzdHJpbmcnCgogICAgQHByb3BlcnR5CiAgICBkZWYgcmVxdWlyZWQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX3JlcXVpcmVkCgogICAgQHJlcXVpcmVkLnNldHRlcgogICAgZGVmIHJlcXVpcmVkKHNlbGYsIHZhbHVlKToKICAgICAgICBzZWxmLl9yZXF1aXJlZCA9IHZhbHVlCgogICAgQHByb3BlcnR5CiAgICBkZWYgZG9jdW1lbnRhdGlvbihzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5IRUxQCgogICAgZGVmIGFkZF90b19wYXJzZXIoc2VsZiwgcGFyc2VyKToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KHNlbGYuX25hbWUsIG1ldGF2YXI9c2VsZi5weV9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscD1zZWxmLkhFTFApCgogICAgZGVmIGFkZF90b19wYXJhbXMoc2VsZiwgcGFyYW1ldGVycywgdmFsdWUpOgogICAgICAgIHNlbGYuX291dHB1dF9maWxlID0gdmFsdWUKICAgICAgICBzZXJ2aWNlX2lkID0gc2VsZi5fb3BlcmF0aW9uX21vZGVsLnNlcnZpY2VfbW9kZWwuc2VydmljZV9pZC5oeXBoZW5pemUoKQogICAgICAgIG9wZXJhdGlvbl9uYW1lID0gc2VsZi5fb3BlcmF0aW9uX21vZGVsLm5hbWUKICAgICAgICBzZWxmLl9zZXNzaW9uLnJlZ2lzdGVyKCdhZnRlci1jYWxsLiVzLiVzJyAlICgKICAgICAgICAgICAgc2VydmljZV9pZCwgb3BlcmF0aW9uX25hbWUpLCBzZWxmLnNhdmVfZmlsZSkKCiAgICBkZWYgc2F2ZV9maWxlKHNlbGYsIHBhcnNlZCwgKiprd2FyZ3MpOgogICAgICAgIGlmIHNlbGYuX3Jlc3BvbnNlX2tleSBub3QgaW4gcGFyc2VkOgogICAgICAgICAgICAjIElmIHRoZSByZXNwb25zZSBrZXkgaXMgbm90IGluIHBhcnNlZCwgdGhlbgogICAgICAgICAgICAjIHdlJ3ZlIHJlY2VpdmVkIGFuIGVycm9yIG1lc3NhZ2UgYW5kIHdlJ2xsIGxldCB0aGUgQVdTIENMSQogICAgICAgICAgICAjIGVycm9yIGhhbmRsZXIgcHJpbnQgb3V0IGFuIGVycm9yIG1lc3NhZ2UuICBXZSBoYXZlIG5vCiAgICAgICAgICAgICMgZmlsZSB0byBzYXZlIGluIHRoaXMgc2l0dWF0aW9uLgogICAgICAgICAgICByZXR1cm4KICAgICAgICBib2R5ID0gcGFyc2VkW3NlbGYuX3Jlc3BvbnNlX2tleV0KICAgICAgICBidWZmZXJfc2l6ZSA9IHNlbGYuX2J1ZmZlcl9zaXplCiAgICAgICAgd2l0aCBvcGVuKHNlbGYuX291dHB1dF9maWxlLCAnd2InKSBhcyBmcDoKICAgICAgICAgICAgZGF0YSA9IGJvZHkucmVhZChidWZmZXJfc2l6ZSkKICAgICAgICAgICAgd2hpbGUgZGF0YToKICAgICAgICAgICAgICAgIGZwLndyaXRlKGRhdGEpCiAgICAgICAgICAgICAgICBkYXRhID0gYm9keS5yZWFkKGJ1ZmZlcl9zaXplKQogICAgICAgICMgV2UgZG9uJ3Qgd2FudCB0byBpbmNsdWRlIHRoZSBzdHJlYW1pbmcgcGFyYW0gaW4KICAgICAgICAjIHRoZSByZXR1cm5lZCByZXNwb25zZS4KICAgICAgICBkZWwgcGFyc2VkW3NlbGYuX3Jlc3BvbnNlX2tleV0K
