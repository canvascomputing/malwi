statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/paginate.py
  contents:
  - name: _get_all_cli_input_tokens
    score: 0.0
    code: |-
      def _get_all_cli_input_tokens(pagination_config):
          # Get all input tokens including the limit_key
          # if it exists.
          tokens = _get_input_tokens(pagination_config)
          for token_name in tokens:
              cli_name = xform_name(token_name, '-')
              yield cli_name
          if 'limit_key' in pagination_config:
              key_name = pagination_config['limit_key']
              cli_name = xform_name(key_name, '-')
              yield cli_name
    tokens: return_generator pop_top resume load_global STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH call store_fast tokens load_fast tokens get_iter for_iter TO_NUMBER store_fast token_name load_global xform_name load_fast token_name load_const - call store_fast cli_name load_fast cli_name yield_value resume pop_top jump_backward TO_NUMBER end_for load_const limit_key load_fast STRING_LEN_S_ENT_HIGH contains_op pop_jump_if_false TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH load_const limit_key binary_subscr store_fast key_name load_global xform_name load_fast key_name load_const - call store_fast cli_name load_fast cli_name yield_value resume pop_top return_const None return_const None call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: 64ed61f59724579940b69e1245010fbc1b8bde7fef14235f0f491256ba896184
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/paginate.py: 
