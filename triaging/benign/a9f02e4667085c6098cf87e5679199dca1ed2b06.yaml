statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_poolmanager.py
  contents:
  - name: TestPoolManager.test_http_connection_from_context_case_insensitive
    score: 0.0
    code: |-
      def test_http_connection_from_context_case_insensitive(self):
              """Assert scheme case is ignored when getting the https key class."""
              p = PoolManager()
              self.addCleanup(p.clear)
              context = {'scheme': 'http', 'host': 'example.com', 'port': '8080'}
              other_context = {'scheme': 'HTTP', 'host': 'EXAMPLE.COM', 'port': '8080'}
              pool = p.connection_from_context(context)
              other_pool = p.connection_from_context(other_context)

              self.assertEqual(1, len(p.pools))
              self.assertTrue(pool is other_pool)
              self.assertTrue(all(isinstance(key, PoolKey) for key in p.pools.keys()))
    tokens: resume load_global PoolManager call store_fast p load_fast self load_attr addCleanup load_fast p load_attr clear call pop_top load_const http load_const example.com load_const 8080 load_const build_const_key_map store_fast context load_const HTTP load_const EXAMPLE.COM load_const 8080 load_const build_const_key_map store_fast other_context load_fast p load_attr STRING_LEN_S_ENT_HIGH load_fast context call store_fast pool load_fast p load_attr STRING_LEN_S_ENT_HIGH load_fast other_context call store_fast other_pool load_fast self load_attr assertEqual load_const INTEGER load_global len load_fast p load_attr pools call call pop_top load_fast self load_attr assertTrue load_fast pool load_fast other_pool is_op call pop_top load_fast self load_attr assertTrue load_global all load_const OBJECT make_function load_fast p load_attr pools load_attr keys call get_iter call call call pop_top return_const None
    hash: 0fc1ba62a65ed0459606a57e7edb384685d9e93c2b899ca3d531e62a1cb5d340
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_poolmanager.py: 
