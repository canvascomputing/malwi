statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/trust_list.py
  contents:
  - name: _cert_details
    score: 0.0
    code: |-
      def _cert_details(cert_pointer):
          """
          Return the certificate and a hash of it

          :param cert_pointer:
              A SecCertificateRef

          :return:
              A 2-element tuple:
               - [0]: A byte string of the SHA1 hash of the cert
               - [1]: A byte string of the DER-encoded contents of the cert
          """

          data_pointer = None

          try:
              data_pointer = Security.SecCertificateCopyData(cert_pointer)
              der_cert = CFHelpers.cf_data_to_bytes(data_pointer)
              cert_hash = hashlib.sha1(der_cert).digest()

              return (der_cert, cert_hash)

          finally:
              if data_pointer is not None:
                  CoreFoundation.CFRelease(data_pointer)
    tokens: resume load_const store_fast data_pointer nop load_global Security load_attr STRING_LEN_S_ENT_HIGH load_fast cert_pointer call store_fast data_pointer load_global CFHelpers load_attr STRING_LEN_S_ENT_HIGH load_fast data_pointer call store_fast der_cert load_global hashlib load_attr CRYPTO_HASHING load_fast der_cert call load_attr digest call store_fast cert_hash load_fast der_cert load_fast cert_hash build_tuple load_fast data_pointer pop_jump_if_none TO_NUMBER load_global CoreFoundation load_attr CFRelease load_fast data_pointer call pop_top return_value return_value push_exc_info load_fast data_pointer pop_jump_if_none TO_NUMBER load_global CoreFoundation load_attr CFRelease load_fast data_pointer call pop_top reraise reraise copy pop_except reraise
    hash: 3cd90b47de7004a7c0652f5cce453b9e54d8f1b82dc08fd8c963af56627fde86
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/trust_list.py
  : 
