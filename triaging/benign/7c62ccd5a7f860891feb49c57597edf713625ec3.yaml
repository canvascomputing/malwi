statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_retry.py
  contents:
  - name: RetryTest.test_backoff_reset_after_redirect
    score: 0.0
    code: |-
      def test_backoff_reset_after_redirect(self):
              retry = Retry(total=100, redirect=5, backoff_factor=0.2)
              retry = retry.increment(method='GET')
              retry = retry.increment(method='GET')
              self.assertEqual(retry.get_backoff_time(), 0.4)
              redirect_response = HTTPResponse(status=302, headers={'location': 'test'})
              retry = retry.increment(method='GET', response=redirect_response)
              self.assertEqual(retry.get_backoff_time(), 0)
              retry = retry.increment(method='GET')
              retry = retry.increment(method='GET')
              self.assertEqual(retry.get_backoff_time(), 0.4)
    tokens: resume load_global Retry load_const INTEGER load_const INTEGER load_const FLOAT kw_names backoff_factor redirect total call store_fast retry load_fast retry load_attr increment load_const GET kw_names method call store_fast retry load_fast retry load_attr increment load_const GET kw_names method call store_fast retry load_fast self load_attr assertEqual load_fast retry load_attr STRING_LEN_S_ENT_HIGH call load_const FLOAT call pop_top load_global HTTPResponse load_const INTEGER load_const location load_const test build_map kw_names headers status call store_fast STRING_LEN_S_ENT_HIGH load_fast retry load_attr increment load_const GET load_fast STRING_LEN_S_ENT_HIGH kw_names method response call store_fast retry load_fast self load_attr assertEqual load_fast retry load_attr STRING_LEN_S_ENT_HIGH call load_const INTEGER call pop_top load_fast retry load_attr increment load_const GET kw_names method call store_fast retry load_fast retry load_attr increment load_const GET kw_names method call store_fast retry load_fast self load_attr assertEqual load_fast retry load_attr STRING_LEN_S_ENT_HIGH call load_const FLOAT call pop_top return_const None
    hash: 52129072cf1305183c5288361ad4175509a549ba7f25efc7c2441d49701f5f2e
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/test_retry.py: 
