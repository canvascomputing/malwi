statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/guild.py
  contents:
  - name: Guild.vanity_invite
    score: 0.0
    code: |-
      async def vanity_invite(self):
              """|coro|

              Returns the guild's special vanity invite.

              The guild must have ``VANITY_URL`` in :attr:`~Guild.features`.

              You must have the :attr:`~Permissions.manage_guild` permission to use
              this as well.

              Raises
              -------
              Forbidden
                  You do not have the proper permissions to get this.
              HTTPException
                  Retrieving the vanity invite failed.

              Returns
              --------
              :class:`Invite`
                  The special vanity invite.
              """

              # we start with { code: abc }
              payload = await self._state.http.get_vanity_code(self.id)

              # get the vanity URL channel since default channels aren't
              # reliable or a thing anymore
              data = await self._state.http.get_invite(payload['code'])

              payload['guild'] = self
              payload['channel'] = self.get_channel(int(data['channel']['id']))
              payload['revoked'] = False
              payload['temporary'] = False
              payload['max_uses'] = 0
              payload['max_age'] = 0
              return Invite(state=self._state, data=payload)
    tokens: return_generator pop_top resume load_fast self load_attr _state load_attr http load_attr get_vanity_code load_fast self load_attr id call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast payload load_fast self load_attr _state load_attr http load_attr get_invite load_fast payload load_const code binary_subscr call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast data load_fast self load_fast payload load_const guild store_subscr load_fast self load_attr get_channel load_global int load_fast data load_const channel binary_subscr load_const id binary_subscr call call load_fast payload load_const channel store_subscr load_const INTEGER load_fast payload load_const revoked store_subscr load_const INTEGER load_fast payload load_const temporary store_subscr load_const INTEGER load_fast payload load_const max_uses store_subscr load_const INTEGER load_fast payload load_const max_age store_subscr load_global Invite load_fast self load_attr _state load_fast payload kw_names data state call return_value cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: b61330e9a68fe807244e841af6480f0df095459a09b6e9a0bb62f585117c8183
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/guild.py: 
