statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/util/timeout.py
  contents:
  - name: Timeout.read_timeout
    score: 0.0
    code: |-
      @property
          def read_timeout(self):
              """ Get the value for the read timeout.

              This assumes some time has elapsed in the connection timeout and
              computes the read timeout appropriately.

              If self.total is set, the read timeout is dependent on the amount of
              time taken by the connect timeout. If the connection time has not been
              established, a :exc:`~urllib3.exceptions.TimeoutStateError` will be
              raised.

              :return: Value to use for the read timeout.
              :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None
              :raises urllib3.exceptions.TimeoutStateError: If :meth:`start_connect`
                  has not yet been called on this object.
              """
              if (self.total is not None and
                      self.total is not self.DEFAULT_TIMEOUT and
                      self._read is not None and
                      self._read is not self.DEFAULT_TIMEOUT):
                  # In case the connect timeout has not yet been established.
                  if self._start_connect is None:
                      return self._read
                  return max(0, min(self.total - self.get_connect_duration(),
                                    self._read))
              elif self.total is not None and self.total is not self.DEFAULT_TIMEOUT:
                  return max(0, self.total - self.get_connect_duration())
              else:
                  return self._read
    tokens: resume load_fast self load_attr total pop_jump_if_none TO_NUMBER load_fast self load_attr total load_fast self load_attr DEFAULT_TIMEOUT is_op pop_jump_if_false TO_NUMBER load_fast self load_attr _read pop_jump_if_none TO_NUMBER load_fast self load_attr _read load_fast self load_attr DEFAULT_TIMEOUT is_op pop_jump_if_false TO_NUMBER load_fast self load_attr _start_connect pop_jump_if_not_none TO_NUMBER load_fast self load_attr _read return_value load_global max load_const INTEGER load_global min load_fast self load_attr total load_fast self load_attr STRING_LEN_S_ENT_HIGH call binary_op - load_fast self load_attr _read call call return_value load_fast self load_attr total pop_jump_if_none TO_NUMBER load_fast self load_attr total load_fast self load_attr DEFAULT_TIMEOUT is_op pop_jump_if_false TO_NUMBER load_global max load_const INTEGER load_fast self load_attr total load_fast self load_attr STRING_LEN_S_ENT_HIGH call binary_op - call return_value load_fast self load_attr _read return_value
    hash: 8a563837a9f2587887947d7d6c4b070e579e9e0815c766389cf26a66ccb4a43b
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/util/timeout.py
  : 
