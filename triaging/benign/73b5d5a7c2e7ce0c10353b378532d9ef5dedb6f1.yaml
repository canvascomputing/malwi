statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/audit_logs.py
  contents:
  - name: AuditLogEntry.created_at
    score: 0.0
    code: |-
      @utils.cached_property
          def created_at(self):
              """:class:`datetime.datetime`: Returns the entry's creation time in UTC."""
              return utils.snowflake_time(self.id)
    tokens: resume load_global utils load_attr snowflake_time load_fast self load_attr id call return_value
    hash: 6527cda703e828faca016c25d0c8ca584b9e751d6e064c99bbc5b7b3eb39e6e4
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/audit_logs.py
  : 
