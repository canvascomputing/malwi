statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/topictags.py
  contents:
  - name: TopicTagDB.get_tag_single_value
    score: 0.0
    code: |-
      def get_tag_single_value(self, topic_name, tag):
              """Get the value of a tag for a topic (i.e. not wrapped in a list)

              :param topic_name: The name of the topic
              :param tag: The name of the tag to retrieve
              :raises ValueError: Raised if there is not exactly one value
                  in the list value.
              """
              value = self.get_tag_value(topic_name, tag)
              if value is not None:
                  if len(value) != 1:
                      raise ValueError(
                          'Tag %s for topic %s has value %s. Expected a single '
                          'element in list.' % (tag, topic_name, value)
                      )
                  value = value[0]
              return value
    tokens: resume load_fast self load_attr get_tag_value load_fast topic_name load_fast tag call store_fast value load_fast value pop_jump_if_none TO_NUMBER load_global len load_fast value call load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_global ValueError load_const Tag load_fast tag format_value INTEGER load_const for topic load_fast topic_name format_value INTEGER load_const has value load_fast value format_value INTEGER load_const STRING_LEN_S_ENT_HIGH build_string call raise_varargs load_fast value load_const INTEGER binary_subscr store_fast value load_fast value return_value
    hash: 52da931033f138468f8a87beca0190698cd4e60688339c4c65979fb1a6638db0
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/topictags.py: IyBDb3B5cmlnaHQgKGMpIDIwMTUgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQKIwojIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCiMgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQojICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKIyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpcy0KIyB0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0CiMgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbC0KIyBsb3dpbmcgY29uZGl0aW9uczoKIwojIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCiMgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiMKIyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwojIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMLQojIElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQKIyBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwKIyBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKIyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTCiMgSU4gVEhFIFNPRlRXQVJFLgojCmltcG9ydCBvcwppbXBvcnQganNvbgppbXBvcnQgZG9jdXRpbHMuY29yZQoKCmNsYXNzIFRvcGljVGFnREIob2JqZWN0KToKICAgICIiIlRoaXMgY2xhc3MgYWN0cyBsaWtlIGEgZGF0YWJhc2UgZm9yIHRoZSB0YWdzIG9mIGFsbCBhdmFpbGFibGUgdG9waWNzLgoKICAgIEEgdGFnIGlzIGFuIGVsZW1lbnQgaW4gYSB0b3BpYyByZVN0cnVjdHVyZWQgdGV4dCBmaWxlIHRoYXQgY29udGFpbnMKICAgIGluZm9ybWF0aW9uIGFib3V0IGEgdG9waWMuIEluZm9ybWF0aW9uIGNhbiByYW5nZSBmcm9tIHRpdGxlcyB0byBldmVuCiAgICByZWxhdGVkIENMSSBjb21tYW5kcy4gSGVyZSBhcmUgYWxsIG9mIHRoZSBjdXJyZW50bHkgc3VwcG9ydGVkIHRhZ3M6CgogICAgVGFnICAgICAgICAgICAgICAgICBNZWFuaW5nICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpcmVkPwogICAgLS0tICAgICAgICAgICAgICAgICAtLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLQogICAgOnRpdGxlOiAgICAgICAgICAgICBUaGUgdGl0bGUgb2YgdGhlIHRvcGljICAgICAgICAgIFllcwogICAgOmRlc2NyaXB0aW9uOiAgICAgICBTZW50ZW5jZSBkZXNjcmlwdGlvbiBvZiB0b3BpYyAgIFllcwogICAgOmNhdGVnb3J5OiAgICAgICAgICBDYXRlZ29yeSB0b3BpYyBmYWxscyB1bmRlciAgICAgIFllcwogICAgOnJlbGF0ZWQgdG9waWM6ICAgICBBIHJlbGF0ZWQgdG9waWMgICAgICAgICAgICAgICAgIE5vCiAgICA6cmVsYXRlZCBjb21tYW5kOiAgIEEgcmVsYXRlZCBjb21tYW5kICAgICAgICAgICAgICAgTm8KCiAgICBUbyBzZWUgZXhhbXBsZXMgb2YgaG93IHRvIHNwZWNpZnkgdGFncywgbG9vayBpbiB0aGUgZGlyZWN0b3J5CiAgICBhd3NjbGkvdG9waWNzLiBOb3RlIHRoYXQgdGFncyBjYW4gaGF2ZSBtdWx0aXBsZSB2YWx1ZXMgYnkgZGVsaW1pdGluZwogICAgdmFsdWVzIHdpdGggY29tbWFzLiBBbGwgdGFncyBtdXN0IGJlIG9uIHRoZWlyIG93biBsaW5lIGluIHRoZSBmaWxlLgoKICAgIFRoaXMgY2xhc3MgY2FuIGxvYWQgYSBKU09OIGluZGV4IHJlcHJlc2VudGluZyBhbGwgdG9waWNzIGFuZCB0aGVpciB0YWdzLAogICAgc2NhbiBhbGwgb2YgdGhlIHRvcGljcyBhbmQgc3RvcmUgdGhlIHZhbHVlcyBvZiB0aGVpciB0YWdzLCByZXRyaWV2ZSB0aGUKICAgIHRhZyB2YWx1ZSBmb3IgYSBwYXJ0aWN1bGFyIHRvcGljLCBxdWVyeSBmb3IgYWxsIHRoZSB0b3BpY3Mgd2l0aCBhIHNwZWNpZmljCiAgICB0YWcgYW5kL29yIHZhbHVlLCBhbmQgc2F2ZSB0aGUgbG9hZGVkIGRhdGEgYmFjayBvdXQgdG8gYSBKU09OIGluZGV4LgoKICAgIFRoZSBzdHJ1Y3R1cmUgb2YgdGhlIGRhdGFiYXNlIGNhbiBiZSB2aWV3ZWQgYXMgYSBweXRob24gZGljdGlvbmFyeToKCiAgICB7J3RvcGljLW5hbWUtMSc6IHsKICAgICAgICAndGl0bGUnOiBbJ015IEZpcnN0IFRvcGljIFRpdGxlJ10sCiAgICAgICAgJ2Rlc2NyaXB0aW9uJzogWydUaGlzIGRlc2NyaWJlcyBteSBmaXJzdCB0b3BpYyddLAogICAgICAgICdjYXRlZ29yeSc6IFsnR2VuZXJhbCBUb3BpY3MnLCAnUzMnXSwKICAgICAgICAncmVsYXRlZCBjb21tYW5kJzogWydhd3MgczMnXSwKICAgICAgICAncmVsYXRlZCB0b3BpYyc6IFsndG9waWMtbmFtZS0yJ10KICAgICB9LAogICAgICd0b3BpYy1uYW1lLTInOiB7IC4uLi4uCiAgICB9CgogICAgVGhlIGtleXMgb2YgdGhlIGRpY3Rpb25hcnkgYXJlIHRoZSBDTEkgY29tbWFuZCBuYW1lcyBvZiB0aGUgdG9waWNzLiBUaGVzZQogICAgbmFtZXMgYXJlIGJhc2VkIG9mZiB0aGUgbmFtZSBvZiB0aGUgcmVTdHJ1Y3RlZCB0ZXh0IGZpbGUgdGhhdCBjb3JyZXNwb25kcwogICAgdG8gdGhlIHRvcGljLiBUaGUgdmFsdWUgb2YgdGhlc2Uga2V5cyBhcmUgZGljdGlvbmFyaWVzIG9mIHRhZ3MsIHdoZXJlIHRoZQogICAgdGFncyBhcmUga2V5cyBhbmQgdGhlaXIgdmFsdWUgaXMgYSBsaXN0IG9mIHZhbHVlcyBmb3IgdGhhdCB0YWcuIE5vdGUKICAgIHRoYXQgYWxsIHRhZyB2YWx1ZXMgZm9yIGEgc3BlY2lmaWMgdGFnIG9mIGEgc3BlY2lmaWMgdG9waWMgYXJlIHVuaXF1ZS4KICAgICIiIgoKICAgIFZBTElEX1RBR1MgPSBbJ2NhdGVnb3J5JywgJ2Rlc2NyaXB0aW9uJywgJ3RpdGxlJywgJ3JlbGF0ZWQgdG9waWMnLAogICAgICAgICAgICAgICAgICAncmVsYXRlZCBjb21tYW5kJ10KCiAgICAjIFRoZSBkZWZhdWx0IGRpcmVjdG9yeSB0byBsb29rIGZvciB0b3BpY3MuCiAgICBUT1BJQ19ESVIgPSBvcy5wYXRoLmpvaW4oCiAgICAgICAgb3MucGF0aC5kaXJuYW1lKAogICAgICAgICAgICBvcy5wYXRoLmFic3BhdGgoX19maWxlX18pKSwgJ3RvcGljcycpCgogICAgIyBUaGUgZGVmYXVsdCBKU09OIGluZGV4IHRvIGxvYWQuCiAgICBKU09OX0lOREVYID0gb3MucGF0aC5qb2luKFRPUElDX0RJUiwgJ3RvcGljLXRhZ3MuanNvbicpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRhZ19kaWN0aW9uYXJ5PU5vbmUsIGluZGV4X2ZpbGU9SlNPTl9JTkRFWCwKICAgICAgICAgICAgICAgICB0b3BpY19kaXI9VE9QSUNfRElSKToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gaW5kZXhfZmlsZTogVGhlIHBhdGggdG8gYSBzcGVjaWZpYyBKU09OIGluZGV4IHRvIGxvYWQuCiAgICAgICAgICAgIElmIG5vdGhpbmcgaXMgc3BlY2lmaWVkIGl0IHdpbGwgZGVmYXVsdCB0byB0aGUgZGVmYXVsdCBKU09OCiAgICAgICAgICAgIGluZGV4IGF0IGBgSlNPTl9JTkRFWGBgLgoKICAgICAgICA6cGFyYW0gdG9waWNfZGlyOiBUaGUgcGF0aCB0byB0aGUgZGlyZWN0b3J5IHdoZXJlIHRvIHJldHJpZXZlCiAgICAgICAgICAgIHRoZSB0b3BpYyBzb3VyY2UgZmlsZXMuIE5vdGUgdGhhdCBpZiB5b3Ugc3RvcmUgeW91ciBpbmRleAogICAgICAgICAgICBpbiB0aGlzIGRpcmVjdG9yeSwgeW91IG11c3Qgc3VwcGx5IHRoZSBmdWxsIHBhdGggdG8gdGhlIGpzb24KICAgICAgICAgICAgaW5kZXggdG8gdGhlIGBgZmlsZV9pbmRleGBgIGFyZ3VtZW50IGFzIGl0IG1heSBub3QgYmUgaWdub3JlZCB3aGVuCiAgICAgICAgICAgIGxpc3RpbmcgdG9waWMgc291cmNlIGZpbGVzLiBJZiBub3RoaW5nIGlzIHNwZWNpZmllZCBpdCB3aWxsCiAgICAgICAgICAgIGRlZmF1bHQgdG8gdGhlIGRlZmF1bHQgZGlyZWN0b3J5IGF0IGBgVE9QSUNfRElSYGAuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5fdGFnX2RpY3Rpb25hcnkgPSB0YWdfZGljdGlvbmFyeQogICAgICAgIGlmIHNlbGYuX3RhZ19kaWN0aW9uYXJ5IGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuX3RhZ19kaWN0aW9uYXJ5ID0ge30KCiAgICAgICAgc2VsZi5faW5kZXhfZmlsZSA9IGluZGV4X2ZpbGUKICAgICAgICBzZWxmLl90b3BpY19kaXIgPSB0b3BpY19kaXIKCiAgICBAcHJvcGVydHkKICAgIGRlZiBpbmRleF9maWxlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9pbmRleF9maWxlCgogICAgQGluZGV4X2ZpbGUuc2V0dGVyCiAgICBkZWYgaW5kZXhfZmlsZShzZWxmLCB2YWx1ZSk6CiAgICAgICAgc2VsZi5faW5kZXhfZmlsZSA9IHZhbHVlCgogICAgQHByb3BlcnR5CiAgICBkZWYgdG9waWNfZGlyKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl90b3BpY19kaXIKCiAgICBAdG9waWNfZGlyLnNldHRlcgogICAgZGVmIHRvcGljX2RpcihzZWxmLCB2YWx1ZSk6CiAgICAgICAgc2VsZi5fdG9waWNfZGlyID0gdmFsdWUKCiAgICBAcHJvcGVydHkKICAgIGRlZiB2YWxpZF90YWdzKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLlZBTElEX1RBR1MKCiAgICBkZWYgbG9hZF9qc29uX2luZGV4KHNlbGYpOgogICAgICAgICIiIkxvYWRzIGEgSlNPTiBmaWxlIGludG8gdGhlIHRhZyBkaWN0aW9uYXJ5LiIiIgogICAgICAgIHdpdGggb3BlbihzZWxmLmluZGV4X2ZpbGUsICdyJykgYXMgZjoKICAgICAgICAgICAgc2VsZi5fdGFnX2RpY3Rpb25hcnkgPSBqc29uLmxvYWQoZikKCiAgICBkZWYgc2F2ZV90b19qc29uX2luZGV4KHNlbGYpOgogICAgICAgICIiIldyaXRlcyB0aGUgbG9hZGVkIGRhdGEgYmFjayBvdXQgdG8gdGhlIEpTT04gaW5kZXguIiIiCiAgICAgICAgd2l0aCBvcGVuKHNlbGYuaW5kZXhfZmlsZSwgJ3cnKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKGpzb24uZHVtcHMoc2VsZi5fdGFnX2RpY3Rpb25hcnksIGluZGVudD00LCBzb3J0X2tleXM9VHJ1ZSkpCgogICAgZGVmIGdldF9hbGxfdG9waWNfbmFtZXMoc2VsZik6CiAgICAgICAgIiIiUmV0cmlldmVzIGFsbCBvZiB0aGUgdG9waWMgbmFtZXMgb2YgdGhlIGxvYWRlZCBKU09OIGluZGV4IiIiCiAgICAgICAgcmV0dXJuIGxpc3Qoc2VsZi5fdGFnX2RpY3Rpb25hcnkpCgogICAgZGVmIGdldF9hbGxfdG9waWNfc3JjX2ZpbGVzKHNlbGYpOgogICAgICAgICIiIlJldHJpZXZlcyB0aGUgZmlsZSBwYXRocyBvZiBhbGwgdGhlIHRvcGljcyBpbiBkaXJlY3RvcnkiIiIKICAgICAgICB0b3BpY19mdWxsX3BhdGhzID0gW10KICAgICAgICB0b3BpY19uYW1lcyA9IG9zLmxpc3RkaXIoc2VsZi50b3BpY19kaXIpCiAgICAgICAgZm9yIHRvcGljX25hbWUgaW4gdG9waWNfbmFtZXM6CiAgICAgICAgICAgICMgRG8gbm90IHRyeSB0byBsb2FkIGhpZGRlbiBmaWxlcy4KICAgICAgICAgICAgaWYgbm90IHRvcGljX25hbWUuc3RhcnRzd2l0aCgnLicpOgogICAgICAgICAgICAgICAgdG9waWNfZnVsbF9wYXRoID0gb3MucGF0aC5qb2luKHNlbGYudG9waWNfZGlyLCB0b3BpY19uYW1lKQogICAgICAgICAgICAgICAgIyBJZ25vcmUgdGhlIEpTT04gSW5kZXggYXMgaXQgaXMgc3RvcmVkIHdpdGggdG9waWMgZmlsZXMuCiAgICAgICAgICAgICAgICBpZiB0b3BpY19mdWxsX3BhdGggIT0gc2VsZi5pbmRleF9maWxlOgogICAgICAgICAgICAgICAgICAgIHRvcGljX2Z1bGxfcGF0aHMuYXBwZW5kKHRvcGljX2Z1bGxfcGF0aCkKICAgICAgICByZXR1cm4gdG9waWNfZnVsbF9wYXRocwoKICAgIGRlZiBzY2FuKHNlbGYsIHRvcGljX2ZpbGVzKToKICAgICAgICAiIiJTY2FuIGluIHRoZSB0YWdzIG9mIGEgbGlzdCBvZiB0b3BpY3MgaW50byBtZW1vcnkuCgogICAgICAgIE5vdGUgdGhhdCBpZiB0aGVyZSBhcmUgZXhpc3RpbmcgdmFsdWVzIGluIGFuIGVudHJ5IGluIHRoZSBkYXRhYmFzZQogICAgICAgIG9mIHRhZ3MsIHRoZXkgd2lsbCBub3QgYmUgb3ZlcndyaXR0ZW4uIEFueSBuZXcgdmFsdWVzIHdpbGwgYmUKICAgICAgICBhcHBlbmRlZCB0byBvcmlnaW5hbCB2YWx1ZXMuCgogICAgICAgIDpwYXJhbSB0b3BpY19maWxlczogQSBsaXN0IG9mIHBhdGhzIHRvIHRvcGljcyB0byBzY2FuIGludG8gbWVtb3J5LgogICAgICAgICIiIgogICAgICAgIGZvciB0b3BpY19maWxlIGluIHRvcGljX2ZpbGVzOgogICAgICAgICAgICB3aXRoIG9wZW4odG9waWNfZmlsZSwgJ3InKSBhcyBmOgogICAgICAgICAgICAgICAgIyBQYXJzZSBvdXQgdGhlIG5hbWUgb2YgdGhlIHRvcGljCiAgICAgICAgICAgICAgICB0b3BpY19uYW1lID0gc2VsZi5fZmluZF90b3BpY19uYW1lKHRvcGljX2ZpbGUpCiAgICAgICAgICAgICAgICAjIEFkZCB0aGUgdG9waWMgdG8gdGhlIGRpY3Rpb25hcnkgaWYgaXQgZG9lcyBub3QgZXhpc3QKICAgICAgICAgICAgICAgIHNlbGYuX2FkZF90b3BpY19uYW1lX3RvX2RpY3QodG9waWNfbmFtZSkKICAgICAgICAgICAgICAgIHRvcGljX2NvbnRlbnQgPSBmLnJlYWQoKQogICAgICAgICAgICAgICAgIyBSZWNvcmQgdGhlIHRhZ3MgYW5kIHRoZSB2YWx1ZXMKICAgICAgICAgICAgICAgIHNlbGYuX2FkZF90YWdfYW5kX3ZhbHVlc19mcm9tX2NvbnRlbnQoCiAgICAgICAgICAgICAgICAgICAgdG9waWNfbmFtZSwgdG9waWNfY29udGVudCkKCiAgICBkZWYgX2ZpbmRfdG9waWNfbmFtZShzZWxmLCB0b3BpY19zcmNfZmlsZSk6CiAgICAgICAgIyBHZXQgdGhlIG5hbWUgb2YgZWFjaCBvZiB0aGVzZSBmaWxlcwogICAgICAgIHRvcGljX25hbWVfd2l0aF9leHQgPSBvcy5wYXRoLmJhc2VuYW1lKHRvcGljX3NyY19maWxlKQogICAgICAgICMgU3RyaXAgb2YgdGhlIC5yc3QgZXh0ZW5zaW9uIGZyb20gdGhlIGZpbGVzCiAgICAgICAgcmV0dXJuIHRvcGljX25hbWVfd2l0aF9leHRbOi00XQoKICAgIGRlZiBfYWRkX3RhZ19hbmRfdmFsdWVzX2Zyb21fY29udGVudChzZWxmLCB0b3BpY19uYW1lLCBjb250ZW50KToKICAgICAgICAjIFJldHJpZXZlcyB0YWdzIGFuZCB2YWx1ZXMgYW5kIGFkZHMgZnJvbSBjb250ZW50IG9mIHRvcGljIGZpbGUKICAgICAgICAjIHRvIHRoZSBkaWN0aW9uYXJ5LgogICAgICAgIGRvY3RyZWUgPSBkb2N1dGlscy5jb3JlLnB1Ymxpc2hfZG9jdHJlZShjb250ZW50KS5hc2RvbSgpCiAgICAgICAgZmllbGRzID0gZG9jdHJlZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZmllbGQnKQogICAgICAgIGZvciBmaWVsZCBpbiBmaWVsZHM6CiAgICAgICAgICAgIGZpZWxkX25hbWUgPSBmaWVsZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZmllbGRfbmFtZScpWzBdCiAgICAgICAgICAgIGZpZWxkX2JvZHkgPSBmaWVsZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZmllbGRfYm9keScpWzBdCiAgICAgICAgICAgICMgR2V0IHRoZSB0YWcuCiAgICAgICAgICAgIHRhZyA9IGZpZWxkX25hbWUuZmlyc3RDaGlsZC5ub2RlVmFsdWUKICAgICAgICAgICAgaWYgdGFnIGluIHNlbGYuVkFMSURfVEFHUzoKICAgICAgICAgICAgICAgICMgR2V0IHRoZSB2YWx1ZSBvZiB0aGUgdGFnLgogICAgICAgICAgICAgICAgdmFsdWVzID0gZmllbGRfYm9keS5jaGlsZE5vZGVzWzBdLmZpcnN0Q2hpbGQubm9kZVZhbHVlCiAgICAgICAgICAgICAgICAjIFNlcGFyYXRlIHZhbHVlcyBpbnRvIGEgbGlzdCBieSBzcGxpdHRpbmcgYXQgY29tbWFzCiAgICAgICAgICAgICAgICB0YWdfdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJykKICAgICAgICAgICAgICAgICMgU3RyaXAgdGhlIHdoaXRlIHNwYWNlIGFyb3VuZCBlYWNoIG9mIHRoZXNlIHZhbHVlcy4KICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbih0YWdfdmFsdWVzKSk6CiAgICAgICAgICAgICAgICAgICAgdGFnX3ZhbHVlc1tpXSA9IHRhZ192YWx1ZXNbaV0uc3RyaXAoKQogICAgICAgICAgICAgICAgc2VsZi5fYWRkX3RhZ190b19kaWN0KHRvcGljX25hbWUsIHRhZywgdGFnX3ZhbHVlcykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgIlRhZyAlcyBmb3VuZCB1bmRlciB0b3BpYyAlcyBpcyBub3Qgc3VwcG9ydGVkLiIKICAgICAgICAgICAgICAgICAgICAlICh0YWcsIHRvcGljX25hbWUpCiAgICAgICAgICAgICAgICApCgogICAgZGVmIF9hZGRfdG9waWNfbmFtZV90b19kaWN0KHNlbGYsIHRvcGljX25hbWUpOgogICAgICAgICMgVGhpcyBtZXRob2QgYWRkcyBhIHRvcGljIG5hbWUgdG8gdGhlIGRpY3Rpb25hcnkgaWYgaXQgZG9lcyBub3QKICAgICAgICAjIGFscmVhZHkgZXhpc3QKCiAgICAgICAgIyBDaGVjayBpZiB0aGUgdG9waWMgaXMgaW4gdGhlIHRvcGljIHRhZyBkaWN0aW9uYXJ5CiAgICAgICAgaWYgc2VsZi5fdGFnX2RpY3Rpb25hcnkuZ2V0KHRvcGljX25hbWUsIE5vbmUpIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuX3RhZ19kaWN0aW9uYXJ5W3RvcGljX25hbWVdID0ge30KCiAgICBkZWYgX2FkZF90YWdfdG9fZGljdChzZWxmLCB0b3BpY19uYW1lLCB0YWcsIHZhbHVlcyk6CiAgICAgICAgIyBUaGlzIG1ldGhvZCBhZGRzIGEgdGFnIHRvIHRoZSBkaWN0aW9uYXJ5IGdpdmVuIGl0cyB0YWcgYW5kIHZhbHVlCiAgICAgICAgIyBJZiB0aGVyZSBhcmUgZXhpc3RpbmcgdmFsdWVzIGFzc29jaWF0ZWQgdG8gdGhlIHRhZyBpdCB3aWxsIGFkZAogICAgICAgICMgb25seSB2YWx1ZXMgdGhhdCBwcmV2aW91c2x5IGRpZCBub3QgZXhpc3QgaW4gdGhlIGxpc3QuCgogICAgICAgICMgQWRkIHRvcGljIHRvIHRoZSB0b3BpYyB0YWcgZGljdGlvbmFyeSBpZiBuZWVkZWQuCiAgICAgICAgc2VsZi5fYWRkX3RvcGljX25hbWVfdG9fZGljdCh0b3BpY19uYW1lKQogICAgICAgICMgR2V0IGFsbCBvZiBhIHRvcGljcyB0YWdzCiAgICAgICAgdG9waWNfdGFncyA9IHNlbGYuX3RhZ19kaWN0aW9uYXJ5W3RvcGljX25hbWVdCiAgICAgICAgc2VsZi5fYWRkX2tleV92YWx1ZXModG9waWNfdGFncywgdGFnLCB2YWx1ZXMpCgogICAgZGVmIF9hZGRfa2V5X3ZhbHVlcyhzZWxmLCBkaWN0aW9uYXJ5LCBrZXksIHZhbHVlcyk6CiAgICAgICAgIyBUaGlzIG1ldGhvZCBhZGRzIGEgdmFsdWUgdG8gYSBkaWN0aW9uYXJ5IGdpdmVuIGEga2V5LgogICAgICAgICMgSWYgdGhlcmUgYXJlIGV4aXN0aW5nIHZhbHVlcyBhc3NvY2lhdGVkIHRvIHRoZSBrZXkgaXQgd2lsbCBhZGQKICAgICAgICAjIG9ubHkgdmFsdWVzIHRoYXQgcHJldmlvdXNseSBkaWQgbm90IGV4aXN0IGluIHRoZSBsaXN0LiBBbGwgdmFsdWVzCiAgICAgICAgIyBpbiB0aGUgZGljdGlvbmFyeSBzaG91bGQgYmUgbGlzdHMKCiAgICAgICAgaWYgZGljdGlvbmFyeS5nZXQoa2V5LCBOb25lKSBpcyBOb25lOgogICAgICAgICAgICBkaWN0aW9uYXJ5W2tleV0gPSBbXQogICAgICAgIGZvciB2YWx1ZSBpbiB2YWx1ZXM6CiAgICAgICAgICAgIGlmIHZhbHVlIG5vdCBpbiBkaWN0aW9uYXJ5W2tleV06CiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W2tleV0uYXBwZW5kKHZhbHVlKQoKICAgIGRlZiBxdWVyeShzZWxmLCB0YWcsIHZhbHVlcz1Ob25lKToKICAgICAgICAiIiJHcm91cHMgdG9waWNzIGJ5IGEgc3BlY2lmaWMgdGFnIGFuZC9vciB0YWcgdmFsdWUuCgogICAgICAgIDpwYXJhbSB0YWc6IFRoZSBuYW1lIG9mIHRoZSB0YWcgdG8gcXVlcnkgZm9yLgogICAgICAgIDpwYXJhbSB2YWx1ZXM6IEEgbGlzdCBvZiB0YWcgdmFsdWVzIHRvIG9ubHkgaW5jbHVkZSBpbiBxdWVyeS4KICAgICAgICAgICAgSWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQsIGFsbCBwb3NzaWJsZSB0YWcgdmFsdWVzIHdpbGwgYmUgcmV0dXJuZWQKCiAgICAgICAgOnJ0eXBlOiBkaWN0aW9uYXJ5CiAgICAgICAgOnJldHVybnM6IEEgZGljdGlvbmFyeSB3aG9zZSBrZXlzIGFyZSBhbGwgcG9zc2libGUgdGFnIHZhbHVlcyBhbmQgdGhlCiAgICAgICAgICAgIGtleXMnIHZhbHVlcyBhcmUgYWxsIG9mIHRoZSB0b3BpYyBuYW1lcyB0aGF0IGhhZCB0aGF0IHRhZyB2YWx1ZQogICAgICAgICAgICBpbiBpdHMgc291cmNlIGZpbGUuIEZvciBleGFtcGxlLCBpZiBgYHRvcGljLW5hbWUtMWBgIGhhZCB0aGUgdGFnCiAgICAgICAgICAgIGBgOmNhdGVnb3J5OiBmb28sIGJhcmBgIGFuZCBgYHRvcGljLW5hbWUtMmBgIGhhZCB0aGUgdGFnCiAgICAgICAgICAgIGBgOmNhdGVnb3J5OiBmb29gYCBhbmQgd2UgcXVlcmllZCBiYXNlZCBvbiBgYDpjYXRlZ29yeTpgYCwKICAgICAgICAgICAgdGhlIHJldHVybmVkIGRpY3Rpb25hcnkgd291bGQgYmU6CgogICAgICAgICAgICB7CiAgICAgICAgICAgICAnZm9vJzogWyd0b3BpYy1uYW1lLTEnLCAndG9waWMtbmFtZS0yJ10sCiAgICAgICAgICAgICAnYmFyJzogWyd0b3BpYy1uYW1lLTEnXQogICAgICAgICAgICB9CgogICAgICAgICIiIgogICAgICAgIHF1ZXJ5X2RpY3QgPSB7fQogICAgICAgIGZvciB0b3BpY19uYW1lIGluIHNlbGYuX3RhZ19kaWN0aW9uYXJ5LmtleXMoKToKICAgICAgICAgICAgIyBHZXQgdGhlIHRhZyB2YWx1ZXMgZm9yIGEgc3BlY2lmaWVkIHRhZyBvZiB0aGUgdG9waWMKICAgICAgICAgICAgaWYgc2VsZi5fdGFnX2RpY3Rpb25hcnlbdG9waWNfbmFtZV0uZ2V0KHRhZywgTm9uZSkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICB0YWdfdmFsdWVzID0gc2VsZi5fdGFnX2RpY3Rpb25hcnlbdG9waWNfbmFtZV1bdGFnXQogICAgICAgICAgICAgICAgZm9yIHRhZ192YWx1ZSBpbiB0YWdfdmFsdWVzOgogICAgICAgICAgICAgICAgICAgICMgQWRkIHRoZSB2YWx1ZXMgdG8gZGljdGlvbmFyeSB0byBiZSByZXR1cm5lZCBpZgogICAgICAgICAgICAgICAgICAgICMgbm8gdmFsdWUgY29uc3RyYWludHMgYXJlIHByb3ZpZGVkIG9yIGlmIHRoZSB0YWcgdmFsdWUKICAgICAgICAgICAgICAgICAgICAjIGZhbGxzIGluIHRoZSBhbGxvd2VkIHRhZyB2YWx1ZXMuCiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWVzIGlzIE5vbmUgb3IgdGFnX3ZhbHVlIGluIHZhbHVlczoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWRkX2tleV92YWx1ZXMocXVlcnlfZGljdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXRhZ192YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzPVt0b3BpY19uYW1lXSkKICAgICAgICByZXR1cm4gcXVlcnlfZGljdAoKICAgIGRlZiBnZXRfdGFnX3ZhbHVlKHNlbGYsIHRvcGljX25hbWUsIHRhZywgZGVmYXVsdF92YWx1ZT1Ob25lKToKICAgICAgICAiIiJHZXQgYSB2YWx1ZSBvZiBhIHRhZyBmb3IgYSB0b3BpYwoKICAgICAgICA6cGFyYW0gdG9waWNfbmFtZTogVGhlIG5hbWUgb2YgdGhlIHRvcGljCiAgICAgICAgOnBhcmFtIHRhZzogVGhlIG5hbWUgb2YgdGhlIHRhZyB0byByZXRyaWV2ZQogICAgICAgIDpwYXJhbSBkZWZhdWx0X3ZhbHVlOiBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSB0b3BpYyBhbmQvb3IgdGFnCiAgICAgICAgICAgIGRvZXMgbm90IGV4aXN0LgogICAgICAgICIiIgogICAgICAgIGlmIHRvcGljX25hbWUgaW4gc2VsZi5fdGFnX2RpY3Rpb25hcnk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl90YWdfZGljdGlvbmFyeVt0b3BpY19uYW1lXS5nZXQodGFnLCBkZWZhdWx0X3ZhbHVlKQogICAgICAgIHJldHVybiBkZWZhdWx0X3ZhbHVlCgogICAgZGVmIGdldF90YWdfc2luZ2xlX3ZhbHVlKHNlbGYsIHRvcGljX25hbWUsIHRhZyk6CiAgICAgICAgIiIiR2V0IHRoZSB2YWx1ZSBvZiBhIHRhZyBmb3IgYSB0b3BpYyAoaS5lLiBub3Qgd3JhcHBlZCBpbiBhIGxpc3QpCgogICAgICAgIDpwYXJhbSB0b3BpY19uYW1lOiBUaGUgbmFtZSBvZiB0aGUgdG9waWMKICAgICAgICA6cGFyYW0gdGFnOiBUaGUgbmFtZSBvZiB0aGUgdGFnIHRvIHJldHJpZXZlCiAgICAgICAgOnJhaXNlcyBWYWx1ZUVycm9yOiBSYWlzZWQgaWYgdGhlcmUgaXMgbm90IGV4YWN0bHkgb25lIHZhbHVlCiAgICAgICAgICAgIGluIHRoZSBsaXN0IHZhbHVlLgogICAgICAgICIiIgogICAgICAgIHZhbHVlID0gc2VsZi5nZXRfdGFnX3ZhbHVlKHRvcGljX25hbWUsIHRhZykKICAgICAgICBpZiB2YWx1ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgbGVuKHZhbHVlKSAhPSAxOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgICAgICAnVGFnICVzIGZvciB0b3BpYyAlcyBoYXMgdmFsdWUgJXMuIEV4cGVjdGVkIGEgc2luZ2xlICcKICAgICAgICAgICAgICAgICAgICAnZWxlbWVudCBpbiBsaXN0LicgJSAodGFnLCB0b3BpY19uYW1lLCB2YWx1ZSkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVswXQogICAgICAgIHJldHVybiB2YWx1ZQo=
