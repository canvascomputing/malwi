statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/subresource.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.
      from botocore import xform_name
      from botocore.utils import get_service_module_name

      from boto3.docs.base import BaseDocumenter
      from boto3.docs.utils import get_identifier_args_for_signature
      from boto3.docs.utils import get_identifier_values_for_example
      from boto3.docs.utils import get_identifier_description
      from boto3.docs.utils import add_resource_type_overview


      class SubResourceDocumenter(BaseDocumenter):
          def document_sub_resources(self, section):
              add_resource_type_overview(
                  section=section,
                  resource_type='Sub-resources',
                  description=(
                      'Sub-resources are methods that create a new instance of a'
                      ' child resource. This resource\'s identifiers get passed'
                      ' along to the child.'),
                  intro_link='subresources_intro')
              sub_resources = sorted(
                  self._resource.meta.resource_model.subresources,
                  key=lambda sub_resource: sub_resource.name
              )
              sub_resources_list = []
              self.member_map['sub-resources'] = sub_resources_list
              for sub_resource in sub_resources:
                  sub_resource_section = section.add_new_section(sub_resource.name)
                  sub_resources_list.append(sub_resource.name)
                  document_sub_resource(
                      section=sub_resource_section,
                      resource_name=self._resource_name,
                      sub_resource_model=sub_resource,
                      service_model=self._service_model
                  )
    tokens: resume load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top load_const INTEGER load_const import_name botocore.utils import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name boto3.docs.base import_from BaseDocumenter store_name BaseDocumenter pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name BaseDocumenter call store_name STRING_LEN_S_ENT_HIGH nop load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: 9036834485b092f8a1a10ded2f7ea6d1922878a88d3ed093af2a7e453b0d8324
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/subresource.py: IyBDb3B5cmlnaHQgMjAxNSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuIFlvdQojIG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YKIyB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0CiMKIyBodHRwczovL2F3cy5hbWF6b24uY29tL2FwYWNoZTIuMC8KIwojIG9yIGluIHRoZSAibGljZW5zZSIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMKIyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgojIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYwojIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCmZyb20gYm90b2NvcmUgaW1wb3J0IHhmb3JtX25hbWUKZnJvbSBib3RvY29yZS51dGlscyBpbXBvcnQgZ2V0X3NlcnZpY2VfbW9kdWxlX25hbWUKCmZyb20gYm90bzMuZG9jcy5iYXNlIGltcG9ydCBCYXNlRG9jdW1lbnRlcgpmcm9tIGJvdG8zLmRvY3MudXRpbHMgaW1wb3J0IGdldF9pZGVudGlmaWVyX2FyZ3NfZm9yX3NpZ25hdHVyZQpmcm9tIGJvdG8zLmRvY3MudXRpbHMgaW1wb3J0IGdldF9pZGVudGlmaWVyX3ZhbHVlc19mb3JfZXhhbXBsZQpmcm9tIGJvdG8zLmRvY3MudXRpbHMgaW1wb3J0IGdldF9pZGVudGlmaWVyX2Rlc2NyaXB0aW9uCmZyb20gYm90bzMuZG9jcy51dGlscyBpbXBvcnQgYWRkX3Jlc291cmNlX3R5cGVfb3ZlcnZpZXcKCgpjbGFzcyBTdWJSZXNvdXJjZURvY3VtZW50ZXIoQmFzZURvY3VtZW50ZXIpOgogICAgZGVmIGRvY3VtZW50X3N1Yl9yZXNvdXJjZXMoc2VsZiwgc2VjdGlvbik6CiAgICAgICAgYWRkX3Jlc291cmNlX3R5cGVfb3ZlcnZpZXcoCiAgICAgICAgICAgIHNlY3Rpb249c2VjdGlvbiwKICAgICAgICAgICAgcmVzb3VyY2VfdHlwZT0nU3ViLXJlc291cmNlcycsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSgKICAgICAgICAgICAgICAgICdTdWItcmVzb3VyY2VzIGFyZSBtZXRob2RzIHRoYXQgY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEnCiAgICAgICAgICAgICAgICAnIGNoaWxkIHJlc291cmNlLiBUaGlzIHJlc291cmNlXCdzIGlkZW50aWZpZXJzIGdldCBwYXNzZWQnCiAgICAgICAgICAgICAgICAnIGFsb25nIHRvIHRoZSBjaGlsZC4nKSwKICAgICAgICAgICAgaW50cm9fbGluaz0nc3VicmVzb3VyY2VzX2ludHJvJykKICAgICAgICBzdWJfcmVzb3VyY2VzID0gc29ydGVkKAogICAgICAgICAgICBzZWxmLl9yZXNvdXJjZS5tZXRhLnJlc291cmNlX21vZGVsLnN1YnJlc291cmNlcywKICAgICAgICAgICAga2V5PWxhbWJkYSBzdWJfcmVzb3VyY2U6IHN1Yl9yZXNvdXJjZS5uYW1lCiAgICAgICAgKQogICAgICAgIHN1Yl9yZXNvdXJjZXNfbGlzdCA9IFtdCiAgICAgICAgc2VsZi5tZW1iZXJfbWFwWydzdWItcmVzb3VyY2VzJ10gPSBzdWJfcmVzb3VyY2VzX2xpc3QKICAgICAgICBmb3Igc3ViX3Jlc291cmNlIGluIHN1Yl9yZXNvdXJjZXM6CiAgICAgICAgICAgIHN1Yl9yZXNvdXJjZV9zZWN0aW9uID0gc2VjdGlvbi5hZGRfbmV3X3NlY3Rpb24oc3ViX3Jlc291cmNlLm5hbWUpCiAgICAgICAgICAgIHN1Yl9yZXNvdXJjZXNfbGlzdC5hcHBlbmQoc3ViX3Jlc291cmNlLm5hbWUpCiAgICAgICAgICAgIGRvY3VtZW50X3N1Yl9yZXNvdXJjZSgKICAgICAgICAgICAgICAgIHNlY3Rpb249c3ViX3Jlc291cmNlX3NlY3Rpb24sCiAgICAgICAgICAgICAgICByZXNvdXJjZV9uYW1lPXNlbGYuX3Jlc291cmNlX25hbWUsCiAgICAgICAgICAgICAgICBzdWJfcmVzb3VyY2VfbW9kZWw9c3ViX3Jlc291cmNlLAogICAgICAgICAgICAgICAgc2VydmljZV9tb2RlbD1zZWxmLl9zZXJ2aWNlX21vZGVsCiAgICAgICAgICAgICkKCgpkZWYgZG9jdW1lbnRfc3ViX3Jlc291cmNlKHNlY3Rpb24sIHJlc291cmNlX25hbWUsIHN1Yl9yZXNvdXJjZV9tb2RlbCwKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlX21vZGVsLCBpbmNsdWRlX3NpZ25hdHVyZT1UcnVlKToKICAgICIiIkRvY3VtZW50cyBhIHJlc291cmNlIGFjdGlvbgoKICAgIDpwYXJhbSBzZWN0aW9uOiBUaGUgc2VjdGlvbiB0byB3cml0ZSB0bwoKICAgIDpwYXJhbSByZXNvdXJjZV9uYW1lOiBUaGUgbmFtZSBvZiB0aGUgcmVzb3VyY2UKCiAgICA6cGFyYW0gc3ViX3Jlc291cmNlX21vZGVsOiBUaGUgbW9kZWwgb2YgdGhlIHN1YnJlc291cmNlCgogICAgOnBhcmFtIHNlcnZpY2VfbW9kZWw6IFRoZSBtb2RlbCBvZiB0aGUgc2VydmljZQoKICAgIDpwYXJhbSBpbmNsdWRlX3NpZ25hdHVyZTogV2hldGhlciBvciBub3QgdG8gaW5jbHVkZSB0aGUgc2lnbmF0dXJlLgogICAgICAgIEl0IGlzIHVzZWZ1bCBmb3IgZ2VuZXJhdGluZyBkb2NzdHJpbmdzLgogICAgIiIiCiAgICBpZGVudGlmaWVyc19uZWVkZWQgPSBbXQogICAgZm9yIGlkZW50aWZpZXIgaW4gc3ViX3Jlc291cmNlX21vZGVsLnJlc291cmNlLmlkZW50aWZpZXJzOgogICAgICAgIGlmIGlkZW50aWZpZXIuc291cmNlID09ICdpbnB1dCc6CiAgICAgICAgICAgIGlkZW50aWZpZXJzX25lZWRlZC5hcHBlbmQoeGZvcm1fbmFtZShpZGVudGlmaWVyLnRhcmdldCkpCgogICAgaWYgaW5jbHVkZV9zaWduYXR1cmU6CiAgICAgICAgc2lnbmF0dXJlX2FyZ3MgPSBnZXRfaWRlbnRpZmllcl9hcmdzX2Zvcl9zaWduYXR1cmUoaWRlbnRpZmllcnNfbmVlZGVkKQogICAgICAgIHNlY3Rpb24uc3R5bGUuc3RhcnRfc3BoaW54X3B5X21ldGhvZCgKICAgICAgICAgICAgc3ViX3Jlc291cmNlX21vZGVsLm5hbWUsIHNpZ25hdHVyZV9hcmdzKQoKICAgIG1ldGhvZF9pbnRyb19zZWN0aW9uID0gc2VjdGlvbi5hZGRfbmV3X3NlY3Rpb24oCiAgICAgICAgJ21ldGhvZC1pbnRybycpCiAgICBkZXNjcmlwdGlvbiA9ICdDcmVhdGVzIGEgJXMgcmVzb3VyY2UuJyAlIHN1Yl9yZXNvdXJjZV9tb2RlbC5yZXNvdXJjZS50eXBlCiAgICBtZXRob2RfaW50cm9fc2VjdGlvbi5pbmNsdWRlX2RvY19zdHJpbmcoZGVzY3JpcHRpb24pCiAgICBleGFtcGxlX3NlY3Rpb24gPSBzZWN0aW9uLmFkZF9uZXdfc2VjdGlvbignZXhhbXBsZScpCiAgICBleGFtcGxlX3ZhbHVlcyA9IGdldF9pZGVudGlmaWVyX3ZhbHVlc19mb3JfZXhhbXBsZShpZGVudGlmaWVyc19uZWVkZWQpCiAgICBleGFtcGxlX3Jlc291cmNlX25hbWUgPSB4Zm9ybV9uYW1lKHJlc291cmNlX25hbWUpCiAgICBpZiBzZXJ2aWNlX21vZGVsLnNlcnZpY2VfbmFtZSA9PSByZXNvdXJjZV9uYW1lOgogICAgICAgIGV4YW1wbGVfcmVzb3VyY2VfbmFtZSA9IHJlc291cmNlX25hbWUKICAgIGV4YW1wbGUgPSAnJXMgPSAlcy4lcyglcyknICUgKAogICAgICAgIHhmb3JtX25hbWUoc3ViX3Jlc291cmNlX21vZGVsLnJlc291cmNlLnR5cGUpLAogICAgICAgIGV4YW1wbGVfcmVzb3VyY2VfbmFtZSwKICAgICAgICBzdWJfcmVzb3VyY2VfbW9kZWwubmFtZSwgZXhhbXBsZV92YWx1ZXMKICAgICkKICAgIGV4YW1wbGVfc2VjdGlvbi5zdHlsZS5zdGFydF9jb2RlYmxvY2soKQogICAgZXhhbXBsZV9zZWN0aW9uLndyaXRlKGV4YW1wbGUpCiAgICBleGFtcGxlX3NlY3Rpb24uc3R5bGUuZW5kX2NvZGVibG9jaygpCgogICAgcGFyYW1fc2VjdGlvbiA9IHNlY3Rpb24uYWRkX25ld19zZWN0aW9uKCdwYXJhbXMnKQogICAgZm9yIGlkZW50aWZpZXIgaW4gaWRlbnRpZmllcnNfbmVlZGVkOgogICAgICAgIGRlc2NyaXB0aW9uID0gZ2V0X2lkZW50aWZpZXJfZGVzY3JpcHRpb24oCiAgICAgICAgICAgIHN1Yl9yZXNvdXJjZV9tb2RlbC5uYW1lLCBpZGVudGlmaWVyKQogICAgICAgIHBhcmFtX3NlY3Rpb24ud3JpdGUoJzp0eXBlICVzOiBzdHJpbmcnICUgaWRlbnRpZmllcikKICAgICAgICBwYXJhbV9zZWN0aW9uLnN0eWxlLm5ld19saW5lKCkKICAgICAgICBwYXJhbV9zZWN0aW9uLndyaXRlKCc6cGFyYW0gJXM6ICVzJyAlICgKICAgICAgICAgICAgaWRlbnRpZmllciwgZGVzY3JpcHRpb24pKQogICAgICAgIHBhcmFtX3NlY3Rpb24uc3R5bGUubmV3X2xpbmUoKQoKICAgIHJldHVybl9zZWN0aW9uID0gc2VjdGlvbi5hZGRfbmV3X3NlY3Rpb24oJ3JldHVybicpCiAgICByZXR1cm5fc2VjdGlvbi5zdHlsZS5uZXdfbGluZSgpCiAgICByZXR1cm5fc2VjdGlvbi53cml0ZSgKICAgICAgICAnOnJ0eXBlOiA6cHk6Y2xhc3M6YCVzLiVzYCcgJSAoCiAgICAgICAgICAgIGdldF9zZXJ2aWNlX21vZHVsZV9uYW1lKHNlcnZpY2VfbW9kZWwpLAogICAgICAgICAgICBzdWJfcmVzb3VyY2VfbW9kZWwucmVzb3VyY2UudHlwZSkpCiAgICByZXR1cm5fc2VjdGlvbi5zdHlsZS5uZXdfbGluZSgpCiAgICByZXR1cm5fc2VjdGlvbi53cml0ZSgKICAgICAgICAnOnJldHVybnM6IEEgJXMgcmVzb3VyY2UnICUgc3ViX3Jlc291cmNlX21vZGVsLnJlc291cmNlLnR5cGUpCiAgICByZXR1cm5fc2VjdGlvbi5zdHlsZS5uZXdfbGluZSgpCg==
