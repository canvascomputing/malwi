statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/codedeploy/systems.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      #     http://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.

      import ctypes
      import os
      import subprocess

      DEFAULT_CONFIG_FILE = 'codedeploy.onpremises.yml'


      class System:
          UNSUPPORTED_SYSTEM_MSG = (
              'Only Ubuntu Server, Red Hat Enterprise Linux Server and '
              'Windows Server operating systems are supported.'
          )

          def __init__(self, params):
              self.session = params.session
              self.s3 = self.session.create_client(
                  's3',
                  region_name=params.region
              )

          def validate_administrator(self):
              raise NotImplementedError('validate_administrator')

          def install(self, params):
              raise NotImplementedError('install')

          def uninstall(self, params):
              raise NotImplementedError('uninstall')
    tokens: resume load_const INTEGER load_const import_name ctypes store_name ctypes load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name subprocess store_name subprocess load_const STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const System call store_name System push_null load_build_class load_const OBJECT make_function load_const Windows load_name System call store_name Windows push_null load_build_class load_const OBJECT make_function load_const Linux load_name System call store_name Linux push_null load_build_class load_const OBJECT make_function load_const Ubuntu load_name Linux call store_name Ubuntu push_null load_build_class load_const OBJECT make_function load_const RHEL load_name Linux call store_name RHEL return_const None
    hash: 059e7d4adb501e19fef2953dab0142de3a6ed22cdd91addc1944dac2695fbcc2
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/customizations/codedeploy/systems.py
  : IyBDb3B5cmlnaHQgMjAxNSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuIFlvdQojIG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YKIyB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0CiMKIyAgICAgaHR0cDovL2F3cy5hbWF6b24uY29tL2FwYWNoZTIuMC8KIwojIG9yIGluIHRoZSAibGljZW5zZSIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMKIyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgojIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYwojIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgppbXBvcnQgY3R5cGVzCmltcG9ydCBvcwppbXBvcnQgc3VicHJvY2VzcwoKREVGQVVMVF9DT05GSUdfRklMRSA9ICdjb2RlZGVwbG95Lm9ucHJlbWlzZXMueW1sJwoKCmNsYXNzIFN5c3RlbToKICAgIFVOU1VQUE9SVEVEX1NZU1RFTV9NU0cgPSAoCiAgICAgICAgJ09ubHkgVWJ1bnR1IFNlcnZlciwgUmVkIEhhdCBFbnRlcnByaXNlIExpbnV4IFNlcnZlciBhbmQgJwogICAgICAgICdXaW5kb3dzIFNlcnZlciBvcGVyYXRpbmcgc3lzdGVtcyBhcmUgc3VwcG9ydGVkLicKICAgICkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyYW1zKToKICAgICAgICBzZWxmLnNlc3Npb24gPSBwYXJhbXMuc2Vzc2lvbgogICAgICAgIHNlbGYuczMgPSBzZWxmLnNlc3Npb24uY3JlYXRlX2NsaWVudCgKICAgICAgICAgICAgJ3MzJywKICAgICAgICAgICAgcmVnaW9uX25hbWU9cGFyYW1zLnJlZ2lvbgogICAgICAgICkKCiAgICBkZWYgdmFsaWRhdGVfYWRtaW5pc3RyYXRvcihzZWxmKToKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCd2YWxpZGF0ZV9hZG1pbmlzdHJhdG9yJykKCiAgICBkZWYgaW5zdGFsbChzZWxmLCBwYXJhbXMpOgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoJ2luc3RhbGwnKQoKICAgIGRlZiB1bmluc3RhbGwoc2VsZiwgcGFyYW1zKToKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCd1bmluc3RhbGwnKQoKCmNsYXNzIFdpbmRvd3MoU3lzdGVtKToKICAgIENPTkZJR19ESVIgPSByJ0M6XFByb2dyYW1EYXRhXEFtYXpvblxDb2RlRGVwbG95JwogICAgQ09ORklHX0ZJTEUgPSAnY29uZi5vbnByZW1pc2VzLnltbCcKICAgIENPTkZJR19QQVRIID0gcid7MH1cezF9Jy5mb3JtYXQoQ09ORklHX0RJUiwgQ09ORklHX0ZJTEUpCiAgICBJTlNUQUxMRVIgPSAnY29kZWRlcGxveS1hZ2VudC5tc2knCgogICAgZGVmIHZhbGlkYXRlX2FkbWluaXN0cmF0b3Ioc2VsZik6CiAgICAgICAgaWYgbm90IGN0eXBlcy53aW5kbGwuc2hlbGwzMi5Jc1VzZXJBbkFkbWluKCk6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigKICAgICAgICAgICAgICAgICdZb3UgbXVzdCBydW4gdGhpcyBjb21tYW5kIGFzIGFuIEFkbWluaXN0cmF0b3IuJwogICAgICAgICAgICApCgogICAgZGVmIGluc3RhbGwoc2VsZiwgcGFyYW1zKToKICAgICAgICBpZiAnaW5zdGFsbGVyJyBpbiBwYXJhbXM6CiAgICAgICAgICAgIHNlbGYuSU5TVEFMTEVSID0gcGFyYW1zLmluc3RhbGxlcgoKICAgICAgICBwcm9jZXNzID0gc3VicHJvY2Vzcy5Qb3BlbigKICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgJ3Bvd2Vyc2hlbGwuZXhlJywKICAgICAgICAgICAgICAgICctQ29tbWFuZCcsICdTdG9wLVNlcnZpY2UnLAogICAgICAgICAgICAgICAgJy1OYW1lJywgJ2NvZGVkZXBsb3lhZ2VudCcKICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgc3RkZXJyPXN1YnByb2Nlc3MuUElQRQogICAgICAgICkKICAgICAgICAob3V0cHV0LCBlcnJvcikgPSBwcm9jZXNzLmNvbW11bmljYXRlKCkKICAgICAgICBub3RfZm91bmQgPSAoCiAgICAgICAgICAgICJDYW5ub3QgZmluZCBhbnkgc2VydmljZSB3aXRoIHNlcnZpY2UgbmFtZSAnY29kZWRlcGxveWFnZW50JyIKICAgICAgICApCiAgICAgICAgaWYgcHJvY2Vzcy5yZXR1cm5jb2RlICE9IDAgYW5kIG5vdF9mb3VuZCBub3QgaW4gZXJyb3I6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigKICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gc3RvcCB0aGUgQVdTIENvZGVEZXBsb3kgQWdlbnQ6XG57MH0nLmZvcm1hdChlcnJvcikKICAgICAgICAgICAgKQoKICAgICAgICByZXNwb25zZSA9IHNlbGYuczMuZ2V0X29iamVjdChCdWNrZXQ9cGFyYW1zLmJ1Y2tldCwgS2V5PXBhcmFtcy5rZXkpCiAgICAgICAgd2l0aCBvcGVuKHNlbGYuSU5TVEFMTEVSLCAnd2InKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKHJlc3BvbnNlWydCb2R5J10ucmVhZCgpKQoKICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIHInLlx7MH0nLmZvcm1hdChzZWxmLklOU1RBTExFUiksCiAgICAgICAgICAgICAgICAnL3F1aWV0JywKICAgICAgICAgICAgICAgICcvbCcsIHInLlxjb2RlZGVwbG95LWFnZW50LWluc3RhbGwtbG9nLnR4dCcKICAgICAgICAgICAgXSwKICAgICAgICAgICAgc2hlbGw9VHJ1ZQogICAgICAgICkKICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoWwogICAgICAgICAgICAncG93ZXJzaGVsbC5leGUnLAogICAgICAgICAgICAnLUNvbW1hbmQnLCAnUmVzdGFydC1TZXJ2aWNlJywKICAgICAgICAgICAgJy1OYW1lJywgJ2NvZGVkZXBsb3lhZ2VudCcKICAgICAgICBdKQoKICAgICAgICBwcm9jZXNzID0gc3VicHJvY2Vzcy5Qb3BlbigKICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgJ3Bvd2Vyc2hlbGwuZXhlJywKICAgICAgICAgICAgICAgICctQ29tbWFuZCcsICdHZXQtU2VydmljZScsCiAgICAgICAgICAgICAgICAnLU5hbWUnLCAnY29kZWRlcGxveWFnZW50JwogICAgICAgICAgICBdLAogICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFCiAgICAgICAgKQogICAgICAgIChvdXRwdXQsIGVycm9yKSA9IHByb2Nlc3MuY29tbXVuaWNhdGUoKQogICAgICAgIGlmICJSdW5uaW5nIiBub3QgaW4gb3V0cHV0OgogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoCiAgICAgICAgICAgICAgICAnVGhlIEFXUyBDb2RlRGVwbG95IEFnZW50IGRpZCBub3Qgc3RhcnQgYWZ0ZXIgaW5zdGFsbGF0aW9uLicKICAgICAgICAgICAgKQoKICAgIGRlZiB1bmluc3RhbGwoc2VsZiwgcGFyYW1zKToKICAgICAgICBwcm9jZXNzID0gc3VicHJvY2Vzcy5Qb3BlbigKICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgJ3Bvd2Vyc2hlbGwuZXhlJywKICAgICAgICAgICAgICAgICctQ29tbWFuZCcsICdTdG9wLVNlcnZpY2UnLAogICAgICAgICAgICAgICAgJy1OYW1lJywgJ2NvZGVkZXBsb3lhZ2VudCcKICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgc3RkZXJyPXN1YnByb2Nlc3MuUElQRQogICAgICAgICkKICAgICAgICAob3V0cHV0LCBlcnJvcikgPSBwcm9jZXNzLmNvbW11bmljYXRlKCkKICAgICAgICBub3RfZm91bmQgPSAoCiAgICAgICAgICAgICJDYW5ub3QgZmluZCBhbnkgc2VydmljZSB3aXRoIHNlcnZpY2UgbmFtZSAnY29kZWRlcGxveWFnZW50JyIKICAgICAgICApCiAgICAgICAgaWYgcHJvY2Vzcy5yZXR1cm5jb2RlID09IDA6CiAgICAgICAgICAgIHNlbGYuX3JlbW92ZV9hZ2VudCgpCiAgICAgICAgZWxpZiBub3RfZm91bmQgbm90IGluIGVycm9yOgogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoCiAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIHN0b3AgdGhlIEFXUyBDb2RlRGVwbG95IEFnZW50OlxuezB9Jy5mb3JtYXQoZXJyb3IpCiAgICAgICAgICAgICkKCiAgICBkZWYgX3JlbW92ZV9hZ2VudChzZWxmKToKICAgICAgICBwcm9jZXNzID0gc3VicHJvY2Vzcy5Qb3BlbigKICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgJ3dtaWMnLAogICAgICAgICAgICAgICAgJ3Byb2R1Y3QnLCAnd2hlcmUnLCAnbmFtZT0iQ29kZURlcGxveSBIb3N0IEFnZW50IicsCiAgICAgICAgICAgICAgICAnY2FsbCcsICd1bmluc3RhbGwnLCAnL25vaW50ZXJhY3RpdmUnCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUKICAgICAgICApCiAgICAgICAgKG91dHB1dCwgZXJyb3IpID0gcHJvY2Vzcy5jb21tdW5pY2F0ZSgpCiAgICAgICAgaWYgcHJvY2Vzcy5yZXR1cm5jb2RlICE9IDA6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigKICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gdW5pbnN0YWxsIHRoZSBBV1MgQ29kZURlcGxveSBBZ2VudDpcbnswfScuZm9ybWF0KAogICAgICAgICAgICAgICAgICAgIGVycm9yCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICkKCgpjbGFzcyBMaW51eChTeXN0ZW0pOgogICAgQ09ORklHX0RJUiA9ICcvZXRjL2NvZGVkZXBsb3ktYWdlbnQvY29uZicKICAgIENPTkZJR19GSUxFID0gREVGQVVMVF9DT05GSUdfRklMRQogICAgQ09ORklHX1BBVEggPSAnezB9L3sxfScuZm9ybWF0KENPTkZJR19ESVIsIENPTkZJR19GSUxFKQogICAgSU5TVEFMTEVSID0gJ2luc3RhbGwnCgogICAgZGVmIHZhbGlkYXRlX2FkbWluaXN0cmF0b3Ioc2VsZik6CiAgICAgICAgaWYgb3MuZ2V0ZXVpZCgpICE9IDA6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcignWW91IG11c3QgcnVuIHRoaXMgY29tbWFuZCBhcyBzdWRvLicpCgogICAgZGVmIGluc3RhbGwoc2VsZiwgcGFyYW1zKToKICAgICAgICBpZiAnaW5zdGFsbGVyJyBpbiBwYXJhbXM6CiAgICAgICAgICAgIHNlbGYuSU5TVEFMTEVSID0gcGFyYW1zLmluc3RhbGxlcgoKICAgICAgICBzZWxmLl91cGRhdGVfc3lzdGVtKHBhcmFtcykKICAgICAgICBzZWxmLl9zdG9wX2FnZW50KHBhcmFtcykKCiAgICAgICAgcmVzcG9uc2UgPSBzZWxmLnMzLmdldF9vYmplY3QoQnVja2V0PXBhcmFtcy5idWNrZXQsIEtleT1wYXJhbXMua2V5KQogICAgICAgIHdpdGggb3BlbihzZWxmLklOU1RBTExFUiwgJ3diJykgYXMgZjoKICAgICAgICAgICAgZi53cml0ZShyZXNwb25zZVsnQm9keSddLnJlYWQoKSkKCiAgICAgICAgc3VicHJvY2Vzcy5jaGVja19jYWxsKAogICAgICAgICAgICBbJ2NobW9kJywgJyt4JywgJy4vezB9Jy5mb3JtYXQoc2VsZi5JTlNUQUxMRVIpXQogICAgICAgICkKCiAgICAgICAgY3JlZGVudGlhbHMgPSBzZWxmLnNlc3Npb24uZ2V0X2NyZWRlbnRpYWxzKCkKICAgICAgICBlbnZpcm9ubWVudCA9IG9zLmVudmlyb24uY29weSgpCiAgICAgICAgZW52aXJvbm1lbnRbJ0FXU19SRUdJT04nXSA9IHBhcmFtcy5yZWdpb24KICAgICAgICBlbnZpcm9ubWVudFsnQVdTX0FDQ0VTU19LRVlfSUQnXSA9IGNyZWRlbnRpYWxzLmFjY2Vzc19rZXkKICAgICAgICBlbnZpcm9ubWVudFsnQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZJ10gPSBjcmVkZW50aWFscy5zZWNyZXRfa2V5CiAgICAgICAgaWYgY3JlZGVudGlhbHMudG9rZW4gaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGVudmlyb25tZW50WydBV1NfU0VTU0lPTl9UT0tFTiddID0gY3JlZGVudGlhbHMudG9rZW4KICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoCiAgICAgICAgICAgIFsnLi97MH0nLmZvcm1hdChzZWxmLklOU1RBTExFUiksICdhdXRvJ10sCiAgICAgICAgICAgIGVudj1lbnZpcm9ubWVudAogICAgICAgICkKCiAgICBkZWYgdW5pbnN0YWxsKHNlbGYsIHBhcmFtcyk6CiAgICAgICAgcHJvY2VzcyA9IHNlbGYuX3N0b3BfYWdlbnQocGFyYW1zKQogICAgICAgIGlmIHByb2Nlc3MucmV0dXJuY29kZSA9PSAwOgogICAgICAgICAgICBzZWxmLl9yZW1vdmVfYWdlbnQocGFyYW1zKQoKICAgIGRlZiBfdXBkYXRlX3N5c3RlbShzZWxmLCBwYXJhbXMpOgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoJ3ByZWluc3RhbGwnKQoKICAgIGRlZiBfcmVtb3ZlX2FnZW50KHNlbGYsIHBhcmFtcyk6CiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigncmVtb3ZlX2FnZW50JykKCiAgICBkZWYgX3N0b3BfYWdlbnQoc2VsZiwgcGFyYW1zKToKICAgICAgICBwcm9jZXNzID0gc3VicHJvY2Vzcy5Qb3BlbigKICAgICAgICAgICAgWydzZXJ2aWNlJywgJ2NvZGVkZXBsb3ktYWdlbnQnLCAnc3RvcCddLAogICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFCiAgICAgICAgKQogICAgICAgIChvdXRwdXQsIGVycm9yKSA9IHByb2Nlc3MuY29tbXVuaWNhdGUoKQogICAgICAgIGlmIHByb2Nlc3MucmV0dXJuY29kZSAhPSAwIGFuZCBwYXJhbXMubm90X2ZvdW5kX21zZyBub3QgaW4gZXJyb3I6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigKICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gc3RvcCB0aGUgQVdTIENvZGVEZXBsb3kgQWdlbnQ6XG57MH0nLmZvcm1hdChlcnJvcikKICAgICAgICAgICAgKQogICAgICAgIHJldHVybiBwcm9jZXNzCgoKY2xhc3MgVWJ1bnR1KExpbnV4KToKICAgIGRlZiBfdXBkYXRlX3N5c3RlbShzZWxmLCBwYXJhbXMpOgogICAgICAgIHN1YnByb2Nlc3MuY2hlY2tfY2FsbChbJ2FwdC1nZXQnLCAnLXknLCAndXBkYXRlJ10pCiAgICAgICAgc3VicHJvY2Vzcy5jaGVja19jYWxsKFsnYXB0LWdldCcsICcteScsICdpbnN0YWxsJywgJ3J1YnkyLjAnXSkKCiAgICBkZWYgX3JlbW92ZV9hZ2VudChzZWxmLCBwYXJhbXMpOgogICAgICAgIHN1YnByb2Nlc3MuY2hlY2tfY2FsbChbJ2Rwa2cnLCAnLXInLCAnY29kZWRlcGxveS1hZ2VudCddKQoKICAgIGRlZiBfc3RvcF9hZ2VudChzZWxmLCBwYXJhbXMpOgogICAgICAgIHBhcmFtcy5ub3RfZm91bmRfbXNnID0gJ2NvZGVkZXBsb3ktYWdlbnQ6IHVucmVjb2duaXplZCBzZXJ2aWNlJwogICAgICAgIHJldHVybiBMaW51eC5fc3RvcF9hZ2VudChzZWxmLCBwYXJhbXMpCgoKY2xhc3MgUkhFTChMaW51eCk6CiAgICBkZWYgX3VwZGF0ZV9zeXN0ZW0oc2VsZiwgcGFyYW1zKToKICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoWyd5dW0nLCAnLXknLCAnaW5zdGFsbCcsICdydWJ5J10pCgogICAgZGVmIF9yZW1vdmVfYWdlbnQoc2VsZiwgcGFyYW1zKToKICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoWyd5dW0nLCAnLXknLCAnZXJhc2UnLCAnY29kZWRlcGxveS1hZ2VudCddKQoKICAgIGRlZiBfc3RvcF9hZ2VudChzZWxmLCBwYXJhbXMpOgogICAgICAgIHBhcmFtcy5ub3RfZm91bmRfbXNnID0gJ1JlZGlyZWN0aW5nIHRvIC9iaW4vc3lzdGVtY3RsIHN0b3AgIGNvZGVkZXBsb3ktYWdlbnQuc2VydmljZScKICAgICAgICByZXR1cm4gTGludXguX3N0b3BfYWdlbnQoc2VsZiwgcGFyYW1zKQo=
