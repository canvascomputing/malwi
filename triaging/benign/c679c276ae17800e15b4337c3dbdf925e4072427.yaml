statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/mysql.py
  contents:
  - name: MySQLConnection.execute_many
    score: 0.0
    code: |-
      async def execute_many(self, queries: typing.List[ClauseElement]) -> None:
              assert self._connection is not None, "Connection is not acquired"
              cursor = await self._connection.cursor()
              try:
                  for single_query in queries:
                      single_query, args, context = self._compile(single_query)
                      await cursor.execute(single_query, args)
              finally:
                  await cursor.close()
    tokens: return_generator pop_top resume load_fast self load_attr _connection pop_jump_if_not_none TO_NUMBER load_assertion_error load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast self load_attr _connection load_attr cursor call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast cursor nop load_fast queries get_iter for_iter TO_NUMBER store_fast single_query load_fast self load_attr _compile load_fast single_query call unpack_sequence store_fast single_query store_fast args store_fast context load_fast cursor load_attr execute load_fast single_query load_fast args call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top jump_backward TO_NUMBER end_for nop load_fast cursor load_attr close call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_const None cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER push_exc_info load_fast cursor load_attr close call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER cleanup_throw end_send pop_top reraise copy pop_except reraise call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: 10c52821ee522cd0693e5831788aac6f5da7f011480440d654a4e067e1ca87dc
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/mysql.py
  : 
