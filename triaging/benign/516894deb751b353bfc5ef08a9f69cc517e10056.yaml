statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/http/http_response.py
  contents:
  - name: HttpResponse.get_response_object
    score: 0.0
    code: |-
      def get_response_object(self):
              current_protocol = 'https://' if self.get_ssl_enabled() else 'http://'
              host = self.get_host()
              if host.startswith('https://') or\
                      not host.startswith('https://') and current_protocol == 'https://':
                  port = ':%s' % self.__port if self.__port != 80 and self.__port != 443 else ''
              else:
                  port = ':%s' % self.__port if self.__port != 80 else ''

              if host.startswith('http://') or host.startswith('https://'):
                  url = host + port + self.get_url()
              else:
                  url = current_protocol + host + port + self.get_url()

              self.__session.cookies.clear()

              req = Request(method=self.get_method(), url=url,
                            data=self.get_body(),
                            headers=self.get_headers(),
                            )
              prepped = self.__session.prepare_request(req)
              if not self.proxy:
                  proxy_https = os.environ.get('HTTPS_PROXY') or os.environ.get(
                      'https_proxy')
                  proxy_http = os.environ.get(
                      'HTTP_PROXY') or os.environ.get('http_proxy')

                  self.proxy = {}
                  if proxy_http:
                      self.proxy['http'] = proxy_http
                  if proxy_https:
                      self.proxy['https'] = proxy_https

              response = self.__session.send(
                  prepped,
                  proxies=self.proxy,
                  timeout=(self.__connect_timeout, self.__read_timeout),
                  allow_redirects=False,
                  verify=self.get_verify_value()
              )

              http_debug = os.environ.get('DEBUG')

              if http_debug is not None and http_debug.lower() == 'sdk':
                  # http debug information
                  self.do_http_debug(prepped, response)

              return response.status_code, response.headers, response.content
    tokens: resume load_fast self load_attr get_ssl_enabled call pop_jump_if_false TO_NUMBER load_const https:// jump_forward TO_NUMBER load_const http:// store_fast STRING_LEN_S_ENT_HIGH load_fast self load_attr get_host call store_fast host load_fast host load_attr startswith load_const https:// call pop_jump_if_true TO_NUMBER load_fast host load_attr startswith load_const https:// call pop_jump_if_true TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH load_const https:// compare_op == pop_jump_if_false TO_NUMBER load_fast self load_attr STRING_LEN_S_ENT_HIGH load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_fast self load_attr STRING_LEN_S_ENT_HIGH load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_const :%s load_fast self load_attr STRING_LEN_S_ENT_HIGH binary_op % jump_forward TO_NUMBER load_const store_fast port jump_forward TO_NUMBER load_fast self load_attr STRING_LEN_S_ENT_HIGH load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_const :%s load_fast self load_attr STRING_LEN_S_ENT_HIGH binary_op % jump_forward TO_NUMBER load_const store_fast port load_fast host load_attr startswith load_const http:// call pop_jump_if_true TO_NUMBER load_fast host load_attr startswith load_const https:// call pop_jump_if_false TO_NUMBER load_fast host load_fast port binary_op + load_fast self load_attr get_url call binary_op + store_fast url jump_forward TO_NUMBER load_fast STRING_LEN_S_ENT_HIGH load_fast host binary_op + load_fast port binary_op + load_fast self load_attr get_url call binary_op + store_fast url load_fast self load_attr STRING_LEN_S_ENT_HIGH load_attr cookies load_attr clear call pop_top load_global Request load_fast self load_attr get_method call load_fast url load_fast self load_attr get_body call load_fast self load_attr get_headers call kw_names data headers method url call store_fast req load_fast self load_attr STRING_LEN_S_ENT_HIGH load_attr prepare_request load_fast req call store_fast prepped load_fast self load_attr proxy pop_jump_if_true TO_NUMBER load_global os load_attr environ load_attr get load_const HTTPS_PROXY call copy pop_jump_if_true TO_NUMBER pop_top load_global os load_attr environ load_attr get load_const https_proxy call store_fast proxy_https load_global os load_attr environ load_attr get load_const HTTP_PROXY call copy pop_jump_if_true TO_NUMBER pop_top load_global os load_attr environ load_attr get load_const http_proxy call store_fast proxy_http build_map load_fast self store_attr proxy load_fast proxy_http pop_jump_if_false TO_NUMBER load_fast proxy_http load_fast self load_attr proxy load_const http store_subscr load_fast proxy_https pop_jump_if_false TO_NUMBER load_fast proxy_https load_fast self load_attr proxy load_const https store_subscr load_fast self load_attr STRING_LEN_S_ENT_HIGH load_attr send load_fast prepped load_fast self load_attr proxy load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr STRING_LEN_S_ENT_HIGH build_tuple load_const INTEGER load_fast self load_attr STRING_LEN_S_ENT_HIGH call kw_names allow_redirects proxies timeout verify call store_fast response load_global os load_attr environ load_attr get load_const DEBUG call store_fast http_debug load_fast http_debug pop_jump_if_none TO_NUMBER load_fast http_debug load_attr lower call load_const sdk compare_op == pop_jump_if_false TO_NUMBER load_fast self load_attr do_http_debug load_fast prepped load_fast response call pop_top load_fast response load_attr status_code load_fast response load_attr headers load_fast response load_attr content build_tuple return_value
    hash: d033357a8a43f8d618b19cb98e3ac4fed9e89b093a190f2041ce1b6610fdcb01
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/http/http_response.py
  : IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lCiMgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlCiMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24KIyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlCiMgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZQojICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2UKIyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiMgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KIyAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKIyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKIyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiMgdW5kZXIgdGhlIExpY2Vuc2UuCgojIGNvZGluZz11dGYtOAoKaW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCgpmcm9tIGFsaXl1bnNka2NvcmUudmVuZG9yZWQucmVxdWVzdHMgaW1wb3J0IFNlc3Npb24sIFJlcXVlc3QKZnJvbSBhbGl5dW5zZGtjb3JlLmh0dHAuaHR0cF9yZXF1ZXN0IGltcG9ydCBIdHRwUmVxdWVzdApmcm9tIGFsaXl1bnNka2NvcmUuaHR0cCBpbXBvcnQgcHJvdG9jb2xfdHlwZSBhcyBQVAoKZnJvbSBhbGl5dW5zZGtjb3JlLnZlbmRvcmVkLnJlcXVlc3RzIGltcG9ydCBzdGF0dXNfY29kZXMKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQpsb2dnZXIuc2V0TGV2ZWwobG9nZ2luZy5ERUJVRykKY2ggPSBsb2dnaW5nLlN0cmVhbUhhbmRsZXIoKQpsb2dnZXIuYWRkSGFuZGxlcihjaCkKCkRFRkFVTFRfQ09OTkVDVF9USU1FT1VUID0gNQoKCmNsYXNzIEh0dHBSZXNwb25zZShIdHRwUmVxdWVzdCk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgICAgIHNlbGYsCiAgICAgICAgICAgIGhvc3Q9IiIsCiAgICAgICAgICAgIHVybD0iLyIsCiAgICAgICAgICAgIG1ldGhvZD0iR0VUIiwKICAgICAgICAgICAgaGVhZGVycz17fSwKICAgICAgICAgICAgcHJvdG9jb2w9UFQuSFRUUCwKICAgICAgICAgICAgY29udGVudD1Ob25lLAogICAgICAgICAgICBwb3J0PU5vbmUsCiAgICAgICAgICAgIGtleV9maWxlPU5vbmUsCiAgICAgICAgICAgIGNlcnRfZmlsZT1Ob25lLAogICAgICAgICAgICByZWFkX3RpbWVvdXQ9Tm9uZSwKICAgICAgICAgICAgY29ubmVjdF90aW1lb3V0PU5vbmUsCiAgICAgICAgICAgIHZlcmlmeT1Ob25lLAogICAgICAgICAgICBzZXNzaW9uPU5vbmUsCiAgICAgICAgICAgIHByb3h5PU5vbmUKICAgICk6CiAgICAgICAgSHR0cFJlcXVlc3QuX19pbml0X18oCiAgICAgICAgICAgIHNlbGYsCiAgICAgICAgICAgIGhvc3Q9aG9zdCwKICAgICAgICAgICAgdXJsPXVybCwKICAgICAgICAgICAgbWV0aG9kPW1ldGhvZCwKICAgICAgICAgICAgaGVhZGVycz1oZWFkZXJzKQogICAgICAgIHNlbGYuX19zc2xfZW5hYmxlID0gRmFsc2UKICAgICAgICBpZiBwcm90b2NvbCBpcyBQVC5IVFRQUzoKICAgICAgICAgICAgc2VsZi5fX3NzbF9lbmFibGUgPSBUcnVlCiAgICAgICAgc2VsZi5fX2tleV9maWxlID0ga2V5X2ZpbGUKICAgICAgICBzZWxmLl9fY2VydF9maWxlID0gY2VydF9maWxlCiAgICAgICAgc2VsZi5fX3BvcnQgPSBwb3J0CiAgICAgICAgc2VsZi5fX2Nvbm5lY3Rpb24gPSBOb25lCiAgICAgICAgc2VsZi5fX3JlYWRfdGltZW91dCA9IHJlYWRfdGltZW91dAogICAgICAgIHNlbGYuX19jb25uZWN0X3RpbWVvdXQgPSBjb25uZWN0X3RpbWVvdXQKICAgICAgICBzZWxmLl9fdmVyaWZ5ID0gdmVyaWZ5CiAgICAgICAgc2VsZi5fX3Nlc3Npb24gPSBzZXNzaW9uCiAgICAgICAgaWYgc2Vzc2lvbiBpcyBOb25lOgogICAgICAgICAgICBzZWxmLl9fc2Vzc2lvbiA9IFNlc3Npb24oKQogICAgICAgIHNlbGYuc2V0X2JvZHkoY29udGVudCkKICAgICAgICBzZWxmLnByb3h5ID0gcHJveHkKCiAgICBkZWYgc2V0X3NzbF9lbmFibGUoc2VsZiwgZW5hYmxlKToKICAgICAgICBzZWxmLl9fc3NsX2VuYWJsZSA9IGVuYWJsZQoKICAgIGRlZiBnZXRfc3NsX2VuYWJsZWQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19zc2xfZW5hYmxlCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIHByZXBhcmVfaHR0cF9kZWJ1ZyhyZXF1ZXN0LCBzeW1ib2wpOgogICAgICAgIGJhc2UgPSAnJwogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHJlcXVlc3QuaGVhZGVycy5pdGVtcygpOgogICAgICAgICAgICBiYXNlICs9ICdcbiVzICVzIDogJXMnICUgKHN5bWJvbCwga2V5LCB2YWx1ZSkKICAgICAgICByZXR1cm4gYmFzZQoKICAgIGRlZiBkb19odHRwX2RlYnVnKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICAjIGxvZ2dlciB0aGUgcmVxdWVzdAogICAgICAgIHJlcXVlc3RfYmFzZSA9ICdcbj4gJXMgJXMgSFRUUC8xLjEnICUgKHNlbGYuZ2V0X21ldGhvZCgpLnVwcGVyKCksIHNlbGYuZ2V0X3VybCgpKQogICAgICAgIHJlcXVlc3RfYmFzZSArPSAnXG4+IEhvc3QgOiAlcycgJSBzZWxmLmdldF9ob3N0KCkKICAgICAgICBsb2dnZXIuZGVidWcocmVxdWVzdF9iYXNlICsgc2VsZi5wcmVwYXJlX2h0dHBfZGVidWcocmVxdWVzdCwgJz4nKSkKCiAgICAgICAgIyBsb2dnZXIgdGhlIHJlc3BvbnNlCiAgICAgICAgcmVzcG9uc2VfYmFzZSA9ICdcbjwgSFRUUC8xLjEgJXMgJXMnICUgKAogICAgICAgICAgICByZXNwb25zZS5zdGF0dXNfY29kZSwgc3RhdHVzX2NvZGVzLl9jb2Rlcy5nZXQocmVzcG9uc2Uuc3RhdHVzX2NvZGUpWzBdLnVwcGVyKCkpCiAgICAgICAgbG9nZ2VyLmRlYnVnKHJlc3BvbnNlX2Jhc2UgKyBzZWxmLnByZXBhcmVfaHR0cF9kZWJ1ZyhyZXNwb25zZSwgJzwnKSkKCiAgICBkZWYgZ2V0X3ZlcmlmeV92YWx1ZShzZWxmKToKICAgICAgICBpZiBzZWxmLl9fdmVyaWZ5IGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fX3ZlcmlmeQogICAgICAgIHJldHVybiBvcy5lbnZpcm9uLmdldCgnQUxJQkFCQV9DTE9VRF9DQV9CVU5ETEUnLCBUcnVlKQoKICAgIGRlZiBnZXRfcmVzcG9uc2Vfb2JqZWN0KHNlbGYpOgogICAgICAgIGN1cnJlbnRfcHJvdG9jb2wgPSAnaHR0cHM6Ly8nIGlmIHNlbGYuZ2V0X3NzbF9lbmFibGVkKCkgZWxzZSAnaHR0cDovLycKICAgICAgICBob3N0ID0gc2VsZi5nZXRfaG9zdCgpCiAgICAgICAgaWYgaG9zdC5zdGFydHN3aXRoKCdodHRwczovLycpIG9yXAogICAgICAgICAgICAgICAgbm90IGhvc3Quc3RhcnRzd2l0aCgnaHR0cHM6Ly8nKSBhbmQgY3VycmVudF9wcm90b2NvbCA9PSAnaHR0cHM6Ly8nOgogICAgICAgICAgICBwb3J0ID0gJzolcycgJSBzZWxmLl9fcG9ydCBpZiBzZWxmLl9fcG9ydCAhPSA4MCBhbmQgc2VsZi5fX3BvcnQgIT0gNDQzIGVsc2UgJycKICAgICAgICBlbHNlOgogICAgICAgICAgICBwb3J0ID0gJzolcycgJSBzZWxmLl9fcG9ydCBpZiBzZWxmLl9fcG9ydCAhPSA4MCBlbHNlICcnCgogICAgICAgIGlmIGhvc3Quc3RhcnRzd2l0aCgnaHR0cDovLycpIG9yIGhvc3Quc3RhcnRzd2l0aCgnaHR0cHM6Ly8nKToKICAgICAgICAgICAgdXJsID0gaG9zdCArIHBvcnQgKyBzZWxmLmdldF91cmwoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHVybCA9IGN1cnJlbnRfcHJvdG9jb2wgKyBob3N0ICsgcG9ydCArIHNlbGYuZ2V0X3VybCgpCgogICAgICAgIHNlbGYuX19zZXNzaW9uLmNvb2tpZXMuY2xlYXIoKQoKICAgICAgICByZXEgPSBSZXF1ZXN0KG1ldGhvZD1zZWxmLmdldF9tZXRob2QoKSwgdXJsPXVybCwKICAgICAgICAgICAgICAgICAgICAgIGRhdGE9c2VsZi5nZXRfYm9keSgpLAogICAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1zZWxmLmdldF9oZWFkZXJzKCksCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgcHJlcHBlZCA9IHNlbGYuX19zZXNzaW9uLnByZXBhcmVfcmVxdWVzdChyZXEpCiAgICAgICAgaWYgbm90IHNlbGYucHJveHk6CiAgICAgICAgICAgIHByb3h5X2h0dHBzID0gb3MuZW52aXJvbi5nZXQoJ0hUVFBTX1BST1hZJykgb3Igb3MuZW52aXJvbi5nZXQoCiAgICAgICAgICAgICAgICAnaHR0cHNfcHJveHknKQogICAgICAgICAgICBwcm94eV9odHRwID0gb3MuZW52aXJvbi5nZXQoCiAgICAgICAgICAgICAgICAnSFRUUF9QUk9YWScpIG9yIG9zLmVudmlyb24uZ2V0KCdodHRwX3Byb3h5JykKCiAgICAgICAgICAgIHNlbGYucHJveHkgPSB7fQogICAgICAgICAgICBpZiBwcm94eV9odHRwOgogICAgICAgICAgICAgICAgc2VsZi5wcm94eVsnaHR0cCddID0gcHJveHlfaHR0cAogICAgICAgICAgICBpZiBwcm94eV9odHRwczoKICAgICAgICAgICAgICAgIHNlbGYucHJveHlbJ2h0dHBzJ10gPSBwcm94eV9odHRwcwoKICAgICAgICByZXNwb25zZSA9IHNlbGYuX19zZXNzaW9uLnNlbmQoCiAgICAgICAgICAgIHByZXBwZWQsCiAgICAgICAgICAgIHByb3hpZXM9c2VsZi5wcm94eSwKICAgICAgICAgICAgdGltZW91dD0oc2VsZi5fX2Nvbm5lY3RfdGltZW91dCwgc2VsZi5fX3JlYWRfdGltZW91dCksCiAgICAgICAgICAgIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwKICAgICAgICAgICAgdmVyaWZ5PXNlbGYuZ2V0X3ZlcmlmeV92YWx1ZSgpCiAgICAgICAgKQoKICAgICAgICBodHRwX2RlYnVnID0gb3MuZW52aXJvbi5nZXQoJ0RFQlVHJykKCiAgICAgICAgaWYgaHR0cF9kZWJ1ZyBpcyBub3QgTm9uZSBhbmQgaHR0cF9kZWJ1Zy5sb3dlcigpID09ICdzZGsnOgogICAgICAgICAgICAjIGh0dHAgZGVidWcgaW5mb3JtYXRpb24KICAgICAgICAgICAgc2VsZi5kb19odHRwX2RlYnVnKHByZXBwZWQsIHJlc3BvbnNlKQoKICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzX2NvZGUsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLmNvbnRlbnQK
