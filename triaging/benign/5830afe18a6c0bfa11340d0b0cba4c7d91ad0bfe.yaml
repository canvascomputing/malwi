statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/endpoint/local_config_regional_endpoint_resolver.py
  contents:
  - name: LocalConfigRegionalEndpointResolver.is_product_code_valid
    score: 0.0
    code: |-
      def is_product_code_valid(self, request):

              tmp_request = ResolveEndpointRequest(
                  request.region_id,
                  self._get_normalized_product_code(request.product_code),
                  request.location_service_code,
                  request.endpoint_type,
              )
              return EndpointResolverBase.is_product_code_valid(self, tmp_request)
    tokens: resume load_global STRING_LEN_S_ENT_HIGH load_fast request load_attr region_id load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast request load_attr product_code call load_fast request load_attr STRING_LEN_S_ENT_HIGH load_fast request load_attr endpoint_type call store_fast tmp_request load_global STRING_BASE64_LEN_S_ENT_HIGH load_attr STRING_LEN_S_ENT_HIGH load_fast self load_fast tmp_request call return_value
    hash: f024190b7757552b79b913c7e774aaf2cd1b351dd98e602b37b2d2b55957fdfd
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/endpoint/local_config_regional_endpoint_resolver.py
  : IwojIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmUKIyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGUKIyBkaXN0cmlidXRlZCB3aXRoIHNlbGYgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbgojIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyBzZWxmIGZpbGUKIyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlCiMgIkxpY2Vuc2UiKTsgeW91IG1heSBub3QgdXNlIHNlbGYgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZQojIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKIwojICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKIwojIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKIyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgojICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQojIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQojIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKIyB1bmRlciB0aGUgTGljZW5zZS4KIwoKaW1wb3J0IG9zLnBhdGgKaW1wb3J0IGpzb24KCmltcG9ydCBhbGl5dW5zZGtjb3JlCmZyb20gYWxpeXVuc2RrY29yZS52ZW5kb3JlZC5zaXggaW1wb3J0IGl0ZXJpdGVtcwpmcm9tIGFsaXl1bnNka2NvcmUuZW5kcG9pbnQuZW5kcG9pbnRfcmVzb2x2ZXJfYmFzZSBpbXBvcnQgRW5kcG9pbnRSZXNvbHZlckJhc2UKZnJvbSBhbGl5dW5zZGtjb3JlLmVuZHBvaW50LnJlc29sdmVyX2VuZHBvaW50X3JlcXVlc3QgaW1wb3J0IFJlc29sdmVFbmRwb2ludFJlcXVlc3QKCgpjbGFzcyBMb2NhbENvbmZpZ1JlZ2lvbmFsRW5kcG9pbnRSZXNvbHZlcihFbmRwb2ludFJlc29sdmVyQmFzZSk6CgogICAgRU5EUE9JTlRfSlNPTiA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUoYWxpeXVuc2RrY29yZS5fX2ZpbGVfXyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhIiwgImVuZHBvaW50cy5qc29uIikKCiAgICBkZWYgX19pbml0X18oc2VsZiwgY29uZmlnX2pzb25fc3RyPU5vbmUpOgogICAgICAgIEVuZHBvaW50UmVzb2x2ZXJCYXNlLl9faW5pdF9fKHNlbGYpCiAgICAgICAgc2VsZi5fdmFsaWRfcmVnaW9uX2lkcyA9IFtdCiAgICAgICAgc2VsZi5fbG9jYXRpb25fY29kZV9tYXBwaW5nID0gZGljdCgpCiAgICAgICAgc2VsZi5fcmVnaW9uYWxfZW5kcG9pbnRfZGF0YSA9IGRpY3QoKQogICAgICAgIGlmIGNvbmZpZ19qc29uX3N0cjoKICAgICAgICAgICAgb2JqID0ganNvbi5sb2Fkcyhjb25maWdfanNvbl9zdHIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgb2JqID0gc2VsZi5fcmVhZF9mcm9tX2VuZHBvaW50c19qc29uKCkKICAgICAgICBzZWxmLl9pbml0X2xvY2FsX2NvbmZpZyhvYmopCgogICAgZGVmIF9pbml0X2xvY2FsX2NvbmZpZyhzZWxmLCBvYmopOgogICAgICAgIHNlbGYuX2luaXRfcmVnaW9uYWxfZW5kcG9pbnRfZGF0YShvYmopCiAgICAgICAgc2VsZi5faW5pdF9yZWdpb25faWRzKG9iaikKICAgICAgICBzZWxmLl9pbml0X2xvY2F0aW9uX2NvZGVfbWFwcGluZyhvYmopCgogICAgZGVmIF9pbml0X3JlZ2lvbmFsX2VuZHBvaW50X2RhdGEoc2VsZiwgb2JqKToKICAgICAgICBpZiAicmVnaW9uYWxfZW5kcG9pbnRzIiBub3QgaW4gb2JqOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBzZWxmLl9yZWdpb25hbF9lbmRwb2ludF9kYXRhID0gb2JqWyJyZWdpb25hbF9lbmRwb2ludHMiXQogICAgICAgIGZvciBjb2RlLCBwcm9kdWN0X2RhdGEgaW4gaXRlcml0ZW1zKG9ialsicmVnaW9uYWxfZW5kcG9pbnRzIl0pOgogICAgICAgICAgICBmb3IgcmVnaW9uX2lkLCBlbmRwb2ludCBpbiBpdGVyaXRlbXMocHJvZHVjdF9kYXRhKToKICAgICAgICAgICAgICAgIHNlbGYucHV0X2VuZHBvaW50X2VudHJ5KHNlbGYuX21ha2VfZW5kcG9pbnRfZW50cnlfa2V5KGNvZGUsIHJlZ2lvbl9pZCksIGVuZHBvaW50KQoKICAgIGRlZiBfaW5pdF9yZWdpb25faWRzKHNlbGYsIG9iaik6CiAgICAgICAgaWYgInJlZ2lvbnMiIG5vdCBpbiBvYmo6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIHNlbGYuX3ZhbGlkX3JlZ2lvbl9pZHMgPSBvYmpbInJlZ2lvbnMiXQoKICAgIGRlZiBfaW5pdF9sb2NhdGlvbl9jb2RlX21hcHBpbmcoc2VsZiwgb2JqKToKICAgICAgICBpZiAibG9jYXRpb25fY29kZV9tYXBwaW5nIiBub3QgaW4gb2JqOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBzZWxmLl9sb2NhdGlvbl9jb2RlX21hcHBpbmcgPSBvYmpbImxvY2F0aW9uX2NvZGVfbWFwcGluZyJdCgogICAgZGVmIF9nZXRfbm9ybWFsaXplZF9wcm9kdWN0X2NvZGUoc2VsZiwgcHJvZHVjdF9jb2RlKToKICAgICAgICBwcm9kdWN0X2NvZGVfbG93ZXIgPSBwcm9kdWN0X2NvZGUubG93ZXIoKQogICAgICAgIGlmIHByb2R1Y3RfY29kZV9sb3dlciBpbiBzZWxmLl9sb2NhdGlvbl9jb2RlX21hcHBpbmc6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9sb2NhdGlvbl9jb2RlX21hcHBpbmcuZ2V0KHByb2R1Y3RfY29kZV9sb3dlcikKICAgICAgICByZXR1cm4gcHJvZHVjdF9jb2RlX2xvd2VyCgogICAgZGVmIF9yZWFkX2Zyb21fZW5kcG9pbnRzX2pzb24oc2VsZik6CiAgICAgICAgd2l0aCBvcGVuKHNlbGYuRU5EUE9JTlRfSlNPTikgYXMgZnA6CiAgICAgICAgICAgIHJldHVybiBqc29uLmxvYWRzKGZwLnJlYWQoKSkKCiAgICBkZWYgcmVzb2x2ZShzZWxmLCByZXF1ZXN0KToKICAgICAgICBpZiByZXF1ZXN0LmlzX29wZW5fYXBpX2VuZHBvaW50KCkgYW5kIHJlcXVlc3QuZW5kcG9pbnRfcmVnaW9uYWwgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZmV0Y2hfZW5kcG9pbnRfZW50cnkocmVxdWVzdCkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBnZXRfZW5kcG9pbnRfa2V5X2Zyb21fcmVxdWVzdChzZWxmLCByZXF1ZXN0KToKICAgICAgICByZXR1cm4gc2VsZi5fbWFrZV9lbmRwb2ludF9lbnRyeV9rZXkocmVxdWVzdC5wcm9kdWN0X2NvZGVfbG93ZXIsIHJlcXVlc3QucmVnaW9uX2lkKQoKICAgIGRlZiBfbWFrZV9lbmRwb2ludF9lbnRyeV9rZXkoc2VsZiwgcHJvZHVjdF9jb2RlLCByZWdpb25faWQpOgogICAgICAgIHJldHVybiBzZWxmLl9nZXRfbm9ybWFsaXplZF9wcm9kdWN0X2NvZGUocHJvZHVjdF9jb2RlKSArICIuIiArIHJlZ2lvbl9pZC5sb3dlcigpCgogICAgZGVmIGlzX3JlZ2lvbl9pZF92YWxpZChzZWxmLCByZXF1ZXN0KToKICAgICAgICByZXR1cm4gc2VsZi52ZXJpZnlfcmVnaW9uX2lkKHJlcXVlc3QucmVnaW9uX2lkLmxvd2VyKCkpCgogICAgZGVmIGdldF92YWxpZF9yZWdpb25faWRzX2J5X3Byb2R1Y3Qoc2VsZiwgcHJvZHVjdF9jb2RlKToKICAgICAgICBjb2RlID0gc2VsZi5fZ2V0X25vcm1hbGl6ZWRfcHJvZHVjdF9jb2RlKHByb2R1Y3RfY29kZSkKICAgICAgICBpZiBjb2RlIGluIHNlbGYuX3JlZ2lvbmFsX2VuZHBvaW50X2RhdGE6CiAgICAgICAgICAgIHJlZ2lvbl9pZHMgPSBzZWxmLl9yZWdpb25hbF9lbmRwb2ludF9kYXRhLmdldChjb2RlKS5rZXlzKCkKICAgICAgICAgICAgcmV0dXJuIHNvcnRlZChyZWdpb25faWRzKQogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGlzX3Byb2R1Y3RfY29kZV92YWxpZChzZWxmLCByZXF1ZXN0KToKCiAgICAgICAgdG1wX3JlcXVlc3QgPSBSZXNvbHZlRW5kcG9pbnRSZXF1ZXN0KAogICAgICAgICAgICByZXF1ZXN0LnJlZ2lvbl9pZCwKICAgICAgICAgICAgc2VsZi5fZ2V0X25vcm1hbGl6ZWRfcHJvZHVjdF9jb2RlKHJlcXVlc3QucHJvZHVjdF9jb2RlKSwKICAgICAgICAgICAgcmVxdWVzdC5sb2NhdGlvbl9zZXJ2aWNlX2NvZGUsCiAgICAgICAgICAgIHJlcXVlc3QuZW5kcG9pbnRfdHlwZSwKICAgICAgICApCiAgICAgICAgcmV0dXJuIEVuZHBvaW50UmVzb2x2ZXJCYXNlLmlzX3Byb2R1Y3RfY29kZV92YWxpZChzZWxmLCB0bXBfcmVxdWVzdCkK
