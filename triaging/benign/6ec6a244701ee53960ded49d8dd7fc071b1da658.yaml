statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/clidriver.py
  contents:
  - name: ServiceCommand.lineage
    score: 0.0
    code: |-
      @property
          def lineage(self):
              return self._lineage
    tokens: resume load_fast self load_attr _lineage return_value
    hash: 81e66d0d995f32549e4a0b6a40c6ca19213b26a8e8fed940b4183d1f42221077
sources:
  .repo_cache/malicious_repos/pypi_malregistry/awscl/1.27.67/awscl-1.27.67/awscl-1.27.67/awscli/clidriver.py: 
