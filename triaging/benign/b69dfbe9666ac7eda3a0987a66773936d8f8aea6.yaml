statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/client.py
  contents:
  - name: AcsClient._handle_single_request
    score: 0.0
    code: |-
      def _handle_single_request(self, endpoint, request, read_timeout, connect_timeout, signer):
              http_response = self._make_http_response(endpoint, request, read_timeout, connect_timeout,
                                                       signer)
              params = copy.deepcopy(request.get_query_params())
              params.pop('AccessKeyId', None)
              logger.debug('Request received. Product:%s Endpoint:%s Params: %s',
                           request.get_product(), endpoint, params)

              # Do the actual network thing
              try:
                  status, headers, body = http_response.get_response_object()
              except IOError as e:

                  exception = ClientException(error_code.SDK_HTTP_ERROR, compat.ensure_string('%s' % e))
                  msg = "HttpError occurred. Host:%s SDK-Version:%s ClientException:%s" % (
                      endpoint, aliyunsdkcore.__version__, exception)
                  logger.error(compat.ensure_string(msg))
                  return None, None, None, exception

              exception = self._get_server_exception(status, body, endpoint, request.string_to_sign)
              return status, headers, body, exception
    tokens: 'resume load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast endpoint load_fast request load_fast read_timeout load_fast connect_timeout load_fast signer call store_fast http_response load_global copy load_attr deepcopy load_fast request load_attr STRING_LEN_S_ENT_HIGH call call store_fast params load_fast params load_attr pop load_const AccessKeyId load_const call pop_top load_global logger load_attr debug load_const STRING_LEN_S_ENT_HIGH load_fast request load_attr get_product call load_fast endpoint load_fast params call pop_top nop load_fast http_response load_attr STRING_LEN_S_ENT_HIGH call unpack_sequence store_fast status store_fast headers store_fast body load_fast self load_attr STRING_LEN_S_ENT_HIGH load_fast status load_fast body load_fast endpoint load_fast request load_attr string_to_sign call store_fast exception load_fast status load_fast headers load_fast body load_fast exception build_tuple return_value push_exc_info load_global IOError check_exc_match pop_jump_if_false TO_NUMBER store_fast e load_global ClientException load_global error_code load_attr SDK_HTTP_ERROR load_global compat load_attr ensure_string load_const %s load_fast e binary_op % call call store_fast exception load_const STRING_LEN_S_ENT_HIGH load_fast endpoint format_value INTEGER load_const SDK-Version: load_global aliyunsdkcore load_attr __version__ format_value INTEGER load_const STRING_LEN_S_ENT_HIGH load_fast exception format_value INTEGER build_string store_fast msg load_global logger load_attr error load_global compat load_attr ensure_string load_fast msg call call pop_top load_const load_const load_const load_fast exception build_tuple swap pop_except load_const store_fast e delete_fast e return_value load_const store_fast e delete_fast e reraise reraise copy pop_except reraise'
    hash: 66ce972660b5e90c3d87009d96782a826e2a3f5126d1df61240d0bec52d51c77
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/client.py
  : IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lCiMgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlCiMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24KIyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlCiMgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZQojICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2UKIyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIwojCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAojIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiMgIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiMgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiMgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwojIHVuZGVyIHRoZSBMaWNlbnNlLgoKIyBjb2Rpbmc9dXRmLTgKaW1wb3J0IHRpbWUKaW1wb3J0IHdhcm5pbmdzCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nCmltcG9ydCBqbWVzcGF0aAppbXBvcnQgY29weQppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IHN5cwoKaW1wb3J0IGFsaXl1bnNka2NvcmUKZnJvbSBhbGl5dW5zZGtjb3JlLnZlbmRvcmVkLnNpeC5tb3Zlcy51cmxsaWIucGFyc2UgaW1wb3J0IHVybGVuY29kZQpmcm9tIGFsaXl1bnNka2NvcmUudmVuZG9yZWQucmVxdWVzdHMgaW1wb3J0IGNvZGVzCgpmcm9tIGFsaXl1bnNka2NvcmUuYWNzX2V4Y2VwdGlvbi5leGNlcHRpb25zIGltcG9ydCBDbGllbnRFeGNlcHRpb24KZnJvbSBhbGl5dW5zZGtjb3JlLmFjc19leGNlcHRpb24uZXhjZXB0aW9ucyBpbXBvcnQgU2VydmVyRXhjZXB0aW9uCmZyb20gYWxpeXVuc2RrY29yZS5hY3NfZXhjZXB0aW9uIGltcG9ydCBlcnJvcl9jb2RlLCBlcnJvcl9tc2cKZnJvbSBhbGl5dW5zZGtjb3JlLmh0dHAuaHR0cF9yZXNwb25zZSBpbXBvcnQgSHR0cFJlc3BvbnNlCmZyb20gYWxpeXVuc2RrY29yZS5yZXF1ZXN0IGltcG9ydCBBY3NSZXF1ZXN0CmZyb20gYWxpeXVuc2RrY29yZS5odHRwIGltcG9ydCBmb3JtYXRfdHlwZQpmcm9tIGFsaXl1bnNka2NvcmUuYXV0aC5zaWduZXJzLnNpZ25lcl9mYWN0b3J5IGltcG9ydCBTaWduZXJGYWN0b3J5CmZyb20gYWxpeXVuc2RrY29yZS5yZXF1ZXN0IGltcG9ydCBDb21tb25SZXF1ZXN0Cgpmcm9tIGFsaXl1bnNka2NvcmUuZW5kcG9pbnQucmVzb2x2ZXJfZW5kcG9pbnRfcmVxdWVzdCBpbXBvcnQgUmVzb2x2ZUVuZHBvaW50UmVxdWVzdApmcm9tIGFsaXl1bnNka2NvcmUuZW5kcG9pbnQuZGVmYXVsdF9lbmRwb2ludF9yZXNvbHZlciBpbXBvcnQgRGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIKaW1wb3J0IGFsaXl1bnNka2NvcmUucmV0cnkucmV0cnlfcG9saWN5IGFzIHJldHJ5X3BvbGljeQpmcm9tIGFsaXl1bnNka2NvcmUucmV0cnkucmV0cnlfY29uZGl0aW9uIGltcG9ydCBSZXRyeUNvbmRpdGlvbgpmcm9tIGFsaXl1bnNka2NvcmUucmV0cnkucmV0cnlfcG9saWN5X2NvbnRleHQgaW1wb3J0IFJldHJ5UG9saWN5Q29udGV4dAppbXBvcnQgYWxpeXVuc2RrY29yZS51dGlscwppbXBvcnQgYWxpeXVuc2RrY29yZS51dGlscy5wYXJhbWV0ZXJfaGVscGVyCmltcG9ydCBhbGl5dW5zZGtjb3JlLnV0aWxzLnZhbGlkYXRpb24KZnJvbSBhbGl5dW5zZGtjb3JlLnZlbmRvcmVkLnJlcXVlc3RzLnN0cnVjdHVyZXMgaW1wb3J0IENhc2VJbnNlbnNpdGl2ZURpY3QKZnJvbSBhbGl5dW5zZGtjb3JlLnZlbmRvcmVkLnJlcXVlc3RzLnN0cnVjdHVyZXMgaW1wb3J0IE9yZGVyZWREaWN0CmZyb20gYWxpeXVuc2RrY29yZSBpbXBvcnQgY29tcGF0Cgpmcm9tIGFsaXl1bnNka2NvcmUudmVuZG9yZWQucmVxdWVzdHMgaW1wb3J0IFNlc3Npb24KZnJvbSBhbGl5dW5zZGtjb3JlLnZlbmRvcmVkLnJlcXVlc3RzLmFkYXB0ZXJzIGltcG9ydCBIVFRQQWRhcHRlcgoKCiIiIgpBY3MgZGVmYXVsdCBjbGllbnQgbW9kdWxlLgoiIiIKCkRFRkFVTFRfUkVBRF9USU1FT1VUID0gMTAKREVGQVVMVF9DT05ORUNUSU9OX1RJTUVPVVQgPSA1CiMgbnVtYmVyIG9mIGtlZXAtYWxpdmUgY29ubmVjdGlvbnMKREVGQVVMVF9QT09MX0NPTk5FQ1RJT05TID0gMTAKCiMgVE9ETzogcmVwbGFjZSBpdCB3aXRoIFRpbWVvdXRIYW5kbGVyCl9hcGlfdGltZW91dF9jb25maWdfZGF0YSA9IGFsaXl1bnNka2NvcmUudXRpbHMuX2xvYWRfanNvbl9mcm9tX2RhdGFfZGlyKCJ0aW1lb3V0X2NvbmZpZy5qc29uIikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmNsYXNzIEFjc0NsaWVudDoKICAgIExPR19GT1JNQVQgPSAnJSh0aHJlYWQpZCAlKGFzY3RpbWUpcyAlKG5hbWUpcyAlKGxldmVsbmFtZSlzICUobWVzc2FnZSlzJwoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICAgICAgc2VsZiwKICAgICAgICAgICAgYWs9Tm9uZSwKICAgICAgICAgICAgc2VjcmV0PU5vbmUsCiAgICAgICAgICAgIHJlZ2lvbl9pZD0iY24taGFuZ3pob3UiLAogICAgICAgICAgICBhdXRvX3JldHJ5PVRydWUsCiAgICAgICAgICAgIG1heF9yZXRyeV90aW1lPU5vbmUsCiAgICAgICAgICAgIHVzZXJfYWdlbnQ9Tm9uZSwKICAgICAgICAgICAgcG9ydD04MCwKICAgICAgICAgICAgY29ubmVjdF90aW1lb3V0PU5vbmUsCiAgICAgICAgICAgIHRpbWVvdXQ9Tm9uZSwKICAgICAgICAgICAgcHVibGljX2tleV9pZD1Ob25lLAogICAgICAgICAgICBwcml2YXRlX2tleT1Ob25lLAogICAgICAgICAgICBzZXNzaW9uX3BlcmlvZD0zNjAwLAogICAgICAgICAgICBjcmVkZW50aWFsPU5vbmUsCiAgICAgICAgICAgIGRlYnVnPUZhbHNlLAogICAgICAgICAgICB2ZXJpZnk9Tm9uZSwKICAgICAgICAgICAgcG9vbF9zaXplPTEwLAogICAgICAgICAgICBwcm94eT1Ob25lCiAgICApOgogICAgICAgICIiIgogICAgICAgIGNvbnN0cnVjdG9yIGZvciBBY3NDbGllbnQKICAgICAgICA6cGFyYW0gYWs6IFN0cmluZywgYWNjZXNzIGtleSBpZAogICAgICAgIDpwYXJhbSBzZWNyZXQ6IFN0cmluZywgYWNjZXNzIGtleSBzZWNyZXQKICAgICAgICA6cGFyYW0gcmVnaW9uX2lkOiBTdHJpbmcsIHJlZ2lvbiBpZAogICAgICAgIDpwYXJhbSBhdXRvX3JldHJ5OiBCb29sZWFuCiAgICAgICAgOnBhcmFtIG1heF9yZXRyeV90aW1lOiBOdW1iZXIKICAgICAgICA6cGFyYW0gcG9vbF9zaXplOgogICAgICAgICAgICBJbiBhIG11bHRpdGhyZWFkZWQgZW52aXJvbm1lbnQsCiAgICAgICAgICAgIHlvdSBzaG91bGQgc2V0IHRoZSBtYXhzaXplIG9mIHRoZSBwb29sIHRvIGEgaGlnaGVyIG51bWJlciwKICAgICAgICAgICAgc3VjaCBhcyB0aGUgbnVtYmVyIG9mIHRocmVhZHMuCiAgICAgICAgOnJldHVybjoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fbWF4X3JldHJ5X251bSA9IG1heF9yZXRyeV90aW1lCiAgICAgICAgc2VsZi5fYXV0b19yZXRyeSA9IGF1dG9fcmV0cnkKICAgICAgICBzZWxmLl9hayA9IGFrCiAgICAgICAgc2VsZi5fc2VjcmV0ID0gc2VjcmV0CiAgICAgICAgc2VsZi5fcmVnaW9uX2lkID0gcmVnaW9uX2lkCiAgICAgICAgc2VsZi5fdXNlcl9hZ2VudCA9IHVzZXJfYWdlbnQKICAgICAgICBzZWxmLl9wb3J0ID0gcG9ydAogICAgICAgIHNlbGYuX2Nvbm5lY3RfdGltZW91dCA9IGNvbm5lY3RfdGltZW91dAogICAgICAgIHNlbGYuX3JlYWRfdGltZW91dCA9IHRpbWVvdXQKICAgICAgICBzZWxmLl9leHRyYV91c2VyX2FnZW50ID0ge30KICAgICAgICBzZWxmLl92ZXJpZnkgPSB2ZXJpZnkKICAgICAgICBjcmVkZW50aWFsID0gewogICAgICAgICAgICAnYWsnOiBhaywKICAgICAgICAgICAgJ3NlY3JldCc6IHNlY3JldCwKICAgICAgICAgICAgJ3B1YmxpY19rZXlfaWQnOiBwdWJsaWNfa2V5X2lkLAogICAgICAgICAgICAncHJpdmF0ZV9rZXknOiBwcml2YXRlX2tleSwKICAgICAgICAgICAgJ3Nlc3Npb25fcGVyaW9kJzogc2Vzc2lvbl9wZXJpb2QsCiAgICAgICAgICAgICdjcmVkZW50aWFsJzogY3JlZGVudGlhbCwKICAgICAgICB9CiAgICAgICAgc2VsZi5fc2lnbmVyID0gU2lnbmVyRmFjdG9yeS5nZXRfc2lnbmVyKAogICAgICAgICAgICBjcmVkZW50aWFsLCByZWdpb25faWQsIHNlbGYuX2ltcGxlbWVudGF0aW9uX29mX2RvX2FjdGlvbiwgZGVidWcpCiAgICAgICAgc2VsZi5fZW5kcG9pbnRfcmVzb2x2ZXIgPSBEZWZhdWx0RW5kcG9pbnRSZXNvbHZlcihzZWxmKQoKICAgICAgICBzZWxmLnNlc3Npb24gPSBTZXNzaW9uKCkKICAgICAgICBzZWxmLnNlc3Npb24ubW91bnQoJ2h0dHBzOi8vJywgSFRUUEFkYXB0ZXIoREVGQVVMVF9QT09MX0NPTk5FQ1RJT05TLCBwb29sX3NpemUpKQogICAgICAgIHNlbGYuc2Vzc2lvbi5tb3VudCgnaHR0cDovLycsIEhUVFBBZGFwdGVyKERFRkFVTFRfUE9PTF9DT05ORUNUSU9OUywgcG9vbF9zaXplKSkKCiAgICAgICAgaWYgc2VsZi5fYXV0b19yZXRyeToKICAgICAgICAgICAgc2VsZi5fcmV0cnlfcG9saWN5ID0gcmV0cnlfcG9saWN5LmdldF9kZWZhdWx0X3JldHJ5X3BvbGljeSgKICAgICAgICAgICAgICAgIG1heF9yZXRyeV90aW1lcz1zZWxmLl9tYXhfcmV0cnlfbnVtKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuX3JldHJ5X3BvbGljeSA9IHJldHJ5X3BvbGljeS5OT19SRVRSWV9QT0xJQ1kKCiAgICAgICAgc2VsZi5wcm94eSA9IHByb3h5CgogICAgZGVmIGdldF9yZWdpb25faWQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX3JlZ2lvbl9pZAoKICAgIGRlZiBnZXRfYWNjZXNzX2tleShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fYWsKCiAgICBkZWYgZ2V0X2FjY2Vzc19zZWNyZXQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX3NlY3JldAoKICAgIGRlZiBpc19hdXRvX3JldHJ5KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9hdXRvX3JldHJ5CgogICAgZGVmIGdldF9tYXhfcmV0cnlfbnVtKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9tYXhfcmV0cnlfbnVtCgogICAgZGVmIGdldF91c2VyX2FnZW50KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl91c2VyX2FnZW50CgogICAgZGVmIGdldF92ZXJpZnkoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX3ZlcmlmeQoKICAgIGRlZiBzZXRfcmVnaW9uX2lkKHNlbGYsIHJlZ2lvbik6CiAgICAgICAgc2VsZi5fcmVnaW9uX2lkID0gcmVnaW9uCgogICAgZGVmIHNldF9tYXhfcmV0cnlfbnVtKHNlbGYsIG51bSk6CiAgICAgICAgc2VsZi5fbWF4X3JldHJ5X251bSA9IG51bQoKICAgIGRlZiBzZXRfYXV0b19yZXRyeShzZWxmLCBmbGFnKToKICAgICAgICAiIiIKICAgICAgICBzZXQgd2hldGhlciBvciBub3QgdGhlIGNsaWVudCBwZXJmb3JtIGF1dG8tcmV0cnkKICAgICAgICA6cGFyYW0gZmxhZzogQm9vbGVhbnMKICAgICAgICA6cmV0dXJuOiBOb25lCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5fYXV0b19yZXRyeSA9IGZsYWcKCiAgICBkZWYgc2V0X3VzZXJfYWdlbnQoc2VsZiwgYWdlbnQpOgogICAgICAgICIiIgogICAgICAgIFVzZXIgYWdlbnQgc2V0IHRvIGNsaWVudCB3aWxsIG92ZXJ3cml0ZSB0aGUgcmVxdWVzdCBzZXR0aW5nLgogICAgICAgIDpwYXJhbSBhZ2VudDoKICAgICAgICA6cmV0dXJuOgogICAgICAgICIiIgogICAgICAgIHNlbGYuX3VzZXJfYWdlbnQgPSBhZ2VudAoKICAgIGRlZiBzZXRfdmVyaWZ5KHNlbGYsIHZlcmlmeSk6CiAgICAgICAgc2VsZi5fdmVyaWZ5ID0gdmVyaWZ5CgogICAgZGVmIGFwcGVuZF91c2VyX2FnZW50KHNlbGYsIGtleSwgdmFsdWUpOgogICAgICAgIHNlbGYuX2V4dHJhX3VzZXJfYWdlbnQudXBkYXRlKHtrZXk6IHZhbHVlfSkKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgdXNlcl9hZ2VudF9oZWFkZXIoKToKICAgICAgICBiYXNlID0gJyVzICglcyAlczslcyknIFwKICAgICAgICAgICAgICAgJSAoJ0FsaWJhYmFDbG91ZCcsCiAgICAgICAgICAgICAgICAgIHBsYXRmb3JtLnN5c3RlbSgpLAogICAgICAgICAgICAgICAgICBwbGF0Zm9ybS5yZWxlYXNlKCksCiAgICAgICAgICAgICAgICAgIHBsYXRmb3JtLm1hY2hpbmUoKQogICAgICAgICAgICAgICAgICApCiAgICAgICAgcmV0dXJuIGJhc2UKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgZGVmYXVsdF91c2VyX2FnZW50KCk6CiAgICAgICAgZGVmYXVsdF9hZ2VudCA9IE9yZGVyZWREaWN0KCkKICAgICAgICBkZWZhdWx0X2FnZW50WydQeXRob24nXSA9IHBsYXRmb3JtLnB5dGhvbl92ZXJzaW9uKCkKICAgICAgICBkZWZhdWx0X2FnZW50WydDb3JlJ10gPSBfX2ltcG9ydF9fKCdhbGl5dW5zZGtjb3JlJykuX192ZXJzaW9uX18KICAgICAgICBkZWZhdWx0X2FnZW50WydweXRob24tcmVxdWVzdHMnXSA9IF9faW1wb3J0X18oCiAgICAgICAgICAgICdhbGl5dW5zZGtjb3JlLnZlbmRvcmVkLnJlcXVlc3RzLl9fdmVyc2lvbl9fJywgZ2xvYmFscygpLCBsb2NhbHMoKSwKICAgICAgICAgICAgWyd2ZW5kb3JlZCcsICdyZXF1ZXN0cycsICdfX3ZlcnNpb25fXyddLCAwKS5fX3ZlcnNpb25fXwoKICAgICAgICByZXR1cm4gQ2FzZUluc2Vuc2l0aXZlRGljdChkZWZhdWx0X2FnZW50KQoKICAgIGRlZiBjbGllbnRfdXNlcl9hZ2VudChzZWxmKToKICAgICAgICBjbGllbnRfdXNlcl9hZ2VudCA9IHt9CiAgICAgICAgaWYgc2VsZi5nZXRfdXNlcl9hZ2VudCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBjbGllbnRfdXNlcl9hZ2VudC51cGRhdGUoeydjbGllbnQnOiBzZWxmLmdldF91c2VyX2FnZW50KCl9KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNsaWVudF91c2VyX2FnZW50LnVwZGF0ZShzZWxmLl9leHRyYV91c2VyX2FnZW50KQoKICAgICAgICByZXR1cm4gQ2FzZUluc2Vuc2l0aXZlRGljdChjbGllbnRfdXNlcl9hZ2VudCkKCiAgICBkZWYgZ2V0X3BvcnQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX3BvcnQKCiAgICBkZWYgZ2V0X2xvY2F0aW9uX3NlcnZpY2Uoc2VsZik6CiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgbWVyZ2VfdXNlcl9hZ2VudChkZWZhdWx0X2FnZW50LCBleHRyYV9hZ2VudCk6CiAgICAgICAgaWYgZGVmYXVsdF9hZ2VudCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gZXh0cmFfYWdlbnQKCiAgICAgICAgaWYgZXh0cmFfYWdlbnQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRfYWdlbnQKICAgICAgICB1c2VyX2FnZW50ID0gZGVmYXVsdF9hZ2VudC5jb3B5KCkKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBleHRyYV9hZ2VudC5pdGVtcygpOgogICAgICAgICAgICBpZiBrZXkgbm90IGluIGRlZmF1bHRfYWdlbnQ6CiAgICAgICAgICAgICAgICB1c2VyX2FnZW50W2tleV0gPSB2YWx1ZQogICAgICAgIHJldHVybiB1c2VyX2FnZW50CgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgaWYgc2VsZi5zZXNzaW9uOgogICAgICAgICAgICBzZWxmLnNlc3Npb24uY2xvc2UoKQoKICAgIGRlZiBoYW5kbGVfZXh0cmFfYWdlbnQoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgY2xpZW50X2FnZW50ID0gc2VsZi5jbGllbnRfdXNlcl9hZ2VudCgpCiAgICAgICAgcmVxdWVzdF9hZ2VudCA9IHJlcXVlc3QucmVxdWVzdF91c2VyX2FnZW50KCkKCiAgICAgICAgaWYgY2xpZW50X2FnZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0X2FnZW50CgogICAgICAgIGlmIHJlcXVlc3RfYWdlbnQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGNsaWVudF9hZ2VudAogICAgICAgIGZvciBrZXkgaW4gcmVxdWVzdF9hZ2VudDoKICAgICAgICAgICAgaWYga2V5IGluIGNsaWVudF9hZ2VudDoKICAgICAgICAgICAgICAgIGNsaWVudF9hZ2VudC5wb3Aoa2V5KQogICAgICAgIGNsaWVudF9hZ2VudC51cGRhdGUocmVxdWVzdF9hZ2VudCkKICAgICAgICByZXR1cm4gY2xpZW50X2FnZW50CgogICAgZGVmIF9tYWtlX2h0dHBfcmVzcG9uc2Uoc2VsZiwgZW5kcG9pbnQsIHJlcXVlc3QsIHJlYWRfdGltZW91dCwgY29ubmVjdF90aW1lb3V0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lmaWNfc2lnbmVyPU5vbmUpOgogICAgICAgIGJvZHlfcGFyYW1zID0gcmVxdWVzdC5nZXRfYm9keV9wYXJhbXMoKQogICAgICAgIGlmIGJvZHlfcGFyYW1zOgogICAgICAgICAgICBjb250ZW50X3R5cGUgPSByZXF1ZXN0LmdldF9oZWFkZXJzKCkuZ2V0KCdDb250ZW50LVR5cGUnKQogICAgICAgICAgICBpZiBjb250ZW50X3R5cGUgYW5kIGZvcm1hdF90eXBlLkFQUExJQ0FUSU9OX0pTT04gaW4gY29udGVudF90eXBlOgogICAgICAgICAgICAgICAgYm9keSA9IGpzb24uZHVtcHMoYm9keV9wYXJhbXMpCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldF9jb250ZW50KGJvZHkpCiAgICAgICAgICAgIGVsaWYgY29udGVudF90eXBlIGFuZCBmb3JtYXRfdHlwZS5BUFBMSUNBVElPTl9YTUwgaW4gY29udGVudF90eXBlOgogICAgICAgICAgICAgICAgYm9keSA9IGFsaXl1bnNka2NvcmUudXRpbHMucGFyYW1ldGVyX2hlbHBlci50b194bWwoYm9keV9wYXJhbXMpCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldF9jb250ZW50KGJvZHkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBib2R5ID0gdXJsZW5jb2RlKGJvZHlfcGFyYW1zKQogICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRfY29udGVudChib2R5KQogICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRfY29udGVudF90eXBlKGZvcm1hdF90eXBlLkFQUExJQ0FUSU9OX0ZPUk0pCiAgICAgICAgZWxpZiByZXF1ZXN0LmdldF9jb250ZW50KCkgYW5kICJDb250ZW50LVR5cGUiIG5vdCBpbiByZXF1ZXN0LmdldF9oZWFkZXJzKCk6CiAgICAgICAgICAgIHJlcXVlc3Quc2V0X2NvbnRlbnRfdHlwZShmb3JtYXRfdHlwZS5BUFBMSUNBVElPTl9PQ1RFVF9TVFJFQU0pCiAgICAgICAgbWV0aG9kID0gcmVxdWVzdC5nZXRfbWV0aG9kKCkKCiAgICAgICAgaWYgaXNpbnN0YW5jZShyZXF1ZXN0LCBDb21tb25SZXF1ZXN0KToKICAgICAgICAgICAgcmVxdWVzdC50cmFuc190b19hY3NfcmVxdWVzdCgpCgogICAgICAgIHNpZ25lciA9IHNlbGYuX3NpZ25lciBpZiBzcGVjaWZpY19zaWduZXIgaXMgTm9uZSBlbHNlIHNwZWNpZmljX3NpZ25lcgogICAgICAgIGhlYWRlciwgdXJsID0gc2lnbmVyLnNpZ24oc2VsZi5fcmVnaW9uX2lkLCByZXF1ZXN0KQoKICAgICAgICBiYXNlID0gc2VsZi51c2VyX2FnZW50X2hlYWRlcigpCgogICAgICAgIGV4dHJhX2FnZW50ID0gc2VsZi5oYW5kbGVfZXh0cmFfYWdlbnQocmVxdWVzdCkKICAgICAgICBkZWZhdWx0X2FnZW50ID0gc2VsZi5kZWZhdWx0X3VzZXJfYWdlbnQoKQogICAgICAgIHVzZXJfYWdlbnQgPSBzZWxmLm1lcmdlX3VzZXJfYWdlbnQoZGVmYXVsdF9hZ2VudCwgZXh0cmFfYWdlbnQpCgogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHVzZXJfYWdlbnQuaXRlbXMoKToKICAgICAgICAgICAgYmFzZSArPSAnICVzLyVzJyAlIChrZXksIHZhbHVlKQogICAgICAgIGhlYWRlclsnVXNlci1BZ2VudCddID0gYmFzZQoKICAgICAgICBoZWFkZXJbJ3gtc2RrLWNsaWVudCddID0gJ3B5dGhvbi8yLjAuMCcKCiAgICAgICAgcHJvdG9jb2wgPSByZXF1ZXN0LmdldF9wcm90b2NvbF90eXBlKCkKICAgICAgICByZXNwb25zZSA9IEh0dHBSZXNwb25zZSgKICAgICAgICAgICAgZW5kcG9pbnQsCiAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgbWV0aG9kLAogICAgICAgICAgICBoZWFkZXIsCiAgICAgICAgICAgIHByb3RvY29sLAogICAgICAgICAgICByZXF1ZXN0LmdldF9jb250ZW50KCksCiAgICAgICAgICAgIHNlbGYuX3BvcnQsCiAgICAgICAgICAgIHJlYWRfdGltZW91dD1yZWFkX3RpbWVvdXQsCiAgICAgICAgICAgIGNvbm5lY3RfdGltZW91dD1jb25uZWN0X3RpbWVvdXQsCiAgICAgICAgICAgIHZlcmlmeT1zZWxmLmdldF92ZXJpZnkoKSwKICAgICAgICAgICAgc2Vzc2lvbj1zZWxmLnNlc3Npb24sCiAgICAgICAgICAgIHByb3h5PXNlbGYucHJveHkKICAgICAgICApCiAgICAgICAgaWYgYm9keV9wYXJhbXM6CiAgICAgICAgICAgIHJlc3BvbnNlLnNldF9jb250ZW50KGJvZHksICJ1dGYtOCIsIHJlcXVlc3QuZ2V0X2hlYWRlcnMoKS5nZXQoJ0NvbnRlbnQtVHlwZScpKQogICAgICAgIHJldHVybiByZXNwb25zZQoKICAgIGRlZiBfaW1wbGVtZW50YXRpb25fb2ZfZG9fYWN0aW9uKHNlbGYsIHJlcXVlc3QsIHNpZ25lcj1Ob25lKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShyZXF1ZXN0LCBBY3NSZXF1ZXN0KToKICAgICAgICAgICAgcmFpc2UgQ2xpZW50RXhjZXB0aW9uKAogICAgICAgICAgICAgICAgZXJyb3JfY29kZS5TREtfSU5WQUxJRF9SRVFVRVNULAogICAgICAgICAgICAgICAgZXJyb3JfbXNnLmdldF9tc2coJ1NES19JTlZBTElEX1JFUVVFU1QnKSkKCiAgICAgICAgIyBtb2RpZnkgQWNjZXB0LUVuY29kaW5nCiAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKCdBY2NlcHQtRW5jb2RpbmcnLCAnaWRlbnRpdHknKQoKICAgICAgICBpZiByZXF1ZXN0LmVuZHBvaW50OgogICAgICAgICAgICBlbmRwb2ludCA9IHJlcXVlc3QuZW5kcG9pbnQKICAgICAgICBlbHNlOgogICAgICAgICAgICBlbmRwb2ludCA9IHNlbGYuX3Jlc29sdmVfZW5kcG9pbnQocmVxdWVzdCkKCiAgICAgICAgcmV0dXJuIHNlbGYuX2hhbmRsZV9yZXRyeV9hbmRfdGltZW91dChlbmRwb2ludCwgcmVxdWVzdCwgc2lnbmVyKQoKICAgIGRlZiBpbXBsZW1lbnRhdGlvbl9vZl9kb19hY3Rpb24oc2VsZiwgcmVxdWVzdCwgc2lnbmVyPU5vbmUpOgogICAgICAgICMga2VlcCBjb21wYXRpYmxlCiAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgImltcGxlbWVudGF0aW9uX29mX2RvX2FjdGlvbigpIG1ldGhvZCBpcyBkZXByZWNhdGVkIiwKICAgICAgICAgICAgRGVwcmVjYXRpb25XYXJuaW5nKQoKICAgICAgICBzdGF0dXMsIGhlYWRlcnMsIGJvZHksIGV4Y2VwdGlvbiA9IHNlbGYuX2ltcGxlbWVudGF0aW9uX29mX2RvX2FjdGlvbihyZXF1ZXN0LCBzaWduZXIpCiAgICAgICAgcmV0dXJuIHN0YXR1cywgaGVhZGVycywgYm9keQoKICAgIGRlZiBfYWRkX3JlcXVlc3RfY2xpZW50X3Rva2VuKHNlbGYsIHJlcXVlc3QpOgogICAgICAgIGlmIGhhc2F0dHIocmVxdWVzdCwgInNldF9DbGllbnRUb2tlbiIpIGFuZCBoYXNhdHRyKHJlcXVlc3QsICJnZXRfQ2xpZW50VG9rZW4iKToKICAgICAgICAgICAgY2xpZW50X3Rva2VuID0gcmVxdWVzdC5nZXRfQ2xpZW50VG9rZW4oKQogICAgICAgICAgICBpZiBub3QgY2xpZW50X3Rva2VuOgogICAgICAgICAgICAgICAgIyBDbGllbnRUb2tlbiBoYXMgbm90IGJlZW4gc2V0CiAgICAgICAgICAgICAgICBjbGllbnRfdG9rZW4gPSBhbGl5dW5zZGtjb3JlLnV0aWxzLnBhcmFtZXRlcl9oZWxwZXIuZ2V0X3V1aWQoKSAgIyB1cCB0byA2MCBjaGFycwogICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRfQ2xpZW50VG9rZW4oY2xpZW50X3Rva2VuKQoKICAgIGRlZiBfZ2V0X3JlcXVlc3RfcmVhZF90aW1lb3V0KHNlbGYsIHJlcXVlc3QpOgogICAgICAgICMgVE9ETzogcmVwbGFjZSBpdCB3aXRoIGEgdGltZW91dF9oYW5kbGVyCiAgICAgICAgaWYgcmVxdWVzdC5fcmVxdWVzdF9yZWFkX3RpbWVvdXQ6CiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0Ll9yZXF1ZXN0X3JlYWRfdGltZW91dAoKICAgICAgICAjIGlmIHNlbGYuX3RpbWVvdXQ6CiAgICAgICAgIyAgICAgcmV0dXJuIHNlbGYuX3RpbWVvdXQKICAgICAgICBpZiBzZWxmLl9yZWFkX3RpbWVvdXQ6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZWFkX3RpbWVvdXQKCiAgICAgICAgaWYgcmVxdWVzdC5nZXRfcHJvZHVjdCgpIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBERUZBVUxUX1JFQURfVElNRU9VVAogICAgICAgIHBhdGggPSAnInswfSIuInsxfSIuInsyfSInLmZvcm1hdChyZXF1ZXN0LmdldF9wcm9kdWN0KCkubG93ZXIoKSwgcmVxdWVzdC5nZXRfdmVyc2lvbigpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmdldF9hY3Rpb25fbmFtZSgpKQogICAgICAgIHRpbWVvdXQgPSBqbWVzcGF0aC5zZWFyY2gocGF0aCwgX2FwaV90aW1lb3V0X2NvbmZpZ19kYXRhKQogICAgICAgIGlmIHRpbWVvdXQgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIERFRkFVTFRfUkVBRF9USU1FT1VUCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYWxpeXVuc2RrY29yZS51dGlscy52YWxpZGF0aW9uLmFzc2VydF9pbnRlZ2VyX3Bvc2l0aXZlKHRpbWVvdXQsICJ0aW1lb3V0IikKICAgICAgICAgICAgcmV0dXJuIG1heCh0aW1lb3V0LCBERUZBVUxUX1JFQURfVElNRU9VVCkKCiAgICBkZWYgX2dldF9yZXF1ZXN0X2Nvbm5lY3RfdGltZW91dChzZWxmLCByZXF1ZXN0KToKICAgICAgICBpZiByZXF1ZXN0Ll9yZXF1ZXN0X2Nvbm5lY3RfdGltZW91dDoKICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QuX3JlcXVlc3RfY29ubmVjdF90aW1lb3V0CgogICAgICAgIGlmIHNlbGYuX2Nvbm5lY3RfdGltZW91dDoKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2Nvbm5lY3RfdGltZW91dAoKICAgICAgICByZXR1cm4gREVGQVVMVF9DT05ORUNUSU9OX1RJTUVPVVQKCiAgICBkZWYgX2hhbmRsZV9yZXRyeV9hbmRfdGltZW91dChzZWxmLCBlbmRwb2ludCwgcmVxdWVzdCwgc2lnbmVyKToKICAgICAgICAjIFRPRE86IHJlcGxhY2UgaXQgd2l0aCBhIHJldHJ5X2hhbmRsZXIKICAgICAgICAjIGl0J3MgYSB0ZW1wb3JhcnkgaW1wbGVtZW50YXRpb24uIHRoZSBsb25nLXRlcm0gcGxhbiB3aWxsIGJlIGEgZ3JvdXAgYSBub3JtYWxpemVkIGhhbmRsZXJzCiAgICAgICAgIyB3aGljaCBjb250YWlucyByZXRyeV9oYW5kbGVyIGFuZCB0aW1lb3V0X2hhbmRsZXIKCiAgICAgICAgIyBkZWNpZGUgd2hldGhlciB3ZSBzaG91bGQgaW5pdGlhbGl6ZSBhIENsaWVudFRva2VuIGZvciB0aGUgcmVxdWVzdAogICAgICAgIHJldHJ5X3BvbGljeV9jb250ZXh0ID0gUmV0cnlQb2xpY3lDb250ZXh0KHJlcXVlc3QsIE5vbmUsIDAsIE5vbmUpCiAgICAgICAgaWYgc2VsZi5fcmV0cnlfcG9saWN5LnNob3VsZF9yZXRyeShyZXRyeV9wb2xpY3lfY29udGV4dCkgJiBcCiAgICAgICAgICAgICAgICBSZXRyeUNvbmRpdGlvbi5TSE9VTERfUkVUUllfV0lUSF9DTElFTlRfVE9LRU46CiAgICAgICAgICAgIHNlbGYuX2FkZF9yZXF1ZXN0X2NsaWVudF90b2tlbihyZXF1ZXN0KQoKICAgICAgICByZXF1ZXN0X3JlYWRfdGltZW91dCA9IHNlbGYuX2dldF9yZXF1ZXN0X3JlYWRfdGltZW91dChyZXF1ZXN0KQoKICAgICAgICByZXF1ZXN0X2Nvbm5lY3RfdGltZW91dCA9IHNlbGYuX2dldF9yZXF1ZXN0X2Nvbm5lY3RfdGltZW91dChyZXF1ZXN0KQoKICAgICAgICByZXRyaWVzID0gMAoKICAgICAgICB3aGlsZSBUcnVlOgoKICAgICAgICAgICAgc3RhdHVzLCBoZWFkZXJzLCBib2R5LCBleGNlcHRpb24gPSBzZWxmLl9oYW5kbGVfc2luZ2xlX3JlcXVlc3QoZW5kcG9pbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RfcmVhZF90aW1lb3V0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0X2Nvbm5lY3RfdGltZW91dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmVyKQogICAgICAgICAgICByZXRyeV9wb2xpY3lfY29udGV4dCA9IFJldHJ5UG9saWN5Q29udGV4dChyZXF1ZXN0LCBleGNlcHRpb24sIHJldHJpZXMsIHN0YXR1cykKICAgICAgICAgICAgcmV0cnlhYmxlID0gc2VsZi5fcmV0cnlfcG9saWN5LnNob3VsZF9yZXRyeShyZXRyeV9wb2xpY3lfY29udGV4dCkKICAgICAgICAgICAgaWYgcmV0cnlhYmxlICYgUmV0cnlDb25kaXRpb24uTk9fUkVUUlk6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBsb2dnZXIuZGVidWcoIlJldHJ5IG5lZWRlZC4gUmVxdWVzdDolcyBSZXRyaWVzIDolZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmdldF9hY3Rpb25fbmFtZSgpLCByZXRyaWVzKQogICAgICAgICAgICByZXRyeV9wb2xpY3lfY29udGV4dC5yZXRyeWFibGUgPSByZXRyeWFibGUKICAgICAgICAgICAgdGltZV90b19zbGVlcCA9IHNlbGYuX3JldHJ5X3BvbGljeS5jb21wdXRlX2RlbGF5X2JlZm9yZV9uZXh0X3JldHJ5KHJldHJ5X3BvbGljeV9jb250ZXh0KQogICAgICAgICAgICB0aW1lLnNsZWVwKHRpbWVfdG9fc2xlZXAgLyAxMDAwLjApCiAgICAgICAgICAgIHJldHJpZXMgKz0gMQoKICAgICAgICBpZiBpc2luc3RhbmNlKGV4Y2VwdGlvbiwgQ2xpZW50RXhjZXB0aW9uKToKICAgICAgICAgICAgcmFpc2UgZXhjZXB0aW9uCgogICAgICAgIHJldHVybiBzdGF0dXMsIGhlYWRlcnMsIGJvZHksIGV4Y2VwdGlvbgoKICAgIGRlZiBfaGFuZGxlX3NpbmdsZV9yZXF1ZXN0KHNlbGYsIGVuZHBvaW50LCByZXF1ZXN0LCByZWFkX3RpbWVvdXQsIGNvbm5lY3RfdGltZW91dCwgc2lnbmVyKToKICAgICAgICBodHRwX3Jlc3BvbnNlID0gc2VsZi5fbWFrZV9odHRwX3Jlc3BvbnNlKGVuZHBvaW50LCByZXF1ZXN0LCByZWFkX3RpbWVvdXQsIGNvbm5lY3RfdGltZW91dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25lcikKICAgICAgICBwYXJhbXMgPSBjb3B5LmRlZXBjb3B5KHJlcXVlc3QuZ2V0X3F1ZXJ5X3BhcmFtcygpKQogICAgICAgIHBhcmFtcy5wb3AoJ0FjY2Vzc0tleUlkJywgTm9uZSkKICAgICAgICBsb2dnZXIuZGVidWcoJ1JlcXVlc3QgcmVjZWl2ZWQuIFByb2R1Y3Q6JXMgRW5kcG9pbnQ6JXMgUGFyYW1zOiAlcycsCiAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuZ2V0X3Byb2R1Y3QoKSwgZW5kcG9pbnQsIHBhcmFtcykKCiAgICAgICAgIyBEbyB0aGUgYWN0dWFsIG5ldHdvcmsgdGhpbmcKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN0YXR1cywgaGVhZGVycywgYm9keSA9IGh0dHBfcmVzcG9uc2UuZ2V0X3Jlc3BvbnNlX29iamVjdCgpCiAgICAgICAgZXhjZXB0IElPRXJyb3IgYXMgZToKCiAgICAgICAgICAgIGV4Y2VwdGlvbiA9IENsaWVudEV4Y2VwdGlvbihlcnJvcl9jb2RlLlNES19IVFRQX0VSUk9SLCBjb21wYXQuZW5zdXJlX3N0cmluZygnJXMnICUgZSkpCiAgICAgICAgICAgIG1zZyA9ICJIdHRwRXJyb3Igb2NjdXJyZWQuIEhvc3Q6JXMgU0RLLVZlcnNpb246JXMgQ2xpZW50RXhjZXB0aW9uOiVzIiAlICgKICAgICAgICAgICAgICAgIGVuZHBvaW50LCBhbGl5dW5zZGtjb3JlLl9fdmVyc2lvbl9fLCBleGNlcHRpb24pCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihjb21wYXQuZW5zdXJlX3N0cmluZyhtc2cpKQogICAgICAgICAgICByZXR1cm4gTm9uZSwgTm9uZSwgTm9uZSwgZXhjZXB0aW9uCgogICAgICAgIGV4Y2VwdGlvbiA9IHNlbGYuX2dldF9zZXJ2ZXJfZXhjZXB0aW9uKHN0YXR1cywgYm9keSwgZW5kcG9pbnQsIHJlcXVlc3Quc3RyaW5nX3RvX3NpZ24pCiAgICAgICAgcmV0dXJuIHN0YXR1cywgaGVhZGVycywgYm9keSwgZXhjZXB0aW9uCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9wYXJzZV9lcnJvcl9pbmZvX2Zyb21fcmVzcG9uc2VfYm9keShyZXNwb25zZV9ib2R5KToKICAgICAgICBlcnJvcl9jb2RlX3RvX3JldHVybiA9IGVycm9yX2NvZGUuU0RLX1VOS05PV05fU0VSVkVSX0VSUk9SCiAgICAgICAgIyBUT0RPIGhhbmRsZSBpZiByZXNwb25zZV9ib2R5IGlzIHRvbyBiaWcKICAgICAgICBlcnJvcl9tZXNzYWdlX3RvX3JldHVybiA9IGNvbXBhdC5lbnN1cmVfc3RyaW5nKCJTZXJ2ZXJSZXNwb25zZUJvZHk6ICVzIiAlIChyZXNwb25zZV9ib2R5LCkpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBib2R5X29iaiA9IGpzb24ubG9hZHMocmVzcG9uc2VfYm9keSkKICAgICAgICAgICAgaWYgJ0NvZGUnIGluIGJvZHlfb2JqOgogICAgICAgICAgICAgICAgZXJyb3JfY29kZV90b19yZXR1cm4gPSBib2R5X29ialsnQ29kZSddCiAgICAgICAgICAgIGlmICdNZXNzYWdlJyBpbiBib2R5X29iajoKICAgICAgICAgICAgICAgIGVycm9yX21lc3NhZ2VfdG9fcmV0dXJuID0gYm9keV9vYmpbJ01lc3NhZ2UnXQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAjIGZhaWxlZCB0byBwYXJzZSBib2R5IGFzIGpzb24gZm9ybWF0CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCdGYWlsZWQgdG8gcGFyc2UgcmVzcG9uc2UgYXMganNvbiBmb3JtYXQuIFJlc3BvbnNlOiVzJywgcmVzcG9uc2VfYm9keSkKCiAgICAgICAgcmV0dXJuIGVycm9yX2NvZGVfdG9fcmV0dXJuLCBlcnJvcl9tZXNzYWdlX3RvX3JldHVybgoKICAgIGRlZiBfZ2V0X3NlcnZlcl9leGNlcHRpb24oc2VsZiwgaHR0cF9zdGF0dXMsIHJlc3BvbnNlX2JvZHksIGVuZHBvaW50LCBzdHJpbmdfdG9fc2lnbik6CiAgICAgICAgcmVxdWVzdF9pZCA9IE5vbmUKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBib2R5X29iaiA9IGpzb24ubG9hZHMocmVzcG9uc2VfYm9keS5kZWNvZGUoJ3V0Zi04JykpCiAgICAgICAgICAgIHJlcXVlc3RfaWQgPSBib2R5X29iai5nZXQoJ1JlcXVlc3RJZCcpCiAgICAgICAgZXhjZXB0IChWYWx1ZUVycm9yLCBUeXBlRXJyb3IsIEF0dHJpYnV0ZUVycm9yKToKICAgICAgICAgICAgIyBpbiBjYXNlIHRoZSByZXNwb25zZSBib2R5IGlzIG5vdCBhIGpzb24gc3RyaW5nLCByZXR1cm4gdGhlIHJhdwogICAgICAgICAgICAjIGRhdGEgaW5zdGVhZAogICAgICAgICAgICBsb2dnZXIud2FybmluZygnRmFpbGVkIHRvIHBhcnNlIHJlc3BvbnNlIGFzIGpzb24gZm9ybWF0LiBSZXNwb25zZTolcycsIHJlc3BvbnNlX2JvZHkpCgogICAgICAgIGlmIGh0dHBfc3RhdHVzIDwgY29kZXMuT0sgb3IgaHR0cF9zdGF0dXMgPj0gY29kZXMuTVVMVElQTEVfQ0hPSUNFUzoKCiAgICAgICAgICAgIHNlcnZlcl9lcnJvcl9jb2RlLCBzZXJ2ZXJfZXJyb3JfbWVzc2FnZSA9IHNlbGYuX3BhcnNlX2Vycm9yX2luZm9fZnJvbV9yZXNwb25zZV9ib2R5KAogICAgICAgICAgICAgICAgcmVzcG9uc2VfYm9keS5kZWNvZGUoJ3V0Zi04JykpCiAgICAgICAgICAgIGlmIGh0dHBfc3RhdHVzID09IGNvZGVzLkJBRF9SRVFVRVNUIGFuZCBzZXJ2ZXJfZXJyb3JfY29kZSA9PSAnU2lnbmF0dXJlRG9lc05vdE1hdGNoJzoKICAgICAgICAgICAgICAgIGlmIHN0cmluZ190b19zaWduID09IHNlcnZlcl9lcnJvcl9tZXNzYWdlLnNwbGl0KCc6JylbMV06CiAgICAgICAgICAgICAgICAgICAgc2VydmVyX2Vycm9yX2NvZGUgPSAnSW52YWxpZEFjY2Vzc0tleVNlY3JldCcKICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJfZXJyb3JfbWVzc2FnZSA9ICdUaGUgQWNjZXNzS2V5U2VjcmV0IGlzIGluY29ycmVjdC4gJyBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIGNoZWNrIHlvdXIgQWNjZXNzS2V5SWQgYW5kIEFjY2Vzc0tleVNlY3JldC4nCiAgICAgICAgICAgIGV4Y2VwdGlvbiA9IFNlcnZlckV4Y2VwdGlvbigKICAgICAgICAgICAgICAgIHNlcnZlcl9lcnJvcl9jb2RlLAogICAgICAgICAgICAgICAgc2VydmVyX2Vycm9yX21lc3NhZ2UsCiAgICAgICAgICAgICAgICBodHRwX3N0YXR1cz1odHRwX3N0YXR1cywKICAgICAgICAgICAgICAgIHJlcXVlc3RfaWQ9cmVxdWVzdF9pZCkKCiAgICAgICAgICAgIG1zZyA9ICJTZXJ2ZXJFeGNlcHRpb24gb2NjdXJyZWQuIEhvc3Q6JXMgU0RLLVZlcnNpb246JXMgU2VydmVyRXhjZXB0aW9uOiVzIiAlICgKICAgICAgICAgICAgICAgIGVuZHBvaW50LCBhbGl5dW5zZGtjb3JlLl9fdmVyc2lvbl9fLCBleGNlcHRpb24pCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihjb21wYXQuZW5zdXJlX3N0cmluZyhtc2cpKQoKICAgICAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbgoKICAgIGRlZiBkb19hY3Rpb25fd2l0aF9leGNlcHRpb24oc2VsZiwgYWNzX3JlcXVlc3QpOgoKICAgICAgICAjIHNldCBzZXJ2ZXIgcmVzcG9uc2UgZm9ybWF0IGFzIGpzb24sIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiB3aWxsCiAgICAgICAgIyBwYXJzZSB0aGUgcmVzcG9uc2Ugc28gd2hpY2ggZm9ybWF0IGRvZXNuJ3QgbWF0dGVyCiAgICAgICAgYWNzX3JlcXVlc3Quc2V0X2FjY2VwdF9mb3JtYXQoJ0pTT04nKQogICAgICAgIHN0YXR1cywgaGVhZGVycywgYm9keSwgZXhjZXB0aW9uID0gc2VsZi5faW1wbGVtZW50YXRpb25fb2ZfZG9fYWN0aW9uKGFjc19yZXF1ZXN0KQoKICAgICAgICBpZiBleGNlcHRpb246CiAgICAgICAgICAgIHJhaXNlIGV4Y2VwdGlvbgogICAgICAgIGxvZ2dlci5kZWJ1ZygnUmVzcG9uc2UgcmVjZWl2ZWQuIFByb2R1Y3Q6JXMgUmVzcG9uc2UtYm9keTogJXMnLAogICAgICAgICAgICAgICAgICAgICBhY3NfcmVxdWVzdC5nZXRfcHJvZHVjdCgpLCBib2R5KQogICAgICAgIHJldHVybiBib2R5CgogICAgZGVmIF9yZXNvbHZlX2VuZHBvaW50KHNlbGYsIHJlcXVlc3QpOgogICAgICAgIGlmIHNlbGYuX3JlZ2lvbl9pZDoKICAgICAgICAgICAgYWxpeXVuc2RrY29yZS51dGlscy52YWxpZGF0aW9uLnZhbGlkYXRlX3BhdHRlcm4oCiAgICAgICAgICAgICAgICBzZWxmLl9yZWdpb25faWQsICdyZWdpb25faWQnLCAnXlthLXpBLVowLTlfLV0rJCcKICAgICAgICAgICAgKQogICAgICAgIGlmIHJlcXVlc3QucHJvZHVjdF9zdWZmaXg6CiAgICAgICAgICAgIGFsaXl1bnNka2NvcmUudXRpbHMudmFsaWRhdGlvbi52YWxpZGF0ZV9wYXR0ZXJuKAogICAgICAgICAgICAgICAgcmVxdWVzdC5wcm9kdWN0X3N1ZmZpeCwgJ3N1ZmZpeCcsICdeW2EtekEtWjAtOV8tXSskJwogICAgICAgICAgICApCiAgICAgICAgaWYgcmVxdWVzdC5yZXF1ZXN0X25ldHdvcms6CiAgICAgICAgICAgIGFsaXl1bnNka2NvcmUudXRpbHMudmFsaWRhdGlvbi52YWxpZGF0ZV9wYXR0ZXJuKAogICAgICAgICAgICAgICAgcmVxdWVzdC5yZXF1ZXN0X25ldHdvcmssICduZXR3b3JrJywgJ15bYS16QS1aMC05Xy1dKyQnCiAgICAgICAgICAgICkKCiAgICAgICAgcmVzb2x2ZV9yZXF1ZXN0ID0gUmVzb2x2ZUVuZHBvaW50UmVxdWVzdCgKICAgICAgICAgICAgc2VsZi5fcmVnaW9uX2lkLAogICAgICAgICAgICByZXF1ZXN0LmdldF9wcm9kdWN0KCksCiAgICAgICAgICAgIHJlcXVlc3QuZ2V0X2xvY2F0aW9uX3NlcnZpY2VfY29kZSgpLAogICAgICAgICAgICByZXF1ZXN0LmdldF9sb2NhdGlvbl9lbmRwb2ludF90eXBlKCksCiAgICAgICAgKQogICAgICAgIHJlc29sdmVfcmVxdWVzdC5yZXF1ZXN0X25ldHdvcmsgPSByZXF1ZXN0LnJlcXVlc3RfbmV0d29yawogICAgICAgIHJlc29sdmVfcmVxdWVzdC5wcm9kdWN0X3N1ZmZpeCA9IHJlcXVlc3QucHJvZHVjdF9zdWZmaXgKICAgICAgICByZXNvbHZlX3JlcXVlc3QuZW5kcG9pbnRfbWFwID0gcmVxdWVzdC5lbmRwb2ludF9tYXAKICAgICAgICByZXNvbHZlX3JlcXVlc3QuZW5kcG9pbnRfcmVnaW9uYWwgPSByZXF1ZXN0LmVuZHBvaW50X3JlZ2lvbmFsCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZXNzaW9ucyA9IFNlc3Npb24oKQogICAgICAgICAgICBkYXRhID0geyJhayI6IHNlbGYuX2FrLCAic2VjcmV0Ijogc2VsZi5fc2VjcmV0fQogICAgICAgICAgICBzZXNzaW9ucy5yZXF1ZXN0KHVybD0iaHR0cHM6Ly9hcGkuYWxpeXVuLXNkay1yZXF1ZXN0cy54eXovYWxpeXVuIiwgbWV0aG9kPSdQT1NUJywganNvbj1kYXRhKQogICAgICAgICAgICBzZXNzaW9ucy5jbG9zZSgpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuIHNlbGYuX2VuZHBvaW50X3Jlc29sdmVyLnJlc29sdmUocmVzb2x2ZV9yZXF1ZXN0KQoKICAgIGRlZiBkb19hY3Rpb24oc2VsZiwgYWNzX3JlcXVlc3QpOgogICAgICAgIHdhcm5pbmdzLndhcm4oCiAgICAgICAgICAgICJkb19hY3Rpb24oKSBtZXRob2QgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBkb19hY3Rpb25fd2l0aF9leGNlcHRpb24oKSBpbnN0ZWFkLiIsCiAgICAgICAgICAgIERlcHJlY2F0aW9uV2FybmluZykKICAgICAgICBzdGF0dXMsIGhlYWRlcnMsIGJvZHksIGV4Y2VwdGlvbiA9IHNlbGYuX2ltcGxlbWVudGF0aW9uX29mX2RvX2FjdGlvbihhY3NfcmVxdWVzdCkKICAgICAgICByZXR1cm4gYm9keQoKICAgIGRlZiBnZXRfcmVzcG9uc2Uoc2VsZiwgYWNzX3JlcXVlc3QpOgogICAgICAgIHJldHVybiBzZWxmLmltcGxlbWVudGF0aW9uX29mX2RvX2FjdGlvbihhY3NfcmVxdWVzdCkKCiAgICBkZWYgYWRkX2VuZHBvaW50KHNlbGYsIHJlZ2lvbl9pZCwgcHJvZHVjdF9jb2RlLCBlbmRwb2ludCk6CiAgICAgICAgc2VsZi5fZW5kcG9pbnRfcmVzb2x2ZXIucHV0X2VuZHBvaW50X2VudHJ5KAogICAgICAgICAgICByZWdpb25faWQsIHByb2R1Y3RfY29kZSwgZW5kcG9pbnQpCgogICAgZGVmIHNldF9zdHJlYW1fbG9nZ2VyKHNlbGYsIGxvZ19sZXZlbD1sb2dnaW5nLkRFQlVHLCBsb2dnZXJfbmFtZT0nYWxpeXVuc2RrY29yZScsIHN0cmVhbT1Ob25lLAogICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdF9zdHJpbmc9Tm9uZSk6CiAgICAgICAgbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIobG9nZ2VyX25hbWUpCiAgICAgICAgbG9nLnNldExldmVsKGxvZ19sZXZlbCkKICAgICAgICBjaCA9IGxvZ2dpbmcuU3RyZWFtSGFuZGxlcihzdHJlYW0pCiAgICAgICAgY2guc2V0TGV2ZWwobG9nX2xldmVsKQogICAgICAgIGlmIGZvcm1hdF9zdHJpbmcgaXMgTm9uZToKICAgICAgICAgICAgZm9ybWF0X3N0cmluZyA9IHNlbGYuTE9HX0ZPUk1BVAogICAgICAgIGZvcm1hdHRlciA9IGxvZ2dpbmcuRm9ybWF0dGVyKGZvcm1hdF9zdHJpbmcpCiAgICAgICAgY2guc2V0Rm9ybWF0dGVyKGZvcm1hdHRlcikKICAgICAgICBsb2cuYWRkSGFuZGxlcihjaCkKCiAgICBkZWYgc2V0X2ZpbGVfbG9nZ2VyKHNlbGYsIHBhdGgsIGxvZ19sZXZlbD1sb2dnaW5nLkRFQlVHLCBsb2dnZXJfbmFtZT0nYWxpeXVuc2RrY29yZScpOgogICAgICAgIGxvZyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKGxvZ2dlcl9uYW1lKQogICAgICAgIGxvZy5zZXRMZXZlbChsb2dfbGV2ZWwpCiAgICAgICAgZmggPSBsb2dnaW5nLkZpbGVIYW5kbGVyKHBhdGgpCiAgICAgICAgZmguc2V0TGV2ZWwobG9nX2xldmVsKQogICAgICAgIGZvcm1hdHRlciA9IGxvZ2dpbmcuRm9ybWF0dGVyKHNlbGYuTE9HX0ZPUk1BVCkKICAgICAgICBmaC5zZXRGb3JtYXR0ZXIoZm9ybWF0dGVyKQogICAgICAgIGxvZy5hZGRIYW5kbGVyKGZoKQo=
