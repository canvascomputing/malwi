statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/_collections.py
  contents:
  - name: HTTPHeaderDict
    score: 0.0
    code: |-
      def keys(self):
              with self.lock:
                  return list(iterkeys(self._container))
    tokens: make_cell __class__ resume load_name __name__ store_name __module__ load_const HTTPHeaderDict store_name __qualname__ load_const STRING_LEN_L_ENT_HIGH store_name __doc__ load_const load_closure __class__ build_tuple load_const OBJECT make_function defaults, closure store_name __init__ load_const OBJECT make_function store_name __setitem__ load_const OBJECT make_function store_name __getitem__ load_const OBJECT make_function store_name __delitem__ load_const OBJECT make_function store_name __contains__ load_const OBJECT make_function store_name __eq__ load_const OBJECT make_function store_name __ne__ load_name PY3 pop_jump_if_true TO_NUMBER load_name MutableMapping load_attr iterkeys store_name iterkeys load_name MutableMapping load_attr itervalues store_name itervalues push_null load_name object call store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name __len__ load_const OBJECT make_function store_name __iter__ load_name STRING_LEN_S_ENT_HIGH build_tuple load_const OBJECT make_function defaults store_name pop load_const OBJECT make_function store_name discard load_const OBJECT make_function store_name add load_const OBJECT make_function store_name extend load_name STRING_LEN_S_ENT_HIGH build_tuple load_const OBJECT make_function defaults store_name getlist load_name getlist store_name getheaders load_name getlist store_name STRING_LEN_S_ENT_HIGH load_name getlist store_name iget load_name getlist store_name get_all load_const OBJECT make_function store_name __repr__ load_const OBJECT make_function store_name _copy_from load_const OBJECT make_function store_name copy load_const OBJECT make_function store_name iteritems load_const OBJECT make_function store_name itermerged load_const OBJECT make_function store_name items load_name classmethod load_const OBJECT make_function call store_name from_httplib load_closure __class__ copy store_name __classcell__ return_value
    hash: bf97ac5becde1ff60ae6efdca1aed1d90699d5eb933815c6cb485ac9b9a1e883
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/_collections.py
  : 
