statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/widget.py
  contents:
  - name: WidgetChannel.created_at
    score: 0.0
    code: |-
      @property
          def created_at(self):
              """:class:`datetime.datetime`: Returns the channel's creation time in UTC."""
              return snowflake_time(self.id)
    tokens: resume load_global snowflake_time load_fast self load_attr id call return_value
    hash: 0441098e368ce15e837ab5ff16c63a3a66ab42869dd2e047ce310fc0cc91817d
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/widget.py: IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiIiIgpUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCkNvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IFJhcHB0egoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbgp0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwKYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlClNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCk9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwpGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSCkRFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KIiIiCgpmcm9tIC51dGlscyBpbXBvcnQgc25vd2ZsYWtlX3RpbWUsIF9nZXRfYXNfc25vd2ZsYWtlLCByZXNvbHZlX2ludml0ZQpmcm9tIC51c2VyIGltcG9ydCBCYXNlVXNlcgpmcm9tIC5hY3Rpdml0eSBpbXBvcnQgY3JlYXRlX2FjdGl2aXR5CmZyb20gLmludml0ZSBpbXBvcnQgSW52aXRlCmZyb20gLmVudW1zIGltcG9ydCBTdGF0dXMsIHRyeV9lbnVtCgpjbGFzcyBXaWRnZXRDaGFubmVsOgogICAgIiIiUmVwcmVzZW50cyBhICJwYXJ0aWFsIiB3aWRnZXQgY2hhbm5lbC4KCiAgICAuLiBjb250YWluZXI6OiBvcGVyYXRpb25zCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCA9PSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIHBhcnRpYWwgY2hhbm5lbHMgYXJlIHRoZSBzYW1lLgoKICAgICAgICAuLiBkZXNjcmliZTo6IHggIT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byBwYXJ0aWFsIGNoYW5uZWxzIGFyZSBub3QgdGhlIHNhbWUuCgogICAgICAgIC4uIGRlc2NyaWJlOjogaGFzaCh4KQoKICAgICAgICAgICAgUmV0dXJuIHRoZSBwYXJ0aWFsIGNoYW5uZWwncyBoYXNoLgoKICAgICAgICAuLiBkZXNjcmliZTo6IHN0cih4KQoKICAgICAgICAgICAgUmV0dXJucyB0aGUgcGFydGlhbCBjaGFubmVsJ3MgbmFtZS4KCiAgICBBdHRyaWJ1dGVzCiAgICAtLS0tLS0tLS0tLQogICAgaWQ6IDpjbGFzczpgaW50YAogICAgICAgIFRoZSBjaGFubmVsJ3MgSUQuCiAgICBuYW1lOiA6Y2xhc3M6YHN0cmAKICAgICAgICBUaGUgY2hhbm5lbCdzIG5hbWUuCiAgICBwb3NpdGlvbjogOmNsYXNzOmBpbnRgCiAgICAgICAgVGhlIGNoYW5uZWwncyBwb3NpdGlvbgogICAgIiIiCiAgICBfX3Nsb3RzX18gPSAoJ2lkJywgJ25hbWUnLCAncG9zaXRpb24nKQoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgKiprd2FyZ3MpOgogICAgICAgIHNlbGYuaWQgPSBrd2FyZ3MucG9wKCdpZCcpCiAgICAgICAgc2VsZi5uYW1lID0ga3dhcmdzLnBvcCgnbmFtZScpCiAgICAgICAgc2VsZi5wb3NpdGlvbiA9IGt3YXJncy5wb3AoJ3Bvc2l0aW9uJykKCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5uYW1lCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIHJldHVybiAnPFdpZGdldENoYW5uZWwgaWQ9ezAuaWR9IG5hbWU9ezAubmFtZSFyfSBwb3NpdGlvbj17MC5wb3NpdGlvbiFyfT4nLmZvcm1hdChzZWxmKQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIG1lbnRpb24oc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBzdHJgOiBUaGUgc3RyaW5nIHRoYXQgYWxsb3dzIHlvdSB0byBtZW50aW9uIHRoZSBjaGFubmVsLiIiIgogICAgICAgIHJldHVybiAnPCMlcz4nICUgc2VsZi5pZAoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGNyZWF0ZWRfYXQoc2VsZik6CiAgICAgICAgIiIiOmNsYXNzOmBkYXRldGltZS5kYXRldGltZWA6IFJldHVybnMgdGhlIGNoYW5uZWwncyBjcmVhdGlvbiB0aW1lIGluIFVUQy4iIiIKICAgICAgICByZXR1cm4gc25vd2ZsYWtlX3RpbWUoc2VsZi5pZCkKCmNsYXNzIFdpZGdldE1lbWJlcihCYXNlVXNlcik6CiAgICAiIiJSZXByZXNlbnRzIGEgInBhcnRpYWwiIG1lbWJlciBvZiB0aGUgd2lkZ2V0J3MgZ3VpbGQuCgogICAgLi4gY29udGFpbmVyOjogb3BlcmF0aW9ucwoKICAgICAgICAuLiBkZXNjcmliZTo6IHggPT0geQoKICAgICAgICAgICAgQ2hlY2tzIGlmIHR3byB3aWRnZXQgbWVtYmVycyBhcmUgdGhlIHNhbWUuCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCAhPSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIHdpZGdldCBtZW1iZXJzIGFyZSBub3QgdGhlIHNhbWUuCgogICAgICAgIC4uIGRlc2NyaWJlOjogaGFzaCh4KQoKICAgICAgICAgICAgUmV0dXJuIHRoZSB3aWRnZXQgbWVtYmVyJ3MgaGFzaC4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiBzdHIoeCkKCiAgICAgICAgICAgIFJldHVybnMgdGhlIHdpZGdldCBtZW1iZXIncyBgbmFtZSNkaXNjcmltaW5hdG9yYC4KCiAgICBBdHRyaWJ1dGVzCiAgICAtLS0tLS0tLS0tLQogICAgaWQ6IDpjbGFzczpgaW50YAogICAgICAgIFRoZSBtZW1iZXIncyBJRC4KICAgIG5hbWU6IDpjbGFzczpgc3RyYAogICAgICAgIFRoZSBtZW1iZXIncyB1c2VybmFtZS4KICAgIGRpc2NyaW1pbmF0b3I6IDpjbGFzczpgc3RyYAogICAgICAgIFRoZSBtZW1iZXIncyBkaXNjcmltaW5hdG9yLgogICAgYm90OiA6Y2xhc3M6YGJvb2xgCiAgICAgICAgV2hldGhlciB0aGUgbWVtYmVyIGlzIGEgYm90LgogICAgc3RhdHVzOiA6Y2xhc3M6YFN0YXR1c2AKICAgICAgICBUaGUgbWVtYmVyJ3Mgc3RhdHVzLgogICAgbmljazogT3B0aW9uYWxbOmNsYXNzOmBzdHJgXQogICAgICAgIFRoZSBtZW1iZXIncyBuaWNrbmFtZS4KICAgIGF2YXRhcjogT3B0aW9uYWxbOmNsYXNzOmBzdHJgXQogICAgICAgIFRoZSBtZW1iZXIncyBhdmF0YXIgaGFzaC4KICAgIGFjdGl2aXR5OiBPcHRpb25hbFtVbmlvbls6Y2xhc3M6YEJhc2VBY3Rpdml0eWAsIDpjbGFzczpgU3BvdGlmeWBdXQogICAgICAgIFRoZSBtZW1iZXIncyBhY3Rpdml0eS4KICAgIGRlYWZlbmVkOiBPcHRpb25hbFs6Y2xhc3M6YGJvb2xgXQogICAgICAgIFdoZXRoZXIgdGhlIG1lbWJlciBpcyBjdXJyZW50bHkgZGVhZmVuZWQuCiAgICBtdXRlZDogT3B0aW9uYWxbOmNsYXNzOmBib29sYF0KICAgICAgICBXaGV0aGVyIHRoZSBtZW1iZXIgaXMgY3VycmVudGx5IG11dGVkLgogICAgc3VwcHJlc3M6IE9wdGlvbmFsWzpjbGFzczpgYm9vbGBdCiAgICAgICAgV2hldGhlciB0aGUgbWVtYmVyIGlzIGN1cnJlbnRseSBiZWluZyBzdXBwcmVzc2VkLgogICAgY29ubmVjdGVkX2NoYW5uZWw6IE9wdGlvbmFsWzpjbGFzczpgVm9pY2VDaGFubmVsYF0KICAgICAgICBXaGljaCBjaGFubmVsIHRoZSBtZW1iZXIgaXMgY29ubmVjdGVkIHRvLgogICAgIiIiCiAgICBfX3Nsb3RzX18gPSAoJ25hbWUnLCAnc3RhdHVzJywgJ25pY2snLCAnYXZhdGFyJywgJ2Rpc2NyaW1pbmF0b3InLAogICAgICAgICAgICAgICAgICdpZCcsICdib3QnLCAnYWN0aXZpdHknLCAnZGVhZmVuZWQnLCAnc3VwcHJlc3MnLCAnbXV0ZWQnLAogICAgICAgICAgICAgICAgICdjb25uZWN0ZWRfY2hhbm5lbCcpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICosIHN0YXRlLCBkYXRhLCBjb25uZWN0ZWRfY2hhbm5lbD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHN0YXRlPXN0YXRlLCBkYXRhPWRhdGEpCiAgICAgICAgc2VsZi5uaWNrID0gZGF0YS5nZXQoJ25pY2snKQogICAgICAgIHNlbGYuc3RhdHVzID0gdHJ5X2VudW0oU3RhdHVzLCBkYXRhLmdldCgnc3RhdHVzJykpCiAgICAgICAgc2VsZi5kZWFmZW5lZCA9IGRhdGEuZ2V0KCdkZWFmJywgRmFsc2UpIG9yIGRhdGEuZ2V0KCdzZWxmX2RlYWYnLCBGYWxzZSkKICAgICAgICBzZWxmLm11dGVkID0gZGF0YS5nZXQoJ211dGUnLCBGYWxzZSkgb3IgZGF0YS5nZXQoJ3NlbGZfbXV0ZScsIEZhbHNlKQogICAgICAgIHNlbGYuc3VwcHJlc3MgPSBkYXRhLmdldCgnc3VwcHJlc3MnLCBGYWxzZSkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBnYW1lID0gZGF0YVsnZ2FtZSddCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmLmFjdGl2aXR5ID0gTm9uZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuYWN0aXZpdHkgPSBjcmVhdGVfYWN0aXZpdHkoZ2FtZSkKCiAgICAgICAgc2VsZi5jb25uZWN0ZWRfY2hhbm5lbCA9IGNvbm5lY3RlZF9jaGFubmVsCgogICAgQHByb3BlcnR5CiAgICBkZWYgZGlzcGxheV9uYW1lKHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgc3RyYDogUmV0dXJucyB0aGUgbWVtYmVyJ3MgZGlzcGxheSBuYW1lLiIiIgogICAgICAgIHJldHVybiBzZWxmLm5pY2sgb3Igc2VsZi5uYW1lCgpjbGFzcyBXaWRnZXQ6CiAgICAiIiJSZXByZXNlbnRzIGEgOmNsYXNzOmBHdWlsZGAgd2lkZ2V0LgoKICAgIC4uIGNvbnRhaW5lcjo6IG9wZXJhdGlvbnMKCiAgICAgICAgLi4gZGVzY3JpYmU6OiB4ID09IHkKCiAgICAgICAgICAgIENoZWNrcyBpZiB0d28gd2lkZ2V0cyBhcmUgdGhlIHNhbWUuCgogICAgICAgIC4uIGRlc2NyaWJlOjogeCAhPSB5CgogICAgICAgICAgICBDaGVja3MgaWYgdHdvIHdpZGdldHMgYXJlIG5vdCB0aGUgc2FtZS4KCiAgICAgICAgLi4gZGVzY3JpYmU6OiBzdHIoeCkKCiAgICAgICAgICAgIFJldHVybnMgdGhlIHdpZGdldCdzIEpTT04gVVJMLgoKICAgIEF0dHJpYnV0ZXMKICAgIC0tLS0tLS0tLS0tCiAgICBpZDogOmNsYXNzOmBpbnRgCiAgICAgICAgVGhlIGd1aWxkJ3MgSUQuCiAgICBuYW1lOiA6Y2xhc3M6YHN0cmAKICAgICAgICBUaGUgZ3VpbGQncyBuYW1lLgogICAgY2hhbm5lbHM6IE9wdGlvbmFsW0xpc3RbOmNsYXNzOmBXaWRnZXRDaGFubmVsYF1dCiAgICAgICAgVGhlIGFjY2Vzc2libGUgdm9pY2UgY2hhbm5lbHMgaW4gdGhlIGd1aWxkLgogICAgbWVtYmVyczogT3B0aW9uYWxbTGlzdFs6Y2xhc3M6YE1lbWJlcmBdXQogICAgICAgIFRoZSBvbmxpbmUgbWVtYmVycyBpbiB0aGUgc2VydmVyLiBPZmZsaW5lIG1lbWJlcnMKICAgICAgICBkbyBub3QgYXBwZWFyIGluIHRoZSB3aWRnZXQuCgogICAgICAgIC4uIG5vdGU6OgoKICAgICAgICAgICAgRHVlIHRvIGEgRGlzY29yZCBsaW1pdGF0aW9uLCBpZiB0aGlzIGRhdGEgaXMgYXZhaWxhYmxlCiAgICAgICAgICAgIHRoZSB1c2VycyB3aWxsIGJlICJhbm9ueW1pemVkIiB3aXRoIGxpbmVhciBJRHMgYW5kIGRpc2NyaW1pbmF0b3IKICAgICAgICAgICAgaW5mb3JtYXRpb24gYmVpbmcgaW5jb3JyZWN0LiBMaWtld2lzZSwgdGhlIG51bWJlciBvZiBtZW1iZXJzCiAgICAgICAgICAgIHJldHJpZXZlZCBpcyBjYXBwZWQuCgogICAgIiIiCiAgICBfX3Nsb3RzX18gPSAoJ19zdGF0ZScsICdjaGFubmVscycsICdfaW52aXRlJywgJ2lkJywgJ21lbWJlcnMnLCAnbmFtZScpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICosIHN0YXRlLCBkYXRhKToKICAgICAgICBzZWxmLl9zdGF0ZSA9IHN0YXRlCiAgICAgICAgc2VsZi5faW52aXRlID0gZGF0YVsnaW5zdGFudF9pbnZpdGUnXQogICAgICAgIHNlbGYubmFtZSA9IGRhdGFbJ25hbWUnXQogICAgICAgIHNlbGYuaWQgPSBpbnQoZGF0YVsnaWQnXSkKCiAgICAgICAgc2VsZi5jaGFubmVscyA9IFtdCiAgICAgICAgZm9yIGNoYW5uZWwgaW4gZGF0YS5nZXQoJ2NoYW5uZWxzJywgW10pOgogICAgICAgICAgICBfaWQgPSBpbnQoY2hhbm5lbFsnaWQnXSkKICAgICAgICAgICAgc2VsZi5jaGFubmVscy5hcHBlbmQoV2lkZ2V0Q2hhbm5lbChpZD1faWQsIG5hbWU9Y2hhbm5lbFsnbmFtZSddLCBwb3NpdGlvbj1jaGFubmVsWydwb3NpdGlvbiddKSkKCiAgICAgICAgc2VsZi5tZW1iZXJzID0gW10KICAgICAgICBjaGFubmVscyA9IHtjaGFubmVsLmlkOiBjaGFubmVsIGZvciBjaGFubmVsIGluIHNlbGYuY2hhbm5lbHN9CiAgICAgICAgZm9yIG1lbWJlciBpbiBkYXRhLmdldCgnbWVtYmVycycsIFtdKToKICAgICAgICAgICAgY29ubmVjdGVkX2NoYW5uZWwgPSBfZ2V0X2FzX3Nub3dmbGFrZShtZW1iZXIsICdjaGFubmVsX2lkJykKICAgICAgICAgICAgaWYgY29ubmVjdGVkX2NoYW5uZWwgaW4gY2hhbm5lbHM6CiAgICAgICAgICAgICAgICBjb25uZWN0ZWRfY2hhbm5lbCA9IGNoYW5uZWxzW2Nvbm5lY3RlZF9jaGFubmVsXQogICAgICAgICAgICBlbGlmIGNvbm5lY3RlZF9jaGFubmVsOgogICAgICAgICAgICAgICAgY29ubmVjdGVkX2NoYW5uZWwgPSBXaWRnZXRDaGFubmVsKGlkPWNvbm5lY3RlZF9jaGFubmVsLCBuYW1lPScnLCBwb3NpdGlvbj0wKQoKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLmFwcGVuZChXaWRnZXRNZW1iZXIoc3RhdGU9c2VsZi5fc3RhdGUsIGRhdGE9bWVtYmVyLCBjb25uZWN0ZWRfY2hhbm5lbD1jb25uZWN0ZWRfY2hhbm5lbCkpCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuanNvbl91cmwKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gc2VsZi5pZCA9PSBvdGhlci5pZAoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzxXaWRnZXQgaWQ9ezAuaWR9IG5hbWU9ezAubmFtZSFyfSBpbnZpdGVfdXJsPXswLmludml0ZV91cmwhcn0+Jy5mb3JtYXQoc2VsZikKCiAgICBAcHJvcGVydHkKICAgIGRlZiBjcmVhdGVkX2F0KHNlbGYpOgogICAgICAgICIiIjpjbGFzczpgZGF0ZXRpbWUuZGF0ZXRpbWVgOiBSZXR1cm5zIHRoZSBtZW1iZXIncyBjcmVhdGlvbiB0aW1lIGluIFVUQy4iIiIKICAgICAgICByZXR1cm4gc25vd2ZsYWtlX3RpbWUoc2VsZi5pZCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBqc29uX3VybChzZWxmKToKICAgICAgICAiIiI6Y2xhc3M6YHN0cmA6IFRoZSBKU09OIFVSTCBvZiB0aGUgd2lkZ2V0LiIiIgogICAgICAgIHJldHVybiAiaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvZ3VpbGRzL3swLmlkfS93aWRnZXQuanNvbiIuZm9ybWF0KHNlbGYpCgogICAgQHByb3BlcnR5CiAgICBkZWYgaW52aXRlX3VybChzZWxmKToKICAgICAgICAiIiJPcHRpb25hbFs6Y2xhc3M6YHN0cmBdOiBUaGUgaW52aXRlIFVSTCBmb3IgdGhlIGd1aWxkLCBpZiBhdmFpbGFibGUuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX2ludml0ZQoKICAgIGFzeW5jIGRlZiBmZXRjaF9pbnZpdGUoc2VsZiwgKiwgd2l0aF9jb3VudHM9VHJ1ZSk6CiAgICAgICAgIiIifGNvcm98CgogICAgICAgIFJldHJpZXZlcyBhbiA6Y2xhc3M6YEludml0ZWAgZnJvbSBhIGludml0ZSBVUkwgb3IgSUQuCiAgICAgICAgVGhpcyBpcyB0aGUgc2FtZSBhcyA6bWV0aDpgQ2xpZW50LmZldGNoX2ludml0ZWA7IHRoZSBpbnZpdGUKICAgICAgICBjb2RlIGlzIGFic3RyYWN0ZWQgYXdheS4KCiAgICAgICAgUGFyYW1ldGVycwogICAgICAgIC0tLS0tLS0tLS0tCiAgICAgICAgd2l0aF9jb3VudHM6IDpjbGFzczpgYm9vbGAKICAgICAgICAgICAgV2hldGhlciB0byBpbmNsdWRlIGNvdW50IGluZm9ybWF0aW9uIGluIHRoZSBpbnZpdGUuIFRoaXMgZmlsbHMgdGhlCiAgICAgICAgICAgIDphdHRyOmBJbnZpdGUuYXBwcm94aW1hdGVfbWVtYmVyX2NvdW50YCBhbmQgOmF0dHI6YEludml0ZS5hcHByb3hpbWF0ZV9wcmVzZW5jZV9jb3VudGAKICAgICAgICAgICAgZmllbGRzLgoKICAgICAgICBSZXR1cm5zCiAgICAgICAgLS0tLS0tLS0KICAgICAgICA6Y2xhc3M6YEludml0ZWAKICAgICAgICAgICAgVGhlIGludml0ZSBmcm9tIHRoZSBVUkwvSUQuCiAgICAgICAgIiIiCiAgICAgICAgaWYgc2VsZi5faW52aXRlOgogICAgICAgICAgICBpbnZpdGVfaWQgPSByZXNvbHZlX2ludml0ZShzZWxmLl9pbnZpdGUpCiAgICAgICAgICAgIGRhdGEgPSBhd2FpdCBzZWxmLl9zdGF0ZS5odHRwLmdldF9pbnZpdGUoaW52aXRlX2lkLCB3aXRoX2NvdW50cz13aXRoX2NvdW50cykKICAgICAgICAgICAgcmV0dXJuIEludml0ZS5mcm9tX2luY29tcGxldGUoc3RhdGU9c2VsZi5fc3RhdGUsIGRhdGE9ZGF0YSkK
