statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/contrib/test_socks.py
  contents:
  - name: TestSOCKS4Proxy.test_socks4_with_username
    score: 0.0
    code: |-
      def test_socks4_with_username(self):
              def request_handler(listener):
                  sock = listener.accept()[0]

                  handler = handle_socks4_negotiation(sock, username=b'user')
                  addr, port = next(handler)

                  self.assertEqual(addr, '16.17.18.19')
                  self.assertTrue(port, 80)
                  handler.send(True)

                  while True:
                      buf = sock.recv(65535)
                      if buf.endswith(b'\r\n\r\n'):
                          break

                  sock.sendall(b'HTTP/1.1 200 OK\r\n'
                               b'Server: SocksTestServer\r\n'
                               b'Content-Length: 0\r\n'
                               b'\r\n')
                  sock.close()

              self._start_server(request_handler)
              proxy_url = "socks4://%s:%s" % (self.host, self.port)
              pm = socks.SOCKSProxyManager(proxy_url, username='user')
              self.addCleanup(pm.clear)
              response = pm.request('GET', 'http://16.17.18.19')

              self.assertEqual(response.status, 200)
              self.assertEqual(response.data, b'')
              self.assertEqual(response.headers['Server'], 'SocksTestServer')
    tokens: 'make_cell self resume load_closure self build_tuple load_const OBJECT make_function closure store_fast request_handler load_deref self load_attr _start_server load_fast request_handler call pop_top load_const STRING_FILE_PATH load_deref self load_attr host format_value INTEGER load_const : load_deref self load_attr port format_value INTEGER build_string store_fast proxy_url load_global socks load_attr STRING_LEN_S_ENT_HIGH load_fast proxy_url load_const user kw_names username call store_fast pm load_deref self load_attr addCleanup load_fast pm load_attr clear call pop_top load_fast pm load_attr request load_const GET load_const STRING_URL call store_fast response load_deref self load_attr assertEqual load_fast response load_attr status load_const INTEGER call pop_top load_deref self load_attr assertEqual load_fast response load_attr data load_const call pop_top load_deref self load_attr assertEqual load_fast response load_attr headers load_const Server binary_subscr load_const SocksTestServer call pop_top return_const None'
    hash: 992ca2fa774b0069f38a03016303e8e201bdc0ec3c0d644ee07597d18240a8b8
sources:
  .repo_cache/malicious_repos/pypi_malregistry/urlib3/1.21.1/urlib3-1.21.1/urlib3-1.21.1/test/contrib/test_socks.py: 
