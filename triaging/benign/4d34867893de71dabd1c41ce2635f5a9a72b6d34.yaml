statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/auth/signers/ram_role_arn_signer.py
  contents:
  - name: RamRoleArnSigner._refresh_session_ak_and_sk
    score: 0.0
    code: |-
      def _refresh_session_ak_and_sk(self):
              request = CommonRequest(product="Sts", version='2015-04-01', action_name='AssumeRole')
              request.set_method('POST')
              request.set_protocol_type('https')
              request.add_query_param('RoleArn', self._credential.role_arn)
              request.add_query_param('RoleSessionName', self._credential.session_role_name)
              request.add_query_param('DurationSeconds', self._SESSION_PERIOD)
              request.set_accept_format('JSON')

              access_key_credential = AccessKeyCredential(self._credential.sts_access_key_id,
                                                          self._credential.sts_access_key_secret)
              signer = AccessKeySigner(access_key_credential)

              status, headers, body, exception = self._doAction(request, signer)
              if status == 200:
                  response = json.loads(body.decode('utf-8'))
                  session_ak = response.get("Credentials").get("AccessKeyId")
                  session_sk = response.get("Credentials").get("AccessKeySecret")
                  token = response.get("Credentials").get("SecurityToken")
                  self._session_credential = session_ak, session_sk, token
                  self._last_update_time = int(time.time())
              else:
                  code = error_code.SDK_GET_SESSION_CREDENTIAL_FAILED
                  message = "refresh session token failed, server return: " + ensure_string(body)
                  http_status = status

                  raise exceptions.ServerException(code, message, http_status)
    tokens: resume load_global CommonRequest load_const Sts load_const 2015-04-01 load_const AssumeRole kw_names action_name product version call store_fast request load_fast request load_attr set_method load_const POST call pop_top load_fast request load_attr STRING_LEN_S_ENT_HIGH load_const https call pop_top load_fast request load_attr add_query_param load_const RoleArn load_fast self load_attr _credential load_attr role_arn call pop_top load_fast request load_attr add_query_param load_const RoleSessionName load_fast self load_attr _credential load_attr STRING_LEN_S_ENT_HIGH call pop_top load_fast request load_attr add_query_param load_const DurationSeconds load_fast self load_attr _SESSION_PERIOD call pop_top load_fast request load_attr STRING_LEN_S_ENT_HIGH load_const JSON call pop_top load_global STRING_LEN_S_ENT_HIGH load_fast self load_attr _credential load_attr STRING_LEN_S_ENT_HIGH load_fast self load_attr _credential load_attr STRING_LEN_S_ENT_HIGH call store_fast STRING_LEN_S_ENT_HIGH load_global AccessKeySigner load_fast STRING_LEN_S_ENT_HIGH call store_fast signer load_fast self load_attr _doAction load_fast request load_fast signer call unpack_sequence store_fast status store_fast headers store_fast body store_fast exception load_fast status load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_global json load_attr loads load_fast body load_attr ENCODING_DECODING load_const utf-8 call call store_fast response load_fast response load_attr get load_const Credentials call load_attr get load_const AccessKeyId call store_fast session_ak load_fast response load_attr get load_const Credentials call load_attr get load_const AccessKeySecret call store_fast session_sk load_fast response load_attr get load_const Credentials call load_attr get load_const SecurityToken call store_fast token load_fast session_ak load_fast session_sk load_fast token build_tuple load_fast self store_attr STRING_LEN_S_ENT_HIGH load_global int load_global time load_attr time call call load_fast self store_attr STRING_LEN_S_ENT_HIGH return_const None load_global error_code load_attr STRING_LEN_S_ENT_HIGH store_fast code load_const STRING_LEN_S_ENT_HIGH load_global ensure_string load_fast body call binary_op + store_fast message load_fast status store_fast http_status load_global exceptions load_attr ServerException load_fast code load_fast message load_fast http_status call raise_varargs
    hash: dc0c2193ea4ebaae229e87f6b6b53931ba0486c68521851148ee3dfa7dbf1ea5
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/auth/signers/ram_role_arn_signer.py
  : IyBjb2Rpbmc6dXRmLTgKCiMgTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZQojIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZQojIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uCiMgcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZQojIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUKIyAiTGljZW5zZSIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlCiMgd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAojCiMKIwojIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKIyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgojICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQojIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQojIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKIyB1bmRlciB0aGUgTGljZW5zZS4KCmltcG9ydCB0aW1lCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nCgpmcm9tIGFsaXl1bnNka2NvcmUuYXV0aC5zaWduZXJzLnNpZ25lciBpbXBvcnQgU2lnbmVyCmZyb20gYWxpeXVuc2RrY29yZS5hdXRoLnNpZ25lcnMuYWNjZXNzX2tleV9zaWduZXIgaW1wb3J0IEFjY2Vzc0tleVNpZ25lcgpmcm9tIGFsaXl1bnNka2NvcmUuYWNzX2V4Y2VwdGlvbiBpbXBvcnQgZXJyb3JfY29kZQpmcm9tIGFsaXl1bnNka2NvcmUuYWNzX2V4Y2VwdGlvbiBpbXBvcnQgZXhjZXB0aW9ucwpmcm9tIGFsaXl1bnNka2NvcmUuYXV0aC5jcmVkZW50aWFscyBpbXBvcnQgUmFtUm9sZUFybkNyZWRlbnRpYWwKZnJvbSBhbGl5dW5zZGtjb3JlLmF1dGguY3JlZGVudGlhbHMgaW1wb3J0IEFjY2Vzc0tleUNyZWRlbnRpYWwKZnJvbSBhbGl5dW5zZGtjb3JlLnJlcXVlc3QgaW1wb3J0IENvbW1vblJlcXVlc3QKZnJvbSBhbGl5dW5zZGtjb3JlLmNvbXBhdCBpbXBvcnQgZW5zdXJlX3N0cmluZwoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKY2xhc3MgUmFtUm9sZUFyblNpZ25lcihTaWduZXIpOgogICAgX1NFU1NJT05fUEVSSU9EID0gMzYwMAogICAgX1JFRlJFU0hfU0NBTEUgPSAwLjgKICAgIF9SRVRSWV9ERUxBWV9GQVNUID0gMwogICAgX1BSSU9SSVRZID0gMQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjcmVkZW50aWFsLCBkb19hY3Rpb25fYXBpKToKICAgICAgICBpZiBpc2luc3RhbmNlKGNyZWRlbnRpYWwsIFJhbVJvbGVBcm5DcmVkZW50aWFsKToKICAgICAgICAgICAgc2VsZi5fY3JlZGVudGlhbCA9IGNyZWRlbnRpYWwKICAgICAgICAgICAgc2VsZi5fZG9BY3Rpb24gPSBkb19hY3Rpb25fYXBpCiAgICAgICAgICAgIHNlbGYuX2xhc3RfdXBkYXRlX3RpbWUgPSAwCiAgICAgICAgICAgIGlmIGxlbihzZWxmLl9jcmVkZW50aWFsLnNlc3Npb25fcm9sZV9uYW1lKSA9PSAwOgogICAgICAgICAgICAgICAgc2VsZi5fY3JlZGVudGlhbC5zZXNzaW9uX3JvbGVfbmFtZSA9ICJhbGl5dW4tcHl0aG9uLXNkay0iICsgc3RyKHRpbWUudGltZSgpKQoKICAgIGRlZiBzaWduKHNlbGYsIHJlZ2lvbl9pZCwgcmVxdWVzdCk6CiAgICAgICAgc2VsZi5fY2hlY2tfc2Vzc2lvbl9jcmVkZW50aWFsKCkKICAgICAgICBzZXNzaW9uX2FrLCBzZXNzaW9uX3NrLCB0b2tlbiA9IHNlbGYuX3Nlc3Npb25fY3JlZGVudGlhbAogICAgICAgIGlmIHJlcXVlc3QuZ2V0X3N0eWxlKCkgPT0gJ1JQQyc6CiAgICAgICAgICAgIHJlcXVlc3QuYWRkX3F1ZXJ5X3BhcmFtKCJTZWN1cml0eVRva2VuIiwgdG9rZW4pCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVxdWVzdC5hZGRfaGVhZGVyKCJ4LWFjcy1zZWN1cml0eS10b2tlbiIsIHRva2VuKQogICAgICAgIGhlYWRlciA9IHJlcXVlc3QuZ2V0X3NpZ25lZF9oZWFkZXIocmVnaW9uX2lkLCBzZXNzaW9uX2FrLCBzZXNzaW9uX3NrKQogICAgICAgIHVybCA9IHJlcXVlc3QuZ2V0X3VybChyZWdpb25faWQsIHNlc3Npb25fYWssIHNlc3Npb25fc2spCiAgICAgICAgcmV0dXJuIGhlYWRlciwgdXJsCgogICAgZGVmIF9jaGVja19zZXNzaW9uX2NyZWRlbnRpYWwoc2VsZik6CiAgICAgICAgbm93ID0gaW50KHRpbWUudGltZSgpKQogICAgICAgIGlmIG5vdyAtIHNlbGYuX2xhc3RfdXBkYXRlX3RpbWUgPiAoc2VsZi5fU0VTU0lPTl9QRVJJT0QgKiBzZWxmLl9SRUZSRVNIX1NDQUxFKToKICAgICAgICAgICAgc2VsZi5fcmVmcmVzaF9zZXNzaW9uX2FrX2FuZF9zaygpCgogICAgZGVmIF9yZWZyZXNoX3Nlc3Npb25fYWtfYW5kX3NrKHNlbGYpOgogICAgICAgIHJlcXVlc3QgPSBDb21tb25SZXF1ZXN0KHByb2R1Y3Q9IlN0cyIsIHZlcnNpb249JzIwMTUtMDQtMDEnLCBhY3Rpb25fbmFtZT0nQXNzdW1lUm9sZScpCiAgICAgICAgcmVxdWVzdC5zZXRfbWV0aG9kKCdQT1NUJykKICAgICAgICByZXF1ZXN0LnNldF9wcm90b2NvbF90eXBlKCdodHRwcycpCiAgICAgICAgcmVxdWVzdC5hZGRfcXVlcnlfcGFyYW0oJ1JvbGVBcm4nLCBzZWxmLl9jcmVkZW50aWFsLnJvbGVfYXJuKQogICAgICAgIHJlcXVlc3QuYWRkX3F1ZXJ5X3BhcmFtKCdSb2xlU2Vzc2lvbk5hbWUnLCBzZWxmLl9jcmVkZW50aWFsLnNlc3Npb25fcm9sZV9uYW1lKQogICAgICAgIHJlcXVlc3QuYWRkX3F1ZXJ5X3BhcmFtKCdEdXJhdGlvblNlY29uZHMnLCBzZWxmLl9TRVNTSU9OX1BFUklPRCkKICAgICAgICByZXF1ZXN0LnNldF9hY2NlcHRfZm9ybWF0KCdKU09OJykKCiAgICAgICAgYWNjZXNzX2tleV9jcmVkZW50aWFsID0gQWNjZXNzS2V5Q3JlZGVudGlhbChzZWxmLl9jcmVkZW50aWFsLnN0c19hY2Nlc3Nfa2V5X2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3JlZGVudGlhbC5zdHNfYWNjZXNzX2tleV9zZWNyZXQpCiAgICAgICAgc2lnbmVyID0gQWNjZXNzS2V5U2lnbmVyKGFjY2Vzc19rZXlfY3JlZGVudGlhbCkKCiAgICAgICAgc3RhdHVzLCBoZWFkZXJzLCBib2R5LCBleGNlcHRpb24gPSBzZWxmLl9kb0FjdGlvbihyZXF1ZXN0LCBzaWduZXIpCiAgICAgICAgaWYgc3RhdHVzID09IDIwMDoKICAgICAgICAgICAgcmVzcG9uc2UgPSBqc29uLmxvYWRzKGJvZHkuZGVjb2RlKCd1dGYtOCcpKQogICAgICAgICAgICBzZXNzaW9uX2FrID0gcmVzcG9uc2UuZ2V0KCJDcmVkZW50aWFscyIpLmdldCgiQWNjZXNzS2V5SWQiKQogICAgICAgICAgICBzZXNzaW9uX3NrID0gcmVzcG9uc2UuZ2V0KCJDcmVkZW50aWFscyIpLmdldCgiQWNjZXNzS2V5U2VjcmV0IikKICAgICAgICAgICAgdG9rZW4gPSByZXNwb25zZS5nZXQoIkNyZWRlbnRpYWxzIikuZ2V0KCJTZWN1cml0eVRva2VuIikKICAgICAgICAgICAgc2VsZi5fc2Vzc2lvbl9jcmVkZW50aWFsID0gc2Vzc2lvbl9haywgc2Vzc2lvbl9zaywgdG9rZW4KICAgICAgICAgICAgc2VsZi5fbGFzdF91cGRhdGVfdGltZSA9IGludCh0aW1lLnRpbWUoKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBjb2RlID0gZXJyb3JfY29kZS5TREtfR0VUX1NFU1NJT05fQ1JFREVOVElBTF9GQUlMRUQKICAgICAgICAgICAgbWVzc2FnZSA9ICJyZWZyZXNoIHNlc3Npb24gdG9rZW4gZmFpbGVkLCBzZXJ2ZXIgcmV0dXJuOiAiICsgZW5zdXJlX3N0cmluZyhib2R5KQogICAgICAgICAgICBodHRwX3N0YXR1cyA9IHN0YXR1cwoKICAgICAgICAgICAgcmFpc2UgZXhjZXB0aW9ucy5TZXJ2ZXJFeGNlcHRpb24oY29kZSwgbWVzc2FnZSwgaHR0cF9zdGF0dXMpCg==
