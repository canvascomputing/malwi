statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/requestsd/2.28.2/requestsd-2.28.2-py3-none-any/requests/utils.py
  contents:
  - name: rewind_body
    score: 0.0
    code: |-
      def rewind_body(prepared_request):
          """Move file pointer back to its recorded starting position
          so it can be read again on redirect.
          """
          body_seek = getattr(prepared_request.body, "seek", None)
          if body_seek is not None and isinstance(
              prepared_request._body_position, integer_types
          ):
              try:
                  body_seek(prepared_request._body_position)
              except OSError:
                  raise UnrewindableBodyError(
                      "An error occurred when rewinding request body for redirect."
                  )
          else:
              raise UnrewindableBodyError("Unable to rewind request body for redirect.")
    tokens: resume load_global REFLECTION_DYNAMIC_READ load_fast STRING_LEN_S_ENT_HIGH load_attr body load_const seek load_const call store_fast body_seek load_fast body_seek pop_jump_if_none TO_NUMBER load_global isinstance load_fast STRING_LEN_S_ENT_HIGH load_attr _body_position load_global integer_types call pop_jump_if_false TO_NUMBER nop push_null load_fast body_seek load_fast STRING_LEN_S_ENT_HIGH load_attr _body_position call pop_top return_const None load_global STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH call raise_varargs push_exc_info load_global OSError check_exc_match pop_jump_if_false TO_NUMBER pop_top load_global STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH call raise_varargs reraise copy pop_except reraise
    hash: 721b4be63b3fc48d78bc4b32e8781bc3dc478b048106ab26a5bd8c32d33d1bb6
sources:
  .repo_cache/malicious_repos/pypi_malregistry/requestsd/2.28.2/requestsd-2.28.2-py3-none-any/requests/utils.py: 
