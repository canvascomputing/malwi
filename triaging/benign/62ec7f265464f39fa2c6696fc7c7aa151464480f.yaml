statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/utils.py
  contents:
  - name: select_proxy
    score: 0.0
    code: |-
      def select_proxy(url, proxies):
          """Select a proxy for the url, if applicable.

          :param url: The url being for the request
          :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
          """
          proxies = proxies or {}
          urlparts = urlparse(url)
          if urlparts.hostname is None:
              return proxies.get(urlparts.scheme, proxies.get('all'))

          proxy_keys = [
              urlparts.scheme + '://' + urlparts.hostname,
              urlparts.scheme,
              'all://' + urlparts.hostname,
              'all',
          ]
          proxy = None
          for proxy_key in proxy_keys:
              if proxy_key in proxies:
                  proxy = proxies[proxy_key]
                  break

          return proxy
    tokens: resume load_fast proxies copy pop_jump_if_true TO_NUMBER pop_top build_map store_fast proxies load_global urlparse load_fast url call store_fast urlparts load_fast urlparts load_attr hostname pop_jump_if_not_none TO_NUMBER load_fast proxies load_attr get load_fast urlparts load_attr scheme load_fast proxies load_attr get load_const all call call return_value load_fast urlparts load_attr scheme load_const STRING_FILE_PATH binary_op + load_fast urlparts load_attr hostname binary_op + load_fast urlparts load_attr scheme load_const STRING_FILE_PATH load_fast urlparts load_attr hostname binary_op + load_const all build_list store_fast proxy_keys load_const store_fast proxy load_fast proxy_keys get_iter for_iter TO_NUMBER store_fast proxy_key load_fast proxy_key load_fast proxies contains_op pop_jump_if_true TO_NUMBER jump_backward TO_NUMBER load_fast proxies load_fast proxy_key binary_subscr store_fast proxy pop_top load_fast proxy return_value end_for load_fast proxy return_value
    hash: 1302b90afb2e5aede200d457212578612eed33efdd97d9cba4bb71a2eeb64fa4
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/utils.py
  : 
