statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-kms/2.16.1/python-aliyun-sdk-kms-2.16.1/python-aliyun-sdk-kms-2.16.1/aliyunsdkkms/request/v20160120/AsymmetricEncryptRequest.py
  contents:
  - name: AsymmetricEncryptRequest
    score: 0.0
    code: "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nfrom aliyunsdkcore.request import RpcRequest\nfrom aliyunsdkkms.endpoint import endpoint_data\n\nclass AsymmetricEncryptRequest(RpcRequest):\n\n\tdef __init__(self):\n\t\tRpcRequest.__init__(self, 'Kms', '2016-01-20', 'AsymmetricEncrypt','kms')\n\t\tself.set_protocol_type('https')\n\t\tself.set_method('POST')\n\n\t\tif hasattr(self, \"endpoint_map\"):\n\t\t\tsetattr(self, \"endpoint_map\", endpoint_data.getEndpointMap())\n\t\tif hasattr(self, \"endpoint_regional\"):\n\t\t\tsetattr(self, \"endpoint_regional\", endpoint_data.getEndpointRegional())\n\n\tdef get_KeyVersionId(self): # String\n\t\treturn self.get_query_params().get('KeyVersionId')\n\n\tdef set_KeyVersionId(self, KeyVersionId):  # String\n\t\tself.add_query_param('KeyVersionId', KeyVersionId)\n\tdef get_KeyId(self): # String\n\t\treturn self.get_query_params().get('KeyId')\n\n\tdef set_KeyId(self, KeyId):  # String\n\t\tself.add_query_param('KeyId', KeyId)\n\tdef get_Plaintext(self): # String\n\t\treturn self.get_query_params().get('Plaintext')\n\n\tdef set_Plaintext(self, Plaintext):  # String\n\t\tself.add_query_param('Plaintext', Plaintext)\n\tdef get_Algorithm(self): # String\n\t\treturn self.get_query_params().get('Algorithm')\n\n\tdef set_Algorithm(self, Algorithm):  # String\n\t\tself.add_query_param('Algorithm', Algorithm)"
    tokens: resume load_name __name__ store_name __module__ load_const STRING_BASE64_LEN_S_ENT_HIGH store_name __qualname__ load_const OBJECT make_function store_name __init__ load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name get_KeyId load_const OBJECT make_function store_name set_KeyId load_const OBJECT make_function store_name get_Plaintext load_const OBJECT make_function store_name set_Plaintext load_const OBJECT make_function store_name get_Algorithm load_const OBJECT make_function store_name set_Algorithm return_const None
    hash: de2d8ea711613f99ade3fda048fb1930e77e50cef3db70f5a2ecdc58fd62bf68
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-kms/2.16.1/python-aliyun-sdk-kms-2.16.1/python-aliyun-sdk-kms-2.16.1/aliyunsdkkms/request/v20160120/AsymmetricEncryptRequest.py
  : IyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lCiMgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlCiMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24KIyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlCiMgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZQojICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2UKIyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIwojICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKIwojCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAojIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiMgIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiMgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiMgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwojIHVuZGVyIHRoZSBMaWNlbnNlLgoKZnJvbSBhbGl5dW5zZGtjb3JlLnJlcXVlc3QgaW1wb3J0IFJwY1JlcXVlc3QKZnJvbSBhbGl5dW5zZGtrbXMuZW5kcG9pbnQgaW1wb3J0IGVuZHBvaW50X2RhdGEKCmNsYXNzIEFzeW1tZXRyaWNFbmNyeXB0UmVxdWVzdChScGNSZXF1ZXN0KToKCglkZWYgX19pbml0X18oc2VsZik6CgkJUnBjUmVxdWVzdC5fX2luaXRfXyhzZWxmLCAnS21zJywgJzIwMTYtMDEtMjAnLCAnQXN5bW1ldHJpY0VuY3J5cHQnLCdrbXMnKQoJCXNlbGYuc2V0X3Byb3RvY29sX3R5cGUoJ2h0dHBzJykKCQlzZWxmLnNldF9tZXRob2QoJ1BPU1QnKQoKCQlpZiBoYXNhdHRyKHNlbGYsICJlbmRwb2ludF9tYXAiKToKCQkJc2V0YXR0cihzZWxmLCAiZW5kcG9pbnRfbWFwIiwgZW5kcG9pbnRfZGF0YS5nZXRFbmRwb2ludE1hcCgpKQoJCWlmIGhhc2F0dHIoc2VsZiwgImVuZHBvaW50X3JlZ2lvbmFsIik6CgkJCXNldGF0dHIoc2VsZiwgImVuZHBvaW50X3JlZ2lvbmFsIiwgZW5kcG9pbnRfZGF0YS5nZXRFbmRwb2ludFJlZ2lvbmFsKCkpCgoJZGVmIGdldF9LZXlWZXJzaW9uSWQoc2VsZik6ICMgU3RyaW5nCgkJcmV0dXJuIHNlbGYuZ2V0X3F1ZXJ5X3BhcmFtcygpLmdldCgnS2V5VmVyc2lvbklkJykKCglkZWYgc2V0X0tleVZlcnNpb25JZChzZWxmLCBLZXlWZXJzaW9uSWQpOiAgIyBTdHJpbmcKCQlzZWxmLmFkZF9xdWVyeV9wYXJhbSgnS2V5VmVyc2lvbklkJywgS2V5VmVyc2lvbklkKQoJZGVmIGdldF9LZXlJZChzZWxmKTogIyBTdHJpbmcKCQlyZXR1cm4gc2VsZi5nZXRfcXVlcnlfcGFyYW1zKCkuZ2V0KCdLZXlJZCcpCgoJZGVmIHNldF9LZXlJZChzZWxmLCBLZXlJZCk6ICAjIFN0cmluZwoJCXNlbGYuYWRkX3F1ZXJ5X3BhcmFtKCdLZXlJZCcsIEtleUlkKQoJZGVmIGdldF9QbGFpbnRleHQoc2VsZik6ICMgU3RyaW5nCgkJcmV0dXJuIHNlbGYuZ2V0X3F1ZXJ5X3BhcmFtcygpLmdldCgnUGxhaW50ZXh0JykKCglkZWYgc2V0X1BsYWludGV4dChzZWxmLCBQbGFpbnRleHQpOiAgIyBTdHJpbmcKCQlzZWxmLmFkZF9xdWVyeV9wYXJhbSgnUGxhaW50ZXh0JywgUGxhaW50ZXh0KQoJZGVmIGdldF9BbGdvcml0aG0oc2VsZik6ICMgU3RyaW5nCgkJcmV0dXJuIHNlbGYuZ2V0X3F1ZXJ5X3BhcmFtcygpLmdldCgnQWxnb3JpdGhtJykKCglkZWYgc2V0X0FsZ29yaXRobShzZWxmLCBBbGdvcml0aG0pOiAgIyBTdHJpbmcKCQlzZWxmLmFkZF9xdWVyeV9wYXJhbSgnQWxnb3JpdGhtJywgQWxnb3JpdGhtKQo=
