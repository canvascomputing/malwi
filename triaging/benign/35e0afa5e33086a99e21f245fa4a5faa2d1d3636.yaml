statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/http.py
  contents:
  - name: HTTPClient._token
    score: 0.0
    code: |-
      def _token(self, token, *, bot=True):
              self.token = token
              self.bot_token = bot
              self._ack_token = None
    tokens: resume load_fast token load_fast self store_attr token load_fast bot load_fast self store_attr bot_token load_const load_fast self store_attr _ack_token return_const None
    hash: f049ff6493df10c67c52552751ff435b43b658d3644ba58c233a81abc8f8c181
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/http.py: 
