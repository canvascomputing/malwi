statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/tests/test_tls.py
  contents:
  - name: TLSTests.test_tls_error_not_yet_valid
    score: 0.0
    code: |-
      @connection_timeout()
          def test_tls_error_not_yet_valid(self):
              session = tls.TLSSession(extra_trust_roots=[badtls_ca_path])
              with assert_exception(self, errors.TLSVerificationError, 'not valid until'):
                  tls.TLSSocket('future.badtls.io', 11001, session=session)
    tokens: resume load_global tls load_attr TLSSession load_global badtls_ca_path build_list kw_names extra_trust_roots call store_fast session load_global STRING_LEN_S_ENT_HIGH load_fast self load_global errors load_attr STRING_BASE64_LEN_S_ENT_HIGH load_const not valid until call before_with pop_top load_global tls load_attr TLSSocket load_const STRING_LEN_S_ENT_HIGH load_const INTEGER load_fast session kw_names session call pop_top load_const load_const load_const call pop_top return_const None push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top return_const None copy pop_except reraise
    hash: ba8d30666db013c17f541e8bc8538b6dd39a89d25d53ea4ee0fb93137d7fb82c
sources:
  .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/tests/test_tls.py: 
