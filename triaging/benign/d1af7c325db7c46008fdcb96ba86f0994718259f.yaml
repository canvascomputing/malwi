statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/emoji.py
  contents:
  - name: Emoji._from_data
    score: 0.0
    code: |-
      def _from_data(self, emoji):
              self.require_colons = emoji['require_colons']
              self.managed = emoji['managed']
              self.id = int(emoji['id'])
              self.name = emoji['name']
              self.animated = emoji.get('animated', False)
              self.available = emoji.get('available', True)
              self._roles = utils.SnowflakeList(map(int, emoji.get('roles', [])))
              user = emoji.get('user')
              self.user = User(state=self._state, data=user) if user else None
    tokens: resume load_fast emoji load_const require_colons binary_subscr load_fast self store_attr require_colons load_fast emoji load_const managed binary_subscr load_fast self store_attr managed load_global int load_fast emoji load_const id binary_subscr call load_fast self store_attr id load_fast emoji load_const name binary_subscr load_fast self store_attr name load_fast emoji load_attr get load_const animated load_const INTEGER call load_fast self store_attr animated load_fast emoji load_attr get load_const available load_const INTEGER call load_fast self store_attr available load_global utils load_attr SnowflakeList load_global map load_global int load_fast emoji load_attr get load_const roles build_list call call call load_fast self store_attr _roles load_fast emoji load_attr get load_const user call store_fast user load_fast user pop_jump_if_false TO_NUMBER load_global User load_fast self load_attr _state load_fast user kw_names data state call load_fast self store_attr user return_const None load_const load_fast self store_attr user return_const None
    hash: 6d3580f1337e9f437379dfaaa09c168081521d77ae6c6adff6b9f43c14246479
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/emoji.py: 
