statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/activity.py
  contents:
  - name: CustomActivity.__init__
    score: 0.0
    code: |-
      def __init__(self, name, *, emoji=None, **extra):
              super().__init__(**extra)
              self.name = name
              self.state = extra.pop('state', None)
              if self.name == 'Custom Status':
                  self.name = self.state

              if emoji is None:
                  self.emoji = emoji
              elif isinstance(emoji, dict):
                  self.emoji = PartialEmoji.from_dict(emoji)
              elif isinstance(emoji, str):
                  self.emoji = PartialEmoji(name=emoji)
              elif isinstance(emoji, PartialEmoji):
                  self.emoji = emoji
              else:
                  raise TypeError('Expected str, PartialEmoji, or None, received {0!r} instead.'.format(type(emoji)))
    tokens: copy_free_vars resume load_global super load_deref __class__ load_fast self load_super_attr __init__ load_const build_map load_fast extra dict_merge call_function_ex pop_top load_fast name load_fast self store_attr name load_fast extra load_attr pop load_const state load_const call load_fast self store_attr state load_fast self load_attr name load_const Custom Status compare_op == pop_jump_if_false TO_NUMBER load_fast self load_attr state load_fast self store_attr name load_fast emoji pop_jump_if_not_none TO_NUMBER load_fast emoji load_fast self store_attr emoji return_const None load_global isinstance load_fast emoji load_global dict call pop_jump_if_false TO_NUMBER load_global PartialEmoji load_attr from_dict load_fast emoji call load_fast self store_attr emoji return_const None load_global isinstance load_fast emoji load_global str call pop_jump_if_false TO_NUMBER load_global PartialEmoji load_fast emoji kw_names name call load_fast self store_attr emoji return_const None load_global isinstance load_fast emoji load_global PartialEmoji call pop_jump_if_false TO_NUMBER load_fast emoji load_fast self store_attr emoji return_const None load_global TypeError load_const STRING_LEN_S_ENT_HIGH load_attr format load_global type load_fast emoji call call call raise_varargs
    hash: 8d383a29c2a484380012ba3b0450988c1dfd0b78b3a8bf2553cfe0cc285eae04
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/activity.py: 
