statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/errors.py
  contents:
  - name: PrivilegedIntentsRequired.__init__
    score: 0.0
    code: |-
      def __init__(self, shard_id):
              self.shard_id = shard_id
              msg = 'Shard ID %s is requesting privileged intents that have not been explicitly enabled in the ' \
                    'developer portal. It is recommended to go to https://discord.com/developers/applications/ ' \
                    'and explicitly enable the privileged intents within your application\'s page. If this is not ' \
                    'possible, then consider disabling the privileged intents instead.'
              super().__init__(msg % shard_id)
    tokens: copy_free_vars resume load_fast shard_id load_fast self store_attr shard_id load_const STRING_FILE_PATH store_fast msg load_global super load_deref __class__ load_fast self load_super_attr __init__ load_fast msg load_fast shard_id binary_op % call pop_top return_const None
    hash: 71cd5046d28ad521ac8994c55ba8403c84ae1eedf5bf396050d3beb8716482a3
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/errors.py: 
