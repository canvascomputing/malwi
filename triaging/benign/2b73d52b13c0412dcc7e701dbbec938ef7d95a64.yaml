statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/embeds.py
  contents:
  - name: Embed.image
    score: 0.0
    code: |-
      @property
          def image(self):
              """Union[:class:`EmbedProxy`, :attr:`Empty`]: Returns an ``EmbedProxy`` denoting the image contents.

              Possible attributes you can access are:

              - ``url``
              - ``proxy_url``
              - ``width``
              - ``height``

              If the attribute has no value then :attr:`Empty` is returned.
              """
              return EmbedProxy(getattr(self, '_image', {}))
    tokens: resume load_global EmbedProxy load_global REFLECTION_DYNAMIC_READ load_fast self load_const _image build_map call call return_value
    hash: 6e26a726c96654aeb4fcca2cef64d31c904f189e351f6f7af22605f17c5396ac
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/embeds.py: 
