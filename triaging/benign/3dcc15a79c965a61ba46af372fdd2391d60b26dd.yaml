statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/fields.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      from __future__ import absolute_import
      import email.utils
      import mimetypes

      from .packages import six


      def guess_content_type(filename, default='application/octet-stream'):
          """
          Guess the "Content-Type" of a file.

          :param filename:
              The filename to guess the "Content-Type" of using :mod:`mimetypes`.
          :param default:
              If no "Content-Type" can be guessed, default to `default`.
          """
          if filename:
              return mimetypes.guess_type(filename)[0] or default
          return default
    tokens: resume load_const INTEGER load_const import_name __future__ import_from absolute_import store_name absolute_import pop_top load_const INTEGER load_const import_name email.utils store_name email load_const INTEGER load_const import_name mimetypes store_name mimetypes load_const INTEGER load_const import_name packages import_from six store_name six pop_top load_const load_const OBJECT make_function defaults store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name STRING_LEN_S_ENT_HIGH push_null load_build_class load_const OBJECT make_function load_const RequestField load_name object call store_name RequestField return_const None
    hash: 35a15c58847f5a29e9322e91c9092e8c447d28a97f71b7e7f89cbebf0de5072a
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/fields.py
  : ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhYnNvbHV0ZV9pbXBvcnQKaW1wb3J0IGVtYWlsLnV0aWxzCmltcG9ydCBtaW1ldHlwZXMKCmZyb20gLnBhY2thZ2VzIGltcG9ydCBzaXgKCgpkZWYgZ3Vlc3NfY29udGVudF90eXBlKGZpbGVuYW1lLCBkZWZhdWx0PSdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKToKICAgICIiIgogICAgR3Vlc3MgdGhlICJDb250ZW50LVR5cGUiIG9mIGEgZmlsZS4KCiAgICA6cGFyYW0gZmlsZW5hbWU6CiAgICAgICAgVGhlIGZpbGVuYW1lIHRvIGd1ZXNzIHRoZSAiQ29udGVudC1UeXBlIiBvZiB1c2luZyA6bW9kOmBtaW1ldHlwZXNgLgogICAgOnBhcmFtIGRlZmF1bHQ6CiAgICAgICAgSWYgbm8gIkNvbnRlbnQtVHlwZSIgY2FuIGJlIGd1ZXNzZWQsIGRlZmF1bHQgdG8gYGRlZmF1bHRgLgogICAgIiIiCiAgICBpZiBmaWxlbmFtZToKICAgICAgICByZXR1cm4gbWltZXR5cGVzLmd1ZXNzX3R5cGUoZmlsZW5hbWUpWzBdIG9yIGRlZmF1bHQKICAgIHJldHVybiBkZWZhdWx0CgoKZGVmIGZvcm1hdF9oZWFkZXJfcGFyYW0obmFtZSwgdmFsdWUpOgogICAgIiIiCiAgICBIZWxwZXIgZnVuY3Rpb24gdG8gZm9ybWF0IGFuZCBxdW90ZSBhIHNpbmdsZSBoZWFkZXIgcGFyYW1ldGVyLgoKICAgIFBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIGhlYWRlciBwYXJhbWV0ZXJzIHdoaWNoIG1pZ2h0IGNvbnRhaW4KICAgIG5vbi1BU0NJSSB2YWx1ZXMsIGxpa2UgZmlsZSBuYW1lcy4gVGhpcyBmb2xsb3dzIFJGQyAyMjMxLCBhcwogICAgc3VnZ2VzdGVkIGJ5IFJGQyAyMzg4IFNlY3Rpb24gNC40LgoKICAgIDpwYXJhbSBuYW1lOgogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIsIGEgc3RyaW5nIGV4cGVjdGVkIHRvIGJlIEFTQ0lJIG9ubHkuCiAgICA6cGFyYW0gdmFsdWU6CiAgICAgICAgVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIsIHByb3ZpZGVkIGFzIGEgdW5pY29kZSBzdHJpbmcuCiAgICAiIiIKICAgIGlmIG5vdCBhbnkoY2ggaW4gdmFsdWUgZm9yIGNoIGluICciXFxcclxuJyk6CiAgICAgICAgcmVzdWx0ID0gJyVzPSIlcyInICUgKG5hbWUsIHZhbHVlKQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzdWx0LmVuY29kZSgnYXNjaWknKQogICAgICAgIGV4Y2VwdCAoVW5pY29kZUVuY29kZUVycm9yLCBVbmljb2RlRGVjb2RlRXJyb3IpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgaWYgbm90IHNpeC5QWTMgYW5kIGlzaW5zdGFuY2UodmFsdWUsIHNpeC50ZXh0X3R5cGUpOiAgIyBQeXRob24gMjoKICAgICAgICB2YWx1ZSA9IHZhbHVlLmVuY29kZSgndXRmLTgnKQogICAgdmFsdWUgPSBlbWFpbC51dGlscy5lbmNvZGVfcmZjMjIzMSh2YWx1ZSwgJ3V0Zi04JykKICAgIHZhbHVlID0gJyVzKj0lcycgJSAobmFtZSwgdmFsdWUpCiAgICByZXR1cm4gdmFsdWUKCgpjbGFzcyBSZXF1ZXN0RmllbGQob2JqZWN0KToKICAgICIiIgogICAgQSBkYXRhIGNvbnRhaW5lciBmb3IgcmVxdWVzdCBib2R5IHBhcmFtZXRlcnMuCgogICAgOnBhcmFtIG5hbWU6CiAgICAgICAgVGhlIG5hbWUgb2YgdGhpcyByZXF1ZXN0IGZpZWxkLgogICAgOnBhcmFtIGRhdGE6CiAgICAgICAgVGhlIGRhdGEvdmFsdWUgYm9keS4KICAgIDpwYXJhbSBmaWxlbmFtZToKICAgICAgICBBbiBvcHRpb25hbCBmaWxlbmFtZSBvZiB0aGUgcmVxdWVzdCBmaWVsZC4KICAgIDpwYXJhbSBoZWFkZXJzOgogICAgICAgIEFuIG9wdGlvbmFsIGRpY3QtbGlrZSBvYmplY3Qgb2YgaGVhZGVycyB0byBpbml0aWFsbHkgdXNlIGZvciB0aGUgZmllbGQuCiAgICAiIiIKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lLCBkYXRhLCBmaWxlbmFtZT1Ob25lLCBoZWFkZXJzPU5vbmUpOgogICAgICAgIHNlbGYuX25hbWUgPSBuYW1lCiAgICAgICAgc2VsZi5fZmlsZW5hbWUgPSBmaWxlbmFtZQogICAgICAgIHNlbGYuZGF0YSA9IGRhdGEKICAgICAgICBzZWxmLmhlYWRlcnMgPSB7fQogICAgICAgIGlmIGhlYWRlcnM6CiAgICAgICAgICAgIHNlbGYuaGVhZGVycyA9IGRpY3QoaGVhZGVycykKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX3R1cGxlcyhjbHMsIGZpZWxkbmFtZSwgdmFsdWUpOgogICAgICAgICIiIgogICAgICAgIEEgOmNsYXNzOmB+dXJsbGliMy5maWVsZHMuUmVxdWVzdEZpZWxkYCBmYWN0b3J5IGZyb20gb2xkLXN0eWxlIHR1cGxlIHBhcmFtZXRlcnMuCgogICAgICAgIFN1cHBvcnRzIGNvbnN0cnVjdGluZyA6Y2xhc3M6YH51cmxsaWIzLmZpZWxkcy5SZXF1ZXN0RmllbGRgIGZyb20KICAgICAgICBwYXJhbWV0ZXIgb2Yga2V5L3ZhbHVlIHN0cmluZ3MgQU5EIGtleS9maWxldHVwbGUuIEEgZmlsZXR1cGxlIGlzIGEKICAgICAgICAoZmlsZW5hbWUsIGRhdGEsIE1JTUUgdHlwZSkgdHVwbGUgd2hlcmUgdGhlIE1JTUUgdHlwZSBpcyBvcHRpb25hbC4KICAgICAgICBGb3IgZXhhbXBsZTo6CgogICAgICAgICAgICAnZm9vJzogJ2JhcicsCiAgICAgICAgICAgICdmYWtlZmlsZSc6ICgnZm9vZmlsZS50eHQnLCAnY29udGVudHMgb2YgZm9vZmlsZScpLAogICAgICAgICAgICAncmVhbGZpbGUnOiAoJ2JhcmZpbGUudHh0Jywgb3BlbigncmVhbGZpbGUnKS5yZWFkKCkpLAogICAgICAgICAgICAndHlwZWRmaWxlJzogKCdiYXpmaWxlLmJpbicsIG9wZW4oJ2JhemZpbGUnKS5yZWFkKCksICdpbWFnZS9qcGVnJyksCiAgICAgICAgICAgICdub25hbWVmaWxlJzogJ2NvbnRlbnRzIG9mIG5vbmFtZWZpbGUgZmllbGQnLAoKICAgICAgICBGaWVsZCBuYW1lcyBhbmQgZmlsZW5hbWVzIG11c3QgYmUgdW5pY29kZS4KICAgICAgICAiIiIKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCB0dXBsZSk6CiAgICAgICAgICAgIGlmIGxlbih2YWx1ZSkgPT0gMzoKICAgICAgICAgICAgICAgIGZpbGVuYW1lLCBkYXRhLCBjb250ZW50X3R5cGUgPSB2YWx1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZmlsZW5hbWUsIGRhdGEgPSB2YWx1ZQogICAgICAgICAgICAgICAgY29udGVudF90eXBlID0gZ3Vlc3NfY29udGVudF90eXBlKGZpbGVuYW1lKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGZpbGVuYW1lID0gTm9uZQogICAgICAgICAgICBjb250ZW50X3R5cGUgPSBOb25lCiAgICAgICAgICAgIGRhdGEgPSB2YWx1ZQoKICAgICAgICByZXF1ZXN0X3BhcmFtID0gY2xzKGZpZWxkbmFtZSwgZGF0YSwgZmlsZW5hbWU9ZmlsZW5hbWUpCiAgICAgICAgcmVxdWVzdF9wYXJhbS5tYWtlX211bHRpcGFydChjb250ZW50X3R5cGU9Y29udGVudF90eXBlKQoKICAgICAgICByZXR1cm4gcmVxdWVzdF9wYXJhbQoKICAgIGRlZiBfcmVuZGVyX3BhcnQoc2VsZiwgbmFtZSwgdmFsdWUpOgogICAgICAgICIiIgogICAgICAgIE92ZXJyaWRhYmxlIGhlbHBlciBmdW5jdGlvbiB0byBmb3JtYXQgYSBzaW5nbGUgaGVhZGVyIHBhcmFtZXRlci4KCiAgICAgICAgOnBhcmFtIG5hbWU6CiAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIsIGEgc3RyaW5nIGV4cGVjdGVkIHRvIGJlIEFTQ0lJIG9ubHkuCiAgICAgICAgOnBhcmFtIHZhbHVlOgogICAgICAgICAgICBUaGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlciwgcHJvdmlkZWQgYXMgYSB1bmljb2RlIHN0cmluZy4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gZm9ybWF0X2hlYWRlcl9wYXJhbShuYW1lLCB2YWx1ZSkKCiAgICBkZWYgX3JlbmRlcl9wYXJ0cyhzZWxmLCBoZWFkZXJfcGFydHMpOgogICAgICAgICIiIgogICAgICAgIEhlbHBlciBmdW5jdGlvbiB0byBmb3JtYXQgYW5kIHF1b3RlIGEgc2luZ2xlIGhlYWRlci4KCiAgICAgICAgVXNlZnVsIGZvciBzaW5nbGUgaGVhZGVycyB0aGF0IGFyZSBjb21wb3NlZCBvZiBtdWx0aXBsZSBpdGVtcy4gRS5nLiwKICAgICAgICAnQ29udGVudC1EaXNwb3NpdGlvbicgZmllbGRzLgoKICAgICAgICA6cGFyYW0gaGVhZGVyX3BhcnRzOgogICAgICAgICAgICBBIHNlcXVlbmNlIG9mIChrLCB2KSB0dXBsZXMgb3IgYSA6Y2xhc3M6YGRpY3RgIG9mIChrLCB2KSB0byBmb3JtYXQKICAgICAgICAgICAgYXMgYGsxPSJ2MSI7IGsyPSJ2MiI7IC4uLmAuCiAgICAgICAgIiIiCiAgICAgICAgcGFydHMgPSBbXQogICAgICAgIGl0ZXJhYmxlID0gaGVhZGVyX3BhcnRzCiAgICAgICAgaWYgaXNpbnN0YW5jZShoZWFkZXJfcGFydHMsIGRpY3QpOgogICAgICAgICAgICBpdGVyYWJsZSA9IGhlYWRlcl9wYXJ0cy5pdGVtcygpCgogICAgICAgIGZvciBuYW1lLCB2YWx1ZSBpbiBpdGVyYWJsZToKICAgICAgICAgICAgaWYgdmFsdWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBwYXJ0cy5hcHBlbmQoc2VsZi5fcmVuZGVyX3BhcnQobmFtZSwgdmFsdWUpKQoKICAgICAgICByZXR1cm4gJzsgJy5qb2luKHBhcnRzKQoKICAgIGRlZiByZW5kZXJfaGVhZGVycyhzZWxmKToKICAgICAgICAiIiIKICAgICAgICBSZW5kZXJzIHRoZSBoZWFkZXJzIGZvciB0aGlzIHJlcXVlc3QgZmllbGQuCiAgICAgICAgIiIiCiAgICAgICAgbGluZXMgPSBbXQoKICAgICAgICBzb3J0X2tleXMgPSBbJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTG9jYXRpb24nXQogICAgICAgIGZvciBzb3J0X2tleSBpbiBzb3J0X2tleXM6CiAgICAgICAgICAgIGlmIHNlbGYuaGVhZGVycy5nZXQoc29ydF9rZXksIEZhbHNlKToKICAgICAgICAgICAgICAgIGxpbmVzLmFwcGVuZCgnJXM6ICVzJyAlIChzb3J0X2tleSwgc2VsZi5oZWFkZXJzW3NvcnRfa2V5XSkpCgogICAgICAgIGZvciBoZWFkZXJfbmFtZSwgaGVhZGVyX3ZhbHVlIGluIHNlbGYuaGVhZGVycy5pdGVtcygpOgogICAgICAgICAgICBpZiBoZWFkZXJfbmFtZSBub3QgaW4gc29ydF9rZXlzOgogICAgICAgICAgICAgICAgaWYgaGVhZGVyX3ZhbHVlOgogICAgICAgICAgICAgICAgICAgIGxpbmVzLmFwcGVuZCgnJXM6ICVzJyAlIChoZWFkZXJfbmFtZSwgaGVhZGVyX3ZhbHVlKSkKCiAgICAgICAgbGluZXMuYXBwZW5kKCdcclxuJykKICAgICAgICByZXR1cm4gJ1xyXG4nLmpvaW4obGluZXMpCgogICAgZGVmIG1ha2VfbXVsdGlwYXJ0KHNlbGYsIGNvbnRlbnRfZGlzcG9zaXRpb249Tm9uZSwgY29udGVudF90eXBlPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgY29udGVudF9sb2NhdGlvbj1Ob25lKToKICAgICAgICAiIiIKICAgICAgICBNYWtlcyB0aGlzIHJlcXVlc3QgZmllbGQgaW50byBhIG11bHRpcGFydCByZXF1ZXN0IGZpZWxkLgoKICAgICAgICBUaGlzIG1ldGhvZCBvdmVycmlkZXMgIkNvbnRlbnQtRGlzcG9zaXRpb24iLCAiQ29udGVudC1UeXBlIiBhbmQKICAgICAgICAiQ29udGVudC1Mb2NhdGlvbiIgaGVhZGVycyB0byB0aGUgcmVxdWVzdCBwYXJhbWV0ZXIuCgogICAgICAgIDpwYXJhbSBjb250ZW50X3R5cGU6CiAgICAgICAgICAgIFRoZSAnQ29udGVudC1UeXBlJyBvZiB0aGUgcmVxdWVzdCBib2R5LgogICAgICAgIDpwYXJhbSBjb250ZW50X2xvY2F0aW9uOgogICAgICAgICAgICBUaGUgJ0NvbnRlbnQtTG9jYXRpb24nIG9mIHRoZSByZXF1ZXN0IGJvZHkuCgogICAgICAgICIiIgogICAgICAgIHNlbGYuaGVhZGVyc1snQ29udGVudC1EaXNwb3NpdGlvbiddID0gY29udGVudF9kaXNwb3NpdGlvbiBvciAnZm9ybS1kYXRhJwogICAgICAgIHNlbGYuaGVhZGVyc1snQ29udGVudC1EaXNwb3NpdGlvbiddICs9ICc7ICcuam9pbihbCiAgICAgICAgICAgICcnLCBzZWxmLl9yZW5kZXJfcGFydHMoCiAgICAgICAgICAgICAgICAoKCduYW1lJywgc2VsZi5fbmFtZSksICgnZmlsZW5hbWUnLCBzZWxmLl9maWxlbmFtZSkpCiAgICAgICAgICAgICkKICAgICAgICBdKQogICAgICAgIHNlbGYuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSBjb250ZW50X3R5cGUKICAgICAgICBzZWxmLmhlYWRlcnNbJ0NvbnRlbnQtTG9jYXRpb24nXSA9IGNvbnRlbnRfbG9jYXRpb24K
