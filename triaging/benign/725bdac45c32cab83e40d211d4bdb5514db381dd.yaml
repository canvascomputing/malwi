statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/asymmetric.py
  contents:
  - name: Certificate.__init__
    score: 0.0
    code: |-
      def __init__(self, x509, asn1):
              """
              :param x509:
                  An OpenSSL X509 value from loading/importing the certificate

              :param asn1:
                  An asn1crypto.x509.Certificate object
              """

              self.x509 = x509
              self.asn1 = asn1
              self._lib = libcrypto
    tokens: resume load_fast x509 load_fast self store_attr x509 load_fast asn1 load_fast self store_attr asn1 load_global libcrypto load_fast self store_attr _lib return_const None
    hash: 88a1f263830047f009bff2af0a2446c80be524a8e6bf64970db69af0a7ee0be4
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/asymmetric.py
  : 
