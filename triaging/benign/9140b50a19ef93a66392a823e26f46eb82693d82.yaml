statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/collection.py
  contents:
  - name: document_batch_action
    score: 0.0
    code: |-
      def document_batch_action(section, resource_name, event_emitter,
                                batch_action_model, service_model, collection_model,
                                include_signature=True):
          """Documents a collection's batch action

          :param section: The section to write to

          :param resource_name: The name of the resource

          :param action_name: The name of collection action. Currently only
              can be all, filter, limit, or page_size

          :param event_emitter: The event emitter to use to emit events

          :param batch_action_model: The model of the batch action

          :param collection_model: The model of the collection

          :param service_model: The model of the service

          :param include_signature: Whether or not to include the signature.
              It is useful for generating docstrings.
          """
          operation_model = service_model.operation_model(
              batch_action_model.request.operation)
          ignore_params = get_resource_ignore_params(
              batch_action_model.request.params)

          example_return_value = 'response'
          if batch_action_model.resource:
              example_return_value = xform_name(batch_action_model.resource.type)

          example_resource_name = xform_name(resource_name)
          if service_model.service_name == resource_name:
              example_resource_name = resource_name
          example_prefix = '%s = %s.%s.%s' % (
              example_return_value, example_resource_name,
              collection_model.name, batch_action_model.name
          )
          document_model_driven_resource_method(
              section=section, method_name=batch_action_model.name,
              operation_model=operation_model,
              event_emitter=event_emitter,
              method_description=operation_model.documentation,
              example_prefix=example_prefix,
              exclude_input=ignore_params,
              resource_action_model=batch_action_model,
              include_signature=include_signature
          )
    tokens: resume load_fast service_model load_attr operation_model load_fast STRING_LEN_S_ENT_HIGH load_attr request load_attr operation call store_fast operation_model load_global STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH load_attr request load_attr params call store_fast ignore_params load_const response store_fast STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH load_attr resource pop_jump_if_false TO_NUMBER load_global xform_name load_fast STRING_LEN_S_ENT_HIGH load_attr resource load_attr type call store_fast STRING_LEN_S_ENT_HIGH load_global xform_name load_fast resource_name call store_fast STRING_LEN_S_ENT_HIGH load_fast service_model load_attr service_name load_fast resource_name compare_op == pop_jump_if_false TO_NUMBER load_fast resource_name store_fast STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH format_value INTEGER load_const = load_fast STRING_LEN_S_ENT_HIGH format_value INTEGER load_const . load_fast STRING_LEN_S_ENT_HIGH load_attr name format_value INTEGER load_const . load_fast STRING_LEN_S_ENT_HIGH load_attr name format_value INTEGER build_string store_fast example_prefix load_global STRING_LEN_S_ENT_HIGH load_fast section load_fast STRING_LEN_S_ENT_HIGH load_attr name load_fast operation_model load_fast event_emitter load_fast operation_model load_attr documentation load_fast example_prefix load_fast ignore_params load_fast STRING_LEN_S_ENT_HIGH load_fast STRING_LEN_S_ENT_HIGH kw_names event_emitter example_prefix exclude_input include_signature method_description method_name operation_model resource_action_model section call pop_top return_const None
    hash: 988a39a761df2a7a1c6d21a2d5e18d2ecda7920f292812d2ff42d2ed8080846a
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/docs/collection.py: 
