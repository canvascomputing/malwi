statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/symmetric.py
  contents:
  - name: des_cbc_pkcs5_decrypt
    score: 0.0
    code: |-
      def des_cbc_pkcs5_decrypt(key, data, iv):
          """
          Decrypts DES ciphertext using a 56 bit key

          :param key:
              The encryption key - a byte string 8 bytes long (includes error correction bits)

          :param data:
              The ciphertext - a byte string

          :param iv:
              The initialization vector used for encryption - a byte string

          :raises:
              ValueError - when any of the parameters contain an invalid value
              TypeError - when any of the parameters are of the wrong type
              OSError - when an error is returned by the OS crypto library

          :return:
              A byte string of the plaintext
          """

          if len(key) != 8:
              raise ValueError(pretty_message(
                  '''
                  key must be 8 bytes (56 bits + 8 parity bits) long - is %s
                  ''',
                  len(key)
              ))

          if len(iv) != 8:
              raise ValueError(pretty_message(
                  '''
                  iv must be 8 bytes long - is %s
                  ''',
                  len(iv)
              ))

          return _decrypt(Security.kSecAttrKeyTypeDES, key, data, iv, Security.kSecPaddingPKCS5Key)
    tokens: resume load_global len load_fast key call load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_global ValueError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_global len load_fast key call call call raise_varargs load_global len load_fast iv call load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_global ValueError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_global len load_fast iv call call call raise_varargs load_global _decrypt load_global Security load_attr STRING_LEN_S_ENT_HIGH load_fast key load_fast data load_fast iv load_global Security load_attr STRING_LEN_S_ENT_HIGH call return_value
    hash: 666b02ad4792dd0df1ad31b77fe5567e25df7ca0893bdd8d1af66c49374b898d
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/symmetric.py
  : 
