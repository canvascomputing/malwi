statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/asyncmy.py
  contents:
  - name: AsyncMyConnection.execute
    score: 0.0
    code: |-
      async def execute(self, query: ClauseElement) -> typing.Any:
              assert self._connection is not None, "Connection is not acquired"
              query_str, args, context = self._compile(query)
              async with self._connection.cursor() as cursor:
                  try:
                      await cursor.execute(query_str, args)
                      if cursor.lastrowid == 0:
                          return cursor.rowcount
                      return cursor.lastrowid
                  finally:
                      await cursor.close()
    tokens: return_generator pop_top resume load_fast self load_attr _connection pop_jump_if_not_none TO_NUMBER load_assertion_error load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast self load_attr _compile load_fast query call unpack_sequence store_fast query_str store_fast args store_fast context load_fast self load_attr _connection load_attr cursor call before_async_with get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast cursor nop load_fast cursor load_attr execute load_fast query_str load_fast args call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top load_fast cursor load_attr lastrowid load_const INTEGER compare_op == pop_jump_if_false TO_NUMBER load_fast cursor load_attr rowcount load_fast cursor load_attr close call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top swap load_const load_const load_const call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_value load_fast cursor load_attr lastrowid load_fast cursor load_attr close call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top swap load_const load_const load_const call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send pop_top return_value cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER push_exc_info load_fast cursor load_attr close call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER cleanup_throw end_send pop_top reraise copy pop_except reraise push_exc_info with_except_start get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER cleanup_throw end_send pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top return_const None copy pop_except reraise call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: a413d6aba8937cdce0b4e304fc08ce3645834f9415c74f3384c01242fb0259b8
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/quantiumbase/0.8.1/quantiumbase-0.8.1/quantiumbase-0.8.1/quantiumbase/backends/asyncmy.py
  : 
