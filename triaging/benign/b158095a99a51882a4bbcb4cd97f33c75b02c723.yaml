statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/abc.py
  contents:
  - name: Messageable.fetch_message
    score: 0.0
    code: |-
      async def fetch_message(self, id):
              """|coro|

              Retrieves a single :class:`~discord.Message` from the destination.

              This can only be used by bot accounts.

              Parameters
              ------------
              id: :class:`int`
                  The message ID to look for.

              Raises
              --------
              ~discord.NotFound
                  The specified message was not found.
              ~discord.Forbidden
                  You do not have the permissions required to get a message.
              ~discord.HTTPException
                  Retrieving the message failed.

              Returns
              --------
              :class:`~discord.Message`
                  The message asked for.
              """

              channel = await self._get_channel()
              data = await self._state.http.get_message(channel.id, id)
              return self._state.create_message(channel=channel, data=data)
    tokens: return_generator pop_top resume load_fast self load_attr _get_channel call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast channel load_fast self load_attr _state load_attr http load_attr get_message load_fast channel load_attr id load_fast id call get_awaitable load_const send TO_NUMBER yield_value resume jump_backward_no_interrupt TO_NUMBER end_send store_fast data load_fast self load_attr _state load_attr create_message load_fast channel load_fast data kw_names channel data call return_value cleanup_throw jump_backward TO_NUMBER cleanup_throw jump_backward TO_NUMBER call_intrinsic_1 INTRINSIC_STOPITERATION_ERROR reraise
    hash: edd2f71db57ff8980adab4336bfb35821a02f461d9174c126e1f2197af75d0cb
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/abc.py: 
