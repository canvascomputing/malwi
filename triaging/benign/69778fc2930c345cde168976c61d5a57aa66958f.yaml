statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/_libcrypto.py
  contents:
  - name: peek_openssl_error
    score: 0.0
    code: |-
      def peek_openssl_error():
          """
          Peeks into the error stack and pulls out the lib, func and reason

          :return:
              A three-element tuple of integers (lib, func, reason)
          """

          error = libcrypto.ERR_peek_error()
          if libcrypto_version_info < (3, 0):
              lib = int((error >> 24) & 0xff)
              func = int((error >> 12) & 0xfff)
              reason = int(error & 0xfff)
          else:
              lib = int((error >> 23) & 0xff)
              # OpenSSL 3.0 removed ERR_GET_FUNC()
              func = 0
              reason = int(error & 0x7fffff)

          return (lib, func, reason)
    tokens: resume load_global libcrypto load_attr ERR_peek_error call store_fast error load_global STRING_LEN_S_ENT_HIGH load_const compare_op < pop_jump_if_false TO_NUMBER load_global int load_fast error load_const INTEGER binary_op >> load_const INTEGER binary_op & call store_fast lib load_global int load_fast error load_const INTEGER binary_op >> load_const INTEGER binary_op & call store_fast func load_global int load_fast error load_const INTEGER binary_op & call store_fast reason jump_forward TO_NUMBER load_global int load_fast error load_const INTEGER binary_op >> load_const INTEGER binary_op & call store_fast lib load_const INTEGER store_fast func load_global int load_fast error load_const INTEGER binary_op & call store_fast reason load_fast lib load_fast func load_fast reason build_tuple return_value
    hash: a94bdfe7a6333697ff56fed0a34d9b68320e50711cb034bad5e65c3da27d450f
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_openssl/_libcrypto.py
  : IyBjb2Rpbmc6IHV0Zi04CmZyb20gX19mdXR1cmVfXyBpbXBvcnQgdW5pY29kZV9saXRlcmFscywgZGl2aXNpb24sIGFic29sdXRlX2ltcG9ydCwgcHJpbnRfZnVuY3Rpb24KCmZyb20gLi4gaW1wb3J0IGZmaQpmcm9tIC4uX2ZmaSBpbXBvcnQgYnVmZmVyX2Zyb21fYnl0ZXMsIGJ5dGVfc3RyaW5nX2Zyb21fYnVmZmVyLCBudWxsCmZyb20gLi5fdHlwZXMgaW1wb3J0IHN0cl9jbHMKCmlmIGZmaSgpID09ICdjZmZpJzoKICAgIGZyb20gLl9saWJjcnlwdG9fY2ZmaSBpbXBvcnQgKAogICAgICAgIGxpYmNyeXB0bywKICAgICAgICB2ZXJzaW9uIGFzIGxpYmNyeXB0b192ZXJzaW9uLAogICAgICAgIHZlcnNpb25faW5mbyBhcyBsaWJjcnlwdG9fdmVyc2lvbl9pbmZvCiAgICApCmVsc2U6CiAgICBmcm9tIC5fbGliY3J5cHRvX2N0eXBlcyBpbXBvcnQgKAogICAgICAgIGxpYmNyeXB0bywKICAgICAgICB2ZXJzaW9uIGFzIGxpYmNyeXB0b192ZXJzaW9uLAogICAgICAgIHZlcnNpb25faW5mbyBhcyBsaWJjcnlwdG9fdmVyc2lvbl9pbmZvCiAgICApCgoKX19hbGxfXyA9IFsKICAgICdoYW5kbGVfb3BlbnNzbF9lcnJvcicsCiAgICAnbGliY3J5cHRvJywKICAgICdsaWJjcnlwdG9fbGVnYWN5X3N1cHBvcnQnLAogICAgJ2xpYmNyeXB0b192ZXJzaW9uJywKICAgICdsaWJjcnlwdG9fdmVyc2lvbl9pbmZvJywKICAgICdMaWJjcnlwdG9Db25zdCcsCiAgICAncGVla19vcGVuc3NsX2Vycm9yJywKXQoKCl9lbmNvZGluZyA9ICd1dGYtOCcKX2ZhbGxiYWNrX2VuY29kaW5ncyA9IFsndXRmLTgnLCAnY3AxMjUyJ10KCgppZiBsaWJjcnlwdG9fdmVyc2lvbl9pbmZvIDwgKDEsIDEpOgogICAgbGliY3J5cHRvLkVSUl9sb2FkX2NyeXB0b19zdHJpbmdzKCkKbGliY3J5cHRvLk9QRU5TU0xfY29uZmlnKG51bGwoKSkKCgojIFRoaXMgZW5hYmxlcyBsZWdhY3kgYWxnb3JpdGhtcyBpbiBPcGVuU1NMIDMuMCwgc3VjaCBhcyBSQzIsIGV0YwojIHdoaWNoIGFyZSB1c2VkIGJ5IHZhcmlvdXMgdGVzdHMgYW5kIHNvbWUgb2xkIHByb3RvY29scyBhbmQgdGhpbmdzCiMgbGlrZSBQS0NTMTIKbGliY3J5cHRvX2xlZ2FjeV9zdXBwb3J0ID0gVHJ1ZQppZiBsaWJjcnlwdG9fdmVyc2lvbl9pbmZvID49ICgzLCApOgoKICAgIGxpYmNyeXB0by5PU1NMX1BST1ZJREVSX2xvYWQobnVsbCgpLCAibGVnYWN5Ii5lbmNvZGUoImFzY2lpIikpCiAgICBsaWJjcnlwdG8uT1NTTF9QUk9WSURFUl9sb2FkKG51bGwoKSwgImRlZmF1bHQiLmVuY29kZSgiYXNjaWkiKSkKCiAgICBpZiBsaWJjcnlwdG8uT1NTTF9QUk9WSURFUl9hdmFpbGFibGUobnVsbCgpLCAibGVnYWN5Ii5lbmNvZGUoImFzY2lpIikpID09IDA6CiAgICAgICAgbGliY3J5cHRvX2xlZ2FjeV9zdXBwb3J0ID0gRmFsc2UKCgpkZWYgX3RyeV9kZWNvZGUodmFsdWUpOgoKICAgIHRyeToKICAgICAgICByZXR1cm4gc3RyX2Nscyh2YWx1ZSwgX2VuY29kaW5nKQoKICAgICMgSWYgdGhlICJjb3JyZWN0IiBlbmNvZGluZyBkaWQgbm90IHdvcmssIHRyeSBzb21lIGRlZmF1bHRzLCBhbmQgdGhlbiBqdXN0CiAgICAjIG9ibGl0ZXJhdGUgY2hhcmFjdGVycyB0aGF0IHdlIGNhbid0IHNlZW4gdG8gZGVjb2RlIHByb3Blcmx5CiAgICBleGNlcHQgKFVuaWNvZGVEZWNvZGVFcnJvcik6CiAgICAgICAgZm9yIGVuY29kaW5nIGluIF9mYWxsYmFja19lbmNvZGluZ3M6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBzdHJfY2xzKHZhbHVlLCBlbmNvZGluZywgZXJyb3JzPSdzdHJpY3QnKQogICAgICAgICAgICBleGNlcHQgKFVuaWNvZGVEZWNvZGVFcnJvcik6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgcmV0dXJuIHN0cl9jbHModmFsdWUsIGVycm9ycz0ncmVwbGFjZScpCgoKZGVmIGhhbmRsZV9vcGVuc3NsX2Vycm9yKHJlc3VsdCwgZXhjZXB0aW9uX2NsYXNzPU5vbmUpOgogICAgIiIiCiAgICBDaGVja3MgaWYgYW4gZXJyb3Igb2NjdXJyZWQsIGFuZCBpZiBzbyB0aHJvd3MgYW4gT1NFcnJvciBjb250YWluaW5nIHRoZQogICAgbGFzdCBPcGVuU1NMIGVycm9yIG1lc3NhZ2UKCiAgICA6cGFyYW0gcmVzdWx0OgogICAgICAgIEFuIGludGVnZXIgcmVzdWx0IGNvZGUgLSAxIG9yIGdyZWF0ZXIgaW5kaWNhdGVzIHN1Y2Nlc3MKCiAgICA6cGFyYW0gZXhjZXB0aW9uX2NsYXNzOgogICAgICAgIFRoZSBleGNlcHRpb24gY2xhc3MgdG8gdXNlIGZvciB0aGUgZXhjZXB0aW9uIGlmIGFuIGVycm9yIG9jY3VycmVkCgogICAgOnJhaXNlczoKICAgICAgICBPU0Vycm9yIC0gd2hlbiBhbiBPcGVuU1NMIGVycm9yIG9jY3VycwogICAgIiIiCgogICAgaWYgcmVzdWx0ID4gMDoKICAgICAgICByZXR1cm4KCiAgICBpZiBleGNlcHRpb25fY2xhc3MgaXMgTm9uZToKICAgICAgICBleGNlcHRpb25fY2xhc3MgPSBPU0Vycm9yCgogICAgZXJyb3JfbnVtID0gbGliY3J5cHRvLkVSUl9nZXRfZXJyb3IoKQogICAgYnVmZmVyID0gYnVmZmVyX2Zyb21fYnl0ZXMoMTIwKQogICAgbGliY3J5cHRvLkVSUl9lcnJvcl9zdHJpbmcoZXJyb3JfbnVtLCBidWZmZXIpCgogICAgIyBTaW5jZSB3ZSBhcmUgZGVhbGluZyB3aXRoIGEgc3RyaW5nLCBpdCBpcyBOVUxMIHRlcm1pbmF0ZWQKICAgIGVycm9yX3N0cmluZyA9IGJ5dGVfc3RyaW5nX2Zyb21fYnVmZmVyKGJ1ZmZlcikKCiAgICByYWlzZSBleGNlcHRpb25fY2xhc3MoX3RyeV9kZWNvZGUoZXJyb3Jfc3RyaW5nKSkKCgpkZWYgcGVla19vcGVuc3NsX2Vycm9yKCk6CiAgICAiIiIKICAgIFBlZWtzIGludG8gdGhlIGVycm9yIHN0YWNrIGFuZCBwdWxscyBvdXQgdGhlIGxpYiwgZnVuYyBhbmQgcmVhc29uCgogICAgOnJldHVybjoKICAgICAgICBBIHRocmVlLWVsZW1lbnQgdHVwbGUgb2YgaW50ZWdlcnMgKGxpYiwgZnVuYywgcmVhc29uKQogICAgIiIiCgogICAgZXJyb3IgPSBsaWJjcnlwdG8uRVJSX3BlZWtfZXJyb3IoKQogICAgaWYgbGliY3J5cHRvX3ZlcnNpb25faW5mbyA8ICgzLCAwKToKICAgICAgICBsaWIgPSBpbnQoKGVycm9yID4+IDI0KSAmIDB4ZmYpCiAgICAgICAgZnVuYyA9IGludCgoZXJyb3IgPj4gMTIpICYgMHhmZmYpCiAgICAgICAgcmVhc29uID0gaW50KGVycm9yICYgMHhmZmYpCiAgICBlbHNlOgogICAgICAgIGxpYiA9IGludCgoZXJyb3IgPj4gMjMpICYgMHhmZikKICAgICAgICAjIE9wZW5TU0wgMy4wIHJlbW92ZWQgRVJSX0dFVF9GVU5DKCkKICAgICAgICBmdW5jID0gMAogICAgICAgIHJlYXNvbiA9IGludChlcnJvciAmIDB4N2ZmZmZmKQoKICAgIHJldHVybiAobGliLCBmdW5jLCByZWFzb24pCgoKY2xhc3MgTGliY3J5cHRvQ29uc3QoKToKICAgIEVWUF9DVFJMX1NFVF9SQzJfS0VZX0JJVFMgPSAzCgogICAgU1NMRUFZX1ZFUlNJT04gPSAwCgogICAgUlNBX1BLQ1MxX1BBRERJTkcgPSAxCiAgICBSU0FfTk9fUEFERElORyA9IDMKICAgIFJTQV9QS0NTMV9PQUVQX1BBRERJTkcgPSA0CgogICAgIyBPcGVuU1NMIDAuOS54CiAgICBFVlBfTURfQ1RYX0ZMQUdfUFNTX01ETEVOID0gLTEKCiAgICAjIE9wZW5TU0wgMS54LngKICAgIEVWUF9QS0VZX0NUUkxfUlNBX1BBRERJTkcgPSAweDEwMDEKICAgIFJTQV9QS0NTMV9QU1NfUEFERElORyA9IDYKICAgIEVWUF9QS0VZX0NUUkxfUlNBX1BTU19TQUxUTEVOID0gMHgxMDAyCiAgICBFVlBfUEtFWV9SU0EgPSA2CiAgICBFVlBfUEtFWV9PUF9TSUdOID0gMSA8PCAzCiAgICBFVlBfUEtFWV9PUF9WRVJJRlkgPSAxIDw8IDQKCiAgICBOSURfWDlfNjJfcHJpbWUyNTZ2MSA9IDQxNQogICAgTklEX3NlY3AzODRyMSA9IDcxNQogICAgTklEX3NlY3A1MjFyMSA9IDcxNgoKICAgIE9QRU5TU0xfRUNfTkFNRURfQ1VSVkUgPSAxCgogICAgREhfR0VORVJBVE9SXzIgPSAyCg==
