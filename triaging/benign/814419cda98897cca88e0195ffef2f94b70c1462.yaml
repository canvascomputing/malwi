statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/connection.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      from __future__ import absolute_import
      import datetime
      import logging
      import os
      import socket
      from socket import error as SocketError, timeout as SocketTimeout
      import warnings
      from .packages import six
      from .packages.six.moves.http_client import HTTPConnection as _HTTPConnection
      from .packages.six.moves.http_client import HTTPException  # noqa: F401

      try:  # Compiled with SSL?
          import ssl
          BaseSSLError = ssl.SSLError
      except (ImportError, AttributeError):  # Platform-specific: No SSL.
          ssl = None

          class BaseSSLError(BaseException):
              pass
    tokens: resume load_const INTEGER load_const import_name __future__ import_from absolute_import store_name absolute_import pop_top load_const INTEGER load_const import_name datetime store_name datetime load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name os store_name os load_const INTEGER load_const import_name socket store_name socket load_const INTEGER load_const import_name socket import_from error store_name SocketError import_from timeout store_name SocketTimeout pop_top load_const INTEGER load_const import_name warnings store_name warnings load_const INTEGER load_const import_name packages import_from six store_name six pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from HTTPConnection store_name _HTTPConnection pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from HTTPException store_name HTTPException pop_top nop load_const INTEGER load_const import_name ssl store_name ssl load_name ssl load_attr SSLError store_name BaseSSLError nop load_name ConnectionError store_name ConnectionError load_const INTEGER load_const import_name exceptions import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from match_hostname store_name match_hostname import_from STRING_BASE64_LEN_S_ENT_HIGH store_name STRING_BASE64_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name util.ssl_ import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH import_from ssl_wrap_socket store_name ssl_wrap_socket pop_top load_const INTEGER load_const import_name util import_from connection store_name connection pop_top load_const INTEGER load_const import_name _collections import_from HTTPHeaderDict store_name HTTPHeaderDict pop_top push_null load_name logging load_attr getLogger load_name __name__ call store_name log load_const INTEGER load_const INTEGER load_const build_const_key_map store_name port_by_scheme push_null load_name datetime load_attr date load_const INTEGER load_const INTEGER load_const INTEGER call store_name RECENT_DATE push_null load_build_class load_const OBJECT make_function load_const DummyConnection load_name object call store_name DummyConnection push_null load_build_class load_const OBJECT make_function load_const HTTPConnection load_name _HTTPConnection load_name object call store_name HTTPConnection push_null load_build_class load_const OBJECT make_function load_const HTTPSConnection load_name HTTPConnection call store_name HTTPSConnection push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name HTTPSConnection call store_name STRING_LEN_S_ENT_HIGH load_const OBJECT make_function store_name _match_hostname load_name ssl pop_jump_if_false TO_NUMBER load_name HTTPSConnection store_name STRING_LEN_S_ENT_HIGH load_name STRING_LEN_S_ENT_HIGH store_name HTTPSConnection return_const None load_name DummyConnection store_name HTTPSConnection return_const None push_exc_info load_name ImportError load_name AttributeError build_tuple check_exc_match pop_jump_if_false TO_NUMBER pop_top load_const store_name ssl push_null load_build_class load_const OBJECT make_function load_const BaseSSLError load_name BaseException call store_name BaseSSLError pop_except jump_backward TO_NUMBER reraise copy pop_except reraise push_exc_info load_name NameError check_exc_match pop_jump_if_false TO_NUMBER pop_top push_null load_build_class load_const OBJECT make_function load_const ConnectionError load_name Exception call store_name ConnectionError pop_except jump_backward TO_NUMBER reraise copy pop_except reraise
    hash: a8fabd6da162daeab25924270ea2598ea88c9c64488a53ed27ae235c09f8850b
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/python-aliyun-sdk-core/2.13.36/python-aliyun-sdk-core-2.13.36/python-aliyun-sdk-core-2.13.36/aliyunsdkcore/vendored/requests/packages/urllib3/connection.py
  : 
