statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/tests/test_asymmetric.py
  contents:
  - name: AsymmetricTests.test_rsa_pss_verify_pss_cert
    score: 0.0
    code: |-
      def test_rsa_pss_verify_pss_cert(self):
              with open(os.path.join(fixtures_dir, 'message.txt'), 'rb') as f:
                  original_data = f.read()
              with open(os.path.join(fixtures_dir, 'rsa_pss_signature_pss_cert'), 'rb') as f:
                  signature = f.read()
              public = asymmetric.load_public_key(os.path.join(fixtures_dir, 'keys/test-pss.crt'))
              asymmetric.rsa_pss_verify(public, signature, original_data, 'sha256')
    tokens: resume load_global FILESYSTEM_ACCESS load_global os load_attr path load_attr join load_global fixtures_dir load_const message.txt call load_const rb call before_with store_fast f load_fast f load_attr read call store_fast original_data load_const load_const load_const call pop_top load_global FILESYSTEM_ACCESS load_global os load_attr path load_attr join load_global fixtures_dir load_const STRING_LEN_S_ENT_HIGH call load_const rb call before_with store_fast f load_fast f load_attr read call store_fast signature load_const load_const load_const call pop_top load_global asymmetric load_attr load_public_key load_global os load_attr path load_attr join load_global fixtures_dir load_const STRING_FILE_PATH call call store_fast public load_global asymmetric load_attr rsa_pss_verify load_fast public load_fast_check signature load_fast_check original_data load_const CRYPTO_HASHING call pop_top return_const None push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top jump_backward TO_NUMBER copy pop_except reraise push_exc_info with_except_start pop_jump_if_true TO_NUMBER reraise pop_top pop_except pop_top pop_top jump_backward TO_NUMBER copy pop_except reraise
    hash: 8ced6618aba359d6086fa83a87369cadea0c13b5be9fb86f555b8d9a8311c98e
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/tests/test_asymmetric.py
  : 
