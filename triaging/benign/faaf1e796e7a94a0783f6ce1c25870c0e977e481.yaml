statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/util.py
  contents:
  - name: rand_bytes
    score: 0.0
    code: |-
      def rand_bytes(length):
          """
          Returns a number of random bytes suitable for cryptographic purposes

          :param length:
              The desired number of bytes

          :raises:
              ValueError - when any of the parameters contain an invalid value
              TypeError - when any of the parameters are of the wrong type
              OSError - when an error is returned by the OS crypto library

          :return:
              A byte string
          """

          if not isinstance(length, int_types):
              raise TypeError(pretty_message(
                  '''
                  length must be an integer, not %s
                  ''',
                  type_name(length)
              ))

          if length < 1:
              raise ValueError('length must be greater than 0')

          if length > 1024:
              raise ValueError('length must not be greater than 1024')

          buffer = buffer_from_bytes(length)
          result = Security.SecRandomCopyBytes(Security.kSecRandomDefault, length, buffer)
          if result != 0:
              raise OSError(_extract_error())

          return bytes_from_buffer(buffer)
    tokens: resume load_global isinstance load_fast length load_global int_types call pop_jump_if_true TO_NUMBER load_global TypeError load_global pretty_message load_const STRING_LEN_S_ENT_HIGH load_global type_name load_fast length call call call raise_varargs load_fast length load_const INTEGER compare_op < pop_jump_if_false TO_NUMBER load_global ValueError load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_fast length load_const INTEGER compare_op > pop_jump_if_false TO_NUMBER load_global ValueError load_const STRING_LEN_S_ENT_HIGH call raise_varargs load_global STRING_LEN_S_ENT_HIGH load_fast length call store_fast buffer load_global Security load_attr STRING_LEN_S_ENT_HIGH load_global Security load_attr STRING_LEN_S_ENT_HIGH load_fast length load_fast buffer call store_fast result load_fast result load_const INTEGER compare_op != pop_jump_if_false TO_NUMBER load_global OSError load_global _extract_error call call raise_varargs load_global STRING_LEN_S_ENT_HIGH load_fast buffer call return_value
    hash: a7756a6a9544a6f0fa6de6acd326fb22b76c8a640936857c54c6da20b9866972
sources:
  ? .repo_cache/malicious_repos/pypi_malregistry/pycryptoenv/1.0.7/pycryptoenv-1.0.7/pycryptoenv-1.0.7/pycryptoenv/_mac/util.py
  : 
