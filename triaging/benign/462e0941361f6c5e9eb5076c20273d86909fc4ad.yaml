statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/member.py
  contents:
  - name: Member.status
    score: 0.0
    code: |-
      @property
          def status(self):
              """:class:`Status`: The member's overall status. If the value is unknown, then it will be a :class:`str` instead."""
              return try_enum(Status, self._client_status[None])
    tokens: resume load_global try_enum load_global Status load_fast self load_attr _client_status load_const binary_subscr call return_value
    hash: 73b60bd8e5a64068a3737f56a2b65a9572053e3b224ebbff29b441170ce62973
sources:
  .repo_cache/malicious_repos/pypi_malregistry/discord-py-v13/1.3/discord_py_v13-1.3-py3-none-any/discord-py-v13/member.py: 
