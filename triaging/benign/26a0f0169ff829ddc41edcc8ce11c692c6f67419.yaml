statistics:
  total_files: 1
  skipped_files: 0.0
  processed_objects: 1
  malicious_objects: 0
details:
- path: .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/action.py
  contents:
  - name: <module>
    score: 0.0
    code: |-
      # Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Apache License, Version 2.0 (the "License"). You
      # may not use this file except in compliance with the License. A copy of
      # the License is located at
      #
      # https://aws.amazon.com/apache2.0/
      #
      # or in the "license" file accompanying this file. This file is
      # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
      # ANY KIND, either express or implied. See the License for the specific
      # language governing permissions and limitations under the License.

      import logging

      from botocore import xform_name

      from .params import create_request_parameters
      from .response import RawHandler, ResourceHandler
      from .model import Action

      from boto3.docs.docstring import ActionDocstring
      from boto3.utils import inject_attribute


      logger = logging.getLogger(__name__)


      class ServiceAction(object):
          """
          A class representing a callable action on a resource, for example
          ``sqs.get_queue_by_name(...)`` or ``s3.Bucket('foo').delete()``.
          The action may construct parameters from existing resource identifiers
          and may return either a raw response or a new resource instance.

          :type action_model: :py:class`~boto3.resources.model.Action`
          :param action_model: The action model.

          :type factory: ResourceFactory
          :param factory: The factory that created the resource class to which
                          this action is attached.

          :type service_context: :py:class:`~boto3.utils.ServiceContext`
          :param service_context: Context about the AWS service
          """
          def __init__(self, action_model, factory=None, service_context=None):
              self._action_model = action_model

              # In the simplest case we just return the response, but if a
              # resource is defined, then we must create these before returning.
              resource_response_model = action_model.resource
              if resource_response_model:
                  self._response_handler = ResourceHandler(
                      search_path=resource_response_model.path,
                      factory=factory, resource_model=resource_response_model,
                      service_context=service_context,
                      operation_name=action_model.request.operation
                  )
              else:
                  self._response_handler = RawHandler(action_model.path)

          def __call__(self, parent, *args, **kwargs):
              """
              Perform the action's request operation after building operation
              parameters and build any defined resources from the response.

              :type parent: :py:class:`~boto3.resources.base.ServiceResource`
              :param parent: The resource instance to which this action is attached.
              :rtype: dict or ServiceResource or list(ServiceResource)
              :return: The response, either as a raw dict or resource instance(s).
              """
              operation_name = xform_name(self._action_model.request.operation)

              # First, build predefined params and then update with the
              # user-supplied kwargs, which allows overriding the pre-built
              # params if needed.
              params = create_request_parameters(parent, self._action_model.request)
              params.update(kwargs)

              logger.debug('Calling %s:%s with %r', parent.meta.service_name,
                           operation_name, params)

              response = getattr(parent.meta.client, operation_name)(*args, **params)

              logger.debug('Response: %r', response)

              return self._response_handler(parent, params, response)
    tokens: resume load_const INTEGER load_const import_name logging store_name logging load_const INTEGER load_const import_name botocore import_from xform_name store_name xform_name pop_top load_const INTEGER load_const import_name params import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top load_const INTEGER load_const import_name response import_from RawHandler store_name RawHandler import_from ResourceHandler store_name ResourceHandler pop_top load_const INTEGER load_const import_name model import_from Action store_name Action pop_top load_const INTEGER load_const import_name STRING_LEN_S_ENT_HIGH import_from ActionDocstring store_name ActionDocstring pop_top load_const INTEGER load_const import_name boto3.utils import_from STRING_LEN_S_ENT_HIGH store_name STRING_LEN_S_ENT_HIGH pop_top push_null load_name logging load_attr getLogger load_name __name__ call store_name logger push_null load_build_class load_const OBJECT make_function load_const ServiceAction load_name object call store_name ServiceAction push_null load_build_class load_const OBJECT make_function load_const BatchAction load_name ServiceAction call store_name BatchAction push_null load_build_class load_const OBJECT make_function load_const WaiterAction load_name object call store_name WaiterAction push_null load_build_class load_const OBJECT make_function load_const STRING_LEN_S_ENT_HIGH load_name object call store_name STRING_LEN_S_ENT_HIGH return_const None
    hash: df68d0a8194711232504f6abcd5ac4031395200282d808a5d1033d51191aac77
sources:
  .repo_cache/malicious_repos/pypi_malregistry/botaa3/1.0.0/botaa3-1.0.0/boto3-1.20.7/boto3/resources/action.py: IyBDb3B5cmlnaHQgMjAxNCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuIFlvdQojIG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YKIyB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0CiMKIyBodHRwczovL2F3cy5hbWF6b24uY29tL2FwYWNoZTIuMC8KIwojIG9yIGluIHRoZSAibGljZW5zZSIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMKIyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgojIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYwojIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgppbXBvcnQgbG9nZ2luZwoKZnJvbSBib3RvY29yZSBpbXBvcnQgeGZvcm1fbmFtZQoKZnJvbSAucGFyYW1zIGltcG9ydCBjcmVhdGVfcmVxdWVzdF9wYXJhbWV0ZXJzCmZyb20gLnJlc3BvbnNlIGltcG9ydCBSYXdIYW5kbGVyLCBSZXNvdXJjZUhhbmRsZXIKZnJvbSAubW9kZWwgaW1wb3J0IEFjdGlvbgoKZnJvbSBib3RvMy5kb2NzLmRvY3N0cmluZyBpbXBvcnQgQWN0aW9uRG9jc3RyaW5nCmZyb20gYm90bzMudXRpbHMgaW1wb3J0IGluamVjdF9hdHRyaWJ1dGUKCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpjbGFzcyBTZXJ2aWNlQWN0aW9uKG9iamVjdCk6CiAgICAiIiIKICAgIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgY2FsbGFibGUgYWN0aW9uIG9uIGEgcmVzb3VyY2UsIGZvciBleGFtcGxlCiAgICBgYHNxcy5nZXRfcXVldWVfYnlfbmFtZSguLi4pYGAgb3IgYGBzMy5CdWNrZXQoJ2ZvbycpLmRlbGV0ZSgpYGAuCiAgICBUaGUgYWN0aW9uIG1heSBjb25zdHJ1Y3QgcGFyYW1ldGVycyBmcm9tIGV4aXN0aW5nIHJlc291cmNlIGlkZW50aWZpZXJzCiAgICBhbmQgbWF5IHJldHVybiBlaXRoZXIgYSByYXcgcmVzcG9uc2Ugb3IgYSBuZXcgcmVzb3VyY2UgaW5zdGFuY2UuCgogICAgOnR5cGUgYWN0aW9uX21vZGVsOiA6cHk6Y2xhc3NgfmJvdG8zLnJlc291cmNlcy5tb2RlbC5BY3Rpb25gCiAgICA6cGFyYW0gYWN0aW9uX21vZGVsOiBUaGUgYWN0aW9uIG1vZGVsLgoKICAgIDp0eXBlIGZhY3Rvcnk6IFJlc291cmNlRmFjdG9yeQogICAgOnBhcmFtIGZhY3Rvcnk6IFRoZSBmYWN0b3J5IHRoYXQgY3JlYXRlZCB0aGUgcmVzb3VyY2UgY2xhc3MgdG8gd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGlzIGFjdGlvbiBpcyBhdHRhY2hlZC4KCiAgICA6dHlwZSBzZXJ2aWNlX2NvbnRleHQ6IDpweTpjbGFzczpgfmJvdG8zLnV0aWxzLlNlcnZpY2VDb250ZXh0YAogICAgOnBhcmFtIHNlcnZpY2VfY29udGV4dDogQ29udGV4dCBhYm91dCB0aGUgQVdTIHNlcnZpY2UKICAgICIiIgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFjdGlvbl9tb2RlbCwgZmFjdG9yeT1Ob25lLCBzZXJ2aWNlX2NvbnRleHQ9Tm9uZSk6CiAgICAgICAgc2VsZi5fYWN0aW9uX21vZGVsID0gYWN0aW9uX21vZGVsCgogICAgICAgICMgSW4gdGhlIHNpbXBsZXN0IGNhc2Ugd2UganVzdCByZXR1cm4gdGhlIHJlc3BvbnNlLCBidXQgaWYgYQogICAgICAgICMgcmVzb3VyY2UgaXMgZGVmaW5lZCwgdGhlbiB3ZSBtdXN0IGNyZWF0ZSB0aGVzZSBiZWZvcmUgcmV0dXJuaW5nLgogICAgICAgIHJlc291cmNlX3Jlc3BvbnNlX21vZGVsID0gYWN0aW9uX21vZGVsLnJlc291cmNlCiAgICAgICAgaWYgcmVzb3VyY2VfcmVzcG9uc2VfbW9kZWw6CiAgICAgICAgICAgIHNlbGYuX3Jlc3BvbnNlX2hhbmRsZXIgPSBSZXNvdXJjZUhhbmRsZXIoCiAgICAgICAgICAgICAgICBzZWFyY2hfcGF0aD1yZXNvdXJjZV9yZXNwb25zZV9tb2RlbC5wYXRoLAogICAgICAgICAgICAgICAgZmFjdG9yeT1mYWN0b3J5LCByZXNvdXJjZV9tb2RlbD1yZXNvdXJjZV9yZXNwb25zZV9tb2RlbCwKICAgICAgICAgICAgICAgIHNlcnZpY2VfY29udGV4dD1zZXJ2aWNlX2NvbnRleHQsCiAgICAgICAgICAgICAgICBvcGVyYXRpb25fbmFtZT1hY3Rpb25fbW9kZWwucmVxdWVzdC5vcGVyYXRpb24KICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuX3Jlc3BvbnNlX2hhbmRsZXIgPSBSYXdIYW5kbGVyKGFjdGlvbl9tb2RlbC5wYXRoKQoKICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBwYXJlbnQsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiCiAgICAgICAgUGVyZm9ybSB0aGUgYWN0aW9uJ3MgcmVxdWVzdCBvcGVyYXRpb24gYWZ0ZXIgYnVpbGRpbmcgb3BlcmF0aW9uCiAgICAgICAgcGFyYW1ldGVycyBhbmQgYnVpbGQgYW55IGRlZmluZWQgcmVzb3VyY2VzIGZyb20gdGhlIHJlc3BvbnNlLgoKICAgICAgICA6dHlwZSBwYXJlbnQ6IDpweTpjbGFzczpgfmJvdG8zLnJlc291cmNlcy5iYXNlLlNlcnZpY2VSZXNvdXJjZWAKICAgICAgICA6cGFyYW0gcGFyZW50OiBUaGUgcmVzb3VyY2UgaW5zdGFuY2UgdG8gd2hpY2ggdGhpcyBhY3Rpb24gaXMgYXR0YWNoZWQuCiAgICAgICAgOnJ0eXBlOiBkaWN0IG9yIFNlcnZpY2VSZXNvdXJjZSBvciBsaXN0KFNlcnZpY2VSZXNvdXJjZSkKICAgICAgICA6cmV0dXJuOiBUaGUgcmVzcG9uc2UsIGVpdGhlciBhcyBhIHJhdyBkaWN0IG9yIHJlc291cmNlIGluc3RhbmNlKHMpLgogICAgICAgICIiIgogICAgICAgIG9wZXJhdGlvbl9uYW1lID0geGZvcm1fbmFtZShzZWxmLl9hY3Rpb25fbW9kZWwucmVxdWVzdC5vcGVyYXRpb24pCgogICAgICAgICMgRmlyc3QsIGJ1aWxkIHByZWRlZmluZWQgcGFyYW1zIGFuZCB0aGVuIHVwZGF0ZSB3aXRoIHRoZQogICAgICAgICMgdXNlci1zdXBwbGllZCBrd2FyZ3MsIHdoaWNoIGFsbG93cyBvdmVycmlkaW5nIHRoZSBwcmUtYnVpbHQKICAgICAgICAjIHBhcmFtcyBpZiBuZWVkZWQuCiAgICAgICAgcGFyYW1zID0gY3JlYXRlX3JlcXVlc3RfcGFyYW1ldGVycyhwYXJlbnQsIHNlbGYuX2FjdGlvbl9tb2RlbC5yZXF1ZXN0KQogICAgICAgIHBhcmFtcy51cGRhdGUoa3dhcmdzKQoKICAgICAgICBsb2dnZXIuZGVidWcoJ0NhbGxpbmcgJXM6JXMgd2l0aCAlcicsIHBhcmVudC5tZXRhLnNlcnZpY2VfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uX25hbWUsIHBhcmFtcykKCiAgICAgICAgcmVzcG9uc2UgPSBnZXRhdHRyKHBhcmVudC5tZXRhLmNsaWVudCwgb3BlcmF0aW9uX25hbWUpKCphcmdzLCAqKnBhcmFtcykKCiAgICAgICAgbG9nZ2VyLmRlYnVnKCdSZXNwb25zZTogJXInLCByZXNwb25zZSkKCiAgICAgICAgcmV0dXJuIHNlbGYuX3Jlc3BvbnNlX2hhbmRsZXIocGFyZW50LCBwYXJhbXMsIHJlc3BvbnNlKQoKCmNsYXNzIEJhdGNoQWN0aW9uKFNlcnZpY2VBY3Rpb24pOgogICAgIiIiCiAgICBBbiBhY3Rpb24gd2hpY2ggb3BlcmF0ZXMgb24gYSBiYXRjaCBvZiBpdGVtcyBpbiBhIGNvbGxlY3Rpb24sIHR5cGljYWxseQogICAgYSBzaW5nbGUgcGFnZSBvZiByZXN1bHRzIGZyb20gdGhlIGNvbGxlY3Rpb24ncyB1bmRlcmx5aW5nIHNlcnZpY2UKICAgIG9wZXJhdGlvbiBjYWxsLiBGb3IgZXhhbXBsZSwgdGhpcyBhbGxvd3MgeW91IHRvIGRlbGV0ZSB1cCB0byA5OTkKICAgIFMzIG9iamVjdHMgaW4gYSBzaW5nbGUgb3BlcmF0aW9uIHJhdGhlciB0aGFuIGNhbGxpbmcgYGAuZGVsZXRlKClgYCBvbgogICAgZWFjaCBvbmUgaW5kaXZpZHVhbGx5LgoKICAgIDp0eXBlIGFjdGlvbl9tb2RlbDogOnB5OmNsYXNzYH5ib3RvMy5yZXNvdXJjZXMubW9kZWwuQWN0aW9uYAogICAgOnBhcmFtIGFjdGlvbl9tb2RlbDogVGhlIGFjdGlvbiBtb2RlbC4KCiAgICA6dHlwZSBmYWN0b3J5OiBSZXNvdXJjZUZhY3RvcnkKICAgIDpwYXJhbSBmYWN0b3J5OiBUaGUgZmFjdG9yeSB0aGF0IGNyZWF0ZWQgdGhlIHJlc291cmNlIGNsYXNzIHRvIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhpcyBhY3Rpb24gaXMgYXR0YWNoZWQuCgogICAgOnR5cGUgc2VydmljZV9jb250ZXh0OiA6cHk6Y2xhc3M6YH5ib3RvMy51dGlscy5TZXJ2aWNlQ29udGV4dGAKICAgIDpwYXJhbSBzZXJ2aWNlX2NvbnRleHQ6IENvbnRleHQgYWJvdXQgdGhlIEFXUyBzZXJ2aWNlCiAgICAiIiIKICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBwYXJlbnQsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiCiAgICAgICAgUGVyZm9ybSB0aGUgYmF0Y2ggYWN0aW9uJ3Mgb3BlcmF0aW9uIG9uIGV2ZXJ5IHBhZ2Ugb2YgcmVzdWx0cwogICAgICAgIGZyb20gdGhlIGNvbGxlY3Rpb24uCgogICAgICAgIDp0eXBlIHBhcmVudDoKICAgICAgICAgICAgOnB5OmNsYXNzOmB+Ym90bzMucmVzb3VyY2VzLmNvbGxlY3Rpb24uUmVzb3VyY2VDb2xsZWN0aW9uYAogICAgICAgIDpwYXJhbSBwYXJlbnQ6IFRoZSBjb2xsZWN0aW9uIGl0ZXJhdG9yIHRvIHdoaWNoIHRoaXMgYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgaXMgYXR0YWNoZWQuCiAgICAgICAgOnJ0eXBlOiBsaXN0KGRpY3QpCiAgICAgICAgOnJldHVybjogQSBsaXN0IG9mIGxvdy1sZXZlbCByZXNwb25zZSBkaWN0cyBmcm9tIGVhY2ggY2FsbC4KICAgICAgICAiIiIKICAgICAgICBzZXJ2aWNlX25hbWUgPSBOb25lCiAgICAgICAgY2xpZW50ID0gTm9uZQogICAgICAgIHJlc3BvbnNlcyA9IFtdCiAgICAgICAgb3BlcmF0aW9uX25hbWUgPSB4Zm9ybV9uYW1lKHNlbGYuX2FjdGlvbl9tb2RlbC5yZXF1ZXN0Lm9wZXJhdGlvbikKCiAgICAgICAgIyBVbmxpa2UgdGhlIHNpbXBsZSBhY3Rpb24gYWJvdmUsIGEgYmF0Y2ggYWN0aW9uIG11c3Qgb3BlcmF0ZQogICAgICAgICMgb24gYmF0Y2hlcyAob3IgcGFnZXMpIG9mIGl0ZW1zLiBTbyB3ZSBnZXQgZWFjaCBwYWdlLCBjb25zdHJ1Y3QKICAgICAgICAjIHRoZSBuZWNlc3NhcnkgcGFyYW1ldGVycyBhbmQgY2FsbCB0aGUgYmF0Y2ggb3BlcmF0aW9uLgogICAgICAgIGZvciBwYWdlIGluIHBhcmVudC5wYWdlcygpOgogICAgICAgICAgICBwYXJhbXMgPSB7fQogICAgICAgICAgICBmb3IgaW5kZXgsIHJlc291cmNlIGluIGVudW1lcmF0ZShwYWdlKToKICAgICAgICAgICAgICAgICMgVGhlcmUgaXMgbm8gcHVibGljIGludGVyZmFjZSB0byBnZXQgYSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAgICAgICMgb3IgbG93LWxldmVsIGNsaWVudCBmcm9tIGEgY29sbGVjdGlvbiwgc28gd2UgZ2V0CiAgICAgICAgICAgICAgICAjIHRoZXNlIGZyb20gdGhlIGZpcnN0IHJlc291cmNlIGluIHRoZSBjb2xsZWN0aW9uLgogICAgICAgICAgICAgICAgaWYgc2VydmljZV9uYW1lIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgc2VydmljZV9uYW1lID0gcmVzb3VyY2UubWV0YS5zZXJ2aWNlX25hbWUKICAgICAgICAgICAgICAgIGlmIGNsaWVudCBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIGNsaWVudCA9IHJlc291cmNlLm1ldGEuY2xpZW50CgogICAgICAgICAgICAgICAgY3JlYXRlX3JlcXVlc3RfcGFyYW1ldGVycygKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSwgc2VsZi5fYWN0aW9uX21vZGVsLnJlcXVlc3QsCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zPXBhcmFtcywgaW5kZXg9aW5kZXgpCgogICAgICAgICAgICBpZiBub3QgcGFyYW1zOgogICAgICAgICAgICAgICAgIyBUaGVyZSBhcmUgbm8gaXRlbXMsIG5vIG5lZWQgdG8gbWFrZSBhIGNhbGwuCiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICAgICAgcGFyYW1zLnVwZGF0ZShrd2FyZ3MpCgogICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0NhbGxpbmcgJXM6JXMgd2l0aCAlcicsCiAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlX25hbWUsIG9wZXJhdGlvbl9uYW1lLCBwYXJhbXMpCgogICAgICAgICAgICByZXNwb25zZSA9IGdldGF0dHIoY2xpZW50LCBvcGVyYXRpb25fbmFtZSkoKmFyZ3MsICoqcGFyYW1zKQoKICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdSZXNwb25zZTogJXInLCByZXNwb25zZSkKCiAgICAgICAgICAgIHJlc3BvbnNlcy5hcHBlbmQoCiAgICAgICAgICAgICAgICBzZWxmLl9yZXNwb25zZV9oYW5kbGVyKHBhcmVudCwgcGFyYW1zLCByZXNwb25zZSkpCgogICAgICAgIHJldHVybiByZXNwb25zZXMKCgpjbGFzcyBXYWl0ZXJBY3Rpb24ob2JqZWN0KToKICAgICIiIgogICAgQSBjbGFzcyByZXByZXNlbnRpbmcgYSBjYWxsYWJsZSB3YWl0ZXIgYWN0aW9uIG9uIGEgcmVzb3VyY2UsIGZvciBleGFtcGxlCiAgICBgYHMzLkJ1Y2tldCgnZm9vJykud2FpdF91bnRpbF9idWNrZXRfZXhpc3RzKClgYC4KICAgIFRoZSB3YWl0ZXIgYWN0aW9uIG1heSBjb25zdHJ1Y3QgcGFyYW1ldGVycyBmcm9tIGV4aXN0aW5nIHJlc291cmNlCiAgICBpZGVudGlmaWVycy4KCiAgICA6dHlwZSB3YWl0ZXJfbW9kZWw6IDpweTpjbGFzc2B+Ym90bzMucmVzb3VyY2VzLm1vZGVsLldhaXRlcmAKICAgIDpwYXJhbSB3YWl0ZXJfbW9kZWw6IFRoZSBhY3Rpb24gd2FpdGVyLgogICAgOnR5cGUgd2FpdGVyX3Jlc291cmNlX25hbWU6IHN0cmluZwogICAgOnBhcmFtIHdhaXRlcl9yZXNvdXJjZV9uYW1lOiBUaGUgbmFtZSBvZiB0aGUgd2FpdGVyIGFjdGlvbiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlLiBJdCB1c3VhbGx5IGJlZ2lucyB3aXRoIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGB3YWl0X3VudGlsX2BgCiAgICAiIiIKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB3YWl0ZXJfbW9kZWwsIHdhaXRlcl9yZXNvdXJjZV9uYW1lKToKICAgICAgICBzZWxmLl93YWl0ZXJfbW9kZWwgPSB3YWl0ZXJfbW9kZWwKICAgICAgICBzZWxmLl93YWl0ZXJfcmVzb3VyY2VfbmFtZSA9IHdhaXRlcl9yZXNvdXJjZV9uYW1lCgogICAgZGVmIF9fY2FsbF9fKHNlbGYsIHBhcmVudCwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAiIiIKICAgICAgICBQZXJmb3JtIHRoZSB3YWl0IG9wZXJhdGlvbiBhZnRlciBidWlsZGluZyBvcGVyYXRpb24KICAgICAgICBwYXJhbWV0ZXJzLgoKICAgICAgICA6dHlwZSBwYXJlbnQ6IDpweTpjbGFzczpgfmJvdG8zLnJlc291cmNlcy5iYXNlLlNlcnZpY2VSZXNvdXJjZWAKICAgICAgICA6cGFyYW0gcGFyZW50OiBUaGUgcmVzb3VyY2UgaW5zdGFuY2UgdG8gd2hpY2ggdGhpcyBhY3Rpb24gaXMgYXR0YWNoZWQuCiAgICAgICAgIiIiCiAgICAgICAgY2xpZW50X3dhaXRlcl9uYW1lID0geGZvcm1fbmFtZShzZWxmLl93YWl0ZXJfbW9kZWwud2FpdGVyX25hbWUpCgogICAgICAgICMgRmlyc3QsIGJ1aWxkIHByZWRlZmluZWQgcGFyYW1zIGFuZCB0aGVuIHVwZGF0ZSB3aXRoIHRoZQogICAgICAgICMgdXNlci1zdXBwbGllZCBrd2FyZ3MsIHdoaWNoIGFsbG93cyBvdmVycmlkaW5nIHRoZSBwcmUtYnVpbHQKICAgICAgICAjIHBhcmFtcyBpZiBuZWVkZWQuCiAgICAgICAgcGFyYW1zID0gY3JlYXRlX3JlcXVlc3RfcGFyYW1ldGVycyhwYXJlbnQsIHNlbGYuX3dhaXRlcl9tb2RlbCkKICAgICAgICBwYXJhbXMudXBkYXRlKGt3YXJncykKCiAgICAgICAgbG9nZ2VyLmRlYnVnKCdDYWxsaW5nICVzOiVzIHdpdGggJXInLAogICAgICAgICAgICAgICAgICAgICBwYXJlbnQubWV0YS5zZXJ2aWNlX25hbWUsCiAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3dhaXRlcl9yZXNvdXJjZV9uYW1lLCBwYXJhbXMpCgogICAgICAgIGNsaWVudCA9IHBhcmVudC5tZXRhLmNsaWVudAogICAgICAgIHdhaXRlciA9IGNsaWVudC5nZXRfd2FpdGVyKGNsaWVudF93YWl0ZXJfbmFtZSkKICAgICAgICByZXNwb25zZSA9IHdhaXRlci53YWl0KCoqcGFyYW1zKQoKICAgICAgICBsb2dnZXIuZGVidWcoJ1Jlc3BvbnNlOiAlcicsIHJlc3BvbnNlKQoKCmNsYXNzIEN1c3RvbU1vZGVsZWRBY3Rpb24ob2JqZWN0KToKICAgICIiIkEgY3VzdG9tLCBtb2RlbGVkIGFjdGlvbiB0byBpbmplY3QgaW50byBhIHJlc291cmNlLiIiIgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFjdGlvbl9uYW1lLCBhY3Rpb25fbW9kZWwsCiAgICAgICAgICAgICAgICAgZnVuY3Rpb24sIGV2ZW50X2VtaXR0ZXIpOgogICAgICAgICIiIgogICAgICAgIDp0eXBlIGFjdGlvbl9uYW1lOiBzdHIKICAgICAgICA6cGFyYW0gYWN0aW9uX25hbWU6IFRoZSBuYW1lIG9mIHRoZSBhY3Rpb24gdG8gaW5qZWN0LCBlLmcuCiAgICAgICAgICAgICdkZWxldGVfdGFncycKCiAgICAgICAgOnR5cGUgYWN0aW9uX21vZGVsOiBkaWN0CiAgICAgICAgOnBhcmFtIGFjdGlvbl9tb2RlbDogQSBKU09OIGRlZmluaXRpb24gb2YgdGhlIGFjdGlvbiwgYXMgaWYgaXQgd2VyZQogICAgICAgICAgICBwYXJ0IG9mIHRoZSByZXNvdXJjZSBtb2RlbC4KCiAgICAgICAgOnR5cGUgZnVuY3Rpb246IGZ1bmN0aW9uCiAgICAgICAgOnBhcmFtIGZ1bmN0aW9uOiBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB3aGVuIHRoZSBhY3Rpb24gaXMgY2FsbGVkLgogICAgICAgICAgICBUaGUgZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlICdzZWxmJywgd2hpY2ggd2lsbCBiZSB0aGUgcmVzb3VyY2UKICAgICAgICAgICAgdGhlIGZ1bmN0aW9uIGlzIHRvIGJlIGNhbGxlZCBvbi4KCiAgICAgICAgOnR5cGUgZXZlbnRfZW1pdHRlcjogOnB5OmNsYXNzOmBib3RvY29yZS5ob29rcy5CYXNlRXZlbnRIb29rc2AKICAgICAgICA6cGFyYW0gZXZlbnRfZW1pdHRlcjogVGhlIHNlc3Npb24gZXZlbnQgZW1pdHRlci4KICAgICAgICAiIiIKICAgICAgICBzZWxmLm5hbWUgPSBhY3Rpb25fbmFtZQogICAgICAgIHNlbGYubW9kZWwgPSBhY3Rpb25fbW9kZWwKICAgICAgICBzZWxmLmZ1bmN0aW9uID0gZnVuY3Rpb24KICAgICAgICBzZWxmLmVtaXR0ZXIgPSBldmVudF9lbWl0dGVyCgogICAgZGVmIGluamVjdChzZWxmLCBjbGFzc19hdHRyaWJ1dGVzLCBzZXJ2aWNlX2NvbnRleHQsIGV2ZW50X25hbWUsICoqa3dhcmdzKToKICAgICAgICByZXNvdXJjZV9uYW1lID0gZXZlbnRfbmFtZS5yc3BsaXQoIi4iKVstMV0KICAgICAgICBhY3Rpb24gPSBBY3Rpb24oc2VsZi5uYW1lLCBzZWxmLm1vZGVsLCB7fSkKICAgICAgICBzZWxmLmZ1bmN0aW9uLl9fbmFtZV9fID0gc2VsZi5uYW1lCiAgICAgICAgc2VsZi5mdW5jdGlvbi5fX2RvY19fID0gQWN0aW9uRG9jc3RyaW5nKAogICAgICAgICAgICByZXNvdXJjZV9uYW1lPXJlc291cmNlX25hbWUsCiAgICAgICAgICAgIGV2ZW50X2VtaXR0ZXI9c2VsZi5lbWl0dGVyLAogICAgICAgICAgICBhY3Rpb25fbW9kZWw9YWN0aW9uLAogICAgICAgICAgICBzZXJ2aWNlX21vZGVsPXNlcnZpY2VfY29udGV4dC5zZXJ2aWNlX21vZGVsLAogICAgICAgICAgICBpbmNsdWRlX3NpZ25hdHVyZT1GYWxzZQogICAgICAgICkKICAgICAgICBpbmplY3RfYXR0cmlidXRlKGNsYXNzX2F0dHJpYnV0ZXMsIHNlbGYubmFtZSwgc2VsZi5mdW5jdGlvbikK
